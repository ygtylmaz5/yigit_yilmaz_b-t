
ygtylmz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027be8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002934  08027d80  08027d80  00037d80  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a6b4  0802a6b4  00040454  2**0
                  CONTENTS
  4 .ARM          00000008  0802a6b4  0802a6b4  0003a6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a6bc  0802a6bc  00040454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a6bc  0802a6bc  0003a6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a6c4  0802a6c4  0003a6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000454  20000000  0802a6c8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040454  2**0
                  CONTENTS
 10 .bss          000048a4  20000454  20000454  00040454  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004cf8  20004cf8  00040454  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040454  2**0
                  CONTENTS, READONLY
 13 .debug_info   0011438a  00000000  00000000  00040484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00011a85  00000000  00000000  0015480e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005498  00000000  00000000  00166298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005218  00000000  00000000  0016b730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034cea  00000000  00000000  00170948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005ce86  00000000  00000000  001a5632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019677f  00000000  00000000  002024b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00398c37  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00019ae4  00000000  00000000  00398c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000454 	.word	0x20000454
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08027d60 	.word	0x08027d60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000458 	.word	0x20000458
 80001cc:	08027d60 	.word	0x08027d60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Z15LIS3DSH_WriteIOhPhh>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010c6:	f008 fc43 	bl	8009950 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010d4:	f00a fbff 	bl	800b8d6 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	230a      	movs	r3, #10
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010e2:	f00a fbf8 	bl	800b8d6 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010ec:	f008 fc30 	bl	8009950 <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	20000470 	.word	0x20000470

08001100 <_Z14LIS3DSH_ReadIOhPhh>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001116:	b2db      	uxtb	r3, r3
 8001118:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 800111a:	2200      	movs	r2, #0
 800111c:	2108      	movs	r1, #8
 800111e:	4818      	ldr	r0, [pc, #96]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001120:	f008 fc16 	bl	8009950 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8001124:	f107 0108 	add.w	r1, r7, #8
 8001128:	230a      	movs	r3, #10
 800112a:	2201      	movs	r2, #1
 800112c:	4815      	ldr	r0, [pc, #84]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800112e:	f00a fbd2 	bl	800b8d6 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	b29a      	uxth	r2, r3
 8001136:	f107 0108 	add.w	r1, r7, #8
 800113a:	230a      	movs	r3, #10
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800113e:	f00a fd06 	bl	800bb4e <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8001142:	2201      	movs	r2, #1
 8001144:	2108      	movs	r1, #8
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001148:	f008 fc02 	bl	8009950 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	429a      	cmp	r2, r3
 800115a:	da0c      	bge.n	8001176 <_Z14LIS3DSH_ReadIOhPhh+0x76>
	{
		dataR[i] = spiBuf[i];
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	440b      	add	r3, r1
 8001164:	3210      	adds	r2, #16
 8001166:	443a      	add	r2, r7
 8001168:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800116c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e7ec      	b.n	8001150 <_Z14LIS3DSH_ReadIOhPhh+0x50>
	}
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	20000470 	.word	0x20000470

08001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8001196:	2258      	movs	r2, #88	; 0x58
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4855      	ldr	r0, [pc, #340]	; (80012f0 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x168>)
 800119c:	f022 fc48 	bl	8023a30 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f023 030f 	bic.w	r3, r3, #15
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	2201      	movs	r2, #1
 80011ca:	4619      	mov	r1, r3
 80011cc:	2020      	movs	r0, #32
 80011ce:	f7ff ff6d 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	789b      	ldrb	r3, [r3, #2]
 80011da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 80011fa:	f107 030f 	add.w	r3, r7, #15
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	2024      	movs	r0, #36	; 0x24
 8001204:	f7ff ff52 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x9a>
	{
		spiData = 0x88;
 8001210:	2388      	movs	r3, #136	; 0x88
 8001212:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8001214:	f107 030f 	add.w	r3, r7, #15
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	2023      	movs	r0, #35	; 0x23
 800121e:	f7ff ff45 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	2b20      	cmp	r3, #32
 8001228:	d858      	bhi.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0xa8>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	080012b5 	.word	0x080012b5
 8001234:	080012dd 	.word	0x080012dd
 8001238:	080012dd 	.word	0x080012dd
 800123c:	080012dd 	.word	0x080012dd
 8001240:	080012dd 	.word	0x080012dd
 8001244:	080012dd 	.word	0x080012dd
 8001248:	080012dd 	.word	0x080012dd
 800124c:	080012dd 	.word	0x080012dd
 8001250:	080012bd 	.word	0x080012bd
 8001254:	080012dd 	.word	0x080012dd
 8001258:	080012dd 	.word	0x080012dd
 800125c:	080012dd 	.word	0x080012dd
 8001260:	080012dd 	.word	0x080012dd
 8001264:	080012dd 	.word	0x080012dd
 8001268:	080012dd 	.word	0x080012dd
 800126c:	080012dd 	.word	0x080012dd
 8001270:	080012c5 	.word	0x080012c5
 8001274:	080012dd 	.word	0x080012dd
 8001278:	080012dd 	.word	0x080012dd
 800127c:	080012dd 	.word	0x080012dd
 8001280:	080012dd 	.word	0x080012dd
 8001284:	080012dd 	.word	0x080012dd
 8001288:	080012dd 	.word	0x080012dd
 800128c:	080012dd 	.word	0x080012dd
 8001290:	080012cd 	.word	0x080012cd
 8001294:	080012dd 	.word	0x080012dd
 8001298:	080012dd 	.word	0x080012dd
 800129c:	080012dd 	.word	0x080012dd
 80012a0:	080012dd 	.word	0x080012dd
 80012a4:	080012dd 	.word	0x080012dd
 80012a8:	080012dd 	.word	0x080012dd
 80012ac:	080012dd 	.word	0x080012dd
 80012b0:	080012d5 	.word	0x080012d5
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x170>)
 80012b8:	601a      	str	r2, [r3, #0]
			break;
 80012ba:	e00f      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012be:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x174>)
 80012c0:	601a      	str	r2, [r3, #0]
			break;
 80012c2:	e00b      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x178>)
 80012c8:	601a      	str	r2, [r3, #0]
			break;
 80012ca:	e007      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012ce:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x17c>)
 80012d0:	601a      	str	r2, [r3, #0]
			break;
 80012d2:	e003      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x180>)
 80012d8:	601a      	str	r2, [r3, #0]
			break;
 80012da:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80012dc:	2201      	movs	r2, #1
 80012de:	2108      	movs	r1, #8
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x184>)
 80012e2:	f008 fb35 	bl	8009950 <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000470 	.word	0x20000470
 80012f4:	20000000 	.word	0x20000000
 80012f8:	3d75c28f 	.word	0x3d75c28f
 80012fc:	3df5c28f 	.word	0x3df5c28f
 8001300:	3e3851ec 	.word	0x3e3851ec
 8001304:	3e75c28f 	.word	0x3e75c28f
 8001308:	3f3ae148 	.word	0x3f3ae148
 800130c:	40021000 	.word	0x40021000

08001310 <_Z18LIS3DSH_GetDataRawv>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2202      	movs	r2, #2
 800131e:	4619      	mov	r1, r3
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	f7ff feed 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29a      	uxth	r2, r3
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	b29b      	uxth	r3, r3
 8001332:	4413      	add	r3, r2
 8001334:	b29b      	uxth	r3, r3
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	801a      	strh	r2, [r3, #0]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2202      	movs	r2, #2
 8001342:	4619      	mov	r1, r3
 8001344:	202a      	movs	r0, #42	; 0x2a
 8001346:	f7ff fedb 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 800134a:	7b7b      	ldrb	r3, [r7, #13]
 800134c:	b29b      	uxth	r3, r3
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b29a      	uxth	r2, r3
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	805a      	strh	r2, [r3, #2]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2202      	movs	r2, #2
 8001366:	4619      	mov	r1, r3
 8001368:	202c      	movs	r0, #44	; 0x2c
 800136a:	f7ff fec9 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	b29b      	uxth	r3, r3
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b29a      	uxth	r2, r3
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	b21a      	sxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	809a      	strh	r2, [r3, #4]

	return tempDataRaw;
 8001384:	bf00      	nop

}
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <_Z21LIS3DSH_GetDataScaledv>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffb8 	bl	8001310 <_Z18LIS3DSH_GetDataRawv>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80013a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <_Z21LIS3DSH_GetDataScaledv+0xe8>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <_Z21LIS3DSH_GetDataScaledv+0xf0>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80013d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <_Z21LIS3DSH_GetDataScaledv+0xf4>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <_Z21LIS3DSH_GetDataScaledv+0xf8>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 800140c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <_Z21LIS3DSH_GetDataScaledv+0xfc>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 8001430:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <_Z21LIS3DSH_GetDataScaledv+0x100>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	f107 0210 	add.w	r2, r7, #16
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	ee06 1a90 	vmov	s13, r1
 800145a:	ee07 2a10 	vmov	s14, r2
 800145e:	ee07 3a90 	vmov	s15, r3
}
 8001462:	eeb0 0a66 	vmov.f32	s0, s13
 8001466:	eef0 0a47 	vmov.f32	s1, s14
 800146a:	eeb0 1a67 	vmov.f32	s2, s15
 800146e:	3730      	adds	r7, #48	; 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004
 800147c:	00000000 	.word	0x00000000
 8001480:	200004c8 	.word	0x200004c8
 8001484:	20000008 	.word	0x20000008
 8001488:	200004cc 	.word	0x200004cc
 800148c:	2000000c 	.word	0x2000000c
 8001490:	200004d0 	.word	0x200004d0

08001494 <_Z19LIS3DSH_X_calibrateff>:
}

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	ed87 0a01 	vstr	s0, [r7, #4]
 800149e:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 80014a2:	ed97 7a00 	vldr	s14, [r7]
 80014a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <_Z19LIS3DSH_X_calibrateff+0x50>)
 80014b8:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 80014bc:	ed97 7a00 	vldr	s14, [r7]
 80014c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80014e8 <_Z19LIS3DSH_X_calibrateff+0x54>
 80014cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <_Z19LIS3DSH_X_calibrateff+0x58>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200004c8 	.word	0x200004c8
 80014e8:	44fa0000 	.word	0x44fa0000
 80014ec:	20000004 	.word	0x20000004

080014f0 <_Z19LIS3DSH_Y_calibrateff>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014fa:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 80014fe:	ed97 7a00 	vldr	s14, [r7]
 8001502:	edd7 7a01 	vldr	s15, [r7, #4]
 8001506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800150e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <_Z19LIS3DSH_Y_calibrateff+0x50>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 8001518:	ed97 7a00 	vldr	s14, [r7]
 800151c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001544 <_Z19LIS3DSH_Y_calibrateff+0x54>
 8001528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <_Z19LIS3DSH_Y_calibrateff+0x58>)
 800152e:	edc3 7a00 	vstr	s15, [r3]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200004cc 	.word	0x200004cc
 8001544:	44fa0000 	.word	0x44fa0000
 8001548:	20000008 	.word	0x20000008

0800154c <_Z19LIS3DSH_Z_calibrateff>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0a01 	vstr	s0, [r7, #4]
 8001556:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 800155a:	ed97 7a00 	vldr	s14, [r7]
 800155e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001566:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800156a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <_Z19LIS3DSH_Z_calibrateff+0x50>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 8001574:	ed97 7a00 	vldr	s14, [r7]
 8001578:	edd7 7a01 	vldr	s15, [r7, #4]
 800157c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001580:	eddf 6a07 	vldr	s13, [pc, #28]	; 80015a0 <_Z19LIS3DSH_Z_calibrateff+0x54>
 8001584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <_Z19LIS3DSH_Z_calibrateff+0x58>)
 800158a:	edc3 7a00 	vstr	s15, [r3]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	200004d0 	.word	0x200004d0
 80015a0:	44fa0000 	.word	0x44fa0000
 80015a4:	2000000c 	.word	0x2000000c

080015a8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80015b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015b6:	eef0 7ae7 	vabs.f32	s15, s15
 80015ba:	eeb0 0a67 	vmov.f32	s0, s15
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	f1c3 031f 	rsb	r3, r3, #31
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 800161c:	4a17      	ldr	r2, [pc, #92]	; (800167c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 800161e:	2137      	movs	r1, #55	; 0x37
 8001620:	4817      	ldr	r0, [pc, #92]	; (8001680 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 8001622:	f022 f98b 	bl	802393c <__assert_func>

	if(align && size)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01f      	beq.n	800166c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d01c      	beq.n	800166c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3301      	adds	r3, #1
 8001636:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4413      	add	r3, r2
 800163e:	2101      	movs	r1, #1
 8001640:	4618      	mov	r0, r3
 8001642:	f019 fd65 	bl	801b110 <_Z9ei_callocjj>
 8001646:	60f8      	str	r0, [r7, #12]

		if(p)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00e      	beq.n	800166c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4413      	add	r3, r2
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	425b      	negs	r3, r3
 800165a:	4013      	ands	r3, r2
 800165c:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1ad2      	subs	r2, r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3b02      	subs	r3, #2
 8001668:	b292      	uxth	r2, r2
 800166a:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 800166c:	697b      	ldr	r3, [r7, #20]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	08027da4 	.word	0x08027da4
 800167c:	08027dc0 	.word	0x08027dc0
 8001680:	08027df8 	.word	0x08027df8

08001684 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	assert(ptr);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d105      	bne.n	800169e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001696:	215a      	movs	r1, #90	; 0x5a
 8001698:	480b      	ldr	r0, [pc, #44]	; (80016c8 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800169a:	f022 f94f 	bl	802393c <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80016a4:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	425b      	negs	r3, r3
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f019 fd3b 	bl	801b12c <_Z7ei_freePv>
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	08027e70 	.word	0x08027e70
 80016c4:	08027e74 	.word	0x08027e74
 80016c8:	08027df8 	.word	0x08027df8

080016cc <_ZNSt14_Bit_referenceC1EPmm>:
  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <_ZNKSt14_Bit_referencecvbEv>:

#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    operator bool() const _GLIBCXX_NOEXCEPT
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf14      	ite	ne
 800170a:	2301      	movne	r3, #1
 800170c:	2300      	moveq	r3, #0
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZNSt14_Bit_referenceaSEb>:

    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e009      	b.n	8001756 <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6819      	ldr	r1, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	43da      	mvns	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	400a      	ands	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
      return *this;
 8001756:	687b      	ldr	r3, [r7, #4]
    }
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_ZNSt18_Bit_iterator_baseC1EPmj>:
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	  --_M_p;
	}
    }

    void
    _M_incr(ptrdiff_t __i)
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da00      	bge.n	80017aa <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 80017a8:	331f      	adds	r3, #31
 80017aa:	115b      	asrs	r3, r3, #5
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	441a      	add	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	425a      	negs	r2, r3
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	f002 021f 	and.w	r2, r2, #31
 80017c0:	bf58      	it	pl
 80017c2:	4253      	negpl	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	da07      	bge.n	80017dc <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3320      	adds	r3, #32
 80017d0:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	1f1a      	subs	r2, r3, #4
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	605a      	str	r2, [r3, #4]
    }
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_ZNSt13_Bit_iteratorC1Ev>:
#else
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ffb1 	bl	8001764 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_ZNSt13_Bit_iteratorC1EPmj>:

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ffa0 	bl	8001764 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_ZNKSt13_Bit_iteratordeEv>:
    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6819      	ldr	r1, [r3, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	461a      	mov	r2, r3
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff3f 	bl	80016cc <_ZNSt14_Bit_referenceC1EPmm>
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_ZNSt13_Bit_iteratorpLEi>:
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6839      	ldr	r1, [r7, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff90 	bl	800178a <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 800186a:	687b      	ldr	r3, [r7, #4]
    }
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZStplRKSt13_Bit_iteratori>:
    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }

    friend iterator
    operator+(const iterator& __x, difference_type __n)
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001888:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff ffe1 	bl	8001856 <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 8001894:	bf00      	nop
    }
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	2203      	movs	r2, #3
 8001900:	4798      	blx	r3
    }
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	731a      	strb	r2, [r3, #12]
 800194e:	e00e      	b.n	800196e <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	2101      	movs	r1, #1
 800195c:	4618      	mov	r0, r3
 800195e:	f019 fbd7 	bl	801b110 <_Z9ei_callocjj>
 8001962:	4602      	mov	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7b1b      	ldrb	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f019 fbc3 	bl	801b12c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZN2ei9ei_matrix11get_row_ptrEj>:
     * @brief Get a pointer to the buffer advanced by n rows
     *
     * @param row Numer of rows to advance the returned buffer pointer
     * @return float* Pointer to the buffer at the start of row n
     */
    float *get_row_ptr(size_t row)
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
    {
        return buffer + row * cols;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	6839      	ldr	r1, [r7, #0]
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
    }
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	731a      	strb	r2, [r3, #12]
 80019f8:	e00d      	b.n	8001a16 <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	2101      	movs	r1, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f019 fb83 	bl	801b110 <_Z9ei_callocjj>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7b1b      	ldrb	r3, [r3, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f019 fb6f 	bl	801b12c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	e7fe      	b.n	8001a5c <_ZSt25__throw_bad_function_callv+0x4>

08001a5e <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a68:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a6c:	f01f fcea 	bl	8021444 <expf>
 8001a70:	eef0 7a40 	vmov.f32	s15, s0
 8001a74:	eeb0 0a67 	vmov.f32	s0, s15
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a88:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a8c:	f01f fc1a 	bl	80212c4 <roundf>
 8001a90:	eef0 7a40 	vmov.f32	s15, s0
 8001a94:	eeb0 0a67 	vmov.f32	s0, s15
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	ed87 0a01 	vstr	s0, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001ab2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	db09      	blt.n	8001ad4 <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001ac0:	ed97 0a05 	vldr	s0, [r7, #20]
 8001ac4:	f01f fd22 	bl	802150c <sqrtf>
 8001ac8:	eef0 7a40 	vmov.f32	s15, s0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001ad2:	e004      	b.n	8001ade <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001adc:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 8001ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>:
        }

        return EIDSP_OK;
    }

    static void transpose_in_place(matrix_t *matrix) {
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b096      	sub	sp, #88	; 0x58
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
        size_t size = matrix->cols * matrix->rows - 1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6852      	ldr	r2, [r2, #4]
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	64bb      	str	r3, [r7, #72]	; 0x48
        float temp; // temp for swap
        size_t next; // next item to swap
        size_t cycleBegin; // index of start of cycle
        size_t i; // location in matrix
        size_t all_done_mark = 1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
        ei_vector<bool> done(size+1,false);
 8001b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b0c:	1c59      	adds	r1, r3, #1
 8001b0e:	2300      	movs	r3, #0
 8001b10:	77fb      	strb	r3, [r7, #31]
 8001b12:	f107 0320 	add.w	r3, r7, #32
 8001b16:	f107 021f 	add.w	r2, r7, #31
 8001b1a:	f107 0008 	add.w	r0, r7, #8
 8001b1e:	f004 fcfe 	bl	800651e <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>

        i = 1; // Note that matrix[0] and last element of matrix won't move
 8001b22:	2301      	movs	r3, #1
 8001b24:	653b      	str	r3, [r7, #80]	; 0x50
        while (1)
        {
            cycleBegin = i;
 8001b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b28:	647b      	str	r3, [r7, #68]	; 0x44
            temp = matrix->buffer[i];
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	657b      	str	r3, [r7, #84]	; 0x54
            do
            {
                size_t col = i % matrix->cols;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b42:	fb01 f202 	mul.w	r2, r1, r2
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	643b      	str	r3, [r7, #64]	; 0x40
                size_t row = i / matrix->cols;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	63fb      	str	r3, [r7, #60]	; 0x3c
                // swap row and col to make new idx, b/c we want to know where in the transposed matrix
                next = col*matrix->rows + row;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b62:	4413      	add	r3, r2
 8001b64:	63bb      	str	r3, [r7, #56]	; 0x38
                float temp2 = matrix->buffer[next];
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
                matrix->buffer[next] = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b80:	601a      	str	r2, [r3, #0]
                temp = temp2;
 8001b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b84:	657b      	str	r3, [r7, #84]	; 0x54
                done[next] = true;
 8001b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8a:	f107 0108 	add.w	r1, r7, #8
 8001b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b90:	4618      	mov	r0, r3
 8001b92:	f004 fcec 	bl	800656e <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 8001b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fdbd 	bl	800171c <_ZNSt14_Bit_referenceaSEb>
                i = next;
 8001ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba4:	653b      	str	r3, [r7, #80]	; 0x50
            }
            while (i != cycleBegin);
 8001ba6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d000      	beq.n	8001bb0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc2>
            do
 8001bae:	e7c3      	b.n	8001b38 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x4a>

            // start next cycle by find next not done
            for (i = all_done_mark; done[i]; i++) {
 8001bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8001bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb8:	f107 0108 	add.w	r1, r7, #8
 8001bbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 fcd5 	bl	800656e <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 8001bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fd92 	bl	80016f2 <_ZNKSt14_Bit_referencecvbEv>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0a8      	beq.n	8001b26 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x38>
                all_done_mark++; // move the high water mark so we don't look again
 8001bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
                if(i>=size) { goto LOOP_END; }
 8001bda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d203      	bcs.n	8001bea <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xfc>
            for (i = all_done_mark; done[i]; i++) {
 8001be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be4:	3301      	adds	r3, #1
 8001be6:	653b      	str	r3, [r7, #80]	; 0x50
 8001be8:	e7e4      	b.n	8001bb4 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc6>
                if(i>=size) { goto LOOP_END; }
 8001bea:	bf00      	nop
            }
        }
        LOOP_END:
        // finally, swap the row and column dimensions
        std::swap(matrix->rows, matrix->cols);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	1d1a      	adds	r2, r3, #4
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3308      	adds	r3, #8
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f004 fce4 	bl	80065c4 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
        ei_vector<bool> done(size+1,false);
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	4618      	mov	r0, r3
 8001c02:	f004 fca7 	bl	8006554 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>
    }
 8001c06:	bf00      	nop
 8001c08:	3758      	adds	r7, #88	; 0x58
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	461a      	mov	r2, r3
 8001c26:	f000 f817 	bl	8001c58 <_ZN2ei5numpy9transposeEPfii>
 8001c2a:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	e00c      	b.n	8001c50 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001c42:	893a      	ldrh	r2, [r7, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 8001c48:	897a      	ldrh	r2, [r7, #10]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 8001c4e:	2300      	movs	r3, #0
    }
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b08f      	sub	sp, #60	; 0x3c
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f7ff fe5e 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <_ZN2ei5numpy9transposeEPfii+0x24>
 8001c78:	4c23      	ldr	r4, [pc, #140]	; (8001d08 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001c7a:	e03b      	b.n	8001cf4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001c82:	4c21      	ldr	r4, [pc, #132]	; (8001d08 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001c84:	e036      	b.n	8001cf4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	da03      	bge.n	8001c96 <_ZN2ei5numpy9transposeEPfii+0x3e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	db01      	blt.n	8001c9a <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 8001c96:	4c1d      	ldr	r4, [pc, #116]	; (8001d0c <_ZN2ei5numpy9transposeEPfii+0xb4>)
 8001c98:	e02c      	b.n	8001cf4 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	83bb      	strh	r3, [r7, #28]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	83fb      	strh	r3, [r7, #30]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	82bb      	strh	r3, [r7, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001cb8:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 8001cba:	f107 0214 	add.w	r2, r7, #20
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f00e fa2b 	bl	8010120 <arm_mat_trans_f32>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 8001cd0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 8001cd8:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 8001cdc:	e00a      	b.n	8001cf4 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 8001cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	fb02 f303 	mul.w	r3, r2, r3
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	461a      	mov	r2, r3
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f021 fe9f 	bl	8023a30 <memcpy>

        return EIDSP_OK;
 8001cf2:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fe43 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 8001cfe:	4623      	mov	r3, r4
 8001d00:	4618      	mov	r0, r3
 8001d02:	373c      	adds	r7, #60	; 0x3c
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	fffffc16 	.word	0xfffffc16
 8001d0c:	fffffc0c 	.word	0xfffffc0c

08001d10 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001d1c:	edd7 7a00 	vldr	s15, [r7]
 8001d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d24:	eef4 7a47 	vcmp.f32	s15, s14
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	d101      	bne.n	8001d32 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e033      	b.n	8001d9a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3a:	d204      	bcs.n	8001d46 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d301      	bcc.n	8001d4a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001d48:	e027      	b.n	8001d9a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	82bb      	strh	r3, [r7, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	82fb      	strh	r3, [r7, #22]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	81bb      	strh	r3, [r7, #12]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	81fb      	strh	r3, [r7, #14]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001d76:	f107 020c 	add.w	r2, r7, #12
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4611      	mov	r1, r2
 8001d80:	ed97 0a00 	vldr	s0, [r7]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f00e f995 	bl	80100b4 <arm_mat_scale_f32>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	e000      	b.n	8001d9a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001d98:	2300      	movs	r3, #0
    }
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3720      	adds	r7, #32
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	fffffc0c 	.word	0xfffffc0c

08001da8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6892      	ldr	r2, [r2, #8]
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d215      	bcs.n	8001df6 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	edd7 7a00 	vldr	s15, [r7]
 8001de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dea:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3301      	adds	r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	e7e0      	b.n	8001db8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 8001df6:	2300      	movs	r3, #0
    }
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 8001e04:	b5b0      	push	{r4, r5, r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001e1a:	4c26      	ldr	r4, [pc, #152]	; (8001eb4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001e1c:	e045      	b.n	8001eaa <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        if (subtract_matrix->cols != 1) {
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d001      	beq.n	8001e2a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001e26:	4c23      	ldr	r4, [pc, #140]	; (8001eb4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001e28:	e03f      	b.n	8001eaa <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d237      	bcs.n	8001ea8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa4>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689d      	ldr	r5, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	69f9      	ldr	r1, [r7, #28]
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f107 0008 	add.w	r0, r7, #8
 8001e52:	462a      	mov	r2, r5
 8001e54:	2101      	movs	r1, #1
 8001e56:	f7ff fd6a 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
 8001e60:	4c15      	ldr	r4, [pc, #84]	; (8001eb8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 8001e62:	2500      	movs	r5, #0
 8001e64:	e015      	b.n	8001e92 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff93 	bl	8001da8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8001e82:	61b8      	str	r0, [r7, #24]
            if (ret != EIDSP_OK) {
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8c>
                EIDSP_ERR(ret);
 8001e8a:	69bc      	ldr	r4, [r7, #24]
 8001e8c:	2500      	movs	r5, #0
 8001e8e:	e000      	b.n	8001e92 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
 8001e90:	2501      	movs	r5, #1
 8001e92:	f107 0308 	add.w	r3, r7, #8
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fd74 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8001e9c:	2d01      	cmp	r5, #1
 8001e9e:	d104      	bne.n	8001eaa <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	e7c2      	b.n	8001e2e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2a>
            }
        }

        return EIDSP_OK;
 8001ea8:	2400      	movs	r4, #0
    }
 8001eaa:	4623      	mov	r3, r4
 8001eac:	4618      	mov	r0, r3
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb4:	fffffc14 	.word	0xfffffc14
 8001eb8:	fffffc16 	.word	0xfffffc16

08001ebc <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d001      	beq.n	8001ed6 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001ed4:	e028      	b.n	8001f28 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d001      	beq.n	8001ee2 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001ee0:	e022      	b.n	8001f28 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d21a      	bcs.n	8001f26 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	68f9      	ldr	r1, [r7, #12]
 8001efa:	fb01 f303 	mul.w	r3, r1, r3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	18d0      	adds	r0, r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f107 0208 	add.w	r2, r7, #8
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f00e f978 	bl	8010200 <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3301      	adds	r3, #1
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	e7df      	b.n	8001ee6 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8001f26:	2300      	movs	r3, #0
    }
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	fffffc14 	.word	0xfffffc14

08001f34 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001f4c:	e028      	b.n	8001fa0 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d001      	beq.n	8001f5a <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001f58:	e022      	b.n	8001fa0 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d21a      	bcs.n	8001f9e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	68f9      	ldr	r1, [r7, #12]
 8001f72:	fb01 f303 	mul.w	r3, r1, r3
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	18d0      	adds	r0, r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f107 0208 	add.w	r2, r7, #8
 8001f82:	4619      	mov	r1, r3
 8001f84:	f00e f90d 	bl	80101a2 <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e7df      	b.n	8001f5e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001f9e:	2300      	movs	r3, #0
    }
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	fffffc14 	.word	0xfffffc14

08001fac <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001fac:	b5b0      	push	{r4, r5, r7, lr}
 8001fae:	b098      	sub	sp, #96	; 0x60
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fbc:	085b      	lsrs	r3, r3, #1
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d001      	beq.n	8001fce <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001fca:	4c65      	ldr	r4, [pc, #404]	; (8002160 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8001fcc:	e0c2      	b.n	8002154 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d901      	bls.n	8001fda <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 8001fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd8:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001fda:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001fde:	2300      	movs	r3, #0
 8001fe0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	f7ff fca3 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8001fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8001fee:	4c5d      	ldr	r4, [pc, #372]	; (8002164 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001ff0:	e0ab      	b.n	800214a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 8001ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001ff8:	4c5a      	ldr	r4, [pc, #360]	; (8002164 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001ffa:	e0a6      	b.n	800214a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001ffc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	461a      	mov	r2, r3
 8002004:	68f9      	ldr	r1, [r7, #12]
 8002006:	f021 fd13 	bl	8023a30 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 800200a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	18d0      	adds	r0, r2, r3
 8002012:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	461a      	mov	r2, r3
 800201c:	2100      	movs	r1, #0
 800201e:	f021 fd2f 	bl	8023a80 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8002022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002024:	2b20      	cmp	r3, #32
 8002026:	d025      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8002028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800202a:	2b40      	cmp	r3, #64	; 0x40
 800202c:	d022      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 800202e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d01f      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8002034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203a:	d01b      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 800203c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800203e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002042:	d017      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8002044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204a:	d013      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 800204c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800204e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002052:	d00f      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8002054:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205a:	d00b      	beq.n	8002074 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 800205c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800205e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002060:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	f000 fa4e 	bl	8002504 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8002068:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 800206a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800206c:	2b00      	cmp	r3, #0
 800206e:	d068      	beq.n	8002142 <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 8002070:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002072:	e06a      	b.n	800214a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8002074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002078:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fada 	bl	8002634 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8002080:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 8002082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 8002088:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800208a:	e05d      	b.n	8002148 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 800208c:	f107 0014 	add.w	r0, r7, #20
 8002090:	2300      	movs	r3, #0
 8002092:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002094:	2101      	movs	r1, #1
 8002096:	f7ff fc4a 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 80020a0:	4c30      	ldr	r4, [pc, #192]	; (8002164 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 80020a2:	2500      	movs	r5, #0
 80020a4:	e045      	b.n	8002132 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80020ac:	4c2d      	ldr	r4, [pc, #180]	; (8002164 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 80020ae:	2500      	movs	r5, #0
 80020b0:	e03f      	b.n	8002132 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 80020b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80020ba:	2300      	movs	r3, #0
 80020bc:	f010 fbce 	bl	801285c <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020d0:	3b01      	subs	r3, #1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	440b      	add	r3, r1
 80020d8:	6852      	ldr	r2, [r2, #4]
 80020da:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 80020dc:	2302      	movs	r3, #2
 80020de:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80020e0:	2301      	movs	r3, #1
 80020e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80020e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e6:	3b01      	subs	r3, #1
 80020e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d220      	bcs.n	8002130 <_ZN2ei5numpy4rfftEPKfjPfjj+0x184>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	f107 0210 	add.w	r2, r7, #16
 80020fa:	2102      	movs	r1, #2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f00e f87f 	bl	8010200 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8002102:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002106:	f7ff fcca 	bl	8001a9e <_ZN2ei5numpy4sqrtEf>
 800210a:	eeb0 7a40 	vmov.f32	s14, s0
 800210e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211e:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 8002122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002124:	3302      	adds	r3, #2
 8002126:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8002128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800212a:	3301      	adds	r3, #1
 800212c:	65bb      	str	r3, [r7, #88]	; 0x58
 800212e:	e7d9      	b.n	80020e4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x138>
 8002130:	2501      	movs	r5, #1
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fc24 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 800213c:	2d01      	cmp	r5, #1
 800213e:	d103      	bne.n	8002148 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 8002140:	e000      	b.n	8002144 <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
            }
 8002142:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002144:	2400      	movs	r4, #0
 8002146:	e000      	b.n	800214a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 8002148:	bf00      	nop
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 800214a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fc18 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 8002154:	4623      	mov	r3, r4
 8002156:	4618      	mov	r0, r3
 8002158:	3760      	adds	r7, #96	; 0x60
 800215a:	46bd      	mov	sp, r7
 800215c:	bdb0      	pop	{r4, r5, r7, pc}
 800215e:	bf00      	nop
 8002160:	fffffc11 	.word	0xfffffc11
 8002164:	fffffc16 	.word	0xfffffc16

08002168 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b098      	sub	sp, #96	; 0x60
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8002176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	3301      	adds	r3, #1
 800217c:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002182:	429a      	cmp	r2, r3
 8002184:	d001      	beq.n	800218a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8002186:	4c6f      	ldr	r4, [pc, #444]	; (8002344 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 8002188:	e0d6      	b.n	8002338 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800218e:	429a      	cmp	r2, r3
 8002190:	d901      	bls.n	8002196 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 8002192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002194:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8002196:	2300      	movs	r3, #0
 8002198:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800219e:	429a      	cmp	r2, r3
 80021a0:	d101      	bne.n	80021a6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 80021a6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80021aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80021ae:	2101      	movs	r1, #1
 80021b0:	f7ff fbbd 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 80021b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 80021ba:	4c63      	ldr	r4, [pc, #396]	; (8002348 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 80021bc:	e0b7      	b.n	800232e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80021c4:	4c60      	ldr	r4, [pc, #384]	; (8002348 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 80021c6:	e0b2      	b.n	800232e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 80021c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d112      	bne.n	80021f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 80021ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	461a      	mov	r2, r3
 80021d6:	68f9      	ldr	r1, [r7, #12]
 80021d8:	f021 fc2a 	bl	8023a30 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 80021dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	18d0      	adds	r0, r2, r3
 80021e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	461a      	mov	r2, r3
 80021ee:	2100      	movs	r1, #0
 80021f0:	f021 fc46 	bl	8023a80 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 80021f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d025      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80021fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021fc:	2b40      	cmp	r3, #64	; 0x40
 80021fe:	d022      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002202:	2b80      	cmp	r3, #128	; 0x80
 8002204:	d01f      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220c:	d01b      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 800220e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002214:	d017      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8002216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221c:	d013      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 800221e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002224:	d00f      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222c:	d00b      	beq.n	8002246 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 800222e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002232:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	f000 f9d7 	bl	80025e8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 800223a:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 800223c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d071      	beq.n	8002326 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 8002242:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002244:	e073      	b.n	800232e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8002246:	f107 0320 	add.w	r3, r7, #32
 800224a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f9f1 	bl	8002634 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8002252:	64b8      	str	r0, [r7, #72]	; 0x48
            if (status != ARM_MATH_SUCCESS) {
 8002254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 800225a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800225c:	e066      	b.n	800232c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 800225e:	f107 0010 	add.w	r0, r7, #16
 8002262:	2300      	movs	r3, #0
 8002264:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002266:	2101      	movs	r1, #1
 8002268:	f7ff fb61 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 8002272:	4c35      	ldr	r4, [pc, #212]	; (8002348 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002274:	2500      	movs	r5, #0
 8002276:	e04e      	b.n	8002316 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800227e:	4c32      	ldr	r4, [pc, #200]	; (8002348 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002280:	2500      	movs	r5, #0
 8002282:	e048      	b.n	8002316 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8002284:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	f107 0020 	add.w	r0, r7, #32
 800228c:	2300      	movs	r3, #0
 800228e:	f010 fae5 	bl	801285c <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80022aa:	3b01      	subs	r3, #1
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	440b      	add	r3, r1
 80022b2:	6852      	ldr	r2, [r2, #4]
 80022b4:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 80022b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80022bc:	3b01      	subs	r3, #1
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 80022ca:	2302      	movs	r3, #2
 80022cc:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80022ce:	2301      	movs	r3, #1
 80022d0:	657b      	str	r3, [r7, #84]	; 0x54
 80022d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d4:	3b01      	subs	r3, #1
 80022d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022d8:	429a      	cmp	r2, r3
 80022da:	d21b      	bcs.n	8002314 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ac>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	441a      	add	r2, r3
 80022e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	440b      	add	r3, r1
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f4:	3301      	adds	r3, #1
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	441a      	add	r2, r3
 80022fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	440b      	add	r3, r1
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 8002306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002308:	3302      	adds	r3, #2
 800230a:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 800230c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230e:	3301      	adds	r3, #1
 8002310:	657b      	str	r3, [r7, #84]	; 0x54
 8002312:	e7de      	b.n	80022d2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16a>
 8002314:	2501      	movs	r5, #1
 8002316:	f107 0310 	add.w	r3, r7, #16
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fb32 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8002320:	2d01      	cmp	r5, #1
 8002322:	d103      	bne.n	800232c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 8002324:	e000      	b.n	8002328 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
            }
 8002326:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002328:	2400      	movs	r4, #0
 800232a:	e000      	b.n	800232e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 800232c:	bf00      	nop
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 800232e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fb26 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 8002338:	4623      	mov	r3, r4
 800233a:	4618      	mov	r0, r3
 800233c:	3760      	adds	r7, #96	; 0x60
 800233e:	46bd      	mov	sp, r7
 8002340:	bdb0      	pop	{r4, r5, r7, pc}
 8002342:	bf00      	nop
 8002344:	fffffc11 	.word	0xfffffc11
 8002348:	fffffc16 	.word	0xfffffc16

0800234c <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	ed87 0a03 	vstr	s0, [r7, #12]
 8002356:	edc7 0a02 	vstr	s1, [r7, #8]
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 800236c:	e03f      	b.n	80023ee <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d104      	bne.n	800237e <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e037      	b.n	80023ee <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 800237e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002382:	edd7 7a03 	vldr	s15, [r7, #12]
 8002386:	ee77 6a67 	vsub.f32	s13, s14, s15
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3b01      	subs	r3, #1
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239a:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d216      	bcs.n	80023da <_ZN2ei5numpy8linspaceEffmPf+0x8e>
            out[ix] = start + ix * step;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80023ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ce:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	e7e3      	b.n	80023a2 <_ZN2ei5numpy8linspaceEffmPf+0x56>
        }

        // last entry always stop
        out[number - 1] = stop;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023e0:	3b01      	subs	r3, #1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 80023ec:	2300      	movs	r3, #0
    }
 80023ee:	4618      	mov	r0, r3
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	fffffc10 	.word	0xfffffc10

08002400 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>:
    /**
     * Calculate the log10 of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log10(matrix_t *matrix)
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6892      	ldr	r2, [r2, #8]
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	429a      	cmp	r2, r3
 800241c:	d263      	bcs.n	80024e6 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xe6>
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6811      	ldr	r1, [r2, #0]
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	188c      	adds	r4, r1, r2
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	617b      	str	r3, [r7, #20]
        float f = frexpf(fabsf(a), &e);
 800243a:	edd7 7a05 	vldr	s15, [r7, #20]
 800243e:	eef0 7ae7 	vabs.f32	s15, s15
 8002442:	f107 0308 	add.w	r3, r7, #8
 8002446:	4618      	mov	r0, r3
 8002448:	eeb0 0a67 	vmov.f32	s0, s15
 800244c:	f01e ff14 	bl	8021278 <frexpf>
 8002450:	ed87 0a04 	vstr	s0, [r7, #16]
        float y = 1.23149591368684f;
 8002454:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf0>)
 8002456:	60fb      	str	r3, [r7, #12]
        y *= f;
 8002458:	ed97 7a03 	vldr	s14, [r7, #12]
 800245c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002464:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -4.11852516267426f;
 8002468:	edd7 7a03 	vldr	s15, [r7, #12]
 800246c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80024f4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf4>
 8002470:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002474:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002478:	ed97 7a03 	vldr	s14, [r7, #12]
 800247c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002484:	edc7 7a03 	vstr	s15, [r7, #12]
        y += 6.02197014179219f;
 8002488:	edd7 7a03 	vldr	s15, [r7, #12]
 800248c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80024f8 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf8>
 8002490:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002494:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002498:	ed97 7a03 	vldr	s14, [r7, #12]
 800249c:	edd7 7a04 	vldr	s15, [r7, #16]
 80024a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a4:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -3.13396450166353f;
 80024a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ac:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80024fc <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xfc>
 80024b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024b4:	edc7 7a03 	vstr	s15, [r7, #12]
        y += e;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80024c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ca:	edc7 7a03 	vstr	s15, [r7, #12]
        return y;
 80024ce:	edd7 7a03 	vldr	s15, [r7, #12]
        return numpy::log2(a) * 0.3010299956639812f;
 80024d2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002500 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0x100>
 80024d6:	ee67 7a87 	vmul.f32	s15, s15, s14
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 80024da:	edc4 7a00 	vstr	s15, [r4]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3301      	adds	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	e792      	b.n	800240c <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xc>
        }

        return EIDSP_OK;
 80024e6:	2300      	movs	r3, #0
    }
 80024e8:	4618      	mov	r0, r3
 80024ea:	3724      	adds	r7, #36	; 0x24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd90      	pop	{r4, r7, pc}
 80024f0:	3f9da1a8 	.word	0x3f9da1a8
 80024f4:	4083caf5 	.word	0x4083caf5
 80024f8:	40c0b3fb 	.word	0x40c0b3fb
 80024fc:	404892e0 	.word	0x404892e0
 8002500:	3e9a209b 	.word	0x3e9a209b

08002504 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 8002504:	b5b0      	push	{r4, r5, r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4618      	mov	r0, r3
 8002518:	f018 fdee 	bl	801b0f8 <_Z9ei_mallocj>
 800251c:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002524:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8002526:	e058      	b.n	80025da <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f107 0310 	add.w	r3, r7, #16
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2300      	movs	r3, #0
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	f018 fa37 	bl	801a9a8 <kiss_fftr_alloc>
 800253a:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d104      	bne.n	800254c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002542:	69b8      	ldr	r0, [r7, #24]
 8002544:	f018 fdf2 	bl	801b12c <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002548:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 800254a:	e046      	b.n	80025da <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	68f9      	ldr	r1, [r7, #12]
 8002550:	6978      	ldr	r0, [r7, #20]
 8002552:	f018 fb49 	bl	801abe8 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d234      	bcs.n	80025cc <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc8>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4413      	add	r3, r2
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	2002      	movs	r0, #2
 8002570:	eeb0 0a67 	vmov.f32	s0, s15
 8002574:	f004 f845 	bl	8006602 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002578:	ec55 4b10 	vmov	r4, r5, d0
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4413      	add	r3, r2
 8002584:	edd3 7a01 	vldr	s15, [r3, #4]
 8002588:	2002      	movs	r0, #2
 800258a:	eeb0 0a67 	vmov.f32	s0, s15
 800258e:	f004 f838 	bl	8006602 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002592:	ec53 2b10 	vmov	r2, r3, d0
 8002596:	4620      	mov	r0, r4
 8002598:	4629      	mov	r1, r5
 800259a:	f7fd fe81 	bl	80002a0 <__adddf3>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	f7fe fb29 	bl	8000bfc <__aeabi_d2f>
 80025aa:	4601      	mov	r1, r0
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	18d4      	adds	r4, r2, r3
 80025b4:	ee00 1a10 	vmov	s0, r1
 80025b8:	f7ff fa71 	bl	8001a9e <_ZN2ei5numpy4sqrtEf>
 80025bc:	eef0 7a40 	vmov.f32	s15, s0
 80025c0:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	3301      	adds	r3, #1
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	e7c6      	b.n	800255a <_ZN2ei5numpy13software_rfftEPfS1_jj+0x56>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80025cc:	6978      	ldr	r0, [r7, #20]
 80025ce:	f018 fdad 	bl	801b12c <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 80025d2:	69b8      	ldr	r0, [r7, #24]
 80025d4:	f018 fdaa 	bl	801b12c <_Z7ei_freePv>

        return EIDSP_OK;
 80025d8:	2300      	movs	r3, #0
    }
 80025da:	4618      	mov	r0, r3
 80025dc:	3720      	adds	r7, #32
 80025de:	46bd      	mov	sp, r7
 80025e0:	bdb0      	pop	{r4, r5, r7, pc}
 80025e2:	bf00      	nop
 80025e4:	fffffc16 	.word	0xfffffc16

080025e8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2300      	movs	r3, #0
 8002600:	2200      	movs	r2, #0
 8002602:	2100      	movs	r1, #0
 8002604:	f018 f9d0 	bl	801a9a8 <kiss_fftr_alloc>
 8002608:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 8002612:	e008      	b.n	8002626 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	68f9      	ldr	r1, [r7, #12]
 8002618:	6978      	ldr	r0, [r7, #20]
 800261a:	f018 fae5 	bl	801abe8 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f018 fd84 	bl	801b12c <_Z7ei_freePv>

        return EIDSP_OK;
 8002624:	2300      	movs	r3, #0
    }
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	fffffc16 	.word	0xfffffc16

08002634 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
 800263e:	4b03      	ldr	r3, [pc, #12]	; (800264c <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x18>)

        return status;
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	fffffc08 	.word	0xfffffc08

08002650 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 8002650:	b5b0      	push	{r4, r5, r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 800265e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	b29b      	uxth	r3, r3
 8002664:	3301      	adds	r3, #1
 8002666:	461a      	mov	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4293      	cmp	r3, r2
 800266c:	d001      	beq.n	8002672 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800266e:	4b2b      	ldr	r3, [pc, #172]	; (800271c <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 8002670:	e050      	b.n	8002714 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 8002672:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f7ff fc95 	bl	8001fac <_ZN2ei5numpy4rfftEPKfjPfjj>
 8002682:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	e042      	b.n	8002714 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d23b      	bcs.n	8002712 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc2>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 800269a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800269c:	ee07 3a90 	vmov	s15, r3
 80026a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a4:	ee17 0a90 	vmov	r0, s15
 80026a8:	f7fd ff58 	bl	800055c <__aeabi_f2d>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	f04f 0000 	mov.w	r0, #0
 80026b4:	491a      	ldr	r1, [pc, #104]	; (8002720 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 80026b6:	f7fe f8d3 	bl	8000860 <__aeabi_ddiv>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4614      	mov	r4, r2
 80026c0:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	ed93 7a00 	vldr	s14, [r3]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	edd3 7a00 	vldr	s15, [r3]
 80026da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026de:	ee17 0a90 	vmov	r0, s15
 80026e2:	f7fd ff3b 	bl	800055c <__aeabi_f2d>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80026ea:	4620      	mov	r0, r4
 80026ec:	4629      	mov	r1, r5
 80026ee:	f7fd ff8d 	bl	800060c <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	18d4      	adds	r4, r2, r3
 8002702:	f7fe fa7b 	bl	8000bfc <__aeabi_d2f>
 8002706:	4603      	mov	r3, r0
 8002708:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3301      	adds	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e7bf      	b.n	8002692 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x42>
        }

        return EIDSP_OK;
 8002712:	2300      	movs	r3, #0
    }
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bdb0      	pop	{r4, r5, r7, pc}
 800271c:	fffffc14 	.word	0xfffffc14
 8002720:	3ff00000 	.word	0x3ff00000

08002724 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>:

    static int welch_max_hold(
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b093      	sub	sp, #76	; 0x4c
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
        size_t stop_bin,
        size_t fft_points,
        bool do_overlap)
    {
        // save off one point to put back, b/c we're going to calculate in place
        float saved_point = 0;
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	63fb      	str	r3, [r7, #60]	; 0x3c
        bool do_saved_point = false;
 8002738:	2300      	movs	r3, #0
 800273a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        size_t fft_out_size = fft_points / 2 + 1;
 800273e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	3301      	adds	r3, #1
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
        float *fft_out;
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002746:	4b4f      	ldr	r3, [pc, #316]	; (8002884 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x160>)
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	f107 0218 	add.w	r2, r7, #24
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f003 ff86 	bl	8006666 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>
        if (input_size < fft_points) {
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275e:	429a      	cmp	r2, r3
 8002760:	d20b      	bcs.n	800277a <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x56>
            fft_out = (float *)ei_calloc(fft_out_size, sizeof(float));
 8002762:	2104      	movs	r1, #4
 8002764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002766:	f018 fcd3 	bl	801b110 <_Z9ei_callocjj>
 800276a:	6378      	str	r0, [r7, #52]	; 0x34
            p_fft_out.reset(fft_out);
 800276c:	f107 0310 	add.w	r3, r7, #16
 8002770:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002772:	4618      	mov	r0, r3
 8002774:	f003 ffad 	bl	80066d2 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>
 8002778:	e00b      	b.n	8002792 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x6e>
        }
        else {
            // set input as output for in place operation
            fft_out = input;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
            // save off one point to put back, b/c we're going to calculate in place
            saved_point = input[fft_points / 2];
 800277e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	63fb      	str	r3, [r7, #60]	; 0x3c
            do_saved_point = true;
 800278c:	2301      	movs	r3, #1
 800278e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        // init the output to zeros
        memset(output, 0, sizeof(float) * (stop_bin - start_bin));
 8002792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	461a      	mov	r2, r3
 800279c:	2100      	movs	r1, #0
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f021 f96e 	bl	8023a80 <memset>
        int input_ix = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ac:	429a      	cmp	r2, r3
 80027ae:	da5e      	bge.n	800286e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14a>
            // Figure out if we need any zero padding
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 80027b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b4:	4413      	add	r3, r2
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d203      	bcs.n	80027c4 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xa0>
                                                                        : input_size - input_ix;
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	e000      	b.n	80027c6 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xa2>
 80027c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c6:	623b      	str	r3, [r7, #32]
            EI_TRY(power_spectrum(
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	18d0      	adds	r0, r2, r3
 80027d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d8:	b29b      	uxth	r3, r3
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027e0:	6a39      	ldr	r1, [r7, #32]
 80027e2:	f7ff ff35 	bl	8002650 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 80027e6:	61f8      	str	r0, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xce>
 80027ee:	69fc      	ldr	r4, [r7, #28]
 80027f0:	e03e      	b.n	8002870 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14c>
                input + input_ix,
                n_input_points,
                fft_out,
                fft_points / 2 + 1,
                fft_points));
            int j = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
            // keep the max of the last frame and everything before
            for (size_t i = start_bin; i < stop_bin; i++) {
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fe:	429a      	cmp	r2, r3
 8002800:	d218      	bcs.n	8002834 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x110>
                output[j] = std::max(output[j], fft_out[i]);
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	18d0      	adds	r0, r2, r3
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002810:	4413      	add	r3, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f003 ff71 	bl	80066fa <_ZSt3maxIfERKT_S2_S2_>
 8002818:	4601      	mov	r1, r0
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	680a      	ldr	r2, [r1, #0]
 8002824:	601a      	str	r2, [r3, #0]
                j++;
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	3301      	adds	r3, #1
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (size_t i = start_bin; i < stop_bin; i++) {
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	3301      	adds	r3, #1
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
 8002832:	e7e2      	b.n	80027fa <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xd6>
            }
            if (do_overlap) {
 8002834:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x140>
                if (do_saved_point) {
 800283c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002840:	2b00      	cmp	r3, #0
 8002842:	d009      	beq.n	8002858 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x134>
                    // This step only matters first time through
                    input[fft_points / 2] = saved_point;
 8002844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4413      	add	r3, r2
 800284e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002850:	601a      	str	r2, [r3, #0]
                    do_saved_point = false;
 8002852:	2300      	movs	r3, #0
 8002854:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                }
                input_ix += fft_points / 2;
 8002858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285a:	085a      	lsrs	r2, r3, #1
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	4413      	add	r3, r2
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
 8002862:	e7a1      	b.n	80027a8 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x84>
            }
            else {
                input_ix += fft_points;
 8002864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002868:	4413      	add	r3, r2
 800286a:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 800286c:	e79c      	b.n	80027a8 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x84>
            }
        }

        return EIDSP_OK;
 800286e:	2400      	movs	r4, #0
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002870:	f107 0310 	add.w	r3, r7, #16
 8002874:	4618      	mov	r0, r3
 8002876:	f003 ff0b 	bl	8006690 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }
 800287a:	4623      	mov	r3, r4
 800287c:	4618      	mov	r0, r3
 800287e:	3744      	adds	r7, #68	; 0x44
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}
 8002884:	0801b12d 	.word	0x0801b12d

08002888 <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d214      	bcs.n	80028c8 <_ZN2ei5numpy13zero_handlingEPfj+0x40>
            if (input[ix] == 0) {
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	d105      	bne.n	80028c0 <_ZN2ei5numpy13zero_handlingEPfj+0x38>
                input[ix] = 1e-10;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	4413      	add	r3, r2
 80028bc:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <_ZN2ei5numpy13zero_handlingEPfj+0x4c>)
 80028be:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3301      	adds	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e7e6      	b.n	8002896 <_ZN2ei5numpy13zero_handlingEPfj+0xe>
            }
        }
    }
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	2edbe6ff 	.word	0x2edbe6ff

080028d8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 80028d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028dc:	b095      	sub	sp, #84	; 0x54
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6178      	str	r0, [r7, #20]
 80028e2:	ed87 0a04 	vstr	s0, [r7, #16]
 80028e6:	edc7 0a03 	vstr	s1, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	0fda      	lsrs	r2, r3, #31
 80028f4:	4413      	add	r3, r2
 80028f6:	105b      	asrs	r3, r3, #1
 80028f8:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7fd fe2e 	bl	800055c <__aeabi_f2d>
 8002900:	a3f5      	add	r3, pc, #980	; (adr r3, 8002cd8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd fe81 	bl	800060c <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4690      	mov	r8, r2
 8002910:	4699      	mov	r9, r3
 8002912:	6938      	ldr	r0, [r7, #16]
 8002914:	f7fd fe22 	bl	800055c <__aeabi_f2d>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4640      	mov	r0, r8
 800291e:	4649      	mov	r1, r9
 8002920:	f7fd ff9e 	bl	8000860 <__aeabi_ddiv>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	ec43 2b17 	vmov	d7, r2, r3
 800292c:	eeb0 0a47 	vmov.f32	s0, s14
 8002930:	eef0 0a67 	vmov.f32	s1, s15
 8002934:	f01e fc6c 	bl	8021210 <tan>
 8002938:	ec53 2b10 	vmov	r2, r3, d0
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f7fe f95c 	bl	8000bfc <__aeabi_d2f>
 8002944:	4603      	mov	r3, r0
 8002946:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002948:	2002      	movs	r0, #2
 800294a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800294e:	f003 fe58 	bl	8006602 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002952:	ec53 2b10 	vmov	r2, r3, d0
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7fe f94f 	bl	8000bfc <__aeabi_d2f>
 800295e:	4603      	mov	r3, r0
 8002960:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002964:	2104      	movs	r1, #4
 8002966:	4618      	mov	r0, r3
 8002968:	f018 fbd2 	bl	801b110 <_Z9ei_callocjj>
 800296c:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 800296e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002970:	2104      	movs	r1, #4
 8002972:	4618      	mov	r0, r3
 8002974:	f018 fbcc 	bl	801b110 <_Z9ei_callocjj>
 8002978:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 800297a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297c:	2104      	movs	r1, #4
 800297e:	4618      	mov	r0, r3
 8002980:	f018 fbc6 	bl	801b110 <_Z9ei_callocjj>
 8002984:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002988:	2104      	movs	r1, #4
 800298a:	4618      	mov	r0, r3
 800298c:	f018 fbc0 	bl	801b110 <_Z9ei_callocjj>
 8002990:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002994:	2104      	movs	r1, #4
 8002996:	4618      	mov	r0, r3
 8002998:	f018 fbba 	bl	801b110 <_Z9ei_callocjj>
 800299c:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 800299e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a0:	2104      	movs	r1, #4
 80029a2:	4618      	mov	r0, r3
 80029a4:	f018 fbb4 	bl	801b110 <_Z9ei_callocjj>
 80029a8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 80029aa:	2300      	movs	r3, #0
 80029ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b2:	429a      	cmp	r2, r3
 80029b4:	f280 80e5 	bge.w	8002b82 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 80029b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80029ba:	f7fd fdbd 	bl	8000538 <__aeabi_i2d>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	f7fd fc6d 	bl	80002a0 <__adddf3>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	4bc3      	ldr	r3, [pc, #780]	; (8002ce0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 80029d4:	f7fd fc64 	bl	80002a0 <__adddf3>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	a3bd      	add	r3, pc, #756	; (adr r3, 8002cd8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f7fd fe11 	bl	800060c <__aeabi_dmul>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4690      	mov	r8, r2
 80029f0:	4699      	mov	r9, r3
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7fd fda0 	bl	8000538 <__aeabi_i2d>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	f7fd fc50 	bl	80002a0 <__adddf3>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4640      	mov	r0, r8
 8002a06:	4649      	mov	r1, r9
 8002a08:	f7fd ff2a 	bl	8000860 <__aeabi_ddiv>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	ec43 2b17 	vmov	d7, r2, r3
 8002a14:	eeb0 0a47 	vmov.f32	s0, s14
 8002a18:	eef0 0a67 	vmov.f32	s1, s15
 8002a1c:	f01e fba0 	bl	8021160 <sin>
 8002a20:	ec53 2b10 	vmov	r2, r3, d0
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f7fe f8e8 	bl	8000bfc <__aeabi_d2f>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002a30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a32:	f7fd fd93 	bl	800055c <__aeabi_f2d>
 8002a36:	4680      	mov	r8, r0
 8002a38:	4689      	mov	r9, r1
 8002a3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a3c:	f7fd fd8e 	bl	800055c <__aeabi_f2d>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	f7fd fc2c 	bl	80002a0 <__adddf3>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4692      	mov	sl, r2
 8002a4e:	469b      	mov	fp, r3
 8002a50:	69f8      	ldr	r0, [r7, #28]
 8002a52:	f7fd fd83 	bl	800055c <__aeabi_f2d>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4650      	mov	r0, sl
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	f7fd fdd5 	bl	800060c <__aeabi_dmul>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4640      	mov	r0, r8
 8002a68:	4649      	mov	r1, r9
 8002a6a:	f7fd fc19 	bl	80002a0 <__adddf3>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	4b99      	ldr	r3, [pc, #612]	; (8002ce0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8002a7c:	f7fd fc10 	bl	80002a0 <__adddf3>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fe f8b8 	bl	8000bfc <__aeabi_d2f>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 8002a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a96:	4413      	add	r3, r2
 8002a98:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002a9c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa4:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8002aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002aac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab4:	ee17 0a90 	vmov	r0, s15
 8002ab8:	f7fd fd50 	bl	800055c <__aeabi_f2d>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	f7fd fbee 	bl	80002a0 <__adddf3>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4690      	mov	r8, r2
 8002aca:	4699      	mov	r9, r3
 8002acc:	6938      	ldr	r0, [r7, #16]
 8002ace:	f7fd fd45 	bl	800055c <__aeabi_f2d>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4640      	mov	r0, r8
 8002ad8:	4649      	mov	r1, r9
 8002ada:	f7fd fec1 	bl	8000860 <__aeabi_ddiv>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aec:	18d6      	adds	r6, r2, r3
 8002aee:	f7fe f885 	bl	8000bfc <__aeabi_d2f>
 8002af2:	4603      	mov	r3, r0
 8002af4:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8002af6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002af8:	f7fd fd30 	bl	800055c <__aeabi_f2d>
 8002afc:	4680      	mov	r8, r0
 8002afe:	4689      	mov	r9, r1
 8002b00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b02:	f7fd fd2b 	bl	800055c <__aeabi_f2d>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	f7fd fbc9 	bl	80002a0 <__adddf3>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4692      	mov	sl, r2
 8002b14:	469b      	mov	fp, r3
 8002b16:	69f8      	ldr	r0, [r7, #28]
 8002b18:	f7fd fd20 	bl	800055c <__aeabi_f2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4650      	mov	r0, sl
 8002b22:	4659      	mov	r1, fp
 8002b24:	f7fd fd72 	bl	800060c <__aeabi_dmul>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4640      	mov	r0, r8
 8002b2e:	4649      	mov	r1, r9
 8002b30:	f7fd fbb4 	bl	800029c <__aeabi_dsub>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	4b67      	ldr	r3, [pc, #412]	; (8002ce0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8002b42:	f7fd fbad 	bl	80002a0 <__adddf3>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4614      	mov	r4, r2
 8002b4c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002b50:	6938      	ldr	r0, [r7, #16]
 8002b52:	f7fd fd03 	bl	800055c <__aeabi_f2d>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	f7fd fe7f 	bl	8000860 <__aeabi_ddiv>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b70:	18d6      	adds	r6, r2, r3
 8002b72:	f7fe f843 	bl	8000bfc <__aeabi_d2f>
 8002b76:	4603      	mov	r3, r0
 8002b78:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 8002b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b80:	e715      	b.n	80029ae <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8002b82:	2300      	movs	r3, #0
 8002b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	f080 80aa 	bcs.w	8002ce4 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8002b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	441a      	add	r2, r3
 8002b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	440b      	add	r3, r1
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f280 808e 	bge.w	8002cce <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8002bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb8:	4413      	add	r3, r2
 8002bba:	ed93 7a00 	vldr	s14, [r3]
 8002bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc4:	4413      	add	r3, r2
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd4:	4413      	add	r3, r2
 8002bd6:	edd3 6a00 	vldr	s13, [r3]
 8002bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	6a3a      	ldr	r2, [r7, #32]
 8002be0:	4413      	add	r3, r2
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c00:	4413      	add	r3, r2
 8002c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c06:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 8002c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c10:	4413      	add	r3, r2
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fca1 	bl	800055c <__aeabi_f2d>
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	460d      	mov	r5, r1
 8002c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c24:	4413      	add	r3, r2
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fc97 	bl	800055c <__aeabi_f2d>
 8002c2e:	4680      	mov	r8, r0
 8002c30:	4689      	mov	r9, r1
 8002c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c38:	4413      	add	r3, r2
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fd fc8d 	bl	800055c <__aeabi_f2d>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	f7fd fb2b 	bl	80002a0 <__adddf3>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4640      	mov	r0, r8
 8002c50:	4649      	mov	r1, r9
 8002c52:	f7fd fb25 	bl	80002a0 <__adddf3>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4690      	mov	r8, r2
 8002c5c:	4699      	mov	r9, r3
 8002c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	6a3a      	ldr	r2, [r7, #32]
 8002c64:	4413      	add	r3, r2
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc77 	bl	800055c <__aeabi_f2d>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4640      	mov	r0, r8
 8002c74:	4649      	mov	r1, r9
 8002c76:	f7fd fb13 	bl	80002a0 <__adddf3>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4620      	mov	r0, r4
 8002c80:	4629      	mov	r1, r5
 8002c82:	f7fd fcc3 	bl	800060c <__aeabi_dmul>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	18d4      	adds	r4, r2, r3
 8002c96:	f7fd ffb1 	bl	8000bfc <__aeabi_d2f>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8002c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca4:	441a      	add	r2, r3
 8002ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	6a39      	ldr	r1, [r7, #32]
 8002cac:	440b      	add	r3, r1
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8002cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb8:	441a      	add	r2, r3
 8002cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc0:	440b      	add	r3, r1
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8002cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc8:	3301      	adds	r3, #1
 8002cca:	647b      	str	r3, [r7, #68]	; 0x44
 8002ccc:	e76c      	b.n	8002ba8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 8002cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cd4:	e757      	b.n	8002b86 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2ae>
 8002cd6:	bf00      	nop
 8002cd8:	54442d18 	.word	0x54442d18
 8002cdc:	400921fb 	.word	0x400921fb
 8002ce0:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8002ce4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ce6:	f018 fa21 	bl	801b12c <_Z7ei_freePv>
        ei_free(d1);
 8002cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cec:	f018 fa1e 	bl	801b12c <_Z7ei_freePv>
        ei_free(d2);
 8002cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cf2:	f018 fa1b 	bl	801b12c <_Z7ei_freePv>
        ei_free(w0);
 8002cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf8:	f018 fa18 	bl	801b12c <_Z7ei_freePv>
        ei_free(w1);
 8002cfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cfe:	f018 fa15 	bl	801b12c <_Z7ei_freePv>
        ei_free(w2);
 8002d02:	6a38      	ldr	r0, [r7, #32]
 8002d04:	f018 fa12 	bl	801b12c <_Z7ei_freePv>
    }
 8002d08:	bf00      	nop
 8002d0a:	3754      	adds	r7, #84	; 0x54
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d12:	bf00      	nop
 8002d14:	0000      	movs	r0, r0
	...

08002d18 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8002d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d1c:	b095      	sub	sp, #84	; 0x54
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6178      	str	r0, [r7, #20]
 8002d22:	ed87 0a04 	vstr	s0, [r7, #16]
 8002d26:	edc7 0a03 	vstr	s1, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	0fda      	lsrs	r2, r3, #31
 8002d34:	4413      	add	r3, r2
 8002d36:	105b      	asrs	r3, r3, #1
 8002d38:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7fd fc0e 	bl	800055c <__aeabi_f2d>
 8002d40:	a3f5      	add	r3, pc, #980	; (adr r3, 8003118 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f7fd fc61 	bl	800060c <__aeabi_dmul>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4690      	mov	r8, r2
 8002d50:	4699      	mov	r9, r3
 8002d52:	6938      	ldr	r0, [r7, #16]
 8002d54:	f7fd fc02 	bl	800055c <__aeabi_f2d>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4640      	mov	r0, r8
 8002d5e:	4649      	mov	r1, r9
 8002d60:	f7fd fd7e 	bl	8000860 <__aeabi_ddiv>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	ec43 2b17 	vmov	d7, r2, r3
 8002d6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002d70:	eef0 0a67 	vmov.f32	s1, s15
 8002d74:	f01e fa4c 	bl	8021210 <tan>
 8002d78:	ec53 2b10 	vmov	r2, r3, d0
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f7fd ff3c 	bl	8000bfc <__aeabi_d2f>
 8002d84:	4603      	mov	r3, r0
 8002d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002d88:	2002      	movs	r0, #2
 8002d8a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002d8e:	f003 fc38 	bl	8006602 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002d92:	ec53 2b10 	vmov	r2, r3, d0
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd ff2f 	bl	8000bfc <__aeabi_d2f>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da4:	2104      	movs	r1, #4
 8002da6:	4618      	mov	r0, r3
 8002da8:	f018 f9b2 	bl	801b110 <_Z9ei_callocjj>
 8002dac:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db0:	2104      	movs	r1, #4
 8002db2:	4618      	mov	r0, r3
 8002db4:	f018 f9ac 	bl	801b110 <_Z9ei_callocjj>
 8002db8:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbc:	2104      	movs	r1, #4
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f018 f9a6 	bl	801b110 <_Z9ei_callocjj>
 8002dc4:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc8:	2104      	movs	r1, #4
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f018 f9a0 	bl	801b110 <_Z9ei_callocjj>
 8002dd0:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd4:	2104      	movs	r1, #4
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f018 f99a 	bl	801b110 <_Z9ei_callocjj>
 8002ddc:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de0:	2104      	movs	r1, #4
 8002de2:	4618      	mov	r0, r3
 8002de4:	f018 f994 	bl	801b110 <_Z9ei_callocjj>
 8002de8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 8002dea:	2300      	movs	r3, #0
 8002dec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df2:	429a      	cmp	r2, r3
 8002df4:	f280 80e5 	bge.w	8002fc2 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002df8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002dfa:	f7fd fb9d 	bl	8000538 <__aeabi_i2d>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	f7fd fa4d 	bl	80002a0 <__adddf3>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	4bc3      	ldr	r3, [pc, #780]	; (8003120 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002e14:	f7fd fa44 	bl	80002a0 <__adddf3>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	a3bd      	add	r3, pc, #756	; (adr r3, 8003118 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e26:	f7fd fbf1 	bl	800060c <__aeabi_dmul>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4690      	mov	r8, r2
 8002e30:	4699      	mov	r9, r3
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7fd fb80 	bl	8000538 <__aeabi_i2d>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	f7fd fa30 	bl	80002a0 <__adddf3>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4640      	mov	r0, r8
 8002e46:	4649      	mov	r1, r9
 8002e48:	f7fd fd0a 	bl	8000860 <__aeabi_ddiv>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	ec43 2b17 	vmov	d7, r2, r3
 8002e54:	eeb0 0a47 	vmov.f32	s0, s14
 8002e58:	eef0 0a67 	vmov.f32	s1, s15
 8002e5c:	f01e f980 	bl	8021160 <sin>
 8002e60:	ec53 2b10 	vmov	r2, r3, d0
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	f7fd fec8 	bl	8000bfc <__aeabi_d2f>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002e70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e72:	f7fd fb73 	bl	800055c <__aeabi_f2d>
 8002e76:	4680      	mov	r8, r0
 8002e78:	4689      	mov	r9, r1
 8002e7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e7c:	f7fd fb6e 	bl	800055c <__aeabi_f2d>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	f7fd fa0c 	bl	80002a0 <__adddf3>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4692      	mov	sl, r2
 8002e8e:	469b      	mov	fp, r3
 8002e90:	69f8      	ldr	r0, [r7, #28]
 8002e92:	f7fd fb63 	bl	800055c <__aeabi_f2d>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4650      	mov	r0, sl
 8002e9c:	4659      	mov	r1, fp
 8002e9e:	f7fd fbb5 	bl	800060c <__aeabi_dmul>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4640      	mov	r0, r8
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	f7fd f9f9 	bl	80002a0 <__adddf3>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	4b99      	ldr	r3, [pc, #612]	; (8003120 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002ebc:	f7fd f9f0 	bl	80002a0 <__adddf3>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fe98 	bl	8000bfc <__aeabi_d2f>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 8002ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ed6:	4413      	add	r3, r2
 8002ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002edc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ee4:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8002ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef4:	ee17 0a90 	vmov	r0, s15
 8002ef8:	f7fd fb30 	bl	800055c <__aeabi_f2d>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	f7fd f9ce 	bl	80002a0 <__adddf3>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4690      	mov	r8, r2
 8002f0a:	4699      	mov	r9, r3
 8002f0c:	6938      	ldr	r0, [r7, #16]
 8002f0e:	f7fd fb25 	bl	800055c <__aeabi_f2d>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4640      	mov	r0, r8
 8002f18:	4649      	mov	r1, r9
 8002f1a:	f7fd fca1 	bl	8000860 <__aeabi_ddiv>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f2c:	18d6      	adds	r6, r2, r3
 8002f2e:	f7fd fe65 	bl	8000bfc <__aeabi_d2f>
 8002f32:	4603      	mov	r3, r0
 8002f34:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8002f36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f38:	f7fd fb10 	bl	800055c <__aeabi_f2d>
 8002f3c:	4680      	mov	r8, r0
 8002f3e:	4689      	mov	r9, r1
 8002f40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f42:	f7fd fb0b 	bl	800055c <__aeabi_f2d>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	f7fd f9a9 	bl	80002a0 <__adddf3>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4692      	mov	sl, r2
 8002f54:	469b      	mov	fp, r3
 8002f56:	69f8      	ldr	r0, [r7, #28]
 8002f58:	f7fd fb00 	bl	800055c <__aeabi_f2d>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4650      	mov	r0, sl
 8002f62:	4659      	mov	r1, fp
 8002f64:	f7fd fb52 	bl	800060c <__aeabi_dmul>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4640      	mov	r0, r8
 8002f6e:	4649      	mov	r1, r9
 8002f70:	f7fd f994 	bl	800029c <__aeabi_dsub>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	4b67      	ldr	r3, [pc, #412]	; (8003120 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002f82:	f7fd f98d 	bl	80002a0 <__adddf3>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4614      	mov	r4, r2
 8002f8c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002f90:	6938      	ldr	r0, [r7, #16]
 8002f92:	f7fd fae3 	bl	800055c <__aeabi_f2d>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	f7fd fc5f 	bl	8000860 <__aeabi_ddiv>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb0:	18d6      	adds	r6, r2, r3
 8002fb2:	f7fd fe23 	bl	8000bfc <__aeabi_d2f>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 8002fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc0:	e715      	b.n	8002dee <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	f080 80aa 	bcs.w	8003124 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8002fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	441a      	add	r2, r3
 8002fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	440b      	add	r3, r1
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f280 808e 	bge.w	800310e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8002ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff8:	4413      	add	r3, r2
 8002ffa:	ed93 7a00 	vldr	s14, [r3]
 8002ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003004:	4413      	add	r3, r2
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800300e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003014:	4413      	add	r3, r2
 8003016:	edd3 6a00 	vldr	s13, [r3]
 800301a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	6a3a      	ldr	r2, [r7, #32]
 8003020:	4413      	add	r3, r2
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800302a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800302e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003040:	4413      	add	r3, r2
 8003042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003046:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 800304a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003050:	4413      	add	r3, r2
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fa81 	bl	800055c <__aeabi_f2d>
 800305a:	4604      	mov	r4, r0
 800305c:	460d      	mov	r5, r1
 800305e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003064:	4413      	add	r3, r2
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fa77 	bl	800055c <__aeabi_f2d>
 800306e:	4680      	mov	r8, r0
 8003070:	4689      	mov	r9, r1
 8003072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003078:	4413      	add	r3, r2
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fa6d 	bl	800055c <__aeabi_f2d>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	f7fd f90b 	bl	80002a0 <__adddf3>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4640      	mov	r0, r8
 8003090:	4649      	mov	r1, r9
 8003092:	f7fd f903 	bl	800029c <__aeabi_dsub>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4690      	mov	r8, r2
 800309c:	4699      	mov	r9, r3
 800309e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	6a3a      	ldr	r2, [r7, #32]
 80030a4:	4413      	add	r3, r2
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fa57 	bl	800055c <__aeabi_f2d>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4640      	mov	r0, r8
 80030b4:	4649      	mov	r1, r9
 80030b6:	f7fd f8f3 	bl	80002a0 <__adddf3>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4620      	mov	r0, r4
 80030c0:	4629      	mov	r1, r5
 80030c2:	f7fd faa3 	bl	800060c <__aeabi_dmul>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	18d4      	adds	r4, r2, r3
 80030d6:	f7fd fd91 	bl	8000bfc <__aeabi_d2f>
 80030da:	4603      	mov	r3, r0
 80030dc:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 80030de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e4:	441a      	add	r2, r3
 80030e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	6a39      	ldr	r1, [r7, #32]
 80030ec:	440b      	add	r3, r1
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 80030f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030f8:	441a      	add	r2, r3
 80030fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003100:	440b      	add	r3, r1
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8003106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003108:	3301      	adds	r3, #1
 800310a:	647b      	str	r3, [r7, #68]	; 0x44
 800310c:	e76c      	b.n	8002fe8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 800310e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003110:	3301      	adds	r3, #1
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48
 8003114:	e757      	b.n	8002fc6 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2ae>
 8003116:	bf00      	nop
 8003118:	54442d18 	.word	0x54442d18
 800311c:	400921fb 	.word	0x400921fb
 8003120:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8003124:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003126:	f018 f801 	bl	801b12c <_Z7ei_freePv>
        ei_free(d1);
 800312a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800312c:	f017 fffe 	bl	801b12c <_Z7ei_freePv>
        ei_free(d2);
 8003130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003132:	f017 fffb 	bl	801b12c <_Z7ei_freePv>
        ei_free(w0);
 8003136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003138:	f017 fff8 	bl	801b12c <_Z7ei_freePv>
        ei_free(w1);
 800313c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800313e:	f017 fff5 	bl	801b12c <_Z7ei_freePv>
        ei_free(w2);
 8003142:	6a38      	ldr	r0, [r7, #32]
 8003144:	f017 fff2 	bl	801b12c <_Z7ei_freePv>
    }
 8003148:	bf00      	nop
 800314a:	3754      	adds	r7, #84	; 0x54
 800314c:	46bd      	mov	sp, r7
 800314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003152:	bf00      	nop

08003154 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8003154:	b590      	push	{r4, r7, lr}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003160:	edc7 0a01 	vstr	s1, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	429a      	cmp	r2, r3
 8003174:	d21f      	bcs.n	80031b6 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_lowpass(
 8003176:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	6979      	ldr	r1, [r7, #20]
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	6979      	ldr	r1, [r7, #20]
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 800319a:	441a      	add	r2, r3
                matrix->cols);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 80031a0:	4621      	mov	r1, r4
 80031a2:	edd7 0a01 	vldr	s1, [r7, #4]
 80031a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80031aa:	f7ff fb95 	bl	80028d8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	3301      	adds	r3, #1
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	e7da      	b.n	800316c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 80031b6:	2300      	movs	r3, #0
    }
 80031b8:	4618      	mov	r0, r3
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd90      	pop	{r4, r7, pc}

080031c0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80031cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d21f      	bcs.n	8003222 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_highpass(
 80031e2:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	6979      	ldr	r1, [r7, #20]
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	6979      	ldr	r1, [r7, #20]
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 8003206:	441a      	add	r2, r3
                matrix->cols);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 800320c:	4621      	mov	r1, r4
 800320e:	edd7 0a01 	vldr	s1, [r7, #4]
 8003212:	ed97 0a02 	vldr	s0, [r7, #8]
 8003216:	f7ff fd7f 	bl	8002d18 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	3301      	adds	r3, #1
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	e7da      	b.n	80031d8 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 8003222:	2300      	movs	r3, #0
    }
 8003224:	4618      	mov	r0, r3
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd90      	pop	{r4, r7, pc}

0800322c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 800322c:	b480      	push	{r7}
 800322e:	b091      	sub	sp, #68	; 0x44
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	ed87 0a01 	vstr	s0, [r7, #4]
 800323a:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d001      	beq.n	8003248 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003244:	4b60      	ldr	r3, [pc, #384]	; (80033c8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8003246:	e0b9      	b.n	80033bc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        if (output_matrix->cols != 1) {
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d001      	beq.n	8003254 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003250:	4b5d      	ldr	r3, [pc, #372]	; (80033c8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8003252:	e0b3      	b.n	80033bc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        uint16_t out_ix = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 8003270:	4b56      	ldr	r3, [pc, #344]	; (80033cc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 800327a:	2300      	movs	r3, #0
 800327c:	633b      	str	r3, [r7, #48]	; 0x30
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	3b01      	subs	r3, #1
 8003282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003284:	429a      	cmp	r2, r3
 8003286:	d229      	bcs.n	80032dc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xb0>
            if (in[ix] < min) {
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	4413      	add	r3, r2
 8003290:	edd3 7a00 	vldr	s15, [r3]
 8003294:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a0:	dd05      	ble.n	80032ae <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x82>
                min = in[ix];
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	6a3a      	ldr	r2, [r7, #32]
 80032a8:	4413      	add	r3, r2
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 80032ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	6a3a      	ldr	r2, [r7, #32]
 80032b4:	4413      	add	r3, r2
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80032be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c6:	d505      	bpl.n	80032d4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa8>
                max = in[ix];
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	6a3a      	ldr	r2, [r7, #32]
 80032ce:	4413      	add	r3, r2
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	3301      	adds	r3, #1
 80032d8:	633b      	str	r3, [r7, #48]	; 0x30
 80032da:	e7d0      	b.n	800327e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x52>
            }
        }


        float prev = in[0];
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80032e2:	2301      	movs	r3, #1
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	3b01      	subs	r3, #1
 80032ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d261      	bcs.n	80033b4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	6a3a      	ldr	r2, [r7, #32]
 80032f6:	4413      	add	r3, r2
 80032f8:	edd3 7a00 	vldr	s15, [r3]
 80032fc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003308:	d549      	bpl.n	800339e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	6a3a      	ldr	r2, [r7, #32]
 8003310:	4413      	add	r3, r2
 8003312:	ed93 7a00 	vldr	s14, [r3]
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	3301      	adds	r3, #1
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	6a3a      	ldr	r2, [r7, #32]
 800331e:	4413      	add	r3, r2
 8003320:	edd3 7a00 	vldr	s15, [r3]
 8003324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332c:	dd37      	ble.n	800339e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	6a3a      	ldr	r2, [r7, #32]
 8003334:	4413      	add	r3, r2
 8003336:	ed93 7a00 	vldr	s14, [r3]
 800333a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800333e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	6a3a      	ldr	r2, [r7, #32]
 8003348:	4413      	add	r3, r2
 800334a:	edd3 6a00 	vldr	s13, [r3]
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	3301      	adds	r3, #1
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	6a3a      	ldr	r2, [r7, #32]
 8003356:	4413      	add	r3, r2
 8003358:	edd3 7a00 	vldr	s15, [r3]
 800335c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003364:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8003368:	ed97 7a05 	vldr	s14, [r7, #20]
 800336c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	dd11      	ble.n	800339e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                    out[out_ix] = ix;
 800337a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4413      	add	r3, r2
 8003382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003384:	ee07 2a90 	vmov	s15, r2
 8003388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338c:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 8003390:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003392:	3301      	adds	r3, #1
 8003394:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 8003396:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	429a      	cmp	r2, r3
 800339c:	d009      	beq.n	80033b2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x186>
                }
            }

            prev = in[ix];
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	6a3a      	ldr	r2, [r7, #32]
 80033a4:	4413      	add	r3, r2
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	3301      	adds	r3, #1
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b0:	e799      	b.n	80032e6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xba>
                    if (out_ix == out_size) break;
 80033b2:	bf00      	nop
        }

        *peaks_found = out_ix;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80033b8:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 80033ba:	2300      	movs	r3, #0
    }
 80033bc:	4618      	mov	r0, r3
 80033be:	3744      	adds	r7, #68	; 0x44
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	fffffc14 	.word	0xfffffc14
 80033cc:	7f7fffff 	.word	0x7f7fffff

080033d0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4618      	mov	r0, r3
 80033dc:	f003 f9e6 	bl	80067ac <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ffeb 	bl	80033d0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	ed93 7a01 	vldr	s14, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	edd3 7a01 	vldr	s15, [r3, #4]
 800341c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003424:	bfcc      	ite	gt
 8003426:	2301      	movgt	r3, #1
 8003428:	2300      	movle	r3, #0
 800342a:	b2db      	uxtb	r3, r3
        });
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8003438:	b5b0      	push	{r4, r5, r7, lr}
 800343a:	ed2d 8b02 	vpush	{d8}
 800343e:	b09c      	sub	sp, #112	; 0x70
 8003440:	af00      	add	r7, sp, #0
 8003442:	6178      	str	r0, [r7, #20]
 8003444:	6139      	str	r1, [r7, #16]
 8003446:	ed87 0a03 	vstr	s0, [r7, #12]
 800344a:	edc7 0a02 	vstr	s1, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d001      	beq.n	800345e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800345a:	4c95      	ldr	r4, [pc, #596]	; (80036b0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 800345c:	e120      	b.n	80036a0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->cols != 2) {
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d001      	beq.n	800346a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003466:	4c92      	ldr	r4, [pc, #584]	; (80036b0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003468:	e11a      	b.n	80036a0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->rows == 0) {
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x3e>
            return EIDSP_OK;
 8003472:	2400      	movs	r4, #0
 8003474:	e114      	b.n	80036a0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        int N = static_cast<int>(fft_length);
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	663b      	str	r3, [r7, #96]	; 0x60
        float T = 1.0f / sampling_freq;
 800347a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800347e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003486:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003492:	2300      	movs	r3, #0
 8003494:	2101      	movs	r1, #1
 8003496:	f7fe fa4a 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 800349a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x6c>
 80034a0:	4c84      	ldr	r4, [pc, #528]	; (80036b4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 80034a2:	e0f8      	b.n	8003696 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 80034a4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80034a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034b0:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80034b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034b6:	0fda      	lsrs	r2, r3, #31
 80034b8:	4413      	add	r3, r2
 80034ba:	105b      	asrs	r3, r3, #1
 80034bc:	4618      	mov	r0, r3
 80034be:	f003 f963 	bl	8006788 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80034c2:	ec53 2b10 	vmov	r2, r3, d0
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	f7fd fb77 	bl	8000bbc <__aeabi_d2uiz>
 80034ce:	4602      	mov	r2, r0
 80034d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	eef0 0a48 	vmov.f32	s1, s16
 80034da:	ed9f 0a77 	vldr	s0, [pc, #476]	; 80036b8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 80034de:	f7fe ff35 	bl	800234c <_ZN2ei5numpy8linspaceEffmPf>
 80034e2:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 80034e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xb6>
            EIDSP_ERR(ret);
 80034ea:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80034ec:	e0d3      	b.n	8003696 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4619      	mov	r1, r3
 80034fc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003500:	2300      	movs	r3, #0
 8003502:	2201      	movs	r2, #1
 8003504:	f7fe fa13 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xda>
 800350e:	4c69      	ldr	r4, [pc, #420]	; (80036b4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003510:	e0bc      	b.n	800368c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 8003512:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8003516:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800351a:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80036b8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 800351e:	4619      	mov	r1, r3
 8003520:	6978      	ldr	r0, [r7, #20]
 8003522:	f7ff fe83 	bl	800322c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 8003526:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xfa>
            EIDSP_ERR(ret);
 800352e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003530:	e0ac      	b.n	800368c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ei_vector<freq_peak_t> peaks;
 8003532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ff57 	bl	80033ea <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 800353c:	2300      	movs	r3, #0
 800353e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003542:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003546:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003548:	4293      	cmp	r3, r2
 800354a:	da3d      	bge.n	80035c8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x190>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 800354c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800354e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003550:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003560:	ee17 3a90 	vmov	r3, s15
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	623b      	str	r3, [r7, #32]
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003572:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	edd3 7a00 	vldr	s15, [r3]
 800357e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003582:	ee17 3a90 	vmov	r3, s15
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
            if (d.amplitude < threshold) {
 800358e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003592:	ed97 7a02 	vldr	s14, [r7, #8]
 8003596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800359a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359e:	dd05      	ble.n	80035ac <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x174>
                d.freq = 0.0f;
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	623b      	str	r3, [r7, #32]
                d.amplitude = 0.0f;
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
            peaks.push_back(d);
 80035ac:	f107 0220 	add.w	r2, r7, #32
 80035b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f003 f935 	bl	8006826 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 80035bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80035c0:	3301      	adds	r3, #1
 80035c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80035c6:	e7bc      	b.n	8003542 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x10a>
        sort(peaks.begin(), peaks.end(),
 80035c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035cc:	4618      	mov	r0, r3
 80035ce:	f003 f950 	bl	8006872 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 80035d2:	4604      	mov	r4, r0
 80035d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035d8:	4618      	mov	r0, r3
 80035da:	f003 f95a 	bl	8006892 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 80035de:	4603      	mov	r3, r0
 80035e0:	462a      	mov	r2, r5
 80035e2:	4619      	mov	r1, r3
 80035e4:	4620      	mov	r0, r4
 80035e6:	f003 f965 	bl	80068b4 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 80035ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035ee:	4618      	mov	r0, r3
 80035f0:	f003 f972 	bl	80068d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 80035f4:	66b8      	str	r0, [r7, #104]	; 0x68
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d211      	bcs.n	8003624 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1ec>
            freq_peak_t d;
            d.freq = 0;
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
            d.amplitude = 0;
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
            peaks.push_back(d);
 800360c:	f107 0218 	add.w	r2, r7, #24
 8003610:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f003 f905 	bl	8006826 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 800361c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800361e:	3301      	adds	r3, #1
 8003620:	66bb      	str	r3, [r7, #104]	; 0x68
 8003622:	e7e8      	b.n	80035f6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1be>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003624:	2300      	movs	r3, #0
 8003626:	667b      	str	r3, [r7, #100]	; 0x64
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800362e:	429a      	cmp	r2, r3
 8003630:	d226      	bcs.n	8003680 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x248>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 8003632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003636:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003638:	4618      	mov	r0, r3
 800363a:	f003 f95d 	bl	80068f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	6802      	ldr	r2, [r0, #0]
 8003652:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8003654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003658:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800365a:	4618      	mov	r0, r3
 800365c:	f003 f94c 	bl	80068f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	3301      	adds	r3, #1
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	6842      	ldr	r2, [r0, #4]
 8003676:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800367a:	3301      	adds	r3, #1
 800367c:	667b      	str	r3, [r7, #100]	; 0x64
 800367e:	e7d3      	b.n	8003628 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1f0>
        }

        return EIDSP_OK;
 8003680:	2400      	movs	r4, #0
        ei_vector<freq_peak_t> peaks;
 8003682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003686:	4618      	mov	r0, r3
 8003688:	f003 f8b2 	bl	80067f0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 800368c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe f977 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 8003696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe f972 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 80036a0:	4623      	mov	r3, r4
 80036a2:	4618      	mov	r0, r3
 80036a4:	3770      	adds	r7, #112	; 0x70
 80036a6:	46bd      	mov	sp, r7
 80036a8:	ecbd 8b02 	vpop	{d8}
 80036ac:	bdb0      	pop	{r4, r5, r7, pc}
 80036ae:	bf00      	nop
 80036b0:	fffffc14 	.word	0xfffffc14
 80036b4:	fffffc16 	.word	0xfffffc16
 80036b8:	00000000 	.word	0x00000000

080036bc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 80036bc:	b590      	push	{r4, r7, lr}
 80036be:	b093      	sub	sp, #76	; 0x4c
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6178      	str	r0, [r7, #20]
 80036c4:	6139      	str	r1, [r7, #16]
 80036c6:	60fa      	str	r2, [r7, #12]
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d103      	bne.n	80036de <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d001      	beq.n	80036e2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80036de:	4c7b      	ldr	r4, [pc, #492]	; (80038cc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80036e0:	e0ef      	b.n	80038c2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d001      	beq.n	80036ee <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80036ea:	4c78      	ldr	r4, [pc, #480]	; (80038cc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80036ec:	e0e9      	b.n	80038c2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d105      	bne.n	8003708 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003708:	4c70      	ldr	r4, [pc, #448]	; (80038cc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 800370a:	e0da      	b.n	80038c2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003718:	4c6c      	ldr	r4, [pc, #432]	; (80038cc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 800371a:	e0d2      	b.n	80038c2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	1e5a      	subs	r2, r3, #1
 8003722:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003726:	2300      	movs	r3, #0
 8003728:	2101      	movs	r1, #1
 800372a:	f7fe f900 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 8003734:	4c66      	ldr	r4, [pc, #408]	; (80038d0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003736:	e0bf      	b.n	80038b8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	1e5a      	subs	r2, r3, #1
 800373e:	f107 0018 	add.w	r0, r7, #24
 8003742:	2300      	movs	r3, #0
 8003744:	2101      	movs	r1, #1
 8003746:	f7fe f8f2 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8003750:	4c5f      	ldr	r4, [pc, #380]	; (80038d0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003752:	e0ac      	b.n	80038ae <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003754:	2300      	movs	r3, #0
 8003756:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800375a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	429a      	cmp	r2, r3
 8003764:	d264      	bcs.n	8003830 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x174>
            float t = freq_matrix->buffer[ix];
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003786:	2300      	movs	r3, #0
 8003788:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800378c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	3b01      	subs	r3, #1
 8003796:	429a      	cmp	r2, r3
 8003798:	d244      	bcs.n	8003824 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	edd3 7a00 	vldr	s15, [r3]
 80037aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80037ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b6:	db2f      	blt.n	8003818 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037c0:	3301      	adds	r3, #1
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80037ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d6:	d51f      	bpl.n	8003818 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
                    buckets.buffer[ex] += v;
 80037d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	ed93 7a00 	vldr	s14, [r3]
 80037e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80037f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f8:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800380e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003812:	edc3 7a00 	vstr	s15, [r3]
                    break;
 8003816:	e005      	b.n	8003824 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003818:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800381c:	3301      	adds	r3, #1
 800381e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003822:	e7b3      	b.n	800378c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd0>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003824:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003828:	3301      	adds	r3, #1
 800382a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800382e:	e794      	b.n	800375a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x9e>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003830:	2300      	movs	r3, #0
 8003832:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003836:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	429a      	cmp	r2, r3
 8003842:	d233      	bcs.n	80038ac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f0>
            if (bucket_count.buffer[ex] == 0.0f) {
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	edd3 7a00 	vldr	s15, [r3]
 8003852:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	d109      	bne.n	8003870 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1b4>
                output_matrix->buffer[ex] = 0.0f;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e017      	b.n	80038a0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e4>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8003870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003872:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	edd3 6a00 	vldr	s13, [r3]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	ed93 7a00 	vldr	s14, [r3]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800389c:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 80038a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80038a4:	3301      	adds	r3, #1
 80038a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80038aa:	e7c4      	b.n	8003836 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17a>
            }
        }

        return EIDSP_OK;
 80038ac:	2400      	movs	r4, #0
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 80038ae:	f107 0318 	add.w	r3, r7, #24
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe f866 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 80038b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe f861 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 80038c2:	4623      	mov	r3, r4
 80038c4:	4618      	mov	r0, r3
 80038c6:	374c      	adds	r7, #76	; 0x4c
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd90      	pop	{r4, r7, pc}
 80038cc:	fffffc14 	.word	0xfffffc14
 80038d0:	fffffc16 	.word	0xfffffc16

080038d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	ed2d 8b02 	vpush	{d8}
 80038da:	b09b      	sub	sp, #108	; 0x6c
 80038dc:	af02      	add	r7, sp, #8
 80038de:	6178      	str	r0, [r7, #20]
 80038e0:	6139      	str	r1, [r7, #16]
 80038e2:	60fa      	str	r2, [r7, #12]
 80038e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80038e8:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d001      	beq.n	80038f6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80038f2:	4c80      	ldr	r4, [pc, #512]	; (8003af4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 80038f4:	e192      	b.n	8003c1c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	88fa      	ldrh	r2, [r7, #6]
 8003904:	0852      	lsrs	r2, r2, #1
 8003906:	b292      	uxth	r2, r2
 8003908:	3201      	adds	r2, #1
 800390a:	4293      	cmp	r3, r2
 800390c:	d001      	beq.n	8003912 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800390e:	4c79      	ldr	r4, [pc, #484]	; (8003af4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 8003910:	e184      	b.n	8003c1c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	0852      	lsrs	r2, r2, #1
 8003922:	b292      	uxth	r2, r2
 8003924:	3201      	adds	r2, #1
 8003926:	4293      	cmp	r3, r2
 8003928:	d001      	beq.n	800392e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800392a:	4c72      	ldr	r4, [pc, #456]	; (8003af4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 800392c:	e176      	b.n	8003c1c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (input_matrix->buffer == NULL) {
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003936:	4c70      	ldr	r4, [pc, #448]	; (8003af8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003938:	e170      	b.n	8003c1c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->buffer == NULL) {
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003942:	4c6d      	ldr	r4, [pc, #436]	; (8003af8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003944:	e16a      	b.n	8003c1c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->buffer == NULL) {
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800394e:	4c6a      	ldr	r4, [pc, #424]	; (8003af8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003950:	e164      	b.n	8003c1c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003962:	f7fd ffe4 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 800396c:	4c62      	ldr	r4, [pc, #392]	; (8003af8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 800396e:	e150      	b.n	8003c12 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>

        uint16_t nperseg = n_fft;
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	d904      	bls.n	800398a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003988:	e006      	b.n	8003998 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 800398a:	88fa      	ldrh	r2, [r7, #6]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	429a      	cmp	r2, r3
 8003992:	d201      	bcs.n	8003998 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	647b      	str	r3, [r7, #68]	; 0x44
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003998:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800399c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80039a0:	2300      	movs	r3, #0
 80039a2:	2101      	movs	r1, #1
 80039a4:	f7fd ffc3 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 80039ae:	4c52      	ldr	r4, [pc, #328]	; (8003af8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 80039b0:	e12a      	b.n	8003c08 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80039b8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80039bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d20d      	bcs.n	80039e0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x10c>
            triage_segments.buffer[ix] = 1.0f;
 80039c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80039d2:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 80039d4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80039d8:	3301      	adds	r3, #1
 80039da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80039de:	e7eb      	b.n	80039b8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe4>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 80039e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80039e4:	ee07 3a90 	vmov	s15, r3
 80039e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80039f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039fc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d826      	bhi.n	8003a62 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x18e>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 8003a14:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a2a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a32:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003a36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a3a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003a3e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a52:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003a56:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003a60:	e7d1      	b.n	8003a06 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 8003a62:	f107 001c 	add.w	r0, r7, #28
 8003a66:	2300      	movs	r3, #0
 8003a68:	2201      	movs	r2, #1
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	f7fd ff5f 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
 8003a76:	4c20      	ldr	r4, [pc, #128]	; (8003af8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003a78:	e0c1      	b.n	8003bfe <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 8003a7a:	f107 021c 	add.w	r2, r7, #28
 8003a7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fa55 	bl	8001f34 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8003a8a:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8003a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c2>
            EIDSP_ERR(ret);
 8003a92:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003a94:	e0b3      	b.n	8003bfe <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 8003a96:	f107 021c 	add.w	r2, r7, #28
 8003a9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fe f9af 	bl	8001e04 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8003aa6:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8003aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1de>
            EIDSP_ERR(ret);
 8003aae:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003ab0:	e0a5      	b.n	8003bfe <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f017 fb26 	bl	801b110 <_Z9ei_callocjj>
 8003ac4:	64f8      	str	r0, [r7, #76]	; 0x4c
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 8003ac6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ac8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003adc:	f7fe fb44 	bl	8002168 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 8003ae0:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8003ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d009      	beq.n	8003afc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8003ae8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003aea:	f017 fb1f 	bl	801b12c <_Z7ei_freePv>
            EIDSP_ERR(ret);
 8003aee:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003af0:	e085      	b.n	8003bfe <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
 8003af2:	bf00      	nop
 8003af4:	fffffc14 	.word	0xfffffc14
 8003af8:	fffffc16 	.word	0xfffffc16
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d872      	bhi.n	8003bf6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x322>
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8003b10:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b18:	4413      	add	r3, r2
 8003b1a:	ed93 7a00 	vldr	s14, [r3]
 8003b1e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b26:	4413      	add	r3, r2
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 8003b30:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b38:	4413      	add	r3, r2
 8003b3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b3e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b46:	4413      	add	r3, r2
 8003b48:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b50:	eeb0 0a67 	vmov.f32	s0, s15
 8003b54:	f7fd fd28 	bl	80015a8 <_ZSt3absf>
 8003b58:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8003b5c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b64:	4413      	add	r3, r2
 8003b66:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003b6a:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 8003b6e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b76:	4413      	add	r3, r2
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 8003b7e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b86:	4413      	add	r3, r2
 8003b88:	ed93 7a00 	vldr	s14, [r3]
 8003b8c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b94:	4413      	add	r3, r2
 8003b96:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9e:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d00f      	beq.n	8003bd0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x2fc>
                fft_output[ix].r *= 2;
 8003bb0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bb8:	4413      	add	r3, r2
 8003bba:	edd3 7a00 	vldr	s15, [r3]
 8003bbe:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bc6:	4413      	add	r3, r2
 8003bc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bcc:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 8003bd0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bd8:	441a      	add	r2, r3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003bea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003bf4:	e785      	b.n	8003b02 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22e>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8003bf6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003bf8:	f017 fa98 	bl	801b12c <_Z7ei_freePv>

        return EIDSP_OK;
 8003bfc:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 8003bfe:	f107 031c 	add.w	r3, r7, #28
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fd febe 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fd feb9 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003c12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fd feb4 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 8003c1c:	4623      	mov	r3, r4
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3764      	adds	r7, #100	; 0x64
 8003c22:	46bd      	mov	sp, r7
 8003c24:	ecbd 8b02 	vpop	{d8}
 8003c28:	bd90      	pop	{r4, r7, pc}
 8003c2a:	bf00      	nop

08003c2c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>:

    static int subtract_mean(matrix_t* input_matrix) {
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b089      	sub	sp, #36	; 0x24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	f107 000c 	add.w	r0, r7, #12
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f7fd fe75 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x22>
 8003c4a:	4c12      	ldr	r4, [pc, #72]	; (8003c94 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x68>)
 8003c4c:	e018      	b.n	8003c80 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        int ret = numpy::mean(input_matrix, &mean_matrix);
 8003c4e:	f107 030c 	add.w	r3, r7, #12
 8003c52:	4619      	mov	r1, r3
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7fe f96d 	bl	8001f34 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8003c5a:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c62:	4c0d      	ldr	r4, [pc, #52]	; (8003c98 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8003c64:	e00c      	b.n	8003c80 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 8003c66:	f107 030c 	add.w	r3, r7, #12
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7fe f8c9 	bl	8001e04 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8003c72:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x52>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c7a:	4c07      	ldr	r4, [pc, #28]	; (8003c98 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8003c7c:	e000      	b.n	8003c80 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        return EIDSP_OK;
 8003c7e:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fd fe7d 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 8003c8a:	4623      	mov	r3, r4
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3724      	adds	r7, #36	; 0x24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd90      	pop	{r4, r7, pc}
 8003c94:	fffffc16 	.word	0xfffffc16
 8003c98:	fffffc14 	.word	0xfffffc14

08003c9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 8003c9c:	b5b0      	push	{r4, r5, r7, lr}
 8003c9e:	b0b0      	sub	sp, #192	; 0xc0
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	6178      	str	r0, [r7, #20]
 8003ca4:	6139      	str	r1, [r7, #16]
 8003ca6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003caa:	4611      	mov	r1, r2
 8003cac:	edc7 0a01 	vstr	s1, [r7, #4]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	ed87 1a00 	vstr	s2, [r7]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	72fb      	strb	r3, [r7, #11]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d001      	beq.n	8003cce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003cca:	4caf      	ldr	r4, [pc, #700]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003ccc:	e227      	b.n	800411e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	689d      	ldr	r5, [r3, #8]
 8003cd2:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8003cd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2001      	movs	r0, #1
 8003ce0:	f000 fa22 	bl	8004128 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	429d      	cmp	r5, r3
 8003ce8:	bf14      	ite	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	2300      	moveq	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003cf4:	4ca4      	ldr	r4, [pc, #656]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003cf6:	e212      	b.n	800411e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (edges_matrix_in->cols != 1) {
 8003cf8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d001      	beq.n	8003d06 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d02:	4ca1      	ldr	r4, [pc, #644]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003d04:	e20b      	b.n	800411e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        int ret;

        size_t axes = input_matrix->rows;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        EI_TRY(processing::subtract_mean(input_matrix) );
 8003d0e:	6938      	ldr	r0, [r7, #16]
 8003d10:	f7ff ff8c 	bl	8003c2c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8003d14:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8003d18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8a>
 8003d20:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003d24:	e1fb      	b.n	800411e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>

        // apply filter
        if (filter_type == filter_lowpass) {
 8003d26:	7afb      	ldrb	r3, [r7, #11]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d110      	bne.n	8003d4e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xb2>
            ret = spectral::processing::butterworth_lowpass_filter(
 8003d2c:	7abb      	ldrb	r3, [r7, #10]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	edd7 0a01 	vldr	s1, [r7, #4]
 8003d34:	ed97 0a03 	vldr	s0, [r7, #12]
 8003d38:	6938      	ldr	r0, [r7, #16]
 8003d3a:	f7ff fa0b 	bl	8003154 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8003d3e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003d42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d015      	beq.n	8003d76 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d4a:	4c8f      	ldr	r4, [pc, #572]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003d4c:	e1e7      	b.n	800411e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }
        else if (filter_type == filter_highpass) {
 8003d4e:	7afb      	ldrb	r3, [r7, #11]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d110      	bne.n	8003d76 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
            ret = spectral::processing::butterworth_highpass_filter(
 8003d54:	7abb      	ldrb	r3, [r7, #10]
 8003d56:	4619      	mov	r1, r3
 8003d58:	edd7 0a01 	vldr	s1, [r7, #4]
 8003d5c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003d60:	6938      	ldr	r0, [r7, #16]
 8003d62:	f7ff fa2d 	bl	80031c0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8003d66:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003d6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d72:	4c85      	ldr	r4, [pc, #532]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003d74:	e1d3      	b.n	800411e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8003d76:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d82:	f7fd fdd4 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xf6>
 8003d8e:	4c7f      	ldr	r4, [pc, #508]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003d90:	e1c0      	b.n	8004114 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        ret = numpy::rms(input_matrix, &rms_matrix);
 8003d92:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003d96:	4619      	mov	r1, r3
 8003d98:	6938      	ldr	r0, [r7, #16]
 8003d9a:	f7fe f88f 	bl	8001ebc <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8003d9e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret != EIDSP_OK) {
 8003da2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x112>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003daa:	4c77      	ldr	r4, [pc, #476]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003dac:	e1b2      	b.n	8004114 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 8003dae:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	461a      	mov	r2, r3
 8003db6:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dc0:	f7fd fdb5 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x132>
 8003dca:	4c70      	ldr	r4, [pc, #448]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003dcc:	e19d      	b.n	800410a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	f080 8193 	bcs.w	8004108 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46c>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	689d      	ldr	r5, [r3, #8]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003dfe:	462a      	mov	r2, r5
 8003e00:	2101      	movs	r1, #1
 8003e02:	f7fd fd94 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x176>
 8003e0c:	4c5f      	ldr	r4, [pc, #380]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003e0e:	2500      	movs	r5, #0
 8003e10:	e16d      	b.n	80040ee <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 8003e12:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003e22:	2300      	movs	r3, #0
 8003e24:	2101      	movs	r1, #1
 8003e26:	f7fd fd82 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x19a>
 8003e30:	4c56      	ldr	r4, [pc, #344]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003e32:	2500      	movs	r5, #0
 8003e34:	e151      	b.n	80040da <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 8003e36:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003e38:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003e3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e3c:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8003e3e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	462b      	mov	r3, r5
 8003e46:	f7fe f8b1 	bl	8001fac <_ZN2ei5numpy4rfftEPKfjPfjj>
 8003e4a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (ret != EIDSP_OK) {
 8003e4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1c0>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003e56:	4c4c      	ldr	r4, [pc, #304]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003e58:	2500      	movs	r5, #0
 8003e5a:	e13e      	b.n	80040da <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8003e5c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003e60:	ee07 3a90 	vmov	s15, r3
 8003e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e74:	eeb0 0a47 	vmov.f32	s0, s14
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fd ff49 	bl	8001d10 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8003e7e:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8003e82:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003e86:	2300      	movs	r3, #0
 8003e88:	2202      	movs	r2, #2
 8003e8a:	f7fd fd50 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1fe>
 8003e94:	4c3d      	ldr	r4, [pc, #244]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003e96:	2500      	movs	r5, #0
 8003e98:	e115      	b.n	80040c6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 8003e9a:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8003e9e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003ea2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ea6:	edd7 0a00 	vldr	s1, [r7]
 8003eaa:	ed97 0a03 	vldr	s0, [r7, #12]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff fac2 	bl	8003438 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 8003eb4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 8003eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x22a>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003ec0:	4c31      	ldr	r4, [pc, #196]	; (8003f88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003ec2:	2500      	movs	r5, #0
 8003ec4:	e0ff      	b.n	80040c6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 8003ec6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2101      	movs	r1, #1
 8003eda:	f7fd fd28 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d102      	bne.n	8003eea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x24e>
 8003ee4:	4c29      	ldr	r4, [pc, #164]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003ee6:	2500      	movs	r5, #0
 8003ee8:	e0e3      	b.n	80040b2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x416>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 8003eea:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003efa:	2300      	movs	r3, #0
 8003efc:	2101      	movs	r1, #1
 8003efe:	f7fd fd16 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d102      	bne.n	8003f0e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x272>
 8003f08:	4c20      	ldr	r4, [pc, #128]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003f0a:	2500      	movs	r5, #0
 8003f0c:	e0c7      	b.n	800409e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
            ret = spectral::processing::periodogram(&axis_matrix,
 8003f0e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003f12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f16:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003f1a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003f1e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003f22:	f7ff fcd7 	bl	80038d4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 8003f26:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 8003f2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x29e>
                EIDSP_ERR(ret);
 8003f32:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003f36:	2500      	movs	r5, #0
 8003f38:	e0b1      	b.n	800409e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 8003f3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	1e59      	subs	r1, r3, #1
 8003f42:	f107 0018 	add.w	r0, r7, #24
 8003f46:	2300      	movs	r3, #0
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f7fd fcf0 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2be>
 8003f54:	4c0d      	ldr	r4, [pc, #52]	; (8003f8c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003f56:	2500      	movs	r5, #0
 8003f58:	e097      	b.n	800408a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ee>
            ret = spectral::processing::spectral_power_edges(
 8003f5a:	f107 0318 	add.w	r3, r7, #24
 8003f5e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003f62:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003f66:	ed97 0a03 	vldr	s0, [r7, #12]
 8003f6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f6e:	f7ff fba5 	bl	80036bc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 8003f72:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 8003f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f4>
                EIDSP_ERR(ret);
 8003f7e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003f82:	2500      	movs	r5, #0
 8003f84:	e081      	b.n	800408a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ee>
 8003f86:	bf00      	nop
 8003f88:	fffffc14 	.word	0xfffffc14
 8003f8c:	fffffc16 	.word	0xfffffc16
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            size_t fx = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            features_row[fx++] = rms_matrix.buffer[row];
 8003fae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003fbe:	1c59      	adds	r1, r3, #1
 8003fc0:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003fca:	440b      	add	r3, r1
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d22c      	bcs.n	800403a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x39e>
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 8003fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	441a      	add	r2, r3
 8003ff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ff4:	1c59      	adds	r1, r3, #1
 8003ff6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004000:	440b      	add	r3, r1
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 8004006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800400a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800400e:	fb01 f303 	mul.w	r3, r1, r3
 8004012:	3301      	adds	r3, #1
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	441a      	add	r2, r3
 8004018:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800401c:	1c59      	adds	r1, r3, #1
 800401e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004028:	440b      	add	r3, r1
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 800402e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004032:	3301      	adds	r3, #1
 8004034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004038:	e7cd      	b.n	8003fd6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33a>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 800403a:	2300      	movs	r3, #0
 800403c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004046:	429a      	cmp	r2, r3
 8004048:	d21e      	bcs.n	8004088 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ec>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	ed93 7a00 	vldr	s14, [r3]
 800405e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800406e:	4413      	add	r3, r2
 8004070:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004078:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 800407c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004080:	3301      	adds	r3, #1
 8004082:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004086:	e7db      	b.n	8004040 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3a4>
 8004088:	2501      	movs	r5, #1
 800408a:	f107 0318 	add.w	r3, r7, #24
 800408e:	4618      	mov	r0, r3
 8004090:	f7fd fc78 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8004094:	2d01      	cmp	r5, #1
 8004096:	d001      	beq.n	800409c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x400>
 8004098:	2500      	movs	r5, #0
 800409a:	e000      	b.n	800409e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
 800409c:	2501      	movs	r5, #1
 800409e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd fc6e 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 80040a8:	2d01      	cmp	r5, #1
 80040aa:	d001      	beq.n	80040b0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x414>
 80040ac:	2500      	movs	r5, #0
 80040ae:	e000      	b.n	80040b2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x416>
 80040b0:	2501      	movs	r5, #1
 80040b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd fc64 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 80040bc:	2d01      	cmp	r5, #1
 80040be:	d001      	beq.n	80040c4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x428>
 80040c0:	2500      	movs	r5, #0
 80040c2:	e000      	b.n	80040c6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
 80040c4:	2501      	movs	r5, #1
 80040c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fd fc5a 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 80040d0:	2d01      	cmp	r5, #1
 80040d2:	d001      	beq.n	80040d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43c>
 80040d4:	2500      	movs	r5, #0
 80040d6:	e000      	b.n	80040da <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
 80040d8:	2501      	movs	r5, #1
 80040da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fd fc50 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 80040e4:	2d01      	cmp	r5, #1
 80040e6:	d001      	beq.n	80040ec <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
 80040e8:	2500      	movs	r5, #0
 80040ea:	e000      	b.n	80040ee <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>
 80040ec:	2501      	movs	r5, #1
 80040ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fd fc46 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 80040f8:	2d01      	cmp	r5, #1
 80040fa:	d106      	bne.n	800410a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80040fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004100:	3301      	adds	r3, #1
 8004102:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004106:	e665      	b.n	8003dd4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x138>
            }
        }

        return EIDSP_OK;
 8004108:	2400      	movs	r4, #0
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 800410a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800410e:	4618      	mov	r0, r3
 8004110:	f7fd fc38 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8004114:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004118:	4618      	mov	r0, r3
 800411a:	f7fd fc33 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 800411e:	4623      	mov	r3, r4
 8004120:	4618      	mov	r0, r3
 8004122:	37b8      	adds	r7, #184	; 0xb8
 8004124:	46bd      	mov	sp, r7
 8004126:	bdb0      	pop	{r4, r5, r7, pc}

08004128 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	3301      	adds	r3, #1
 8004144:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4413      	add	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d004      	beq.n	8004160 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	4413      	add	r3, r2
 800415c:	3b01      	subs	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
        }
        return count;
 8004160:	697b      	ldr	r3, [r7, #20]
    }
 8004162:	4618      	mov	r0, r3
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v1(
 8004170:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8004174:	b0b3      	sub	sp, #204	; 0xcc
 8004176:	af04      	add	r7, sp, #16
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_ptr,
        const float sampling_freq)
    {
        // scale the signal
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	edd3 7a02 	vldr	s15, [r3, #8]
 8004188:	eeb0 0a67 	vmov.f32	s0, s15
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7fd fdbf 	bl	8001d10 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8004192:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8004196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x3e>
            ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 800419e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80041a2:	488c      	ldr	r0, [pc, #560]	; (80043d4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x264>)
 80041a4:	f001 feba 	bl	8005f1c <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 80041a8:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80041ac:	e10b      	b.n	80043c6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // transpose the matrix so we have one row per axis (nifty!)
        ret = numpy::transpose(input_matrix);
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7fd fd2d 	bl	8001c0e <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 80041b4:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 80041b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x60>
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 80041c0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80041c4:	4884      	ldr	r0, [pc, #528]	; (80043d8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x268>)
 80041c6:	f001 fea9 	bl	8005f1c <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 80041ca:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80041ce:	e0fa      	b.n	80043c6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // the spectral edges that we want to calculate
        matrix_t edges_matrix_in(64, 1);
 80041d0:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80041d4:	2300      	movs	r3, #0
 80041d6:	2201      	movs	r2, #1
 80041d8:	2140      	movs	r1, #64	; 0x40
 80041da:	f7fd fba8 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
        size_t edge_matrix_ix = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        char spectral_str[128] = { 0 };
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	f107 0318 	add.w	r3, r7, #24
 80041ec:	227c      	movs	r2, #124	; 0x7c
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f01f fc45 	bl	8023a80 <memset>
        if (strlen(config_ptr->spectral_power_edges) > sizeof(spectral_str) - 1) {
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fc f842 	bl	8000284 <strlen>
 8004200:	4603      	mov	r3, r0
 8004202:	2b7f      	cmp	r3, #127	; 0x7f
 8004204:	d901      	bls.n	800420a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x9a>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8004206:	4c75      	ldr	r4, [pc, #468]	; (80043dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x26c>)
 8004208:	e0d8      	b.n	80043bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }
        memcpy(
            spectral_str,
            config_ptr->spectral_power_edges,
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
        memcpy(
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc f836 	bl	8000284 <strlen>
 8004218:	4602      	mov	r2, r0
 800421a:	f107 0314 	add.w	r3, r7, #20
 800421e:	4621      	mov	r1, r4
 8004220:	4618      	mov	r0, r3
 8004222:	f01f fc05 	bl	8023a30 <memcpy>
            strlen(config_ptr->spectral_power_edges));

        // convert spectral_power_edges (string) into float array
        char *spectral_ptr = spectral_str;
 8004226:	f107 0314 	add.w	r3, r7, #20
 800422a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 800422e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d03f      	beq.n	80042b6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x146>
            while ((*spectral_ptr) == ' ') {
 8004236:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b20      	cmp	r3, #32
 800423e:	d105      	bne.n	800424c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xdc>
                spectral_ptr++;
 8004240:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004244:	3301      	adds	r3, #1
 8004246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            while ((*spectral_ptr) == ' ') {
 800424a:	e7f4      	b.n	8004236 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc6>
            }

            edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 800424c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8004250:	f01f fb92 	bl	8023978 <atof>
 8004254:	ec59 8b10 	vmov	r8, r9, d0
 8004258:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800425c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004260:	1c59      	adds	r1, r3, #1
 8004262:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	18d4      	adds	r4, r2, r3
 800426a:	4640      	mov	r0, r8
 800426c:	4649      	mov	r1, r9
 800426e:	f7fc fcc5 	bl	8000bfc <__aeabi_d2f>
 8004272:	4603      	mov	r3, r0
 8004274:	6023      	str	r3, [r4, #0]

            // find next (spectral) delimiter (or '\0' character)
            while ((*spectral_ptr != ',')) {
 8004276:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b2c      	cmp	r3, #44	; 0x2c
 800427e:	d00b      	beq.n	8004298 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x128>
                spectral_ptr++;
 8004280:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004284:	3301      	adds	r3, #1
 8004286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (*spectral_ptr == '\0')
 800428a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d000      	beq.n	8004296 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x126>
            while ((*spectral_ptr != ',')) {
 8004294:	e7ef      	b.n	8004276 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x106>
                    break;
 8004296:	bf00      	nop
            }

            if (*spectral_ptr == '\0') {
 8004298:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13a>
                spectral_ptr = NULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042a8:	e7c1      	b.n	800422e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
            }
            else {
                spectral_ptr++;
 80042aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042ae:	3301      	adds	r3, #1
 80042b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 80042b4:	e7bb      	b.n	800422e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
            }
        }
        edges_matrix_in.rows = edge_matrix_ix;
 80042b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        // calculate how much room we need for the output matrix
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
            true,
            config_ptr->spectral_peaks_count,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80042c2:	4619      	mov	r1, r3
            edges_matrix_in.rows);
 80042c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80042c8:	461a      	mov	r2, r3
 80042ca:	2001      	movs	r0, #1
 80042cc:	f7ff ff2c 	bl	8004128 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80042d0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
        if (output_matrix->cols * output_matrix->rows !=
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	6852      	ldr	r2, [r2, #4]
 80042dc:	fb03 f202 	mul.w	r2, r3, r2
            static_cast<uint32_t>(output_matrix_cols * config_ptr->axes)) {
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	4619      	mov	r1, r3
 80042e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
        if (output_matrix->cols * output_matrix->rows !=
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d001      	beq.n	80042f6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x186>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80042f2:	4c3b      	ldr	r4, [pc, #236]	; (80043e0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x270>)
 80042f4:	e062      	b.n	80043bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        output_matrix->cols = output_matrix_cols;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80042fc:	609a      	str	r2, [r3, #8]
        output_matrix->rows = config_ptr->axes;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	461a      	mov	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	605a      	str	r2, [r3, #4]

        spectral::filter_t filter_type;
        if (strcmp(config_ptr->filter_type, "low") == 0) {
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4935      	ldr	r1, [pc, #212]	; (80043e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x274>)
 800430e:	4618      	mov	r0, r3
 8004310:	f7fb ffae 	bl	8000270 <strcmp>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d103      	bne.n	8004322 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b2>
            filter_type = spectral::filter_lowpass;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8004320:	e00f      	b.n	8004342 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else if (strcmp(config_ptr->filter_type, "high") == 0) {
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	4930      	ldr	r1, [pc, #192]	; (80043e8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x278>)
 8004328:	4618      	mov	r0, r3
 800432a:	f7fb ffa1 	bl	8000270 <strcmp>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d103      	bne.n	800433c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1cc>
            filter_type = spectral::filter_highpass;
 8004334:	2302      	movs	r3, #2
 8004336:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800433a:	e002      	b.n	8004342 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else {
            filter_type = spectral::filter_none;
 800433c:	2300      	movs	r3, #0
 800433e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        ret = spectral::feature::spectral_analysis(
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	edd3 7a04 	vldr	s15, [r3, #16]
            output_matrix,
            input_matrix,
            sampling_freq,
            filter_type,
            config_ptr->filter_cutoff,
            config_ptr->filter_order,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
        ret = spectral::feature::spectral_analysis(
 800434c:	b2dc      	uxtb	r4, r3
            config_ptr->fft_length,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
        ret = spectral::feature::spectral_analysis(
 8004352:	b29b      	uxth	r3, r3
            config_ptr->spectral_peaks_count,
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6a12      	ldr	r2, [r2, #32]
        ret = spectral::feature::spectral_analysis(
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8004360:	f897 00af 	ldrb.w	r0, [r7, #175]	; 0xaf
 8004364:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8004368:	9102      	str	r1, [sp, #8]
 800436a:	9201      	str	r2, [sp, #4]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	eeb0 1a47 	vmov.f32	s2, s14
 8004372:	4623      	mov	r3, r4
 8004374:	eef0 0a67 	vmov.f32	s1, s15
 8004378:	4602      	mov	r2, r0
 800437a:	ed97 0a00 	vldr	s0, [r7]
 800437e:	68f9      	ldr	r1, [r7, #12]
 8004380:	68b8      	ldr	r0, [r7, #8]
 8004382:	f7ff fc8b 	bl	8003c9c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 8004386:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            config_ptr->spectral_peaks_threshold,
            &edges_matrix_in);
        if (ret != EIDSP_OK) {
 800438a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x232>
            ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 8004392:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004396:	4815      	ldr	r0, [pc, #84]	; (80043ec <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x27c>)
 8004398:	f001 fdc0 	bl	8005f1c <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 800439c:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80043a0:	e00c      	b.n	80043bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        // flatten again
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043ac:	fb03 f202 	mul.w	r2, r3, r2
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]
        output_matrix->rows = 1;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2201      	movs	r2, #1
 80043b8:	605a      	str	r2, [r3, #4]

        return EIDSP_OK;
 80043ba:	2400      	movs	r4, #0
        matrix_t edges_matrix_in(64, 1);
 80043bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fd fadf 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
    }
 80043c6:	4623      	mov	r3, r4
 80043c8:	4618      	mov	r0, r3
 80043ca:	37bc      	adds	r7, #188	; 0xbc
 80043cc:	46bd      	mov	sp, r7
 80043ce:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80043d2:	bf00      	nop
 80043d4:	08027ea0 	.word	0x08027ea0
 80043d8:	08027ec4 	.word	0x08027ec4
 80043dc:	fffffc10 	.word	0xfffffc10
 80043e0:	fffffc14 	.word	0xfffffc14
 80043e4:	08027eec 	.word	0x08027eec
 80043e8:	08027ef0 	.word	0x08027ef0
 80043ec:	08027ef8 	.word	0x08027ef8

080043f0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>:

    static void get_start_stop_bin(
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	ed87 0a05 	vstr	s0, [r7, #20]
 80043fa:	6138      	str	r0, [r7, #16]
 80043fc:	edc7 0a03 	vstr	s1, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	70fb      	strb	r3, [r7, #3]
        size_t *stop_bin,
        bool is_high_pass)
    {
        // we want to find n such that fcutoff < sample_f / fft * n ( or > for high pass )
        // also, + - half bin width (sample_f/(fft*2)) for high / low pass
        float bin = filter_cutoff * fft_length / sampling_freq;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004410:	edd7 7a03 	vldr	s15, [r7, #12]
 8004414:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004418:	ed97 7a05 	vldr	s14, [r7, #20]
 800441c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004420:	edc7 7a07 	vstr	s15, [r7, #28]
        if (is_high_pass) {
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d021      	beq.n	800446e <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x7e>
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
 800442a:	69f8      	ldr	r0, [r7, #28]
 800442c:	f7fc f896 	bl	800055c <__aeabi_f2d>
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xb0>)
 8004436:	f7fb ff31 	bl	800029c <__aeabi_dsub>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4610      	mov	r0, r2
 8004440:	4619      	mov	r1, r3
 8004442:	f7fc fbbb 	bl	8000bbc <__aeabi_d2uiz>
 8004446:	4603      	mov	r3, r0
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	601a      	str	r2, [r3, #0]
            // don't use the DC bin b/c it's zero
            *start_bin = *start_bin == 0 ? 1 : *start_bin;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x6c>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	e000      	b.n	800445e <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x6e>
 800445c:	2301      	movs	r3, #1
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	6013      	str	r3, [r2, #0]
            *stop_bin = fft_length / 2 + 1; // go one past
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	601a      	str	r2, [r3, #0]
        }
        else {
            *start_bin = 1;
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
        }
    }
 800446c:	e014      	b.n	8004498 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xa8>
            *start_bin = 1;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
 8004474:	69f8      	ldr	r0, [r7, #28]
 8004476:	f7fc f871 	bl	800055c <__aeabi_f2d>
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xb0>)
 8004480:	f7fb ff0e 	bl	80002a0 <__adddf3>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4610      	mov	r0, r2
 800448a:	4619      	mov	r1, r3
 800448c:	f7fc fb96 	bl	8000bbc <__aeabi_d2uiz>
 8004490:	4603      	mov	r3, r0
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	601a      	str	r2, [r3, #0]
    }
 8004498:	bf00      	nop
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	3fe00000 	.word	0x3fe00000

080044a4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v2(
 80044a4:	b5b0      	push	{r4, r5, r7, lr}
 80044a6:	b0a8      	sub	sp, #160	; 0xa0
 80044a8:	af04      	add	r7, sp, #16
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        // transpose the matrix so we have one row per axis
        numpy::transpose_in_place(input_matrix);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7fd fb1a 	bl	8001aee <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

        // func tests for scale of 1 and does a no op in that case
        EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80044c0:	eeb0 0a67 	vmov.f32	s0, s15
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7fd fc23 	bl	8001d10 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80044ca:	6738      	str	r0, [r7, #112]	; 0x70
 80044cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x32>
 80044d2:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80044d4:	e19e      	b.n	8004814 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>

        bool do_filter = false;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        bool is_high_pass;

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	49ab      	ldr	r1, [pc, #684]	; (8004790 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2ec>)
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fb fec4 	bl	8000270 <strcmp>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d11e      	bne.n	800452c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x88>
            if( config->filter_order ) {
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d013      	beq.n	800451e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	4619      	mov	r1, r3
 8004504:	eef0 0a67 	vmov.f32	s1, s15
 8004508:	ed97 0a00 	vldr	s0, [r7]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7fe fe21 	bl	8003154 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8004512:	66b8      	str	r0, [r7, #104]	; 0x68
 8004514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
 800451a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800451c:	e17a      	b.n	8004814 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            is_high_pass = false;
 8004524:	2300      	movs	r3, #0
 8004526:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800452a:	e026      	b.n	800457a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4998      	ldr	r1, [pc, #608]	; (8004794 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f0>)
 8004532:	4618      	mov	r0, r3
 8004534:	f7fb fe9c 	bl	8000270 <strcmp>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d11d      	bne.n	800457a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
            if( config->filter_order ) {
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d013      	beq.n	800456e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	edd3 7a04 	vldr	s15, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	4619      	mov	r1, r3
 8004554:	eef0 0a67 	vmov.f32	s1, s15
 8004558:	ed97 0a00 	vldr	s0, [r7]
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7fe fe2f 	bl	80031c0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8004562:	66f8      	str	r0, [r7, #108]	; 0x6c
 8004564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
 800456a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800456c:	e152      	b.n	8004814 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 800456e:	2301      	movs	r3, #1
 8004570:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            is_high_pass = true;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        }

        EI_TRY(processing::subtract_mean(input_matrix));
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff fb56 	bl	8003c2c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8004580:	6678      	str	r0, [r7, #100]	; 0x64
 8004582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xe8>
 8004588:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800458a:	e143      	b.n	8004814 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>

        // Figure bins we remove based on filter cutoff
        size_t start_bin, stop_bin;
        if (do_filter) {
 800458c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004590:	2b00      	cmp	r3, #0
 8004592:	d012      	beq.n	80045ba <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x116>
            get_start_stop_bin(
                sampling_freq,
                config->fft_length,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
            get_start_stop_bin(
 8004598:	4618      	mov	r0, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	edd3 7a04 	vldr	s15, [r3, #16]
 80045a0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80045a4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80045a8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80045ac:	eef0 0a67 	vmov.f32	s1, s15
 80045b0:	ed97 0a00 	vldr	s0, [r7]
 80045b4:	f7ff ff1c 	bl	80043f0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>
 80045b8:	e008      	b.n	80045cc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x128>
                &start_bin,
                &stop_bin,
                is_high_pass);
        }
        else {
            start_bin = 1;
 80045ba:	2301      	movs	r3, #1
 80045bc:	64bb      	str	r3, [r7, #72]	; 0x48
            stop_bin = config->fft_length / 2 + 1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	0fda      	lsrs	r2, r3, #31
 80045c4:	4413      	add	r3, r2
 80045c6:	105b      	asrs	r3, r3, #1
 80045c8:	3301      	adds	r3, #1
 80045ca:	647b      	str	r3, [r7, #68]	; 0x44
        }
        size_t num_bins = stop_bin - start_bin;
 80045cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	663b      	str	r3, [r7, #96]	; 0x60

        float *feature_out = output_matrix->buffer;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80045dc:	2300      	movs	r3, #0
 80045de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80045ea:	429a      	cmp	r2, r3
 80045ec:	f080 8111 	bcs.w	8004812 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36e>
            float *data_window = input_matrix->get_row_ptr(row);
 80045f0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7fd f9db 	bl	80019b0 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80045fa:	65f8      	str	r0, [r7, #92]	; 0x5c
            size_t data_size = input_matrix->cols;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	65bb      	str	r3, [r7, #88]	; 0x58

            matrix_t rms_in_matrix(1, data_size, data_window);
 8004602:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004608:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800460a:	2101      	movs	r1, #1
 800460c:	f7fd f98f 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
            matrix_t rms_out_matrix(1, 1, feature_out);
 8004610:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004614:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004618:	2201      	movs	r2, #1
 800461a:	2101      	movs	r1, #1
 800461c:	f7fd f987 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
 8004620:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004624:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f7fd fc46 	bl	8001ebc <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8004630:	6578      	str	r0, [r7, #84]	; 0x54
 8004632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x19a>
 8004638:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800463a:	2500      	movs	r5, #0
 800463c:	e0d2      	b.n	80047e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x340>

            feature_out++;
 800463e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004642:	3304      	adds	r3, #4
 8004644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            // Standard Deviation
            float stddev = *(feature_out-1); //= sqrt(numpy::variance(data_window, data_size));
 8004648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800464c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8004650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            if (stddev == 0.0f) {
 8004654:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004658:	eef5 7a40 	vcmp.f32	s15, #0.0
 800465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004660:	d102      	bne.n	8004668 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1c4>
                stddev = 1e-10f;
 8004662:	4b4d      	ldr	r3, [pc, #308]	; (8004798 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f4>)
 8004664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            // Substitute 0 for mean (b/c it is subtracted out above)
            // Skew becomes: mean(X^3) / stddev^3
            // Kurtosis becomes: mean(X^4) / stddev^4
            // Note, this is the Fisher definition of Kurtosis, so subtract 3
            // (see https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html)
            float s_sum = 0;
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	67fb      	str	r3, [r7, #124]	; 0x7c
            float k_sum = 0;
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	67bb      	str	r3, [r7, #120]	; 0x78
            float temp;
            for (size_t i = 0; i < data_size; i++) {
 8004674:	2300      	movs	r3, #0
 8004676:	677b      	str	r3, [r7, #116]	; 0x74
 8004678:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800467a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800467c:	429a      	cmp	r2, r3
 800467e:	d233      	bcs.n	80046e8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x244>
                temp = data_window[i] * data_window[i] * data_window[i];
 8004680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004686:	4413      	add	r3, r2
 8004688:	ed93 7a00 	vldr	s14, [r3]
 800468c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004692:	4413      	add	r3, r2
 8004694:	edd3 7a00 	vldr	s15, [r3]
 8004698:	ee27 7a27 	vmul.f32	s14, s14, s15
 800469c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046a2:	4413      	add	r3, r2
 80046a4:	edd3 7a00 	vldr	s15, [r3]
 80046a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ac:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                s_sum += temp;
 80046b0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80046b4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80046b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046bc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                k_sum += temp * data_window[i];
 80046c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046c6:	4413      	add	r3, r2
 80046c8:	ed93 7a00 	vldr	s14, [r3]
 80046cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80046d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80046d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046dc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (size_t i = 0; i < data_size; i++) {
 80046e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e2:	3301      	adds	r3, #1
 80046e4:	677b      	str	r3, [r7, #116]	; 0x74
 80046e6:	e7c7      	b.n	8004678 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d4>
            }
            // Skewness out
            temp = stddev * stddev * stddev;
 80046e8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80046ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80046f0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80046f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            *feature_out++ = (s_sum / data_size) / temp;
 80046fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004706:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800470a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800470e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004712:	1d1a      	adds	r2, r3, #4
 8004714:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004718:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800471c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004720:	edc3 7a00 	vstr	s15, [r3]
            // Kurtosis out
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 8004724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8004732:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004736:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800473a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800473e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800474a:	1d1a      	adds	r2, r3, #4
 800474c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004750:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004754:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004758:	edc3 7a00 	vstr	s15, [r3]

            EI_TRY(numpy::welch_max_hold(
 800475c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800475e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	69d2      	ldr	r2, [r2, #28]
 8004764:	4610      	mov	r0, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800476c:	9202      	str	r2, [sp, #8]
 800476e:	9001      	str	r0, [sp, #4]
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	460b      	mov	r3, r1
 8004774:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004778:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800477a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800477c:	f7fd ffd2 	bl	8002724 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8004780:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f8>
 8004788:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800478a:	2500      	movs	r5, #0
 800478c:	e02a      	b.n	80047e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x340>
 800478e:	bf00      	nop
 8004790:	08027eec 	.word	0x08027eec
 8004794:	08027ef0 	.word	0x08027ef0
 8004798:	2edbe6ff 	.word	0x2edbe6ff
                feature_out,
                start_bin,
                stop_bin,
                config->fft_length,
                config->do_fft_overlap));
            if (config->do_log) {
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d016      	beq.n	80047d4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x330>
                numpy::zero_handling(feature_out, num_bins);
 80047a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047a8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80047ac:	f7fe f86c 	bl	8002888 <_ZN2ei5numpy13zero_handlingEPfj>
                ei_matrix temp(num_bins, 1, feature_out);
 80047b0:	f107 0014 	add.w	r0, r7, #20
 80047b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047b8:	2201      	movs	r2, #1
 80047ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80047bc:	f7fd f8b7 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
                numpy::log10(&temp);
 80047c0:	f107 0314 	add.w	r3, r7, #20
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fd fe1b 	bl	8002400 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>
                ei_matrix temp(num_bins, 1, feature_out);
 80047ca:	f107 0314 	add.w	r3, r7, #20
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fd f8d8 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
            }
            feature_out += num_bins;
 80047d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80047dc:	4413      	add	r3, r2
 80047de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047e2:	2501      	movs	r5, #1
 80047e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fd f8cb 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 80047ee:	2d01      	cmp	r5, #1
 80047f0:	d001      	beq.n	80047f6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x352>
 80047f2:	2500      	movs	r5, #0
 80047f4:	e000      	b.n	80047f8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x354>
 80047f6:	2501      	movs	r5, #1
 80047f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fd f8c1 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8004802:	2d01      	cmp	r5, #1
 8004804:	d106      	bne.n	8004814 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8004806:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800480a:	3301      	adds	r3, #1
 800480c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004810:	e6e7      	b.n	80045e2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
        }
        return EIDSP_OK;
 8004812:	2400      	movs	r4, #0
    }
 8004814:	4623      	mov	r3, r4
 8004816:	4618      	mov	r0, r3
 8004818:	3790      	adds	r7, #144	; 0x90
 800481a:	46bd      	mov	sp, r7
 800481c:	bdb0      	pop	{r4, r5, r7, pc}
 800481e:	bf00      	nop

08004820 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fd f85b 	bl	80018e6 <_ZNSt14_Function_baseD1Ev>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4618      	mov	r0, r3
 8004846:	f002 f867 	bl	8006918 <_ZNSt8functionIFijjPfEEC1Ev>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <_ZN2ei11ei_signal_tD1Ev>:
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff ffde 	bl	8004820 <_ZNSt8functionIFijjPfEED1Ev>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_spectral_analysis_features(
    signal_t *signal,
    matrix_t *output_matrix,
    void *config_ptr,
    const float frequency)
{
 8004870:	b590      	push	{r4, r7, lr}
 8004872:	b08b      	sub	sp, #44	; 0x2c
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t *config = (ei_dsp_config_spectral_analysis_t *)config_ptr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	627b      	str	r3, [r7, #36]	; 0x24

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488a:	6852      	ldr	r2, [r2, #4]
 800488c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	461a      	mov	r2, r3
 8004896:	f107 0014 	add.w	r0, r7, #20
 800489a:	2300      	movs	r3, #0
 800489c:	f7fd f847 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3a>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80048a6:	4c1b      	ldr	r4, [pc, #108]	; (8004914 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa4>)
 80048a8:	e02a      	b.n	8004900 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2100      	movs	r1, #0
 80048b4:	f001 ff3a 	bl	800672c <_ZNKSt8functionIFijjPfEEclEjjS0_>
        return spectral::wavelet::extract_wavelet_features(&input_matrix, output_matrix, config, frequency);
    }
#endif

#if EI_DSP_PARAMS_SPECTRAL_ANALYSIS_ANALYSIS_TYPE_FFT || EI_DSP_PARAMS_ALL
    if (strcmp(config->analysis_type, "FFT") == 0) {
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	4916      	ldr	r1, [pc, #88]	; (8004918 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa8>)
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fb fcd6 	bl	8000270 <strcmp>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d119      	bne.n	80048fe <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x8e>
        if (config->implementation_version == 1) {
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d10a      	bne.n	80048e8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x78>
            return spectral::feature::extract_spectral_analysis_features_v1(
 80048d2:	f107 0314 	add.w	r3, r7, #20
 80048d6:	ed97 0a00 	vldr	s0, [r7]
 80048da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff fc46 	bl	8004170 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80048e4:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80048e6:	e00b      	b.n	8004900 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
        } else {
            return spectral::feature::extract_spectral_analysis_features_v2(
 80048e8:	f107 0314 	add.w	r3, r7, #20
 80048ec:	ed97 0a00 	vldr	s0, [r7]
 80048f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fdd5 	bl	80044a4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80048fa:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80048fc:	e000      	b.n	8004900 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
            output_matrix,
            config,
            frequency);
    }
#endif
    return EIDSP_NOT_SUPPORTED;
 80048fe:	4c07      	ldr	r4, [pc, #28]	; (800491c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xac>)
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	4618      	mov	r0, r3
 8004906:	f7fd f83d 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
}
 800490a:	4623      	mov	r3, r4
 800490c:	4618      	mov	r0, r3
 800490e:	372c      	adds	r7, #44	; 0x2c
 8004910:	46bd      	mov	sp, r7
 8004912:	bd90      	pop	{r4, r7, pc}
 8004914:	fffffc16 	.word	0xfffffc16
 8004918:	08027f4c 	.word	0x08027f4c
 800491c:	fffffc0a 	.word	0xfffffc0a

08004920 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	b098      	sub	sp, #96	; 0x60
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004936:	ca07      	ldmia	r2, {r0, r1, r2}
 8004938:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	4967      	ldr	r1, [pc, #412]	; (8004adc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
 8004940:	4618      	mov	r0, r3
 8004942:	f7fb fc95 	bl	8000270 <strcmp>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 8004950:	2303      	movs	r3, #3
 8004952:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    size_t output_ix = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 800495a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800495e:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004966:	2300      	movs	r3, #0
 8004968:	65bb      	str	r3, [r7, #88]	; 0x58
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004970:	429a      	cmp	r2, r3
 8004972:	f080 80ac 	bcs.w	8004ace <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ae>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497c:	d803      	bhi.n	8004986 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
 800497e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	e001      	b.n	800498a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
 8004986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800498a:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	461a      	mov	r2, r3
 8004990:	f107 0014 	add.w	r0, r7, #20
 8004994:	2300      	movs	r3, #0
 8004996:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004998:	f7fc ffc9 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80049a2:	4d4f      	ldr	r5, [pc, #316]	; (8004ae0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
 80049a4:	2400      	movs	r4, #0
 80049a6:	e086      	b.n	8004ab6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049b0:	f001 febc 	bl	800672c <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80049b4:	2300      	movs	r3, #0
 80049b6:	657b      	str	r3, [r7, #84]	; 0x54
 80049b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049bc:	429a      	cmp	r2, r3
 80049be:	d275      	bcs.n	8004aac <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	edd3 7a00 	vldr	s15, [r3]
 80049cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d0:	ee17 3a90 	vmov	r3, s15
 80049d4:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80049d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d8:	0c1b      	lsrs	r3, r3, #16
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049e4:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8004ae4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80049e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049ec:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 80049f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049fe:	eddf 6a39 	vldr	s13, [pc, #228]	; 8004ae4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8004a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a06:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a16:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004ae4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8004a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a1e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8004a22:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d11b      	bne.n	8004a62 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
                output_matrix->buffer[output_ix++] = r;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a30:	1c59      	adds	r1, r3, #1
 8004a32:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a3a:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a42:	1c59      	adds	r1, r3, #1
 8004a44:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a4c:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a54:	1c59      	adds	r1, r3, #1
 8004a56:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e020      	b.n	8004aa4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8004a62:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004a66:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004ae8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
 8004a6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a6e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004a72:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004aec <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
 8004a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a7e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004a82:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8004af0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
 8004a86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a8e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a98:	1c59      	adds	r1, r3, #1
 8004a9a:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa2:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	657b      	str	r3, [r7, #84]	; 0x54
 8004aaa:	e785      	b.n	80049b8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
            }
        }

        bytes_left -= elements_to_read;
 8004aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab4:	2401      	movs	r4, #1
 8004ab6:	f107 0314 	add.w	r3, r7, #20
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fc ff62 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8004ac0:	2c01      	cmp	r4, #1
 8004ac2:	d105      	bne.n	8004ad0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004ac4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aca:	65bb      	str	r3, [r7, #88]	; 0x58
 8004acc:	e74d      	b.n	800496a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
 8004ace:	2500      	movs	r5, #0
}
 8004ad0:	462b      	mov	r3, r5
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3760      	adds	r7, #96	; 0x60
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8004ada:	bf00      	nop
 8004adc:	0802817c 	.word	0x0802817c
 8004ae0:	fffffc16 	.word	0xfffffc16
 8004ae4:	437f0000 	.word	0x437f0000
 8004ae8:	3e991687 	.word	0x3e991687
 8004aec:	3f1645a2 	.word	0x3f1645a2
 8004af0:	3de978d5 	.word	0x3de978d5

08004af4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>:

#endif //(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI)

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(const ei_impulse_t *impulse, signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8004af4:	b5b0      	push	{r4, r5, r7, lr}
 8004af6:	b0a6      	sub	sp, #152	; 0x98
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6178      	str	r0, [r7, #20]
 8004afc:	6139      	str	r1, [r7, #16]
 8004afe:	60fa      	str	r2, [r7, #12]
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8004b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b14:	49ab      	ldr	r1, [pc, #684]	; (8004dc4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d0>)
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fb fbaa 	bl	8000270 <strcmp>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x32>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x34>
 8004b26:	2303      	movs	r3, #3
 8004b28:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    size_t output_ix = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 8004b32:	f644 438b 	movw	r3, #19595	; 0x4c8b
 8004b36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 8004b3a:	f249 6345 	movw	r3, #38469	; 0x9645
 8004b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 8004b40:	f641 532f 	movw	r3, #7471	; 0x1d2f
 8004b44:	67bb      	str	r3, [r7, #120]	; 0x78

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8004b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b4a:	677b      	str	r3, [r7, #116]	; 0x74
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004b52:	2300      	movs	r3, #0
 8004b54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004b60:	429a      	cmp	r2, r3
 8004b62:	f080 821d 	bcs.w	8004fa0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ac>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6c:	d803      	bhi.n	8004b76 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x82>
 8004b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	e001      	b.n	8004b7a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x86>
 8004b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b7a:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f107 0018 	add.w	r0, r7, #24
 8004b84:	2300      	movs	r3, #0
 8004b86:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004b88:	f7fc fed1 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d102      	bne.n	8004b98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xa4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8004b92:	4d8d      	ldr	r5, [pc, #564]	; (8004dc8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d4>)
 8004b94:	2400      	movs	r4, #0
 8004b96:	e1f5      	b.n	8004f84 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x490>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8004b98:	6938      	ldr	r0, [r7, #16]
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004b9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ba2:	f001 fdc3 	bl	800672c <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004bac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004bb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	f080 81e1 	bcs.w	8004f7a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x486>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	edd3 7a00 	vldr	s15, [r3]
 8004bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bca:	ee17 3a90 	vmov	r3, s15
 8004bce:	66fb      	str	r3, [r7, #108]	; 0x6c

            if (channel_count == 3) {
 8004bd0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	f040 8105 	bne.w	8004de4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2f0>
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004be0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8004dcc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8004be4:	eef4 7a47 	vcmp.f32	s15, s14
 8004be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bec:	d160      	bne.n	8004cb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004bf4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004dd0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8004bf8:	eef4 7a47 	vcmp.f32	s15, s14
 8004bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c00:	d156      	bne.n	8004cb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	64fb      	str	r3, [r7, #76]	; 0x4c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8004c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0c:	0a1b      	lsrs	r3, r3, #8
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	64bb      	str	r3, [r7, #72]	; 0x48
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8004c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	647b      	str	r3, [r7, #68]	; 0x44

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + impulse->tflite_input_zeropoint);
 8004c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c34:	1c59      	adds	r1, r3, #1
 8004c36:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004c3a:	4413      	add	r3, r2
 8004c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c40:	edc7 7a00 	vstr	s15, [r7]
 8004c44:	783a      	ldrb	r2, [r7, #0]
 8004c46:	b252      	sxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + impulse->tflite_input_zeropoint);
 8004c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c66:	1c59      	adds	r1, r3, #1
 8004c68:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004c6c:	4413      	add	r3, r2
 8004c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c72:	edc7 7a00 	vstr	s15, [r7]
 8004c76:	783a      	ldrb	r2, [r7, #0]
 8004c78:	b252      	sxtb	r2, r2
 8004c7a:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + impulse->tflite_input_zeropoint);
 8004c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c98:	1c59      	adds	r1, r3, #1
 8004c9a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004c9e:	4413      	add	r3, r2
 8004ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ca4:	edc7 7a00 	vstr	s15, [r7]
 8004ca8:	783a      	ldrb	r2, [r7, #0]
 8004caa:	b252      	sxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e15e      	b.n	8004f6e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cbe:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004dd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cc6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ccc:	0a1b      	lsrs	r3, r3, #8
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cd8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8004dd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004cdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ce0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	ee07 3a90 	vmov	s15, r3
 8004cec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cf0:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004dd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004cf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cf8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004d02:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004d06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d0a:	eeb0 0a66 	vmov.f32	s0, s13
 8004d0e:	f7fc feb6 	bl	8001a7e <_ZSt5roundf>
 8004d12:	eeb0 7a40 	vmov.f32	s14, s0
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d28:	1c59      	adds	r1, r3, #1
 8004d2a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004d2e:	4413      	add	r3, r2
 8004d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d34:	edc7 7a00 	vstr	s15, [r7]
 8004d38:	783a      	ldrb	r2, [r7, #0]
 8004d3a:	b252      	sxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004d44:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004d48:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d4c:	eeb0 0a66 	vmov.f32	s0, s13
 8004d50:	f7fc fe95 	bl	8001a7e <_ZSt5roundf>
 8004d54:	eeb0 7a40 	vmov.f32	s14, s0
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d6a:	1c59      	adds	r1, r3, #1
 8004d6c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004d70:	4413      	add	r3, r2
 8004d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d76:	edc7 7a00 	vstr	s15, [r7]
 8004d7a:	783a      	ldrb	r2, [r7, #0]
 8004d7c:	b252      	sxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004d86:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004d8a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d8e:	eeb0 0a66 	vmov.f32	s0, s13
 8004d92:	f7fc fe74 	bl	8001a7e <_ZSt5roundf>
 8004d96:	eeb0 7a40 	vmov.f32	s14, s0
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004dac:	1c59      	adds	r1, r3, #1
 8004dae:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004db2:	4413      	add	r3, r2
 8004db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db8:	edc7 7a00 	vstr	s15, [r7]
 8004dbc:	783a      	ldrb	r2, [r7, #0]
 8004dbe:	b252      	sxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e0d4      	b.n	8004f6e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
 8004dc4:	0802817c 	.word	0x0802817c
 8004dc8:	fffffc16 	.word	0xfffffc16
 8004dcc:	3b808081 	.word	0x3b808081
 8004dd0:	c3000000 	.word	0xc3000000
 8004dd4:	437f0000 	.word	0x437f0000
 8004dd8:	3e991687 	.word	0x3e991687
 8004ddc:	3f1645a2 	.word	0x3f1645a2
 8004de0:	3de978d5 	.word	0x3de978d5
                }
            }
            else {
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004dea:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8004dcc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8004dee:	eef4 7a47 	vcmp.f32	s15, s14
 8004df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df6:	d15b      	bne.n	8004eb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004dfe:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8004dd0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8004e02:	eef4 7a47 	vcmp.f32	s15, s14
 8004e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0a:	d151      	bne.n	8004eb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8004e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0e:	0c1b      	lsrs	r3, r3, #16
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8004e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e16:	0a1b      	lsrs	r3, r3, #8
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	667b      	str	r3, [r7, #100]	; 0x64
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8004e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	663b      	str	r3, [r7, #96]	; 0x60

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 8004e22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e24:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8004e28:	fb03 f202 	mul.w	r2, r3, r2
 8004e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e2e:	f249 6145 	movw	r1, #38469	; 0x9645
 8004e32:	fb01 f303 	mul.w	r3, r1, r3
 8004e36:	441a      	add	r2, r3
 8004e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e3a:	f641 512f 	movw	r1, #7471	; 0x1d2f
 8004e3e:	fb01 f303 	mul.w	r3, r1, r3
 8004e42:	4413      	add	r3, r2
 8004e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray >>= 16; // scale down to int8_t
 8004e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e4c:	141b      	asrs	r3, r3, #16
 8004e4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray += impulse->tflite_input_zeropoint;
 8004e52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e6c:	ee17 3a90 	vmov	r3, s15
 8004e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    if (gray < - 128) gray = -128;
 8004e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e78:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8004e7c:	da04      	bge.n	8004e88 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x394>
 8004e7e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004e82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e86:	e006      	b.n	8004e96 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
                    else if (gray > 127) gray = 127;
 8004e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e8e:	dd02      	ble.n	8004e96 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
 8004e90:	237f      	movs	r3, #127	; 0x7f
 8004e92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e9e:	1c59      	adds	r1, r3, #1
 8004ea0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004eaa:	b252      	sxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	e05e      	b.n	8004f6e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb2:	0c1b      	lsrs	r3, r3, #16
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ebe:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8004dd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004ec2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ec6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ecc:	0a1b      	lsrs	r3, r3, #8
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ed8:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 8004dd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ee0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ef0:	ed5f 6a48 	vldr	s13, [pc, #-288]	; 8004dd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ef8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8004efc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004f00:	ed1f 7a4b 	vldr	s14, [pc, #-300]	; 8004dd8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e4>
 8004f04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004f08:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004f0c:	ed5f 6a4d 	vldr	s13, [pc, #-308]	; 8004ddc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e8>
 8004f10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f18:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004f1c:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8004de0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2ec>
 8004f20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f28:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004f32:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004f36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f3a:	eeb0 0a66 	vmov.f32	s0, s13
 8004f3e:	f7fc fd9e 	bl	8001a7e <_ZSt5roundf>
 8004f42:	eeb0 7a40 	vmov.f32	s14, s0
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f58:	1c59      	adds	r1, r3, #1
 8004f5a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004f5e:	4413      	add	r3, r2
 8004f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f64:	edc7 7a00 	vstr	s15, [r7]
 8004f68:	783a      	ldrb	r2, [r7, #0]
 8004f6a:	b252      	sxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f72:	3301      	adds	r3, #1
 8004f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f78:	e618      	b.n	8004bac <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xb8>
                }
            }
        }

        bytes_left -= elements_to_read;
 8004f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f82:	2401      	movs	r4, #1
 8004f84:	f107 0318 	add.w	r3, r7, #24
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fc fcfb 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8004f8e:	2c01      	cmp	r4, #1
 8004f90:	d107      	bne.n	8004fa2 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ae>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f9e:	e5db      	b.n	8004b58 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x64>
    }

    return EIDSP_OK;
 8004fa0:	2500      	movs	r5, #0
}
 8004fa2:	462b      	mov	r3, r5
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3798      	adds	r7, #152	; 0x98
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bdb0      	pop	{r4, r5, r7, pc}

08004fac <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	609a      	str	r2, [r3, #8]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	60da      	str	r2, [r3, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3310      	adds	r3, #16
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fc2f 	bl	800483a <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	f000 f832 	bl	8005066 <_ZN14SignalWithAxes8get_dataEjjPf>
 8005002:	4603      	mov	r3, r0
        };
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	429a      	cmp	r2, r3
 8005020:	d102      	bne.n	8005028 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	e01a      	b.n	800505e <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6892      	ldr	r2, [r2, #8]
 800503c:	fb03 f202 	mul.w	r2, r3, r2
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	621a      	str	r2, [r3, #32]
        };
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f103 0210 	add.w	r2, r3, #16
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	f107 030c 	add.w	r3, r7, #12
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f001 fc8c 	bl	8006972 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3310      	adds	r3, #16
    }
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8005066:	b580      	push	{r7, lr}
 8005068:	b08a      	sub	sp, #40	; 0x28
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
 8005072:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	68d2      	ldr	r2, [r2, #12]
 8005082:	6992      	ldr	r2, [r2, #24]
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	68d2      	ldr	r2, [r2, #12]
 8005098:	6992      	ldr	r2, [r2, #24]
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	623b      	str	r3, [r7, #32]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	4413      	add	r3, r2
 80050ae:	6a3a      	ldr	r2, [r7, #32]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d22b      	bcs.n	800510c <_ZN14SignalWithAxes8get_dataEjjPf+0xa6>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 80050b4:	2300      	movs	r3, #0
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d21d      	bcs.n	80050fe <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	18d1      	adds	r1, r2, r3
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	627a      	str	r2, [r7, #36]	; 0x24
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	4413      	add	r3, r2
 80050e4:	2201      	movs	r2, #1
 80050e6:	f001 fb21 	bl	800672c <_ZNKSt8functionIFijjPfEEclEjjS0_>
 80050ea:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                    return r;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	e00b      	b.n	800510e <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3301      	adds	r3, #1
 80050fa:	61fb      	str	r3, [r7, #28]
 80050fc:	e7dc      	b.n	80050b8 <_ZN14SignalWithAxes8get_dataEjjPf+0x52>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	6a3a      	ldr	r2, [r7, #32]
 8005106:	4413      	add	r3, r2
 8005108:	623b      	str	r3, [r7, #32]
 800510a:	e7cd      	b.n	80050a8 <_ZN14SignalWithAxes8get_dataEjjPf+0x42>
                }
            }
        }

        return 0;
 800510c:	2300      	movs	r3, #0
    }
 800510e:	4618      	mov	r0, r3
 8005110:	3728      	adds	r7, #40	; 0x28
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8005116:	b480      	push	{r7}
 8005118:	b085      	sub	sp, #20
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8005124:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6178      	str	r0, [r7, #20]
 800513c:	6139      	str	r1, [r7, #16]
 800513e:	60fa      	str	r2, [r7, #12]
 8005140:	ed87 0a02 	vstr	s0, [r7, #8]
 8005144:	edc7 0a01 	vstr	s1, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800514a:	f06f 0314 	mvn.w	r3, #20
#endif
}
 800514e:	4618      	mov	r0, r3
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af00      	add	r7, sp, #0
 8005162:	6178      	str	r0, [r7, #20]
 8005164:	6139      	str	r1, [r7, #16]
 8005166:	60fa      	str	r2, [r7, #12]
 8005168:	ed87 0a02 	vstr	s0, [r7, #8]
 800516c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005170:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800517a:	461a      	mov	r2, r3
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4293      	cmp	r3, r2
 8005180:	d23f      	bcs.n	8005202 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xa6>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	4413      	add	r3, r2
 8005188:	f993 3000 	ldrsb.w	r3, [r3]
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005194:	edd7 7a02 	vldr	s15, [r7, #8]
 8005198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800519c:	ed97 7a01 	vldr	s14, [r7, #4]
 80051a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a4:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 80051a8:	78fb      	ldrb	r3, [r7, #3]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d011      	beq.n	80051d2 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x76>
            ei_printf("%s:\t", impulse->categories[ix]);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4619      	mov	r1, r3
 80051be:	4813      	ldr	r0, [pc, #76]	; (800520c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb0>)
 80051c0:	f000 feac 	bl	8005f1c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80051c4:	ed97 0a06 	vldr	s0, [r7, #24]
 80051c8:	f015 fe86 	bl	801aed8 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80051cc:	4810      	ldr	r0, [pc, #64]	; (8005210 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 80051ce:	f000 fea5 	bl	8005f1c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	6819      	ldr	r1, [r3, #0]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	3201      	adds	r2, #1
 80051e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	3301      	adds	r3, #1
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	4413      	add	r3, r2
 80051f4:	3304      	adds	r3, #4
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	3301      	adds	r3, #1
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	e7b9      	b.n	8005176 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1a>
    }

    return EI_IMPULSE_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3720      	adds	r7, #32
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	08028188 	.word	0x08028188
 8005210:	08028190 	.word	0x08028190

08005214 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800522a:	461a      	mov	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	4293      	cmp	r3, r2
 8005230:	d232      	bcs.n	8005298 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x84>
        float value = data[ix];
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	613b      	str	r3, [r7, #16]

        if (debug) {
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d011      	beq.n	8005268 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x54>
            ei_printf("%s:\t", impulse->categories[ix]);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4619      	mov	r1, r3
 8005254:	4813      	ldr	r0, [pc, #76]	; (80052a4 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 8005256:	f000 fe61 	bl	8005f1c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 800525a:	ed97 0a04 	vldr	s0, [r7, #16]
 800525e:	f015 fe3b 	bl	801aed8 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8005262:	4811      	ldr	r0, [pc, #68]	; (80052a8 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 8005264:	f000 fe5a 	bl	8005f1c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	6819      	ldr	r1, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	3201      	adds	r2, #1
 800527c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	3301      	adds	r3, #1
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	4413      	add	r3, r2
 800528a:	3304      	adds	r3, #4
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	3301      	adds	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e7c6      	b.n	8005226 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x12>
    }

    return EI_IMPULSE_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	08028188 	.word	0x08028188
 80052a8:	08028190 	.word	0x08028190

080052ac <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>:
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]

    *ctx_start_us = ei_read_timer_us();
 80052ba:	f015 fdf9 	bl	801aeb0 <_Z16ei_read_timer_usv>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 80052c8:	486e      	ldr	r0, [pc, #440]	; (8005484 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1d8>)
 80052ca:	f01a fdb7 	bl	801fe3c <_Z18trained_model_initPFPvjjE>
 80052ce:	4603      	mov	r3, r0
 80052d0:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x3c>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	4619      	mov	r1, r3
 80052dc:	486a      	ldr	r0, [pc, #424]	; (8005488 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1dc>)
 80052de:	f000 fe1d 	bl	8005f1c <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 80052e2:	f06f 0305 	mvn.w	r3, #5
 80052e6:	e0c8      	b.n	800547a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ce>
    }

    static bool tflite_first_run = true;

    *input = impulse->model_input(0);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ee:	2000      	movs	r0, #0
 80052f0:	4798      	blx	r3
 80052f2:	4602      	mov	r2, r0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]
    *output = impulse->model_output(0);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fe:	2000      	movs	r0, #0
 8005300:	4798      	blx	r3
 8005302:	4602      	mov	r2, r0
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	601a      	str	r2, [r3, #0]

    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800530e:	2b01      	cmp	r3, #1
 8005310:	d115      	bne.n	800533e <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x92>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 800531e:	4610      	mov	r0, r2
 8005320:	4798      	blx	r3
 8005322:	4602      	mov	r2, r0
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	601a      	str	r2, [r3, #0]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8005334:	4610      	mov	r0, r2
 8005336:	4798      	blx	r3
 8005338:	4602      	mov	r2, r0
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	601a      	str	r2, [r3, #0]
    }

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 800533e:	4b53      	ldr	r3, [pc, #332]	; (800548c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8098 	beq.w	8005478 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1cc>
        assert((*input)->type == impulse->tflite_input_datatype);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	781a      	ldrb	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005354:	429a      	cmp	r2, r3
 8005356:	d005      	beq.n	8005364 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xb8>
 8005358:	4b4d      	ldr	r3, [pc, #308]	; (8005490 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e4>)
 800535a:	4a4e      	ldr	r2, [pc, #312]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800535c:	2159      	movs	r1, #89	; 0x59
 800535e:	484e      	ldr	r0, [pc, #312]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005360:	f01e faec 	bl	802393c <__assert_func>
        assert((*output)->type == impulse->tflite_output_datatype);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	781a      	ldrb	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005370:	429a      	cmp	r2, r3
 8005372:	d005      	beq.n	8005380 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xd4>
 8005374:	4b49      	ldr	r3, [pc, #292]	; (800549c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f0>)
 8005376:	4a47      	ldr	r2, [pc, #284]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005378:	215a      	movs	r1, #90	; 0x5a
 800537a:	4847      	ldr	r0, [pc, #284]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800537c:	f01e fade 	bl	802393c <__assert_func>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8005386:	2b01      	cmp	r3, #1
 8005388:	d11b      	bne.n	80053c2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	781a      	ldrb	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005396:	429a      	cmp	r2, r3
 8005398:	d005      	beq.n	80053a6 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xfa>
 800539a:	4b41      	ldr	r3, [pc, #260]	; (80054a0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f4>)
 800539c:	4a3d      	ldr	r2, [pc, #244]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800539e:	215c      	movs	r1, #92	; 0x5c
 80053a0:	483d      	ldr	r0, [pc, #244]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80053a2:	f01e facb 	bl	802393c <__assert_func>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	781a      	ldrb	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d005      	beq.n	80053c2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
 80053b6:	4b3b      	ldr	r3, [pc, #236]	; (80054a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f8>)
 80053b8:	4a36      	ldr	r2, [pc, #216]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80053ba:	215d      	movs	r1, #93	; 0x5d
 80053bc:	4836      	ldr	r0, [pc, #216]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80053be:	f01e fabd 	bl	802393c <__assert_func>
        }
        if (impulse->tflite_input_quantized) {
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d026      	beq.n	800541a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
            assert((*input)->params.scale == impulse->tflite_input_scale);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80053da:	eeb4 7a67 	vcmp.f32	s14, s15
 80053de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e2:	d005      	beq.n	80053f0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x144>
 80053e4:	4b30      	ldr	r3, [pc, #192]	; (80054a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1fc>)
 80053e6:	4a2b      	ldr	r2, [pc, #172]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80053e8:	2160      	movs	r1, #96	; 0x60
 80053ea:	482b      	ldr	r0, [pc, #172]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80053ec:	f01e faa6 	bl	802393c <__assert_func>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005404:	eeb4 7a67 	vcmp.f32	s14, s15
 8005408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800540c:	d005      	beq.n	800541a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
 800540e:	4b27      	ldr	r3, [pc, #156]	; (80054ac <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x200>)
 8005410:	4a20      	ldr	r2, [pc, #128]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005412:	2161      	movs	r1, #97	; 0x61
 8005414:	4820      	ldr	r0, [pc, #128]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005416:	f01e fa91 	bl	802393c <__assert_func>
        }
        if (impulse->tflite_output_quantized) {
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005420:	2b00      	cmp	r3, #0
 8005422:	d026      	beq.n	8005472 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
            assert((*output)->params.scale == impulse->tflite_output_scale);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	ed93 7a03 	vldr	s14, [r3, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8005432:	eeb4 7a67 	vcmp.f32	s14, s15
 8005436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543a:	d005      	beq.n	8005448 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x19c>
 800543c:	4b1c      	ldr	r3, [pc, #112]	; (80054b0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x204>)
 800543e:	4a15      	ldr	r2, [pc, #84]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005440:	2164      	movs	r1, #100	; 0x64
 8005442:	4815      	ldr	r0, [pc, #84]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005444:	f01e fa7a 	bl	802393c <__assert_func>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800545c:	eeb4 7a67 	vcmp.f32	s14, s15
 8005460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005464:	d005      	beq.n	8005472 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
 8005466:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x208>)
 8005468:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800546a:	2165      	movs	r1, #101	; 0x65
 800546c:	480a      	ldr	r0, [pc, #40]	; (8005498 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800546e:	f01e fa65 	bl	802393c <__assert_func>
        }
        tflite_first_run = false;
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	08001601 	.word	0x08001601
 8005488:	08028194 	.word	0x08028194
 800548c:	2000006c 	.word	0x2000006c
 8005490:	080281c8 	.word	0x080281c8
 8005494:	080281fc 	.word	0x080281fc
 8005498:	08028298 	.word	0x08028298
 800549c:	0802831c 	.word	0x0802831c
 80054a0:	08028350 	.word	0x08028350
 80054a4:	0802838c 	.word	0x0802838c
 80054a8:	080283c8 	.word	0x080283c8
 80054ac:	08028400 	.word	0x08028400
 80054b0:	08028440 	.word	0x08028440
 80054b4:	08028478 	.word	0x08028478

080054b8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 80054b8:	b5b0      	push	{r4, r5, r7, lr}
 80054ba:	b08c      	sub	sp, #48	; 0x30
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	e9c7 2300 	strd	r2, r3, [r7]

    if(trained_model_invoke() != kTfLiteOk) {
 80054c4:	f01a ff1e 	bl	8020304 <_Z20trained_model_invokev>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf14      	ite	ne
 80054ce:	2301      	movne	r3, #1
 80054d0:	2300      	moveq	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x26>
        return EI_IMPULSE_TFLITE_ERROR;
 80054d8:	f06f 0302 	mvn.w	r3, #2
 80054dc:	e0ea      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 80054de:	f015 fce7 	bl	801aeb0 <_Z16ei_read_timer_usv>
 80054e2:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 80054e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80054ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ee:	1a84      	subs	r4, r0, r2
 80054f0:	eb61 0503 	sbc.w	r5, r1, r3
 80054f4:	4622      	mov	r2, r4
 80054f6:	462b      	mov	r3, r5
 80054f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054fa:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 80054fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005500:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8005504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	f7fb fbc6 	bl	8000c9c <__aeabi_ldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005516:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 800551a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d006      	beq.n	8005530 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x78>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8005522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005528:	4619      	mov	r1, r3
 800552a:	4864      	ldr	r0, [pc, #400]	; (80056bc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x204>)
 800552c:	f000 fcf6 	bl	8005f1c <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (impulse->object_detection) {
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d072      	beq.n	8005626 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x16e>
        switch (impulse->object_detection_last_layer) {
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8005546:	3b01      	subs	r3, #1
 8005548:	2b04      	cmp	r3, #4
 800554a:	d862      	bhi.n	8005612 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x15a>
 800554c:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x9c>)
 800554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005552:	bf00      	nop
 8005554:	080055df 	.word	0x080055df
 8005558:	08005569 	.word	0x08005569
 800555c:	080055eb 	.word	0x080055eb
 8005560:	080055ff 	.word	0x080055ff
 8005564:	080055eb 	.word	0x080055eb
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b09      	cmp	r3, #9
 800556e:	bf0c      	ite	eq
 8005570:	2301      	moveq	r3, #1
 8005572:	2300      	movne	r3, #0
 8005574:	75bb      	strb	r3, [r7, #22]
                if (int8_output) {
 8005576:	7dbb      	ldrb	r3, [r7, #22]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01e      	beq.n	80055ba <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x102>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	ed93 7a03 	vldr	s14, [r3, #12]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	6899      	ldr	r1, [r3, #8]
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	68db      	ldr	r3, [r3, #12]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	460b      	mov	r3, r1
 80055a2:	eef0 0a47 	vmov.f32	s1, s14
 80055a6:	eeb0 0a67 	vmov.f32	s0, s15
 80055aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f7ff fdc1 	bl	8005134 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
                }
                break;
 80055b8:	e063      	b.n	8005682 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	6899      	ldr	r1, [r3, #8]
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	460b      	mov	r3, r1
 80055ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f7ff fda0 	bl	8005116 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80055dc:	e051      	b.n	8005682 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
            }
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                #if EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP
                    fill_res = fill_result_struct_f32_object_detection(impulse, result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
                #else
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
 80055de:	4838      	ldr	r0, [pc, #224]	; (80056c0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x208>)
 80055e0:	f000 fc9c 	bl	8005f1c <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80055e4:	f06f 0309 	mvn.w	r3, #9
 80055e8:	e064      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
 80055f0:	4619      	mov	r1, r3
 80055f2:	4834      	ldr	r0, [pc, #208]	; (80056c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x20c>)
 80055f4:	f000 fc92 	bl	8005f1c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80055f8:	f06f 0309 	mvn.w	r3, #9
 80055fc:	e05a      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
 8005604:	4619      	mov	r1, r3
 8005606:	4830      	ldr	r0, [pc, #192]	; (80056c8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x210>)
 8005608:	f000 fc88 	bl	8005f1c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800560c:	f06f 0309 	mvn.w	r3, #9
 8005610:	e050      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8005618:	4619      	mov	r1, r3
 800561a:	482c      	ldr	r0, [pc, #176]	; (80056cc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x214>)
 800561c:	f000 fc7e 	bl	8005f1c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005620:	f06f 0309 	mvn.w	r3, #9
 8005624:	e046      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
        }
    }
    else {
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b09      	cmp	r3, #9
 800562c:	bf0c      	ite	eq
 800562e:	2301      	moveq	r3, #1
 8005630:	2300      	movne	r3, #0
 8005632:	75fb      	strb	r3, [r7, #23]
        if (int8_output) {
 8005634:	7dfb      	ldrb	r3, [r7, #23]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d018      	beq.n	800566c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1b4>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005650:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005654:	eef0 0a47 	vmov.f32	s1, s14
 8005658:	eeb0 0a67 	vmov.f32	s0, s15
 800565c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f7ff fd7c 	bl	800515c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800566a:	e00a      	b.n	8005682 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
        }
        else {
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005674:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fdcc 	bl	8005214 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800567c:	4603      	mov	r3, r0
 800567e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    trained_model_reset(ei_aligned_free);
 8005682:	4813      	ldr	r0, [pc, #76]	; (80056d0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x218>)
 8005684:	f01a fe74 	bl	8020370 <_Z19trained_model_resetPFvPvE>

    if (fill_res != EI_IMPULSE_OK) {
 8005688:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1de>
        return fill_res;
 8005690:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005694:	e00e      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005696:	f015 fc03 	bl	801aea0 <_Z29ei_run_impulse_check_canceledv>
 800569a:	4603      	mov	r3, r0
 800569c:	f113 0f02 	cmn.w	r3, #2
 80056a0:	bf0c      	ite	eq
 80056a2:	2301      	moveq	r3, #1
 80056a4:	2300      	movne	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fa>
        return EI_IMPULSE_CANCELED;
 80056ac:	f06f 0301 	mvn.w	r3, #1
 80056b0:	e000      	b.n	80056b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    return EI_IMPULSE_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3728      	adds	r7, #40	; 0x28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bdb0      	pop	{r4, r5, r7, pc}
 80056bc:	080284bc 	.word	0x080284bc
 80056c0:	080284dc 	.word	0x080284dc
 80056c4:	08028534 	.word	0x08028534
 80056c8:	08028584 	.word	0x08028584
 80056cc:	080285d4 	.word	0x080285d4
 80056d0:	08001685 	.word	0x08001685

080056d4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80056d4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80056d8:	b09e      	sub	sp, #120	; 0x78
 80056da:	af06      	add	r7, sp, #24
 80056dc:	6178      	str	r0, [r7, #20]
 80056de:	6139      	str	r1, [r7, #16]
 80056e0:	60fa      	str	r2, [r7, #12]
 80056e2:	72fb      	strb	r3, [r7, #11]
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 80056e4:	f015 fbe4 	bl	801aeb0 <_Z16ei_read_timer_usv>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80056f0:	4b7b      	ldr	r3, [pc, #492]	; (80058e0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x20c>)
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80056f8:	f107 0318 	add.w	r3, r7, #24
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 ffb1 	bl	8006666 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 8005704:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005708:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800570c:	f107 0120 	add.w	r1, r7, #32
 8005710:	f107 0318 	add.w	r3, r7, #24
 8005714:	9302      	str	r3, [sp, #8]
 8005716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	4603      	mov	r3, r0
 8005724:	6978      	ldr	r0, [r7, #20]
 8005726:	f7ff fdc1 	bl	80052ac <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800572a:	4603      	mov	r3, r0
 800572c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8005730:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x6a>
        return init_res;
 8005738:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 800573c:	e0c5      	b.n	80058ca <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 800573e:	f107 0318 	add.w	r3, r7, #24
 8005742:	4618      	mov	r0, r3
 8005744:	f001 f934 	bl	80069b0 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8005748:	64f8      	str	r0, [r7, #76]	; 0x4c

    switch (input->type) {
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b09      	cmp	r3, #9
 8005750:	d022      	beq.n	8005798 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc4>
 8005752:	2b09      	cmp	r3, #9
 8005754:	f300 8083 	bgt.w	800585e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
 8005758:	2b01      	cmp	r3, #1
 800575a:	d002      	beq.n	8005762 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x8e>
 800575c:	2b03      	cmp	r3, #3
 800575e:	d051      	beq.n	8005804 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x130>
 8005760:	e07d      	b.n	800585e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
        case kTfLiteFloat32: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005762:	2300      	movs	r3, #0
 8005764:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	6892      	ldr	r2, [r2, #8]
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005774:	429a      	cmp	r2, r3
 8005776:	d27b      	bcs.n	8005870 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x19c>
                input->data.f[ix] = fmatrix->buffer[ix];
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	6859      	ldr	r1, [r3, #4]
 8005786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005792:	3301      	adds	r3, #1
 8005794:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005796:	e7e6      	b.n	8005766 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x92>
            }
            break;
        }
        case kTfLiteInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005798:	2300      	movs	r3, #0
 800579a:	65bb      	str	r3, [r7, #88]	; 0x58
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	6892      	ldr	r2, [r2, #8]
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
 80057a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d262      	bcs.n	8005874 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a0>
                float pixel = (float)fmatrix->buffer[ix];
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	64bb      	str	r3, [r7, #72]	; 0x48
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	edd3 7a03 	vldr	s15, [r3, #12]
 80057c2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80057c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057ca:	eeb0 0a66 	vmov.f32	s0, s13
 80057ce:	f7fc f956 	bl	8001a7e <_ZSt5roundf>
 80057d2:	eeb0 7a40 	vmov.f32	s14, s0
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ec:	4413      	add	r3, r2
 80057ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80057f6:	793a      	ldrb	r2, [r7, #4]
 80057f8:	b252      	sxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80057fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057fe:	3301      	adds	r3, #1
 8005800:	65bb      	str	r3, [r7, #88]	; 0x58
 8005802:	e7cb      	b.n	800579c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc8>
            }
            break;
        }
        case kTfLiteUInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005804:	2300      	movs	r3, #0
 8005806:	657b      	str	r3, [r7, #84]	; 0x54
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	6892      	ldr	r2, [r2, #8]
 8005810:	fb02 f303 	mul.w	r3, r2, r3
 8005814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005816:	429a      	cmp	r2, r3
 8005818:	d221      	bcs.n	800585e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
                float pixel = (float)fmatrix->buffer[ix];
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	647b      	str	r3, [r7, #68]	; 0x44
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800582e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800583c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005846:	4413      	add	r3, r2
 8005848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800584c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005850:	793a      	ldrb	r2, [r7, #4]
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005858:	3301      	adds	r3, #1
 800585a:	657b      	str	r3, [r7, #84]	; 0x54
 800585c:	e7d4      	b.n	8005808 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x134>
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	4619      	mov	r1, r3
 8005864:	481f      	ldr	r0, [pc, #124]	; (80058e4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x210>)
 8005866:	f000 fb59 	bl	8005f1c <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 800586a:	f06f 040c 	mvn.w	r4, #12
 800586e:	e02c      	b.n	80058ca <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
            break;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a2>
            break;
 8005874:	bf00      	nop
        }
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
 8005876:	e9d7 bc08 	ldrd	fp, ip, [r7, #32]
 800587a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800587c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800587e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8005880:	7afb      	ldrb	r3, [r7, #11]
 8005882:	9305      	str	r3, [sp, #20]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	9304      	str	r3, [sp, #16]
 8005888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588a:	9303      	str	r3, [sp, #12]
 800588c:	9602      	str	r6, [sp, #8]
 800588e:	9001      	str	r0, [sp, #4]
 8005890:	9100      	str	r1, [sp, #0]
 8005892:	465a      	mov	r2, fp
 8005894:	4663      	mov	r3, ip
 8005896:	6978      	ldr	r0, [r7, #20]
 8005898:	f7ff fe0e 	bl	80054b8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 800589c:	4603      	mov	r3, r0
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                                    output, output_labels, output_scores,
                                                    tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80058a2:	f015 fb05 	bl	801aeb0 <_Z16ei_read_timer_usv>
 80058a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058aa:	1a84      	subs	r4, r0, r2
 80058ac:	eb61 0503 	sbc.w	r5, r1, r3
 80058b0:	4622      	mov	r2, r4
 80058b2:	462b      	mov	r3, r5
 80058b4:	68f9      	ldr	r1, [r7, #12]
 80058b6:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 80058ba:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f4>
        return run_res;
 80058c2:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 80058c6:	e000      	b.n	80058ca <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    return EI_IMPULSE_OK;
 80058c8:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80058ca:	f107 0318 	add.w	r3, r7, #24
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fede 	bl	8006690 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80058d4:	4623      	mov	r3, r4
 80058d6:	4618      	mov	r0, r3
 80058d8:	3760      	adds	r7, #96	; 0x60
 80058da:	46bd      	mov	sp, r7
 80058dc:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80058e0:	08001685 	.word	0x08001685
 80058e4:	08028608 	.word	0x08028608

080058e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false) {
 80058e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058ec:	b0a1      	sub	sp, #132	; 0x84
 80058ee:	af06      	add	r7, sp, #24
 80058f0:	6178      	str	r0, [r7, #20]
 80058f2:	6139      	str	r1, [r7, #16]
 80058f4:	60fa      	str	r2, [r7, #12]
 80058f6:	72fb      	strb	r3, [r7, #11]

    memset(result, 0, sizeof(ei_impulse_result_t));
 80058f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058fc:	2100      	movs	r1, #0
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f01e f8be 	bl	8023a80 <memset>
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005904:	4b7b      	ldr	r3, [pc, #492]	; (8005af4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x20c>)
 8005906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005908:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800590c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005910:	2100      	movs	r1, #0
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fea7 	bl	8006666 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 8005918:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800591c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005920:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005928:	9302      	str	r3, [sp, #8]
 800592a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	4603      	mov	r3, r0
 8005938:	6978      	ldr	r0, [r7, #20]
 800593a:	f7ff fcb7 	bl	80052ac <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800593e:	4603      	mov	r3, r0
 8005940:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        &ctx_start_us, &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 8005944:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x6a>
        return init_res;
 800594c:	f997 4063 	ldrsb.w	r4, [r7, #99]	; 0x63
 8005950:	e0c4      	b.n	8005adc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 8005952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b09      	cmp	r3, #9
 8005958:	d002      	beq.n	8005960 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800595a:	f06f 0408 	mvn.w	r4, #8
 800595e:	e0bd      	b.n	8005adc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 8005960:	f015 faa6 	bl	801aeb0 <_Z16ei_read_timer_usv>
 8005964:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f107 0018 	add.w	r0, r7, #24
 8005974:	2101      	movs	r1, #1
 8005976:	f7fc f82f 	bl	80019d8 <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(impulse, signal, &features_matrix, ei_dsp_blocks[0].config, impulse->frequency);
 800597a:	4b5f      	ldr	r3, [pc, #380]	; (8005af8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x210>)
 800597c:	6899      	ldr	r1, [r3, #8]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005984:	f107 0218 	add.w	r2, r7, #24
 8005988:	eeb0 0a67 	vmov.f32	s0, s15
 800598c:	460b      	mov	r3, r1
 800598e:	6939      	ldr	r1, [r7, #16]
 8005990:	6978      	ldr	r0, [r7, #20]
 8005992:	f7ff f8af 	bl	8004af4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>
 8005996:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != EIDSP_OK) {
 8005998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800599a:	2b00      	cmp	r3, #0
 800599c:	d006      	beq.n	80059ac <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 800599e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059a0:	4856      	ldr	r0, [pc, #344]	; (8005afc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x214>)
 80059a2:	f000 fabb 	bl	8005f1c <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 80059a6:	f06f 0404 	mvn.w	r4, #4
 80059aa:	e092      	b.n	8005ad2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80059ac:	f015 fa78 	bl	801aea0 <_Z29ei_run_impulse_check_canceledv>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f113 0f02 	cmn.w	r3, #2
 80059b6:	bf0c      	ite	eq
 80059b8:	2301      	moveq	r3, #1
 80059ba:	2300      	movne	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xe0>
        return EI_IMPULSE_CANCELED;
 80059c2:	f06f 0401 	mvn.w	r4, #1
 80059c6:	e084      	b.n	8005ad2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 80059c8:	f015 fa72 	bl	801aeb0 <_Z16ei_read_timer_usv>
 80059cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059d0:	ebb0 0802 	subs.w	r8, r0, r2
 80059d4:	eb61 0903 	sbc.w	r9, r1, r3
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	68f9      	ldr	r1, [r7, #12]
 80059de:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 80059e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	f7fb f954 	bl	8000c9c <__aeabi_ldivmod>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 80059fe:	7afb      	ldrb	r3, [r7, #11]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d02d      	beq.n	8005a60 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x178>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	483c      	ldr	r0, [pc, #240]	; (8005b00 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x218>)
 8005a0e:	f000 fa85 	bl	8005f1c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005a12:	2300      	movs	r3, #0
 8005a14:	667b      	str	r3, [r7, #100]	; 0x64
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d21d      	bcs.n	8005a5a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x172>
            ei_printf_float((features_matrix.buffer[ix] - impulse->tflite_input_zeropoint) * impulse->tflite_input_scale);
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a22:	4413      	add	r3, r2
 8005a24:	f993 3000 	ldrsb.w	r3, [r3]
 8005a28:	ee07 3a90 	vmov	s15, r3
 8005a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005a36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a44:	eeb0 0a67 	vmov.f32	s0, s15
 8005a48:	f015 fa46 	bl	801aed8 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8005a4c:	482d      	ldr	r0, [pc, #180]	; (8005b04 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x21c>)
 8005a4e:	f000 fa65 	bl	8005f1c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005a52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a54:	3301      	adds	r3, #1
 8005a56:	667b      	str	r3, [r7, #100]	; 0x64
 8005a58:	e7dd      	b.n	8005a16 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x12e>
        }
        ei_printf("\n");
 8005a5a:	482b      	ldr	r0, [pc, #172]	; (8005b08 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x220>)
 8005a5c:	f000 fa5e 	bl	8005f1c <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 8005a60:	f015 fa26 	bl	801aeb0 <_Z16ei_read_timer_usv>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8005a6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005a70:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	607b      	str	r3, [r7, #4]
 8005a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a78:	603a      	str	r2, [r7, #0]
        ctx_start_us,
        output,
        output_labels,
        output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
 8005a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 ff96 	bl	80069b0 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8005a84:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8005a86:	7afb      	ldrb	r3, [r7, #11]
 8005a88:	9305      	str	r3, [sp, #20]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	9304      	str	r3, [sp, #16]
 8005a8e:	9203      	str	r2, [sp, #12]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	9202      	str	r2, [sp, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	9600      	str	r6, [sp, #0]
 8005a9a:	4642      	mov	r2, r8
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	6978      	ldr	r0, [r7, #20]
 8005aa0:	f7ff fd0a 	bl	80054b8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 8005aaa:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1d0>
        return run_res;
 8005ab2:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8005ab6:	e00c      	b.n	8005ad2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8005ab8:	f015 f9fa 	bl	801aeb0 <_Z16ei_read_timer_usv>
 8005abc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ac0:	1a84      	subs	r4, r0, r2
 8005ac2:	eb61 0503 	sbc.w	r5, r1, r3
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	462b      	mov	r3, r5
 8005aca:	68f9      	ldr	r1, [r7, #12]
 8005acc:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    return EI_IMPULSE_OK;
 8005ad0:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8005ad2:	f107 0318 	add.w	r3, r7, #24
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fb ffa8 	bl	8001a2c <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8005adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fdd5 	bl	8006690 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	4618      	mov	r0, r3
 8005aea:	376c      	adds	r7, #108	; 0x6c
 8005aec:	46bd      	mov	sp, r7
 8005aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005af2:	bf00      	nop
 8005af4:	08001685 	.word	0x08001685
 8005af8:	20000058 	.word	0x20000058
 8005afc:	0802862c 	.word	0x0802862c
 8005b00:	08028654 	.word	0x08028654
 8005b04:	08028668 	.word	0x08028668
 8005b08:	08028190 	.word	0x08028190

08005b0c <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	70fb      	strb	r3, [r7, #3]
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE && EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)
    EI_IMPULSE_ERROR nn_res = run_nn_inference(impulse, fmatrix, result, debug);
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff fdd7 	bl	80056d4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
 8005b26:	4603      	mov	r3, r0
 8005b28:	75fb      	strb	r3, [r7, #23]
    if (nn_res != EI_IMPULSE_OK) {
 8005b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <run_inference+0x2c>
        return nn_res;
 8005b32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b36:	e00e      	b.n	8005b56 <run_inference+0x4a>
            return anomaly_res;
        }
    }
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005b38:	f015 f9b2 	bl	801aea0 <_Z29ei_run_impulse_check_canceledv>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f113 0f02 	cmn.w	r3, #2
 8005b42:	bf0c      	ite	eq
 8005b44:	2301      	moveq	r3, #1
 8005b46:	2300      	movne	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 8005b4e:	f06f 0301 	mvn.w	r3, #1
 8005b52:	e000      	b.n	8005b56 <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3310      	adds	r3, #16
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fe72 	bl	8004854 <_ZN2ei11ei_signal_tD1Ev>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(const ei_impulse_t *impulse,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 8005b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b80:	b0a5      	sub	sp, #148	; 0x94
 8005b82:	af02      	add	r7, sp, #8
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
 8005b8a:	70fb      	strb	r3, [r7, #3]
 8005b8c:	2600      	movs	r6, #0

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized(impulse) == EI_IMPULSE_OK) {
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f928 	bl	8005de4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	bf0c      	ite	eq
 8005b9a:	2301      	moveq	r3, #1
 8005b9c:	2300      	movne	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <process_impulse+0x3a>
        return run_classifier_image_quantized(impulse, signal, result, debug);
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	68b9      	ldr	r1, [r7, #8]
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 f954 	bl	8005e58 <run_classifier_image_quantized>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	461e      	mov	r6, r3
 8005bb4:	e0ef      	b.n	8005d96 <process_impulse+0x21a>
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bba:	2100      	movs	r1, #0
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f01d ff5f 	bl	8023a80 <memset>

    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8005bca:	2300      	movs	r3, #0
 8005bcc:	2101      	movs	r1, #1
 8005bce:	f7fb feae 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 8005bd2:	f015 f96d 	bl	801aeb0 <_Z16ei_read_timer_usv>
 8005bd6:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

    size_t out_features_index = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8005be0:	2300      	movs	r3, #0
 8005be2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d27c      	bcs.n	8005cec <process_impulse+0x170>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005bf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8005c08:	461d      	mov	r5, r3
 8005c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c0e:	682b      	ldr	r3, [r5, #0]
 8005c10:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 8005c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c18:	441a      	add	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d905      	bls.n	8005c2e <process_impulse+0xb2>
            ei_printf("ERR: Would write outside feature buffer\n");
 8005c22:	4860      	ldr	r0, [pc, #384]	; (8005da4 <process_impulse+0x228>)
 8005c24:	f000 f97a 	bl	8005f1c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005c28:	f06f 0604 	mvn.w	r6, #4
 8005c2c:	e0ad      	b.n	8005d8a <process_impulse+0x20e>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8005c2e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005c30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005c3e:	460a      	mov	r2, r1
 8005c40:	2101      	movs	r1, #1
 8005c42:	f7fb fe74 	bl	800192e <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, impulse->frequency);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 8005c46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c4a:	f107 0014 	add.w	r0, r7, #20
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	460b      	mov	r3, r1
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	f7ff f9a9 	bl	8004fac <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 8005c5a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8005c5c:	f107 0314 	add.w	r3, r7, #20
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff f9d3 	bl	800500c <_ZN14SignalWithAxes10get_signalEv>
 8005c66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005c6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c72:	eeb0 0a67 	vmov.f32	s0, s15
 8005c76:	4619      	mov	r1, r3
 8005c78:	47a0      	blx	r4
 8005c7a:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

        if (ret != EIDSP_OK) {
 8005c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <process_impulse+0x116>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8005c82:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005c84:	4848      	ldr	r0, [pc, #288]	; (8005da8 <process_impulse+0x22c>)
 8005c86:	f000 f949 	bl	8005f1c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005c8a:	f06f 0604 	mvn.w	r6, #4
 8005c8e:	2400      	movs	r4, #0
 8005c90:	e015      	b.n	8005cbe <process_impulse+0x142>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005c92:	f015 f905 	bl	801aea0 <_Z29ei_run_impulse_check_canceledv>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f113 0f02 	cmn.w	r3, #2
 8005c9c:	bf0c      	ite	eq
 8005c9e:	2301      	moveq	r3, #1
 8005ca0:	2300      	movne	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <process_impulse+0x134>
            return EI_IMPULSE_CANCELED;
 8005ca8:	f06f 0601 	mvn.w	r6, #1
 8005cac:	2400      	movs	r4, #0
 8005cae:	e006      	b.n	8005cbe <process_impulse+0x142>
        }

        out_features_index += block.n_output_features;
 8005cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cbc:	2401      	movs	r4, #1
 8005cbe:	f107 0314 	add.w	r3, r7, #20
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff ff4b 	bl	8005b5e <_ZN14SignalWithAxesD1Ev>
 8005cc8:	2c01      	cmp	r4, #1
 8005cca:	d001      	beq.n	8005cd0 <process_impulse+0x154>
 8005ccc:	2400      	movs	r4, #0
 8005cce:	e000      	b.n	8005cd2 <process_impulse+0x156>
 8005cd0:	2401      	movs	r4, #1
 8005cd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fb fe54 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>
 8005cdc:	2c01      	cmp	r4, #1
 8005cde:	d154      	bne.n	8005d8a <process_impulse+0x20e>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8005ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cea:	e77c      	b.n	8005be6 <process_impulse+0x6a>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8005cec:	f015 f8e0 	bl	801aeb0 <_Z16ei_read_timer_usv>
 8005cf0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005cf4:	ebb0 0802 	subs.w	r8, r0, r2
 8005cf8:	eb61 0903 	sbc.w	r9, r1, r3
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8005d0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	f7fa ffc2 	bl	8000c9c <__aeabi_ldivmod>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d020      	beq.n	8005d6a <process_impulse+0x1ee>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005d2e:	4619      	mov	r1, r3
 8005d30:	481e      	ldr	r0, [pc, #120]	; (8005dac <process_impulse+0x230>)
 8005d32:	f000 f8f3 	bl	8005f1c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005d36:	2300      	movs	r3, #0
 8005d38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d210      	bcs.n	8005d64 <process_impulse+0x1e8>
            ei_printf_float(features_matrix.buffer[ix]);
 8005d42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	edd3 7a00 	vldr	s15, [r3]
 8005d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8005d52:	f015 f8c1 	bl	801aed8 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8005d56:	4816      	ldr	r0, [pc, #88]	; (8005db0 <process_impulse+0x234>)
 8005d58:	f000 f8e0 	bl	8005f1c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005d5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d5e:	3301      	adds	r3, #1
 8005d60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d62:	e7ea      	b.n	8005d3a <process_impulse+0x1be>
        }
        ei_printf("\n");
 8005d64:	4813      	ldr	r0, [pc, #76]	; (8005db4 <process_impulse+0x238>)
 8005d66:	f000 f8d9 	bl	8005f1c <_Z9ei_printfPKcz>
    }

    if (debug) {
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <process_impulse+0x1fa>
        ei_printf("Running impulse...\n");
 8005d70:	4811      	ldr	r0, [pc, #68]	; (8005db8 <process_impulse+0x23c>)
 8005d72:	f000 f8d3 	bl	8005f1c <_Z9ei_printfPKcz>
    }

    return run_inference(impulse, &features_matrix, result, debug);
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f7ff fec4 	bl	8005b0c <run_inference>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461e      	mov	r6, r3
 8005d88:	e000      	b.n	8005d8c <process_impulse+0x210>
            return EI_IMPULSE_DSP_ERROR;
 8005d8a:	bf00      	nop
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8005d8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fb fdf7 	bl	8001984 <_ZN2ei9ei_matrixD1Ev>

}
 8005d96:	4633      	mov	r3, r6
 8005d98:	4618      	mov	r0, r3
 8005d9a:	378c      	adds	r7, #140	; 0x8c
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005da2:	bf00      	nop
 8005da4:	0802866c 	.word	0x0802866c
 8005da8:	0802862c 	.word	0x0802862c
 8005dac:	08028654 	.word	0x08028654
 8005db0:	08028668 	.word	0x08028668
 8005db4:	08028190 	.word	0x08028190
 8005db8:	08028698 	.word	0x08028698

08005dbc <ei_construct_impulse>:
#if EI_CLASSIFIER_STUDIO_VERSION < 3
/**
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

const ei_impulse_t impulse =
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a06      	ldr	r2, [pc, #24]	; (8005de0 <ei_construct_impulse+0x24>)
 8005dc8:	4618      	mov	r0, r3
 8005dca:	4611      	mov	r1, r2
 8005dcc:	23a4      	movs	r3, #164	; 0xa4
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f01d fe2e 	bl	8023a30 <memcpy>
    .model_reset = NULL,
#endif
    .categories = ei_classifier_inferencing_categories
    };

    return impulse;
 8005dd4:	bf00      	nop
}
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	08028710 	.word	0x08028710

08005de4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>:
#endif

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse) {
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d00a      	beq.n	8005e0a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	d006      	beq.n	8005e0a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI) // check later
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e00:	2b07      	cmp	r3, #7
 8005e02:	d002      	beq.n	8005e0a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005e04:	f06f 0309 	mvn.w	r3, #9
 8005e08:	e01d      	b.n	8005e46 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    if (impulse->has_anomaly == 1){
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d102      	bne.n	8005e1a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x36>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005e14:	f06f 0308 	mvn.w	r3, #8
 8005e18:	e015      	b.n	8005e46 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

        // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    if (impulse->tflite_input_quantized != 1) {
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d002      	beq.n	8005e2a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x46>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005e24:	f06f 0308 	mvn.w	r3, #8
 8005e28:	e00d      	b.n	8005e46 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d105      	bne.n	8005e3e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x5a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4a06      	ldr	r2, [pc, #24]	; (8005e54 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x70>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d002      	beq.n	8005e44 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x60>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005e3e:	f06f 0308 	mvn.w	r3, #8
 8005e42:	e000      	b.n	8005e46 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    return EI_IMPULSE_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	08004921 	.word	0x08004921

08005e58 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	70fb      	strb	r3, [r7, #3]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized(impulse);
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7ff ffbc 	bl	8005de4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 8005e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <run_classifier_image_quantized+0x26>
        return verify_res;
 8005e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e7c:	e00d      	b.n	8005e9a <run_classifier_image_quantized+0x42>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e82:	2100      	movs	r1, #0
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f01d fdfb 	bl	8023a80 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, debug);
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7ff fd29 	bl	80058e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>
 8005e96:	4603      	mov	r3, r0
 8005e98:	bf00      	nop

}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b0ae      	sub	sp, #184	; 0xb8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	4613      	mov	r3, r2
 8005eae:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
 8005eb0:	f107 0314 	add.w	r3, r7, #20
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff ff81 	bl	8005dbc <ei_construct_impulse>
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    return process_impulse(&impulse, signal, result, debug);
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	f107 0014 	add.w	r0, r7, #20
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	68f9      	ldr	r1, [r7, #12]
 8005ec4:	f7ff fe5a 	bl	8005b7c <process_impulse>
 8005ec8:	4603      	mov	r3, r0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	37b8      	adds	r7, #184	; 0xb8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <_Z6vprintPKcSt9__va_list>:
TIM_HandleTypeDef htim7;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
void vprint(const char *fmt, va_list argp)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b0b4      	sub	sp, #208	; 0xd0
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8005edc:	f107 0308 	add.w	r3, r7, #8
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f01f fb3b 	bl	8025560 <vsiprintf>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bfcc      	ite	gt
 8005ef0:	2301      	movgt	r3, #1
 8005ef2:	2300      	movle	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00c      	beq.n	8005f14 <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	 CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8005efa:	f107 0308 	add.w	r3, r7, #8
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fa f9c0 	bl	8000284 <strlen>
 8005f04:	4603      	mov	r3, r0
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	f107 0308 	add.w	r3, r7, #8
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f01a fb54 	bl	80205bc <CDC_Transmit_FS>
    }
}
 8005f14:	bf00      	nop
 8005f16:	37d0      	adds	r7, #208	; 0xd0
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8005f1c:	b40f      	push	{r0, r1, r2, r3}
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8005f24:	f107 0314 	add.w	r3, r7, #20
 8005f28:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	6938      	ldr	r0, [r7, #16]
 8005f2e:	f7ff ffd0 	bl	8005ed2 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f3c:	b004      	add	sp, #16
 8005f3e:	4770      	bx	lr

08005f40 <_Z16get_feature_datajjPf>:
using namespace ei;

static float features[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE] = { 0.0 };

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4a06      	ldr	r2, [pc, #24]	; (8005f6c <_Z16get_feature_datajjPf+0x2c>)
 8005f52:	1899      	adds	r1, r3, r2
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f01d fd68 	bl	8023a30 <memcpy>
    return 0;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	2000057c 	.word	0x2000057c

08005f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b0ca      	sub	sp, #296	; 0x128
 8005f74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f76:	f003 f98b 	bl	8009290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f7a:	f000 f91d 	bl	80061b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f7e:	f000 fa23 	bl	80063c8 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8005f82:	f000 f9a5 	bl	80062d0 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8005f86:	f01a fa5b 	bl	8020440 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8005f8a:	f000 f9dd 	bl	8006348 <_ZL12MX_TIM7_Initv>
  MX_CRC_Init();
 8005f8e:	f000 f987 	bl	80062a0 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
	myAccConfigDef.dataRate = LIS3DSH_DATARATE_800;
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8005f98:	2308      	movs	r3, #8
 8005f9a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8005f9e:	2307      	movs	r3, #7
 8005fa0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	myAccConfigDef.interruptEnable = true;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	//myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8005faa:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005fae:	4619      	mov	r1, r3
 8005fb0:	486f      	ldr	r0, [pc, #444]	; (8006170 <main+0x200>)
 8005fb2:	f7fb f8e9 	bl	8001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>

	LIS3DSH_X_calibrate(-1000.0, 980.0);
 8005fb6:	eddf 0a6f 	vldr	s1, [pc, #444]	; 8006174 <main+0x204>
 8005fba:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8006178 <main+0x208>
 8005fbe:	f7fb fa69 	bl	8001494 <_Z19LIS3DSH_X_calibrateff>
	LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 8005fc2:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800617c <main+0x20c>
 8005fc6:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8006180 <main+0x210>
 8005fca:	f7fb fa91 	bl	80014f0 <_Z19LIS3DSH_Y_calibrateff>
	LIS3DSH_Z_calibrate(-920.0, 1040.0);
 8005fce:	eddf 0a6b 	vldr	s1, [pc, #428]	; 800617c <main+0x20c>
 8005fd2:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8006184 <main+0x214>
 8005fd6:	f7fb fab9 	bl	800154c <_Z19LIS3DSH_Z_calibrateff>
	signal_t signal;
 8005fda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fc2b 	bl	800483a <_ZN2ei11ei_signal_tC1Ev>
	  	signal.total_length = sizeof(features) / sizeof(features[0]);
 8005fe4:	f640 1396 	movw	r3, #2454	; 0x996
 8005fe8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  	signal.get_data = &get_feature_data;
 8005fec:	4b66      	ldr	r3, [pc, #408]	; (8006188 <main+0x218>)
 8005fee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ff2:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8005ff6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 fc98 	bl	8006932 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(;featuresarrayisready==false;)
 8006002:	4b62      	ldr	r3, [pc, #392]	; (800618c <main+0x21c>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d14f      	bne.n	80060aa <main+0x13a>
		{
		  	if(drdyFlag==1){
 800600a:	4b61      	ldr	r3, [pc, #388]	; (8006190 <main+0x220>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d1f7      	bne.n	8006002 <main+0x92>
		  		drdyFlag=0;
 8006012:	4b5f      	ldr	r3, [pc, #380]	; (8006190 <main+0x220>)
 8006014:	2200      	movs	r2, #0
 8006016:	701a      	strb	r2, [r3, #0]
		  		myData = LIS3DSH_GetDataScaled();
 8006018:	f7fb f9ba 	bl	8001390 <_Z21LIS3DSH_GetDataScaledv>
 800601c:	eef0 6a40 	vmov.f32	s13, s0
 8006020:	eeb0 7a60 	vmov.f32	s14, s1
 8006024:	eef0 7a41 	vmov.f32	s15, s2
 8006028:	4b5a      	ldr	r3, [pc, #360]	; (8006194 <main+0x224>)
 800602a:	edc3 6a00 	vstr	s13, [r3]
 800602e:	ed83 7a01 	vstr	s14, [r3, #4]
 8006032:	edc3 7a02 	vstr	s15, [r3, #8]
		  		  	features[3*countt]=myData.x;
 8006036:	4b58      	ldr	r3, [pc, #352]	; (8006198 <main+0x228>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4613      	mov	r3, r2
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	4413      	add	r3, r2
 8006040:	4a54      	ldr	r2, [pc, #336]	; (8006194 <main+0x224>)
 8006042:	6812      	ldr	r2, [r2, #0]
 8006044:	4955      	ldr	r1, [pc, #340]	; (800619c <main+0x22c>)
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	601a      	str	r2, [r3, #0]
		  		  	features[3*countt+1]=myData.y;
 800604c:	4b52      	ldr	r3, [pc, #328]	; (8006198 <main+0x228>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	4413      	add	r3, r2
 8006056:	3301      	adds	r3, #1
 8006058:	4a4e      	ldr	r2, [pc, #312]	; (8006194 <main+0x224>)
 800605a:	6852      	ldr	r2, [r2, #4]
 800605c:	494f      	ldr	r1, [pc, #316]	; (800619c <main+0x22c>)
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	601a      	str	r2, [r3, #0]
		  		  	features[3*countt+2]=myData.z;
 8006064:	4b4c      	ldr	r3, [pc, #304]	; (8006198 <main+0x228>)
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	4413      	add	r3, r2
 800606e:	3302      	adds	r3, #2
 8006070:	4a48      	ldr	r2, [pc, #288]	; (8006194 <main+0x224>)
 8006072:	6892      	ldr	r2, [r2, #8]
 8006074:	4949      	ldr	r1, [pc, #292]	; (800619c <main+0x22c>)
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	601a      	str	r2, [r3, #0]
		  		  	countt++;
 800607c:	4b46      	ldr	r3, [pc, #280]	; (8006198 <main+0x228>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3301      	adds	r3, #1
 8006082:	4a45      	ldr	r2, [pc, #276]	; (8006198 <main+0x228>)
 8006084:	6013      	str	r3, [r2, #0]
			//CDC_Transmit_FS((uint8_t*)features, strlen(features));
			//HAL_Delay(5000);
			  if(countt==EI_CLASSIFIER_RAW_SAMPLE_COUNT){
 8006086:	4b44      	ldr	r3, [pc, #272]	; (8006198 <main+0x228>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f240 3232 	movw	r2, #818	; 0x332
 800608e:	4293      	cmp	r3, r2
 8006090:	d105      	bne.n	800609e <main+0x12e>
						countt=0;
 8006092:	4b41      	ldr	r3, [pc, #260]	; (8006198 <main+0x228>)
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
						featuresarrayisready=true;
 8006098:	4b3c      	ldr	r3, [pc, #240]	; (800618c <main+0x21c>)
 800609a:	2201      	movs	r2, #1
 800609c:	701a      	strb	r2, [r3, #0]
					}
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800609e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060a2:	483f      	ldr	r0, [pc, #252]	; (80061a0 <main+0x230>)
 80060a4:	f003 fc6d 	bl	8009982 <HAL_GPIO_TogglePin>
	  for(;featuresarrayisready==false;)
 80060a8:	e7ab      	b.n	8006002 <main+0x92>

		  	}

		}
	  ei_impulse_result_t result = { 0 };
 80060aa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80060ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80060b2:	4618      	mov	r0, r3
 80060b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060b8:	461a      	mov	r2, r3
 80060ba:	2100      	movs	r1, #0
 80060bc:	f01d fce0 	bl	8023a80 <memset>
	  	      EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 80060c0:	4639      	mov	r1, r7
 80060c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80060c6:	2201      	movs	r2, #1
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff feea 	bl	8005ea2 <run_classifier>
 80060ce:	4603      	mov	r3, r0
 80060d0:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	  	      ei_printf("run_classifier returned: %d\n", res);
 80060d4:	f997 3123 	ldrsb.w	r3, [r7, #291]	; 0x123
 80060d8:	4619      	mov	r1, r3
 80060da:	4832      	ldr	r0, [pc, #200]	; (80061a4 <main+0x234>)
 80060dc:	f7ff ff1e 	bl	8005f1c <_Z9ei_printfPKcz>

	  	      ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 80060e0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80060e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80060e8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80060ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80060f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80060f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80060f8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80060fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006100:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006104:	4828      	ldr	r0, [pc, #160]	; (80061a8 <main+0x238>)
 8006106:	f7ff ff09 	bl	8005f1c <_Z9ei_printfPKcz>
	  	          result.timing.dsp, result.timing.classification, result.timing.anomaly);

	  	      // print the predictions
	  	      ei_printf("[");
 800610a:	4828      	ldr	r0, [pc, #160]	; (80061ac <main+0x23c>)
 800610c:	f7ff ff06 	bl	8005f1c <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8006110:	2300      	movs	r3, #0
 8006112:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006116:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800611a:	2b02      	cmp	r3, #2
 800611c:	d81c      	bhi.n	8006158 <main+0x1e8>
	  	    	  ei_printf_float(result.classification[ix].value);
 800611e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006122:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8006126:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800612a:	3301      	adds	r3, #1
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	4413      	add	r3, r2
 8006130:	3304      	adds	r3, #4
 8006132:	edd3 7a00 	vldr	s15, [r3]
 8006136:	eeb0 0a67 	vmov.f32	s0, s15
 800613a:	f014 fecd 	bl	801aed8 <_Z15ei_printf_floatf>
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	          ei_printf(", ");
	  	  #else
	  	          if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 800613e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006142:	2b02      	cmp	r3, #2
 8006144:	d002      	beq.n	800614c <main+0x1dc>
	  	              ei_printf(", ");
 8006146:	481a      	ldr	r0, [pc, #104]	; (80061b0 <main+0x240>)
 8006148:	f7ff fee8 	bl	8005f1c <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800614c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006150:	3301      	adds	r3, #1
 8006152:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006156:	e7de      	b.n	8006116 <main+0x1a6>
	  	  #endif
	  	      }
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	      ei_printf_float(result.anomaly);
	  	  #endif
	  	      ei_printf("]\n\n\n");
 8006158:	4816      	ldr	r0, [pc, #88]	; (80061b4 <main+0x244>)
 800615a:	f7ff fedf 	bl	8005f1c <_Z9ei_printfPKcz>


	  //memset(features, 0.0, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
	  HAL_Delay(1500);
 800615e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006162:	f003 f907 	bl	8009374 <HAL_Delay>
	  featuresarrayisready=false;
 8006166:	4b09      	ldr	r3, [pc, #36]	; (800618c <main+0x21c>)
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]

  }
 800616c:	e749      	b.n	8006002 <main+0x92>
 800616e:	bf00      	nop
 8006170:	200004dc 	.word	0x200004dc
 8006174:	44750000 	.word	0x44750000
 8006178:	c47a0000 	.word	0xc47a0000
 800617c:	44820000 	.word	0x44820000
 8006180:	c47f0000 	.word	0xc47f0000
 8006184:	c4660000 	.word	0xc4660000
 8006188:	08005f41 	.word	0x08005f41
 800618c:	20002be1 	.word	0x20002be1
 8006190:	20002be0 	.word	0x20002be0
 8006194:	20002bd4 	.word	0x20002bd4
 8006198:	20002be4 	.word	0x20002be4
 800619c:	2000057c 	.word	0x2000057c
 80061a0:	40020c00 	.word	0x40020c00
 80061a4:	080287e0 	.word	0x080287e0
 80061a8:	08028800 	.word	0x08028800
 80061ac:	08028848 	.word	0x08028848
 80061b0:	0802884c 	.word	0x0802884c
 80061b4:	08028850 	.word	0x08028850

080061b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b094      	sub	sp, #80	; 0x50
 80061bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80061be:	f107 0320 	add.w	r3, r7, #32
 80061c2:	2230      	movs	r2, #48	; 0x30
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f01d fc5a 	bl	8023a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061cc:	f107 030c 	add.w	r3, r7, #12
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	605a      	str	r2, [r3, #4]
 80061d6:	609a      	str	r2, [r3, #8]
 80061d8:	60da      	str	r2, [r3, #12]
 80061da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80061dc:	2300      	movs	r3, #0
 80061de:	60bb      	str	r3, [r7, #8]
 80061e0:	4b2d      	ldr	r3, [pc, #180]	; (8006298 <_Z18SystemClock_Configv+0xe0>)
 80061e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e4:	4a2c      	ldr	r2, [pc, #176]	; (8006298 <_Z18SystemClock_Configv+0xe0>)
 80061e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ea:	6413      	str	r3, [r2, #64]	; 0x40
 80061ec:	4b2a      	ldr	r3, [pc, #168]	; (8006298 <_Z18SystemClock_Configv+0xe0>)
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80061f8:	2300      	movs	r3, #0
 80061fa:	607b      	str	r3, [r7, #4]
 80061fc:	4b27      	ldr	r3, [pc, #156]	; (800629c <_Z18SystemClock_Configv+0xe4>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a26      	ldr	r2, [pc, #152]	; (800629c <_Z18SystemClock_Configv+0xe4>)
 8006202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	4b24      	ldr	r3, [pc, #144]	; (800629c <_Z18SystemClock_Configv+0xe4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006210:	607b      	str	r3, [r7, #4]
 8006212:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006214:	2301      	movs	r3, #1
 8006216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800621e:	2302      	movs	r3, #2
 8006220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006228:	2304      	movs	r3, #4
 800622a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800622c:	2348      	movs	r3, #72	; 0x48
 800622e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006230:	2302      	movs	r3, #2
 8006232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006234:	2303      	movs	r3, #3
 8006236:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006238:	f107 0320 	add.w	r3, r7, #32
 800623c:	4618      	mov	r0, r3
 800623e:	f004 fe51 	bl	800aee4 <HAL_RCC_OscConfig>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	bf14      	ite	ne
 8006248:	2301      	movne	r3, #1
 800624a:	2300      	moveq	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8006252:	f000 f961 	bl	8006518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006256:	230f      	movs	r3, #15
 8006258:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800625a:	2302      	movs	r3, #2
 800625c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800625e:	2300      	movs	r3, #0
 8006260:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006262:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006266:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800626c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800626e:	f107 030c 	add.w	r3, r7, #12
 8006272:	2102      	movs	r1, #2
 8006274:	4618      	mov	r0, r3
 8006276:	f005 f8ad 	bl	800b3d4 <HAL_RCC_ClockConfig>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	bf14      	ite	ne
 8006280:	2301      	movne	r3, #1
 8006282:	2300      	moveq	r3, #0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800628a:	f000 f945 	bl	8006518 <Error_Handler>
  }
}
 800628e:	bf00      	nop
 8006290:	3750      	adds	r7, #80	; 0x50
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40023800 	.word	0x40023800
 800629c:	40007000 	.word	0x40007000

080062a0 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80062a4:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <_ZL11MX_CRC_Initv+0x28>)
 80062a6:	4a09      	ldr	r2, [pc, #36]	; (80062cc <_ZL11MX_CRC_Initv+0x2c>)
 80062a8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80062aa:	4807      	ldr	r0, [pc, #28]	; (80062c8 <_ZL11MX_CRC_Initv+0x28>)
 80062ac:	f003 f997 	bl	80095de <HAL_CRC_Init>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 80062c0:	f000 f92a 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80062c4:	bf00      	nop
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	200004d4 	.word	0x200004d4
 80062cc:	40023000 	.word	0x40023000

080062d0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80062d4:	4b1a      	ldr	r3, [pc, #104]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062d6:	4a1b      	ldr	r2, [pc, #108]	; (8006344 <_ZL12MX_SPI1_Initv+0x74>)
 80062d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80062da:	4b19      	ldr	r3, [pc, #100]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80062e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80062e2:	4b17      	ldr	r3, [pc, #92]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80062e8:	4b15      	ldr	r3, [pc, #84]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80062ee:	4b14      	ldr	r3, [pc, #80]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80062f4:	4b12      	ldr	r3, [pc, #72]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80062fa:	4b11      	ldr	r3, [pc, #68]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 80062fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006300:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 8006304:	2210      	movs	r2, #16
 8006306:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006308:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 800630a:	2200      	movs	r2, #0
 800630c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800630e:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 8006310:	2200      	movs	r2, #0
 8006312:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006314:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 8006316:	2200      	movs	r2, #0
 8006318:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800631a:	4b09      	ldr	r3, [pc, #36]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 800631c:	220a      	movs	r2, #10
 800631e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006320:	4807      	ldr	r0, [pc, #28]	; (8006340 <_ZL12MX_SPI1_Initv+0x70>)
 8006322:	f005 fa4f 	bl	800b7c4 <HAL_SPI_Init>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	bf14      	ite	ne
 800632c:	2301      	movne	r3, #1
 800632e:	2300      	moveq	r3, #0
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8006336:	f000 f8ef 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800633a:	bf00      	nop
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	200004dc 	.word	0x200004dc
 8006344:	40013000 	.word	0x40013000

08006348 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800634e:	463b      	mov	r3, r7
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006356:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 8006358:	4a1a      	ldr	r2, [pc, #104]	; (80063c4 <_ZL12MX_TIM7_Initv+0x7c>)
 800635a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20000;
 800635c:	4b18      	ldr	r3, [pc, #96]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 800635e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006362:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006364:	4b16      	ldr	r3, [pc, #88]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 8006366:	2200      	movs	r2, #0
 8006368:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 800636a:	4b15      	ldr	r3, [pc, #84]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 800636c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006370:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006372:	4b13      	ldr	r3, [pc, #76]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 8006374:	2200      	movs	r2, #0
 8006376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006378:	4811      	ldr	r0, [pc, #68]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 800637a:	f005 ffcb 	bl	800c314 <HAL_TIM_Base_Init>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	bf14      	ite	ne
 8006384:	2301      	movne	r3, #1
 8006386:	2300      	moveq	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800638e:	f000 f8c3 	bl	8006518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006392:	2300      	movs	r3, #0
 8006394:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800639a:	463b      	mov	r3, r7
 800639c:	4619      	mov	r1, r3
 800639e:	4808      	ldr	r0, [pc, #32]	; (80063c0 <_ZL12MX_TIM7_Initv+0x78>)
 80063a0:	f006 f9e2 	bl	800c768 <HAL_TIMEx_MasterConfigSynchronization>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bf14      	ite	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	2300      	moveq	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 80063b4:	f000 f8b0 	bl	8006518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80063b8:	bf00      	nop
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20000534 	.word	0x20000534
 80063c4:	40001400 	.word	0x40001400

080063c8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	; 0x28
 80063cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063ce:	f107 0314 	add.w	r3, r7, #20
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	605a      	str	r2, [r3, #4]
 80063d8:	609a      	str	r2, [r3, #8]
 80063da:	60da      	str	r2, [r3, #12]
 80063dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80063de:	2300      	movs	r3, #0
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	4b41      	ldr	r3, [pc, #260]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	4a40      	ldr	r2, [pc, #256]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 80063e8:	f043 0310 	orr.w	r3, r3, #16
 80063ec:	6313      	str	r3, [r2, #48]	; 0x30
 80063ee:	4b3e      	ldr	r3, [pc, #248]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	f003 0310 	and.w	r3, r3, #16
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80063fa:	2300      	movs	r3, #0
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	4b3a      	ldr	r3, [pc, #232]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	4a39      	ldr	r2, [pc, #228]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 8006404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006408:	6313      	str	r3, [r2, #48]	; 0x30
 800640a:	4b37      	ldr	r3, [pc, #220]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006416:	2300      	movs	r3, #0
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	4b33      	ldr	r3, [pc, #204]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	4a32      	ldr	r2, [pc, #200]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 8006420:	f043 0301 	orr.w	r3, r3, #1
 8006424:	6313      	str	r3, [r2, #48]	; 0x30
 8006426:	4b30      	ldr	r3, [pc, #192]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	60bb      	str	r3, [r7, #8]
 8006430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	607b      	str	r3, [r7, #4]
 8006436:	4b2c      	ldr	r3, [pc, #176]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	4a2b      	ldr	r2, [pc, #172]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 800643c:	f043 0308 	orr.w	r3, r3, #8
 8006440:	6313      	str	r3, [r2, #48]	; 0x30
 8006442:	4b29      	ldr	r3, [pc, #164]	; (80064e8 <_ZL12MX_GPIO_Initv+0x120>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	607b      	str	r3, [r7, #4]
 800644c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 800644e:	2200      	movs	r2, #0
 8006450:	2108      	movs	r1, #8
 8006452:	4826      	ldr	r0, [pc, #152]	; (80064ec <_ZL12MX_GPIO_Initv+0x124>)
 8006454:	f003 fa7c 	bl	8009950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8006458:	2200      	movs	r2, #0
 800645a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800645e:	4824      	ldr	r0, [pc, #144]	; (80064f0 <_ZL12MX_GPIO_Initv+0x128>)
 8006460:	f003 fa76 	bl	8009950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MEMS_CS_Pin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 8006464:	2308      	movs	r3, #8
 8006466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006468:	2301      	movs	r3, #1
 800646a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800646c:	2300      	movs	r3, #0
 800646e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006470:	2300      	movs	r3, #0
 8006472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 8006474:	f107 0314 	add.w	r3, r7, #20
 8006478:	4619      	mov	r1, r3
 800647a:	481c      	ldr	r0, [pc, #112]	; (80064ec <_ZL12MX_GPIO_Initv+0x124>)
 800647c:	f003 f8cc 	bl	8009618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006480:	2301      	movs	r3, #1
 8006482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006484:	2300      	movs	r3, #0
 8006486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006488:	2300      	movs	r3, #0
 800648a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800648c:	f107 0314 	add.w	r3, r7, #20
 8006490:	4619      	mov	r1, r3
 8006492:	4818      	ldr	r0, [pc, #96]	; (80064f4 <_ZL12MX_GPIO_Initv+0x12c>)
 8006494:	f003 f8c0 	bl	8009618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006498:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800649c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800649e:	2301      	movs	r3, #1
 80064a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064a6:	2300      	movs	r3, #0
 80064a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064aa:	f107 0314 	add.w	r3, r7, #20
 80064ae:	4619      	mov	r1, r3
 80064b0:	480f      	ldr	r0, [pc, #60]	; (80064f0 <_ZL12MX_GPIO_Initv+0x128>)
 80064b2:	f003 f8b1 	bl	8009618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80064b6:	2301      	movs	r3, #1
 80064b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80064ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80064be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064c4:	f107 0314 	add.w	r3, r7, #20
 80064c8:	4619      	mov	r1, r3
 80064ca:	4808      	ldr	r0, [pc, #32]	; (80064ec <_ZL12MX_GPIO_Initv+0x124>)
 80064cc:	f003 f8a4 	bl	8009618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80064d0:	2200      	movs	r2, #0
 80064d2:	2100      	movs	r1, #0
 80064d4:	2006      	movs	r0, #6
 80064d6:	f003 f84c 	bl	8009572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80064da:	2006      	movs	r0, #6
 80064dc:	f003 f865 	bl	80095aa <HAL_NVIC_EnableIRQ>

}
 80064e0:	bf00      	nop
 80064e2:	3728      	adds	r7, #40	; 0x28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	40023800 	.word	0x40023800
 80064ec:	40021000 	.word	0x40021000
 80064f0:	40020c00 	.word	0x40020c00
 80064f4:	40020000 	.word	0x40020000

080064f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	80fb      	strh	r3, [r7, #6]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
 /* if(GPIO_Pin==GPIO_PIN_0){
  	  if(HAL_GPIO_ReadPin( GPIOA,GPIO_PIN_0)){*/
  drdyFlag = 1;
 8006502:	4b04      	ldr	r3, [pc, #16]	; (8006514 <HAL_GPIO_EXTI_Callback+0x1c>)
 8006504:	2201      	movs	r2, #1
 8006506:	701a      	strb	r2, [r3, #0]
  		CDC_Transmit_FS("\n", strlen("\n"));
  		  }
  	  }
  }*/

}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	20002be0 	.word	0x20002be0

08006518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800651c:	e7fe      	b.n	800651c <Error_Handler+0x4>

0800651e <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>:
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	607a      	str	r2, [r7, #4]
 800652a:	603b      	str	r3, [r7, #0]
#else
      explicit
      vector(size_type __n, const bool& __value = bool(),
	     const allocator_type& __a = allocator_type())
#endif
      : _Base(__a)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fa4a 	bl	80069ca <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>
      {
	_M_initialize(__n);
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 fa69 	bl	8006a10 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>
	_M_initialize_value(__value);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	4619      	mov	r1, r3
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fab1 	bl	8006aac <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>
      }
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>:
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      ~vector() _GLIBCXX_NOEXCEPT { }
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fa4a 	bl	80069f8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>:
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return begin() == end(); }

      reference
      operator[](size_type __n)
 800656e:	b580      	push	{r7, lr}
 8006570:	b086      	sub	sp, #24
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
      {
	return *iterator(this->_M_impl._M_start._M_p
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	681a      	ldr	r2, [r3, #0]
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	095b      	lsrs	r3, r3, #5
 8006582:	009b      	lsls	r3, r3, #2
	return *iterator(this->_M_impl._M_start._M_p
 8006584:	18d1      	adds	r1, r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f003 021f 	and.w	r2, r3, #31
 800658c:	f107 0310 	add.w	r3, r7, #16
 8006590:	4618      	mov	r0, r3
 8006592:	f7fb f93b 	bl	800180c <_ZNSt13_Bit_iteratorC1EPmj>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f107 0210 	add.w	r2, r7, #16
 800659c:	4611      	mov	r1, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fb f945 	bl	800182e <_ZNKSt13_Bit_iteratordeEv>
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 80065a4:	bf00      	nop
      }
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7ff ffed 	bl	80065ae <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80065d4:	4603      	mov	r3, r0
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80065da:	6838      	ldr	r0, [r7, #0]
 80065dc:	f7ff ffe7 	bl	80065ae <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80065e0:	4603      	mov	r3, r0
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80065e8:	f107 030c 	add.w	r3, r7, #12
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff ffde 	bl	80065ae <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80065f2:	4603      	mov	r3, r0
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	601a      	str	r2, [r3, #0]
    }
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8006602:	b5b0      	push	{r4, r5, r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	ed87 0a01 	vstr	s0, [r7, #4]
 800660c:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7f9 ffa4 	bl	800055c <__aeabi_f2d>
 8006614:	4604      	mov	r4, r0
 8006616:	460d      	mov	r5, r1
 8006618:	6838      	ldr	r0, [r7, #0]
 800661a:	f7f9 ff8d 	bl	8000538 <__aeabi_i2d>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	ec43 2b11 	vmov	d1, r2, r3
 8006626:	ec45 4b10 	vmov	d0, r4, r5
 800662a:	f01a fe6f 	bl	802130c <pow>
 800662e:	eeb0 7a40 	vmov.f32	s14, s0
 8006632:	eef0 7a60 	vmov.f32	s15, s1
    }
 8006636:	eeb0 0a47 	vmov.f32	s0, s14
 800663a:	eef0 0a67 	vmov.f32	s1, s15
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bdb0      	pop	{r4, r5, r7, pc}

08006644 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fa77 	bl	8006b4a <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 8006666:	b590      	push	{r4, r7, lr}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 8006672:	68fc      	ldr	r4, [r7, #12]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fa5d 	bl	8006b34 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 800667a:	4603      	mov	r3, r0
 800667c:	461a      	mov	r2, r3
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	4620      	mov	r0, r4
 8006682:	f7ff ffdf 	bl	8006644 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	bd90      	pop	{r4, r7, pc}

08006690 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8006690:	b590      	push	{r4, r7, lr}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fa6b 	bl	8006b76 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80066a0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00b      	beq.n	80066c2 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fa70 	bl	8006b90 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 80066b0:	4603      	mov	r3, r0
 80066b2:	681c      	ldr	r4, [r3, #0]
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 fa78 	bl	8006baa <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 80066ba:	4603      	mov	r3, r0
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	47a0      	blx	r4
	__ptr = pointer();
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
      }
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd90      	pop	{r4, r7, pc}

080066d2 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 80066d2:	b590      	push	{r4, r7, lr}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 80066dc:	687c      	ldr	r4, [r7, #4]
 80066de:	463b      	mov	r3, r7
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fa62 	bl	8006baa <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 80066e6:	4603      	mov	r3, r0
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4619      	mov	r1, r3
 80066ec:	4620      	mov	r0, r4
 80066ee:	f000 fa67 	bl	8006bc0 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>
      }
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}

080066fa <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	ed93 7a00 	vldr	s14, [r3]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	edd3 7a00 	vldr	s15, [r3]
 8006710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006718:	d501      	bpl.n	800671e <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	e000      	b.n	8006720 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800671e:	687b      	ldr	r3, [r7, #4]
    }
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800672c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
 800673a:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fb f8e4 	bl	800190c <_ZNKSt14_Function_base8_M_emptyEv>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 800674a:	f7fb f985 	bl	8001a58 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	68dc      	ldr	r4, [r3, #12]
 8006752:	68fd      	ldr	r5, [r7, #12]
 8006754:	f107 0308 	add.w	r3, r7, #8
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fa50 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800675e:	4606      	mov	r6, r0
 8006760:	1d3b      	adds	r3, r7, #4
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fa4b 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006768:	4680      	mov	r8, r0
 800676a:	463b      	mov	r3, r7
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fa51 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006772:	4603      	mov	r3, r0
 8006774:	4642      	mov	r2, r8
 8006776:	4631      	mov	r1, r6
 8006778:	4628      	mov	r0, r5
 800677a:	47a0      	blx	r4
 800677c:	4603      	mov	r3, r0
    }
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006788 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7f9 fed1 	bl	8000538 <__aeabi_i2d>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	ec43 2b17 	vmov	d7, r2, r3
 800679e:	eeb0 0a47 	vmov.f32	s0, s14
 80067a2:	eef0 0a67 	vmov.f32	s1, s15
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fa37 	bl	8006c2a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>
	{ }
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80067de:	461a      	mov	r2, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fa36 	bl	8006c52 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      }
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80067f0:	b5b0      	push	{r4, r5, r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681c      	ldr	r4, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fa38 	bl	8006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006808:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800680a:	461a      	mov	r2, r3
 800680c:	4629      	mov	r1, r5
 800680e:	4620      	mov	r0, r4
 8006810:	f000 fa3d 	bl	8006c8e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff ffd5 	bl	80067c6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bdb0      	pop	{r4, r5, r7, pc}

08006826 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	429a      	cmp	r2, r3
 800683a:	d00d      	beq.n	8006858 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	f000 fa3c 	bl	8006cc2 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
				     __x);
	    ++this->_M_impl._M_finish;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f103 0208 	add.w	r2, r3, #8
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8006856:	e008      	b.n	800686a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f81a 	bl	8006892 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 800685e:	4603      	mov	r3, r0
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fa55 	bl	8006d14 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>
      }
 800686a:	bf00      	nop
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	f107 030c 	add.w	r3, r7, #12
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fb02 	bl	8006e8c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	1d1a      	adds	r2, r3, #4
 800689e:	f107 030c 	add.w	r3, r7, #12
 80068a2:	4611      	mov	r1, r2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 faf1 	bl	8006e8c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80068b4:	b590      	push	{r4, r7, lr}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	713a      	strb	r2, [r7, #4]
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 faf3 	bl	8006eac <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 80068c6:	4622      	mov	r2, r4
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fb01 	bl	8006ed2 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80068d0:	bf00      	nop
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd90      	pop	{r4, r7, pc}

080068d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	10db      	asrs	r3, r3, #3
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	4413      	add	r3, r2
      }
 800690c:	4618      	mov	r0, r3
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4618      	mov	r0, r3
 8006924:	f7fa ffd1 	bl	80018ca <_ZNSt14_Function_baseC1Ev>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8006932:	b580      	push	{r7, lr}
 8006934:	b086      	sub	sp, #24
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800693c:	6838      	ldr	r0, [r7, #0]
 800693e:	f000 faf5 	bl	8006f2c <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006942:	4603      	mov	r3, r0
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	f107 0308 	add.w	r3, r7, #8
 800694a:	4611      	mov	r1, r2
 800694c:	4618      	mov	r0, r3
 800694e:	f000 faf9 	bl	8006f44 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8006952:	f107 0308 	add.w	r3, r7, #8
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	4618      	mov	r0, r3
 800695a:	f000 f8ca 	bl	8006af2 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800695e:	f107 0308 	add.w	r3, r7, #8
 8006962:	4618      	mov	r0, r3
 8006964:	f7fd ff5c 	bl	8004820 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8006968:	687b      	ldr	r3, [r7, #4]
	}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8006972:	b580      	push	{r7, lr}
 8006974:	b086      	sub	sp, #24
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800697c:	6838      	ldr	r0, [r7, #0]
 800697e:	f000 fb0b 	bl	8006f98 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8006982:	4602      	mov	r2, r0
 8006984:	f107 0308 	add.w	r3, r7, #8
 8006988:	6811      	ldr	r1, [r2, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fb10 	bl	8006fb0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8006990:	f107 0308 	add.w	r3, r7, #8
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f8ab 	bl	8006af2 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800699c:	f107 0308 	add.w	r3, r7, #8
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fd ff3d 	bl	8004820 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 80069a6:	687b      	ldr	r3, [r7, #4]
	}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
      get() const noexcept
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fb22 	bl	8007004 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80069c0:	4603      	mov	r3, r0
 80069c2:	4618      	mov	r0, r3
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>:
      _Bvector_base(const allocator_type& __a)
 80069ca:	b590      	push	{r4, r7, lr}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80069d4:	687c      	ldr	r4, [r7, #4]
 80069d6:	f107 030c 	add.w	r3, r7, #12
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fb1f 	bl	8007020 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>
 80069e2:	f107 030c 	add.w	r3, r7, #12
 80069e6:	4619      	mov	r1, r3
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fb25 	bl	8007038 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd90      	pop	{r4, r7, pc}

080069f8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>:
      ~_Bvector_base()
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fb27 	bl	8007054 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>:
	return std::copy(const_iterator(__last._M_p, 0), __last,
			 iterator(__q, 0));
      }

      void
      _M_initialize(size_type __n)
 8006a10:	b590      	push	{r4, r7, lr}
 8006a12:	b08b      	sub	sp, #44	; 0x2c
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
      {
	if (__n)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d021      	beq.n	8006a64 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x54>
	  {
	    _Bit_pointer __q = this->_M_allocate(__n);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fb3a 	bl	800709e <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>
 8006a2a:	6278      	str	r0, [r7, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 8006a2c:	68b8      	ldr	r0, [r7, #8]
 8006a2e:	f000 fb49 	bl	80070c4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 8006a32:	4603      	mov	r3, r0
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a38:	441a      	add	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	611a      	str	r2, [r3, #16]
	    this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
 8006a3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a40:	f000 fb4d 	bl	80070de <_ZSt11__addressofImEPT_RS0_>
 8006a44:	4601      	mov	r1, r0
 8006a46:	f107 0314 	add.w	r3, r7, #20
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fa fedd 	bl	800180c <_ZNSt13_Bit_iteratorC1EPmj>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	461a      	mov	r2, r3
 8006a56:	f107 0314 	add.w	r3, r7, #20
 8006a5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006a5e:	e882 0003 	stmia.w	r2, {r0, r1}
 8006a62:	e011      	b.n	8006a88 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x78>
	  }
	else
	  {
	    this->_M_impl._M_end_of_storage = _Bit_pointer();
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	611a      	str	r2, [r3, #16]
	    this->_M_impl._M_start = iterator(0, 0);
 8006a6a:	f107 031c 	add.w	r3, r7, #28
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2100      	movs	r1, #0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fa feca 	bl	800180c <_ZNSt13_Bit_iteratorC1EPmj>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f107 031c 	add.w	r3, r7, #28
 8006a80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006a84:	e882 0003 	stmia.w	r2, {r0, r1}
	  }
	this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
 8006a88:	68f9      	ldr	r1, [r7, #12]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	68fc      	ldr	r4, [r7, #12]
 8006a8e:	463b      	mov	r3, r7
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fa feef 	bl	8001874 <_ZStplRKSt13_Bit_iteratori>
 8006a96:	f104 0308 	add.w	r3, r4, #8
 8006a9a:	463a      	mov	r2, r7
 8006a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006aa0:	e883 0003 	stmia.w	r3, {r0, r1}

      }
 8006aa4:	bf00      	nop
 8006aa6:	372c      	adds	r7, #44	; 0x2c
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd90      	pop	{r4, r7, pc}

08006aac <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>:

      void
      _M_initialize_value(bool __x)
 8006aac:	b590      	push	{r4, r7, lr}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
      {
	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d012      	beq.n	8006aea <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x3e>
	  __builtin_memset(__p, __x ? ~0 : 0,
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x24>
 8006aca:	f04f 34ff 	mov.w	r4, #4294967295
 8006ace:	e000      	b.n	8006ad2 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x26>
 8006ad0:	2400      	movs	r4, #0
			   (this->_M_impl._M_end_addr() - __p)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fb0d 	bl	80070f4 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 8006ada:	4602      	mov	r2, r0
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	1ad3      	subs	r3, r2, r3
	  __builtin_memset(__p, __x ? ~0 : 0,
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f01c ffcb 	bl	8023a80 <memset>
			   * sizeof(_Bit_type));
      }
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd90      	pop	{r4, r7, pc}

08006af2 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	4611      	mov	r1, r2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fb17 	bl	8007136 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f103 0208 	add.w	r2, r3, #8
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	3308      	adds	r3, #8
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f000 fb40 	bl	800719a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f103 020c 	add.w	r2, r3, #12
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	330c      	adds	r3, #12
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f000 fb61 	bl	80071ee <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8006b4a:	b590      	push	{r4, r7, lr}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8006b56:	68fc      	ldr	r4, [r7, #12]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fb67 	bl	800722c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	f107 0308 	add.w	r3, r7, #8
 8006b64:	4619      	mov	r1, r3
 8006b66:	4620      	mov	r0, r4
 8006b68:	f000 fb6b 	bl	8007242 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd90      	pop	{r4, r7, pc}

08006b76 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fb77 	bl	8007274 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8006b86:	4603      	mov	r3, r0
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fb77 	bl	800728e <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>:
      void reset(pointer __p) noexcept
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff ffd3 	bl	8006b76 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff ffcd 	bl	8006b76 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d006      	beq.n	8006bf6 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_+0x36>
	  _M_deleter()(__old_p);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fb50 	bl	800728e <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	4798      	blx	r3
      }
 8006bf6:	bf00      	nop
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	605a      	str	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	609a      	str	r2, [r3, #8]
	{ }
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	607a      	str	r2, [r7, #4]
	if (__p)
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fb1c 	bl	80072a8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>
      }
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>:
   * destroy() even if _Tp has a trivial destructor.
   */

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	607a      	str	r2, [r7, #4]
	     _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d00b      	beq.n	8006cba <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0x2c>
#if __cplusplus < 201103L
	__alloc.destroy(std::__addressof(*__first));
#else
	allocator_traits<_Allocator>::destroy(__alloc,
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fb0f 	bl	80072c6 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fb15 	bl	80072dc <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
      for (; __first != __last; ++__first)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3308      	adds	r3, #8
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	e7ef      	b.n	8006c9a <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0xc>
					      std::__addressof(*__first));
#endif
    }
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fb12 	bl	80072f8 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	68b9      	ldr	r1, [r7, #8]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 fb17 	bl	800730e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>
 8006ce0:	bf00      	nop
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>:
      _S_use_relocate()
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 f805 	bl	8006cfe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8006cf4:	4603      	mov	r3, r0
      }
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8006d06:	2301      	movs	r3, #1
      }
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8006d14:	b5b0      	push	{r4, r5, r7, lr}
 8006d16:	b08c      	sub	sp, #48	; 0x30
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006d20:	4a59      	ldr	r2, [pc, #356]	; (8006e88 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x174>)
 8006d22:	2101      	movs	r1, #1
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 fb0b 	bl	8007340 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>
 8006d2a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff fd9a 	bl	8006872 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	f107 0214 	add.w	r2, r7, #20
 8006d46:	f107 0308 	add.w	r3, r7, #8
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fb3e 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8006d52:	4603      	mov	r3, r0
 8006d54:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fb4c 	bl	80073f8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>
 8006d60:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8006d66:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	18d5      	adds	r5, r2, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fac1 	bl	80072f8 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006d76:	4603      	mov	r3, r0
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f7ff ffa0 	bl	8006cc2 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8006d82:	2300      	movs	r3, #0
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8006d86:	f7ff ffaf 	bl	8006ce8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d027      	beq.n	8006de0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006d90:	f107 0308 	add.w	r3, r7, #8
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fb57 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff ff69 	bl	8006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006da6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	4621      	mov	r1, r4
 8006dac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dae:	f000 fb37 	bl	8007420 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 8006db2:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	3308      	adds	r3, #8
 8006db8:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006dba:	f107 0308 	add.w	r3, r7, #8
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fb42 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff ff54 	bl	8006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006dd0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dd4:	6a39      	ldr	r1, [r7, #32]
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 fb22 	bl	8007420 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 8006ddc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006dde:	e026      	b.n	8006e2e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8006de0:	f107 0308 	add.w	r3, r7, #8
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fb2f 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006dea:	4603      	mov	r3, r0
 8006dec:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff ff41 	bl	8006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006df6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dfe:	f000 fb2e 	bl	800745e <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8006e02:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	3308      	adds	r3, #8
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8006e0a:	f107 0308 	add.w	r3, r7, #8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fb1a 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006e14:	4603      	mov	r3, r0
 8006e16:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff ff2c 	bl	8006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006e20:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e24:	6a39      	ldr	r1, [r7, #32]
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 fb19 	bl	800745e <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8006e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006e2e:	f7ff ff5b 	bl	8006ce8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f083 0301 	eor.w	r3, r3, #1
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ff19 	bl	8006c78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006e46:	4603      	mov	r3, r0
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6a39      	ldr	r1, [r7, #32]
 8006e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e4e:	f7ff ff1e 	bl	8006c8e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8006e52:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e62:	f7ff fef6 	bl	8006c52 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e70:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	441a      	add	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	609a      	str	r2, [r3, #8]
    }
 8006e7e:	bf00      	nop
 8006e80:	3730      	adds	r7, #48	; 0x30
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bdb0      	pop	{r4, r5, r7, pc}
 8006e86:	bf00      	nop
 8006e88:	08028858 	.word	0x08028858

08006e8c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 8006eac:	b5b0      	push	{r4, r5, r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8006eb4:	1d3b      	adds	r3, r7, #4
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 faea 	bl	8007490 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 8006ebc:	f107 030c 	add.w	r3, r7, #12
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 faef 	bl	80074a6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 8006ec8:	bf00      	nop
 8006eca:	4620      	mov	r0, r4
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bdb0      	pop	{r4, r5, r7, pc}

08006ed2 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	60b9      	str	r1, [r7, #8]
 8006edc:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 8006ede:	f107 0208 	add.w	r2, r7, #8
 8006ee2:	f107 030c 	add.w	r3, r7, #12
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 faea 	bl	80074c2 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d017      	beq.n	8006f24 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x52>
				std::__lg(__last - __first) * 2,
 8006ef4:	f107 020c 	add.w	r2, r7, #12
 8006ef8:	f107 0308 	add.w	r3, r7, #8
 8006efc:	4611      	mov	r1, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fa65 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8006f04:	4603      	mov	r3, r0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fa fb5e 	bl	80015c8 <_ZSt4__lgi>
 8006f0c:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8006f0e:	005a      	lsls	r2, r3, #1
 8006f10:	793b      	ldrb	r3, [r7, #4]
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 faec 	bl	80074f2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8006f1a:	793a      	ldrb	r2, [r7, #4]
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 fb1e 	bl	8007560 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006f44:	b590      	push	{r4, r7, lr}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fa fcba 	bl	80018ca <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fb39 	bl	80075d0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00f      	beq.n	8006f84 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006f64:	687c      	ldr	r4, [r7, #4]
 8006f66:	463b      	mov	r3, r7
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fb41 	bl	80075f0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4619      	mov	r1, r3
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 fb47 	bl	8007606 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a05      	ldr	r2, [pc, #20]	; (8006f90 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8006f7c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a04      	ldr	r2, [pc, #16]	; (8006f94 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8006f82:	609a      	str	r2, [r3, #8]
      }
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4618      	mov	r0, r3
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd90      	pop	{r4, r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	0800762b 	.word	0x0800762b
 8006f94:	0800766d 	.word	0x0800766d

08006f98 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006fb0:	b590      	push	{r4, r7, lr}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fa fc84 	bl	80018ca <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 fb70 	bl	80076aa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00f      	beq.n	8006ff0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006fd0:	687c      	ldr	r4, [r7, #4]
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fb73 	bl	80076c0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f000 fb79 	bl	80076d6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a05      	ldr	r2, [pc, #20]	; (8006ffc <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8006fe8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a04      	ldr	r2, [pc, #16]	; (8007000 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8006fee:	609a      	str	r2, [r3, #8]
      }
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd90      	pop	{r4, r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	080076fb 	.word	0x080076fb
 8007000:	0800773d 	.word	0x0800773d

08007004 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fbb3 	bl	800777a <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8007014:	4603      	mov	r3, r0
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>:
struct EiAlloc
{
    typedef T value_type;
    EiAlloc() = default;
    template <class U>
    constexpr EiAlloc(const EiAlloc<U> &) noexcept {}
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4618      	mov	r0, r3
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>:
	  _Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
	  : _Bit_alloc_type(__a)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fba5 	bl	8007794 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
	  { }
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>:
      _M_deallocate()
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d018      	beq.n	8007096 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4618      	mov	r0, r3
 8007068:	f000 f844 	bl	80070f4 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 800706c:	4602      	mov	r2, r0
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	109b      	asrs	r3, r3, #2
 8007076:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 8007078:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691a      	ldr	r2, [r3, #16]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 8007084:	4413      	add	r3, r2
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4619      	mov	r1, r3
 800708a:	f000 fb98 	bl	80077be <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>
	    _M_impl._M_reset();
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4618      	mov	r0, r3
 8007092:	f000 fba3 	bl	80077dc <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>
      }
 8007096:	bf00      	nop
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800709e:	b590      	push	{r4, r7, lr}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
 80070a8:	687c      	ldr	r4, [r7, #4]
 80070aa:	6838      	ldr	r0, [r7, #0]
 80070ac:	f000 f80a 	bl	80070c4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 80070b0:	4603      	mov	r3, r0
 80070b2:	4619      	mov	r1, r3
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 fbb1 	bl	800781c <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>
 80070ba:	4603      	mov	r3, r0
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd90      	pop	{r4, r7, pc}

080070c4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>:
      _S_nword(size_t __n)
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	331f      	adds	r3, #31
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	4618      	mov	r0, r3
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	3b04      	subs	r3, #4
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff ffe7 	bl	80070de <_ZSt11__addressofImEPT_RS0_>
 8007110:	4603      	mov	r3, r0
 8007112:	3304      	adds	r3, #4
 8007114:	e000      	b.n	8007118 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 8007116:	2300      	movs	r3, #0
	}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4618      	mov	r0, r3
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff ffed 	bl	8007120 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8007146:	4602      	mov	r2, r0
 8007148:	f107 0308 	add.w	r3, r7, #8
 800714c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007150:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8007154:	6838      	ldr	r0, [r7, #0]
 8007156:	f7ff ffe3 	bl	8007120 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800715a:	4602      	mov	r2, r0
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007162:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8007166:	f107 0308 	add.w	r3, r7, #8
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff ffd8 	bl	8007120 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8007170:	4602      	mov	r2, r0
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007178:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800717c:	bf00      	nop
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff ffed 	bl	8007184 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80071aa:	4603      	mov	r3, r0
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80071b0:	6838      	ldr	r0, [r7, #0]
 80071b2:	f7ff ffe7 	bl	8007184 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80071b6:	4603      	mov	r3, r0
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80071be:	f107 030c 	add.w	r3, r7, #12
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff ffde 	bl	8007184 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80071c8:	4603      	mov	r3, r0
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	601a      	str	r2, [r3, #0]
    }
 80071d0:	bf00      	nop
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4618      	mov	r0, r3
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff ffed 	bl	80071d8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80071fe:	4603      	mov	r3, r0
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8007204:	6838      	ldr	r0, [r7, #0]
 8007206:	f7ff ffe7 	bl	80071d8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800720a:	4603      	mov	r3, r0
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8007212:	f107 030c 	add.w	r3, r7, #12
 8007216:	4618      	mov	r0, r3
 8007218:	f7ff ffde 	bl	80071d8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800721c:	4603      	mov	r3, r0
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	601a      	str	r2, [r3, #0]
    }
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8007242:	b5b0      	push	{r4, r5, r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800724e:	68fc      	ldr	r4, [r7, #12]
 8007250:	68b8      	ldr	r0, [r7, #8]
 8007252:	f000 faf1 	bl	8007838 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8007256:	4605      	mov	r5, r0
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff ffe7 	bl	800722c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800725e:	4603      	mov	r3, r0
 8007260:	461a      	mov	r2, r3
 8007262:	4629      	mov	r1, r5
 8007264:	4620      	mov	r0, r4
 8007266:	f000 faf2 	bl	800784e <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bdb0      	pop	{r4, r5, r7, pc}

08007274 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fb03 	bl	800788a <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8007284:	4603      	mov	r3, r0
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fb02 	bl	80078a2 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800729e:	4603      	mov	r3, r0
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	68b9      	ldr	r1, [r7, #8]
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 faff 	bl	80078bc <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>
 80072be:	bf00      	nop
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 80072e6:	2200      	movs	r2, #0
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 faf3 	bl	80078d6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800730e:	b590      	push	{r4, r7, lr}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff ffec 	bl	80072f8 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007320:	4604      	mov	r4, r0
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4619      	mov	r1, r3
 8007326:	2008      	movs	r0, #8
 8007328:	f7fa f95d 	bl	80015e6 <_ZnwjPv>
 800732c:	4603      	mov	r3, r0
 800732e:	4622      	mov	r2, r4
 8007330:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007334:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	bd90      	pop	{r4, r7, pc}

08007340 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8007340:	b590      	push	{r4, r7, lr}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 fad1 	bl	80078f4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8007352:	4604      	mov	r4, r0
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff fabf 	bl	80068d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800735a:	4603      	mov	r3, r0
 800735c:	1ae2      	subs	r2, r4, r3
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	429a      	cmp	r2, r3
 8007362:	bf34      	ite	cc
 8007364:	2301      	movcc	r3, #1
 8007366:	2300      	movcs	r3, #0
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f019 fd95 	bl	8020e9e <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7ff faaf 	bl	80068d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800737a:	4604      	mov	r4, r0
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff faab 	bl	80068d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8007382:	4603      	mov	r3, r0
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	f107 0208 	add.w	r2, r7, #8
 800738a:	f107 0310 	add.w	r3, r7, #16
 800738e:	4611      	mov	r1, r2
 8007390:	4618      	mov	r0, r3
 8007392:	f000 fac0 	bl	8007916 <_ZSt3maxIjERKT_S2_S2_>
 8007396:	4603      	mov	r3, r0
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4423      	add	r3, r4
 800739c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff fa9a 	bl	80068d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 80073a4:	4602      	mov	r2, r0
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d306      	bcc.n	80073ba <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x7a>
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 faa1 	bl	80078f4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 80073b2:	4602      	mov	r2, r0
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d904      	bls.n	80073c4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x84>
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 fa9a 	bl	80078f4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 80073c0:	4603      	mov	r3, r0
 80073c2:	e000      	b.n	80073c6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x86>
 80073c4:	697b      	ldr	r3, [r7, #20]
      }
 80073c6:	4618      	mov	r0, r3
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd90      	pop	{r4, r7, pc}

080073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80073ce:	b590      	push	{r4, r7, lr}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f835 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80073de:	4603      	mov	r3, r0
 80073e0:	681c      	ldr	r4, [r3, #0]
 80073e2:	6838      	ldr	r0, [r7, #0]
 80073e4:	f000 f830 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80073e8:	4603      	mov	r3, r0
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	1ae3      	subs	r3, r4, r3
 80073ee:	10db      	asrs	r3, r3, #3
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd90      	pop	{r4, r7, pc}

080073f8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d006      	beq.n	8007416 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x1e>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fa96 	bl	800793e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>
 8007412:	4603      	mov	r3, r0
 8007414:	e000      	b.n	8007418 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x20>
 8007416:	2300      	movs	r3, #0
      }
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8007420:	b590      	push	{r4, r7, lr}
 8007422:	b087      	sub	sp, #28
 8007424:	af02      	add	r7, sp, #8
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800742e:	f88d 4000 	strb.w	r4, [sp]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	68b9      	ldr	r1, [r7, #8]
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 fa8e 	bl	800795a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>
 800743e:	4603      	mov	r3, r0
      }
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	bd90      	pop	{r4, r7, pc}

08007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800745e:	b590      	push	{r4, r7, lr}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	607a      	str	r2, [r7, #4]
 800746a:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 fa86 	bl	800797e <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 8007472:	4604      	mov	r4, r0
 8007474:	68b8      	ldr	r0, [r7, #8]
 8007476:	f000 fa82 	bl	800797e <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800747a:	4601      	mov	r1, r0
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	4620      	mov	r0, r4
 8007482:	f000 fa8b 	bl	800799c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>
 8007486:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	bd90      	pop	{r4, r7, pc}

08007490 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
      _Iter_comp_iter(_Compare __comp)
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b082      	sub	sp, #8
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 80074b0:	463b      	mov	r3, r7
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff ffec 	bl	8007490 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80074c2:	b590      	push	{r4, r7, lr}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff ffbb 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80074d2:	4603      	mov	r3, r0
 80074d4:	681c      	ldr	r4, [r3, #0]
 80074d6:	6838      	ldr	r0, [r7, #0]
 80074d8:	f7ff ffb6 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80074dc:	4603      	mov	r3, r0
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	429c      	cmp	r4, r3
 80074e2:	bf14      	ite	ne
 80074e4:	2301      	movne	r3, #1
 80074e6:	2300      	moveq	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	4618      	mov	r0, r3
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd90      	pop	{r4, r7, pc}

080074f2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b086      	sub	sp, #24
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	607a      	str	r2, [r7, #4]
 80074fe:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 8007500:	f107 020c 	add.w	r2, r7, #12
 8007504:	f107 0308 	add.w	r3, r7, #8
 8007508:	4611      	mov	r1, r2
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff ff5f 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8007510:	4603      	mov	r3, r0
 8007512:	2b10      	cmp	r3, #16
 8007514:	bfcc      	ite	gt
 8007516:	2301      	movgt	r3, #1
 8007518:	2300      	movle	r3, #0
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01c      	beq.n	800755a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  if (__depth_limit == 0)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d106      	bne.n	8007534 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x42>
	      std::__partial_sort(__first, __last, __last, __comp);
 8007526:	783b      	ldrb	r3, [r7, #0]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 fa66 	bl	80079fe <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
 8007532:	e012      	b.n	800755a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  --__depth_limit;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3b01      	subs	r3, #1
 8007538:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800753a:	783a      	ldrb	r2, [r7, #0]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fa74 	bl	8007a2c <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>
 8007544:	4603      	mov	r3, r0
 8007546:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8007548:	783b      	ldrb	r3, [r7, #0]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	6978      	ldr	r0, [r7, #20]
 8007550:	f7ff ffcf 	bl	80074f2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  __last = __cut;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8007558:	e7d2      	b.n	8007500 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xe>
    }
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800756c:	f107 020c 	add.w	r2, r7, #12
 8007570:	f107 0308 	add.w	r3, r7, #8
 8007574:	4611      	mov	r1, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff ff29 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800757c:	4603      	mov	r3, r0
 800757e:	2b10      	cmp	r3, #16
 8007580:	bfcc      	ite	gt
 8007582:	2301      	movgt	r3, #1
 8007584:	2300      	movle	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d018      	beq.n	80075be <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800758c:	f107 030c 	add.w	r3, r7, #12
 8007590:	2110      	movs	r1, #16
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fa8c 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007598:	4603      	mov	r3, r0
 800759a:	793a      	ldrb	r2, [r7, #4]
 800759c:	4619      	mov	r1, r3
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 fa9e 	bl	8007ae0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 80075a4:	f107 030c 	add.w	r3, r7, #12
 80075a8:	2110      	movs	r1, #16
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fa80 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80075b0:	4603      	mov	r3, r0
 80075b2:	793a      	ldrb	r2, [r7, #4]
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fafe 	bl	8007bb8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80075bc:	e004      	b.n	80075c8 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 80075be:	793a      	ldrb	r2, [r7, #4]
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fa8c 	bl	8007ae0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80075c8:	bf00      	nop
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	bf14      	ite	ne
 80075de:	2301      	movne	r3, #1
 80075e0:	2300      	moveq	r3, #0
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4618      	mov	r0, r3
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8007606:	b590      	push	{r4, r7, lr}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8007610:	6838      	ldr	r0, [r7, #0]
 8007612:	f7ff ffed 	bl	80075f0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8007616:	4603      	mov	r3, r0
 8007618:	4622      	mov	r2, r4
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fb03 	bl	8007c28 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	bd90      	pop	{r4, r7, pc}

0800762a <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800762a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
 8007636:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 fb0e 	bl	8007c5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800763e:	4604      	mov	r4, r0
 8007640:	68b8      	ldr	r0, [r7, #8]
 8007642:	f7ff fadc 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007646:	4605      	mov	r5, r0
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff fad8 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800764e:	4606      	mov	r6, r0
 8007650:	6838      	ldr	r0, [r7, #0]
 8007652:	f7ff fadf 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007656:	4603      	mov	r3, r0
 8007658:	4632      	mov	r2, r6
 800765a:	4629      	mov	r1, r5
 800765c:	4620      	mov	r0, r4
 800765e:	f000 fb0d 	bl	8007c7c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8007662:	4603      	mov	r3, r0
      }
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800766c <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800766c:	b590      	push	{r4, r7, lr}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	4613      	mov	r3, r2
 8007678:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d109      	bne.n	8007694 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fb20 	bl	8007cc6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8007686:	4604      	mov	r4, r0
 8007688:	68b8      	ldr	r0, [r7, #8]
 800768a:	f000 fae6 	bl	8007c5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800768e:	4603      	mov	r3, r0
 8007690:	6023      	str	r3, [r4, #0]
	    break;
 8007692:	e005      	b.n	80076a0 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	461a      	mov	r2, r3
 8007698:	68b9      	ldr	r1, [r7, #8]
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 fb1f 	bl	8007cde <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 80076a0:	2300      	movs	r3, #0
      }
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd90      	pop	{r4, r7, pc}

080076aa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
	  { return true; }
 80076b2:	2301      	movs	r3, #1
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4618      	mov	r0, r3
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80076d6:	b590      	push	{r4, r7, lr}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80076e0:	6838      	ldr	r0, [r7, #0]
 80076e2:	f7ff ffed 	bl	80076c0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80076e6:	4603      	mov	r3, r0
 80076e8:	4622      	mov	r2, r4
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fb21 	bl	8007d34 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd90      	pop	{r4, r7, pc}

080076fa <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80076fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	607a      	str	r2, [r7, #4]
 8007706:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 fb2c 	bl	8007d66 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800770e:	4604      	mov	r4, r0
 8007710:	68b8      	ldr	r0, [r7, #8]
 8007712:	f7ff fa74 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007716:	4605      	mov	r5, r0
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff fa70 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800771e:	4606      	mov	r6, r0
 8007720:	6838      	ldr	r0, [r7, #0]
 8007722:	f7ff fa77 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007726:	4603      	mov	r3, r0
 8007728:	4632      	mov	r2, r6
 800772a:	4629      	mov	r1, r5
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fb2b 	bl	8007d88 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8007732:	4603      	mov	r3, r0
      }
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800773c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800773c:	b590      	push	{r4, r7, lr}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4613      	mov	r3, r2
 8007748:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800774a:	79fb      	ldrb	r3, [r7, #7]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d109      	bne.n	8007764 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 fb3e 	bl	8007dd2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8007756:	4604      	mov	r4, r0
 8007758:	68b8      	ldr	r0, [r7, #8]
 800775a:	f000 fb04 	bl	8007d66 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800775e:	4603      	mov	r3, r0
 8007760:	6023      	str	r3, [r4, #0]
	    break;
 8007762:	e005      	b.n	8007770 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007764:	79fb      	ldrb	r3, [r7, #7]
 8007766:	461a      	mov	r2, r3
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 fb3d 	bl	8007dea <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8007770:	2300      	movs	r3, #0
      }
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	bd90      	pop	{r4, r7, pc}

0800777a <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800777a:	b580      	push	{r7, lr}
 800777c:	b082      	sub	sp, #8
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 fb5b 	bl	8007e40 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800778a:	4603      	mov	r3, r0
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fa f825 	bl	80017ee <_ZNSt13_Bit_iteratorC1Ev>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3308      	adds	r3, #8
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fa f820 	bl	80017ee <_ZNSt13_Bit_iteratorC1Ev>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	611a      	str	r2, [r3, #16]
	{ }
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	60b9      	str	r1, [r7, #8]
 80077c8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	68b9      	ldr	r1, [r7, #8]
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fb42 	bl	8007e58 <_ZN2ei7EiAllocImE10deallocateEPmj>
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
	  _M_start = _M_finish = _Bit_iterator();
 80077e4:	f107 0308 	add.w	r3, r7, #8
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fa f800 	bl	80017ee <_ZNSt13_Bit_iteratorC1Ev>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3308      	adds	r3, #8
 80077f2:	f107 0208 	add.w	r2, r7, #8
 80077f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f103 0208 	add.w	r2, r3, #8
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800780a:	e883 0003 	stmia.w	r3, {r0, r1}
	  _M_end_of_storage = _Bit_pointer();
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	611a      	str	r2, [r3, #16]
	}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fb22 	bl	8007e72 <_ZN2ei7EiAllocImE8allocateEj>
 800782e:	4603      	mov	r3, r0
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800784e:	b590      	push	{r4, r7, lr}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800785a:	68fc      	ldr	r4, [r7, #12]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff fce5 	bl	800722c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007862:	4603      	mov	r3, r0
 8007864:	4619      	mov	r1, r3
 8007866:	4620      	mov	r0, r4
 8007868:	f000 fb14 	bl	8007e94 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	1d1c      	adds	r4, r3, #4
 8007870:	68b8      	ldr	r0, [r7, #8]
 8007872:	f7ff ffe1 	bl	8007838 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8007876:	4603      	mov	r3, r0
 8007878:	4619      	mov	r1, r3
 800787a:	4620      	mov	r0, r4
 800787c:	f000 fb1d 	bl	8007eba <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	bd90      	pop	{r4, r7, pc}

0800788a <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fb22 	bl	8007edc <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8007898:	4603      	mov	r3, r0
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 fb23 	bl	8007ef8 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80078b2:	4603      	mov	r3, r0
 80078b4:	4618      	mov	r0, r3
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>:
        allocs[ptr] = bytes;
#endif
        return (T *)ptr;
    }

    void deallocate(T *p, size_t n) noexcept
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = allocs.find(p);
        ei_dsp_free(p,size_p->second);
        allocs.erase(size_p);
#else
        ei_dsp_free(p,0);
 80078c8:	68b8      	ldr	r0, [r7, #8]
 80078ca:	f013 fc2f 	bl	801b12c <_Z7ei_freePv>
#endif
    }
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 80078d6:	b40e      	push	{r1, r2, r3}
 80078d8:	b580      	push	{r7, lr}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 80078e0:	6978      	ldr	r0, [r7, #20]
 80078e2:	f000 fb15 	bl	8007f10 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078f0:	b003      	add	sp, #12
 80078f2:	4770      	bx	lr

080078f4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fb2a 	bl	8007f58 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8007904:	4603      	mov	r3, r0
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fb0c 	bl	8007f24 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>
 800790c:	4603      	mov	r3, r0
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8007916:	b480      	push	{r7}
 8007918:	b083      	sub	sp, #12
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d201      	bcs.n	8007930 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	e000      	b.n	8007932 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8007930:	687b      	ldr	r3, [r7, #4]
    }
 8007932:	4618      	mov	r0, r3
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>:
      allocate(_Alloc& __a, size_type __n)
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fb0f 	bl	8007f6e <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>
 8007950:	4603      	mov	r3, r0
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
 8007966:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	68b9      	ldr	r1, [r7, #8]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 fb0e 	bl	8007f90 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8007974:	4603      	mov	r3, r0
      }
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8007986:	f107 030c 	add.w	r3, r7, #12
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fb1c 	bl	8007fca <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800799c:	b590      	push	{r4, r7, lr}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 80079ae:	f107 0208 	add.w	r2, r7, #8
 80079b2:	f107 030c 	add.w	r3, r7, #12
 80079b6:	4611      	mov	r1, r2
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fb18 	bl	8007fee <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d017      	beq.n	80079f4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x58>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 80079c4:	6978      	ldr	r0, [r7, #20]
 80079c6:	f7ff fc7e 	bl	80072c6 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 80079ca:	4604      	mov	r4, r0
 80079cc:	f107 030c 	add.w	r3, r7, #12
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fb2e 	bl	8008032 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>
 80079d6:	4603      	mov	r3, r0
 80079d8:	461a      	mov	r2, r3
 80079da:	4621      	mov	r1, r4
 80079dc:	6838      	ldr	r0, [r7, #0]
 80079de:	f000 fb34 	bl	800804a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
	  for (; __first != __last; ++__first, (void)++__cur)
 80079e2:	f107 030c 	add.w	r3, r7, #12
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fb12 	bl	8008010 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	3308      	adds	r3, #8
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	e7dc      	b.n	80079ae <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x12>
	  return __cur;
 80079f4:	697b      	ldr	r3, [r7, #20]
    }
 80079f6:	4618      	mov	r0, r3
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd90      	pop	{r4, r7, pc}

080079fe <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	607a      	str	r2, [r7, #4]
 8007a0a:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 8007a0c:	783b      	ldrb	r3, [r7, #0]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	68b9      	ldr	r1, [r7, #8]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 fb2c 	bl	8008070 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
      std::__sort_heap(__first, __middle, __comp);
 8007a18:	463b      	mov	r3, r7
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	68b9      	ldr	r1, [r7, #8]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 fb58 	bl	80080d4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
    }
 8007a24:	bf00      	nop
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8007a2c:	b590      	push	{r4, r7, lr}
 8007a2e:	b089      	sub	sp, #36	; 0x24
 8007a30:	af02      	add	r7, sp, #8
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8007a38:	f107 020c 	add.w	r2, r7, #12
 8007a3c:	f107 0308 	add.w	r3, r7, #8
 8007a40:	4611      	mov	r1, r2
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff fcc3 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	0fda      	lsrs	r2, r3, #31
 8007a4c:	4413      	add	r3, r2
 8007a4e:	105b      	asrs	r3, r3, #1
 8007a50:	461a      	mov	r2, r3
 8007a52:	f107 030c 	add.w	r3, r7, #12
 8007a56:	4611      	mov	r1, r2
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 f829 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8007a62:	f107 030c 	add.w	r3, r7, #12
 8007a66:	2101      	movs	r1, #1
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f821 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007a6e:	4604      	mov	r4, r0
 8007a70:	f107 0308 	add.w	r3, r7, #8
 8007a74:	2101      	movs	r1, #1
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fb52 	bl	8008120 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	793b      	ldrb	r3, [r7, #4]
 8007a80:	f88d 3000 	strb.w	r3, [sp]
 8007a84:	4613      	mov	r3, r2
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	4621      	mov	r1, r4
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 fb7d 	bl	800818a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8007a90:	f107 030c 	add.w	r3, r7, #12
 8007a94:	2101      	movs	r1, #1
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 f80a 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007a9c:	793b      	ldrb	r3, [r7, #4]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	68b9      	ldr	r1, [r7, #8]
 8007aa2:	f000 fbc7 	bl	8008234 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>
 8007aa6:	4603      	mov	r3, r0
    }
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	371c      	adds	r7, #28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd90      	pop	{r4, r7, pc}

08007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	4413      	add	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	f107 020c 	add.w	r2, r7, #12
 8007aca:	f107 0308 	add.w	r3, r7, #8
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff f9db 	bl	8006e8c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 8007ae0:	b5b0      	push	{r4, r5, r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 8007aec:	f107 0208 	add.w	r2, r7, #8
 8007af0:	f107 030c 	add.w	r3, r7, #12
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 fbe4 	bl	80082c4 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d156      	bne.n	8007bb0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd0>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8007b02:	f107 030c 	add.w	r3, r7, #12
 8007b06:	2101      	movs	r1, #1
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff ffd1 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	61fb      	str	r3, [r7, #28]
 8007b12:	f107 0208 	add.w	r2, r7, #8
 8007b16:	f107 031c 	add.w	r3, r7, #28
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff fcd0 	bl	80074c2 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d044      	beq.n	8007bb2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd2>
	  if (__comp(__i, __first))
 8007b28:	1d3b      	adds	r3, r7, #4
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	69f9      	ldr	r1, [r7, #28]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fb0f 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d02d      	beq.n	8007b96 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xb6>
		__val = _GLIBCXX_MOVE(*__i);
 8007b3a:	f107 031c 	add.w	r3, r7, #28
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 fbe9 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007b44:	4603      	mov	r3, r0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fbf1 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	f107 0314 	add.w	r3, r7, #20
 8007b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b56:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8007b5a:	f107 031c 	add.w	r3, r7, #28
 8007b5e:	2101      	movs	r1, #1
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff ffa5 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007b66:	4603      	mov	r3, r0
 8007b68:	461a      	mov	r2, r3
 8007b6a:	69f9      	ldr	r1, [r7, #28]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fbe9 	bl	8008344 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>
	      *__first = _GLIBCXX_MOVE(__val);
 8007b72:	f107 0314 	add.w	r3, r7, #20
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fbd9 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	f107 030c 	add.w	r3, r7, #12
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 fbc7 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	4622      	mov	r2, r4
 8007b8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b90:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b94:	e006      	b.n	8007ba4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xc4>
	    std::__unguarded_linear_insert(__i,
 8007b96:	7938      	ldrb	r0, [r7, #4]
 8007b98:	f000 fbec 	bl	8008374 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	69f8      	ldr	r0, [r7, #28]
 8007ba0:	f000 fbfc 	bl	800839c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8007ba4:	f107 031c 	add.w	r3, r7, #28
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fba3 	bl	80082f4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 8007bae:	e7b0      	b.n	8007b12 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x32>
      if (__first == __last) return;
 8007bb0:	bf00      	nop
    }
 8007bb2:	3720      	adds	r7, #32
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bdb0      	pop	{r4, r5, r7, pc}

08007bb8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 8007bb8:	b590      	push	{r4, r7, lr}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	f107 0208 	add.w	r2, r7, #8
 8007bcc:	f107 0314 	add.w	r3, r7, #20
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff fc75 	bl	80074c2 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00c      	beq.n	8007bf8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x40>
	std::__unguarded_linear_insert(__i,
 8007bde:	7938      	ldrb	r0, [r7, #4]
 8007be0:	f000 fbc8 	bl	8008374 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 8007be4:	4621      	mov	r1, r4
 8007be6:	6978      	ldr	r0, [r7, #20]
 8007be8:	f000 fbd8 	bl	800839c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8007bec:	f107 0314 	add.w	r3, r7, #20
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 fb7f 	bl	80082f4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 8007bf6:	e7e7      	b.n	8007bc8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x10>
    }
 8007bf8:	bf00      	nop
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd90      	pop	{r4, r7, pc}

08007c00 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d201      	bcs.n	8007c1a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	e000      	b.n	8007c1c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007c1a:	687b      	ldr	r3, [r7, #4]
    }
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8007c28:	b590      	push	{r4, r7, lr}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8007c34:	68b8      	ldr	r0, [r7, #8]
 8007c36:	f7ff fcdb 	bl	80075f0 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	681c      	ldr	r4, [r3, #0]
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7f9 fe2d 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 8007c44:	4603      	mov	r3, r0
 8007c46:	4619      	mov	r1, r3
 8007c48:	2004      	movs	r0, #4
 8007c4a:	f7f9 fccc 	bl	80015e6 <_ZnwjPv>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	601c      	str	r4, [r3, #0]
 8007c52:	bf00      	nop
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd90      	pop	{r4, r7, pc}

08007c5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fbef 	bl	8008446 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8007c68:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 fbf7 	bl	800845e <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8007c70:	4603      	mov	r3, r0
 8007c72:	bf00      	nop
	}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	b086      	sub	sp, #24
 8007c82:	af02      	add	r7, sp, #8
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	607a      	str	r2, [r7, #4]
 8007c8a:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 fbf1 	bl	8008474 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007c92:	4604      	mov	r4, r0
 8007c94:	68b8      	ldr	r0, [r7, #8]
 8007c96:	f7fe ffb2 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7fe ffae 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	6838      	ldr	r0, [r7, #0]
 8007ca6:	f7fe ffb5 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007caa:	4603      	mov	r3, r0
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	4633      	mov	r3, r6
 8007cb0:	462a      	mov	r2, r5
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	f000 fbe8 	bl	800848a <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8007cba:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007cc6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7f9 fde5 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007cde:	b5b0      	push	{r4, r5, r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d016      	beq.n	8007d20 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	dc19      	bgt.n	8007d2a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d002      	beq.n	8007d00 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d00a      	beq.n	8007d14 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8007cfe:	e014      	b.n	8007d2a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7ff ffe0 	bl	8007cc6 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8007d06:	4604      	mov	r4, r0
 8007d08:	68b8      	ldr	r0, [r7, #8]
 8007d0a:	f7ff ffa6 	bl	8007c5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	6023      	str	r3, [r4, #0]
	      break;
 8007d12:	e00a      	b.n	8007d2a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8007d14:	462a      	mov	r2, r5
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 fbda 	bl	80084d2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8007d1e:	e004      	b.n	8007d2a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8007d20:	4621      	mov	r1, r4
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 fbee 	bl	8008504 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007d28:	bf00      	nop
	  return false;
 8007d2a:	2300      	movs	r3, #0
	}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bdb0      	pop	{r4, r5, r7, pc}

08007d34 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8007d34:	b590      	push	{r4, r7, lr}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8007d40:	68b8      	ldr	r0, [r7, #8]
 8007d42:	f7ff fcbd 	bl	80076c0 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8007d46:	4604      	mov	r4, r0
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7f9 fda8 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	4619      	mov	r1, r3
 8007d52:	2004      	movs	r0, #4
 8007d54:	f7f9 fc47 	bl	80015e6 <_ZnwjPv>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	bf00      	nop
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd90      	pop	{r4, r7, pc}

08007d66 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fbd4 	bl	800851c <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8007d74:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 fbdc 	bl	8008534 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	bf00      	nop
	}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8c:	b086      	sub	sp, #24
 8007d8e:	af02      	add	r7, sp, #8
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
 8007d96:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 fbd6 	bl	800854a <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8007d9e:	4604      	mov	r4, r0
 8007da0:	68b8      	ldr	r0, [r7, #8]
 8007da2:	f7fe ff2c 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007da6:	4605      	mov	r5, r0
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7fe ff28 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007dae:	4606      	mov	r6, r0
 8007db0:	6838      	ldr	r0, [r7, #0]
 8007db2:	f7fe ff2f 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8007db6:	4603      	mov	r3, r0
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4633      	mov	r3, r6
 8007dbc:	462a      	mov	r2, r5
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	f000 fbcd 	bl	8008560 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 8007dc6:	4603      	mov	r3, r0
    }
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007dd2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7f9 fd5f 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 8007de0:	4603      	mov	r3, r0
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007dea:	b5b0      	push	{r4, r5, r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	4613      	mov	r3, r2
 8007df6:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d016      	beq.n	8007e2c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	dc19      	bgt.n	8007e36 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d002      	beq.n	8007e0c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d00a      	beq.n	8007e20 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8007e0a:	e014      	b.n	8007e36 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f7ff ffe0 	bl	8007dd2 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8007e12:	4604      	mov	r4, r0
 8007e14:	68b8      	ldr	r0, [r7, #8]
 8007e16:	f7ff ffa6 	bl	8007d66 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	6023      	str	r3, [r4, #0]
	      break;
 8007e1e:	e00a      	b.n	8007e36 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8007e20:	462a      	mov	r2, r5
 8007e22:	68b9      	ldr	r1, [r7, #8]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 fbbf 	bl	80085a8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8007e2a:	e004      	b.n	8007e36 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 fbd3 	bl	80085da <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007e34:	bf00      	nop
	  return false;
 8007e36:	2300      	movs	r3, #0
	}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bdb0      	pop	{r4, r5, r7, pc}

08007e40 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fbd2 	bl	80085f2 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <_ZN2ei7EiAllocImE10deallocateEPmj>:
    void deallocate(T *p, size_t n) noexcept
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 8007e64:	68b8      	ldr	r0, [r7, #8]
 8007e66:	f013 f961 	bl	801b12c <_Z7ei_freePv>
    }
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <_ZN2ei7EiAllocImE8allocateEj>:
    T *allocate(size_t n)
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f013 f938 	bl	801b0f8 <_Z9ei_mallocj>
 8007e88:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
    }
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8007e94:	b590      	push	{r4, r7, lr}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8007e9e:	687c      	ldr	r4, [r7, #4]
 8007ea0:	6838      	ldr	r0, [r7, #0]
 8007ea2:	f7ff f9c3 	bl	800722c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 fbaf 	bl	800860e <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd90      	pop	{r4, r7, pc}

08007eba <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007ec4:	6838      	ldr	r0, [r7, #0]
 8007ec6:	f7ff fcb7 	bl	8007838 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 fba1 	bl	8008630 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fba0 	bl	8008646 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8007f06:	4603      	mov	r3, r0
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR inline void
    _Destroy(_Tp* __pointer)
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
#endif
    }
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8007f2c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007f30:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fb94 	bl	8008660 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007f3c:	f107 0208 	add.w	r2, r7, #8
 8007f40:	f107 030c 	add.w	r3, r7, #12
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff fe5a 	bl	8007c00 <_ZSt3minIjERKT_S2_S2_>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	681b      	ldr	r3, [r3, #0]
      }
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4618      	mov	r0, r3
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>:
    T *allocate(size_t n)
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f013 f8ba 	bl	801b0f8 <_Z9ei_mallocj>
 8007f84:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 8007f86:	68bb      	ldr	r3, [r7, #8]
    }
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007f90:	b5b0      	push	{r4, r5, r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 fb6b 	bl	800867a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	68b8      	ldr	r0, [r7, #8]
 8007fa8:	f000 fb67 	bl	800867a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007fac:	4605      	mov	r5, r0
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fb63 	bl	800867a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fb68 	bl	8008690 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8007fc0:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bdb0      	pop	{r4, r5, r7, pc}

08007fca <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8007fd4:	463b      	mov	r3, r7
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fb80 	bl	80086dc <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fb79 	bl	80086f2 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 8008000:	4603      	mov	r3, r0
 8008002:	f083 0301 	eor.w	r3, r3, #1
 8008006:	b2db      	uxtb	r3, r3
 8008008:	4618      	mov	r0, r3
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>:
      operator++()
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
	++_M_current;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f103 0208 	add.w	r2, r3, #8
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	601a      	str	r2, [r3, #0]
	return *this;
 8008024:	687b      	ldr	r3, [r7, #4]
      }
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>:
      operator*() const
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fb61 	bl	800871e <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800805c:	4603      	mov	r3, r0
 800805e:	461a      	mov	r2, r3
 8008060:	68b9      	ldr	r1, [r7, #8]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 fb66 	bl	8008734 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800807e:	463b      	mov	r3, r7
 8008080:	461a      	mov	r2, r3
 8008082:	68b9      	ldr	r1, [r7, #8]
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fb6e 	bl	8008766 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	617b      	str	r3, [r7, #20]
 800808e:	1d3a      	adds	r2, r7, #4
 8008090:	f107 0314 	add.w	r3, r7, #20
 8008094:	4611      	mov	r1, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fbc4 	bl	8008824 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d014      	beq.n	80080cc <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x5c>
	if (__comp(__i, __first))
 80080a2:	463b      	mov	r3, r7
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	6979      	ldr	r1, [r7, #20]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 f852 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d005      	beq.n	80080c0 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x50>
	  std::__pop_heap(__first, __middle, __i, __comp);
 80080b4:	463b      	mov	r3, r7
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	68b9      	ldr	r1, [r7, #8]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fbca 	bl	8008854 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 80080c0:	f107 0314 	add.w	r3, r7, #20
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f915 	bl	80082f4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 80080ca:	e7e0      	b.n	800808e <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x1e>
    }
 80080cc:	bf00      	nop
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 80080e0:	f107 020c 	add.w	r2, r7, #12
 80080e4:	f107 0308 	add.w	r3, r7, #8
 80080e8:	4611      	mov	r1, r2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7ff f96f 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	bfcc      	ite	gt
 80080f6:	2301      	movgt	r3, #1
 80080f8:	2300      	movle	r3, #0
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x44>
	{
	  --__last;
 8008100:	f107 0308 	add.w	r3, r7, #8
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fbf1 	bl	80088ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	68b9      	ldr	r1, [r7, #8]
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 fb9f 	bl	8008854 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      while (__last - __first > 1)
 8008116:	e7e3      	b.n	80080e0 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xc>
	}
    }
 8008118:	bf00      	nop
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	425b      	negs	r3, r3
 8008134:	4413      	add	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	f107 020c 	add.w	r2, r7, #12
 800813c:	f107 0308 	add.w	r3, r7, #8
 8008140:	4611      	mov	r1, r2
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fea2 	bl	8006e8c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 8008152:	b5b0      	push	{r4, r5, r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 800815e:	68fc      	ldr	r4, [r7, #12]
 8008160:	f107 0308 	add.w	r3, r7, #8
 8008164:	4618      	mov	r0, r3
 8008166:	f000 f8d6 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800816a:	4605      	mov	r5, r0
 800816c:	1d3b      	adds	r3, r7, #4
 800816e:	4618      	mov	r0, r3
 8008170:	f000 f8d1 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008174:	4603      	mov	r3, r0
 8008176:	461a      	mov	r2, r3
 8008178:	4629      	mov	r1, r5
 800817a:	4620      	mov	r0, r4
 800817c:	f7fb f942 	bl	8003404 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8008180:	4603      	mov	r3, r0
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bdb0      	pop	{r4, r5, r7, pc}

0800818a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	f107 0018 	add.w	r0, r7, #24
 80081a0:	f7ff ffd7 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d020      	beq.n	80081ec <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x62>
	  if (__comp(__b, __c))
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	f107 0018 	add.w	r0, r7, #24
 80081b2:	f7ff ffce 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d004      	beq.n	80081c6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x3c>
	    std::iter_swap(__result, __b);
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 fba5 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 80081c4:	e032      	b.n	800822c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	  else if (__comp(__a, __c))
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	f107 0018 	add.w	r0, r7, #24
 80081ce:	f7ff ffc0 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d004      	beq.n	80081e2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x58>
	    std::iter_swap(__result, __c);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fb97 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 80081e0:	e024      	b.n	800822c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	    std::iter_swap(__result, __a);
 80081e2:	68b9      	ldr	r1, [r7, #8]
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 fb92 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 80081ea:	e01f      	b.n	800822c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__a, __c))
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	f107 0018 	add.w	r0, r7, #24
 80081f4:	f7ff ffad 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d004      	beq.n	8008208 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x7e>
	std::iter_swap(__result, __a);
 80081fe:	68b9      	ldr	r1, [r7, #8]
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 fb84 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8008206:	e011      	b.n	800822c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__b, __c))
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	f107 0018 	add.w	r0, r7, #24
 8008210:	f7ff ff9f 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x9a>
	std::iter_swap(__result, __c);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 fb76 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8008222:	e003      	b.n	800822c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	std::iter_swap(__result, __b);
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 fb71 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8008242:	463b      	mov	r3, r7
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	68f9      	ldr	r1, [r7, #12]
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff ff82 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x2c>
	    ++__first;
 8008254:	f107 030c 	add.w	r3, r7, #12
 8008258:	4618      	mov	r0, r3
 800825a:	f000 f84b 	bl	80082f4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800825e:	e7f0      	b.n	8008242 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0xe>
	  --__last;
 8008260:	f107 0308 	add.w	r3, r7, #8
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fb41 	bl	80088ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 800826a:	463b      	mov	r3, r7
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	4618      	mov	r0, r3
 8008272:	f7ff ff6e 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d005      	beq.n	8008288 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x54>
	    --__last;
 800827c:	f107 0308 	add.w	r3, r7, #8
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fb33 	bl	80088ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 8008286:	e7f0      	b.n	800826a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x36>
	  if (!(__first < __last))
 8008288:	f107 0208 	add.w	r2, r7, #8
 800828c:	f107 030c 	add.w	r3, r7, #12
 8008290:	4611      	mov	r1, r2
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fac6 	bl	8008824 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8008298:	4603      	mov	r3, r0
 800829a:	f083 0301 	eor.w	r3, r3, #1
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d001      	beq.n	80082a8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x74>
	    return __first;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	e009      	b.n	80082bc <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x88>
	  std::iter_swap(__first, __last);
 80082a8:	68b9      	ldr	r1, [r7, #8]
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 fb2f 	bl	800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
	  ++__first;
 80082b0:	f107 030c 	add.w	r3, r7, #12
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 f81d 	bl	80082f4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 80082ba:	e7c2      	b.n	8008242 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0xe>
    }
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80082c4:	b590      	push	{r4, r7, lr}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7ff f8ba 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80082d4:	4603      	mov	r3, r0
 80082d6:	681c      	ldr	r4, [r3, #0]
 80082d8:	6838      	ldr	r0, [r7, #0]
 80082da:	f7ff f8b5 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80082de:	4603      	mov	r3, r0
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	429c      	cmp	r4, r3
 80082e4:	bf0c      	ite	eq
 80082e6:	2301      	moveq	r3, #1
 80082e8:	2300      	movne	r3, #0
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd90      	pop	{r4, r7, pc}

080082f4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
	++_M_current;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f103 0208 	add.w	r2, r3, #8
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	601a      	str	r2, [r3, #0]
	return *this;
 8008308:	687b      	ldr	r3, [r7, #4]
      }
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4618      	mov	r0, r3
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8008344:	b590      	push	{r4, r7, lr}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 faf3 	bl	800893c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 8008356:	4604      	mov	r4, r0
 8008358:	68b8      	ldr	r0, [r7, #8]
 800835a:	f000 faef 	bl	800893c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 800835e:	4603      	mov	r3, r0
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	4619      	mov	r1, r3
 8008364:	4620      	mov	r0, r4
 8008366:	f000 faf4 	bl	8008952 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>
 800836a:	4603      	mov	r3, r0
    }
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	bd90      	pop	{r4, r7, pc}

08008374 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 8008374:	b590      	push	{r4, r7, lr}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800837c:	1d3b      	adds	r3, r7, #4
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fb08 	bl	8008994 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 8008384:	4602      	mov	r2, r0
 8008386:	f107 030c 	add.w	r3, r7, #12
 800838a:	4611      	mov	r1, r2
 800838c:	4618      	mov	r0, r3
 800838e:	f000 fb0c 	bl	80089aa <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 8008392:	bf00      	nop
 8008394:	4620      	mov	r0, r4
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	bd90      	pop	{r4, r7, pc}

0800839c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800839c:	b590      	push	{r4, r7, lr}
 800839e:	b087      	sub	sp, #28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 80083a6:	1d3b      	adds	r3, r7, #4
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7ff ffb4 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80083ae:	4603      	mov	r3, r0
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff ffbc 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80083b6:	4602      	mov	r2, r0
 80083b8:	f107 0310 	add.w	r3, r7, #16
 80083bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083c0:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	60fb      	str	r3, [r7, #12]
      --__next;
 80083c8:	f107 030c 	add.w	r3, r7, #12
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fa8d 	bl	80088ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 80083d2:	f107 0110 	add.w	r1, r7, #16
 80083d6:	463b      	mov	r3, r7
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 faf3 	bl	80089c6 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d01b      	beq.n	800841e <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x82>
	  *__last = _GLIBCXX_MOVE(*__next);
 80083e6:	f107 030c 	add.w	r3, r7, #12
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff ff93 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80083f0:	4603      	mov	r3, r0
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff ff9b 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80083f8:	4604      	mov	r4, r0
 80083fa:	1d3b      	adds	r3, r7, #4
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7ff ff8a 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008402:	4603      	mov	r3, r0
 8008404:	4622      	mov	r2, r4
 8008406:	e892 0003 	ldmia.w	r2, {r0, r1}
 800840a:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	607b      	str	r3, [r7, #4]
	  --__next;
 8008412:	f107 030c 	add.w	r3, r7, #12
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fa68 	bl	80088ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 800841c:	e7d9      	b.n	80083d2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x36>
      *__last = _GLIBCXX_MOVE(__val);
 800841e:	f107 0310 	add.w	r3, r7, #16
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff ff83 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008428:	4604      	mov	r4, r0
 800842a:	1d3b      	adds	r3, r7, #4
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff ff72 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008432:	4603      	mov	r3, r0
 8008434:	4622      	mov	r2, r4
 8008436:	e892 0003 	ldmia.w	r2, {r0, r1}
 800843a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800843e:	bf00      	nop
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	bd90      	pop	{r4, r7, pc}

08008446 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7f9 fa30 	bl	80018b4 <_ZNKSt9_Any_data9_M_accessEv>
 8008454:	4603      	mov	r3, r0
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4618      	mov	r0, r3
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800848a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	7338      	strb	r0, [r7, #12]
 8008492:	60b9      	str	r1, [r7, #8]
 8008494:	607a      	str	r2, [r7, #4]
 8008496:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008498:	68b8      	ldr	r0, [r7, #8]
 800849a:	f7ff ffeb 	bl	8008474 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800849e:	4603      	mov	r3, r0
 80084a0:	681c      	ldr	r4, [r3, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7fe fbab 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80084a8:	4603      	mov	r3, r0
 80084aa:	681d      	ldr	r5, [r3, #0]
 80084ac:	6838      	ldr	r0, [r7, #0]
 80084ae:	f7fe fba6 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80084b2:	4603      	mov	r3, r0
 80084b4:	681e      	ldr	r6, [r3, #0]
 80084b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b8:	f7fe fbac 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80084bc:	4603      	mov	r3, r0
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	4631      	mov	r1, r6
 80084c4:	4628      	mov	r0, r5
 80084c6:	47a0      	blx	r4
 80084c8:	4603      	mov	r3, r0
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084d2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80084d2:	b590      	push	{r4, r7, lr}
 80084d4:	b085      	sub	sp, #20
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80084de:	68b8      	ldr	r0, [r7, #8]
 80084e0:	f7ff ffb1 	bl	8008446 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 80084e4:	4603      	mov	r3, r0
 80084e6:	681c      	ldr	r4, [r3, #0]
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f7f9 f9d8 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 80084ee:	4603      	mov	r3, r0
 80084f0:	4619      	mov	r1, r3
 80084f2:	2004      	movs	r0, #4
 80084f4:	f7f9 f877 	bl	80015e6 <_ZnwjPv>
 80084f8:	4603      	mov	r3, r0
 80084fa:	601c      	str	r4, [r3, #0]
	}
 80084fc:	bf00      	nop
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	bd90      	pop	{r4, r7, pc}

08008504 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fa6f 	bl	80089f2 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7f9 f9c5 	bl	80018b4 <_ZNKSt9_Any_data9_M_accessEv>
 800852a:	4603      	mov	r3, r0
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4618      	mov	r0, r3
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800854a:	b480      	push	{r7}
 800854c:	b083      	sub	sp, #12
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	7338      	strb	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
 800856c:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800856e:	68b8      	ldr	r0, [r7, #8]
 8008570:	f7ff ffeb 	bl	800854a <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8008574:	4606      	mov	r6, r0
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7fe fb41 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800857c:	4603      	mov	r3, r0
 800857e:	681c      	ldr	r4, [r3, #0]
 8008580:	6838      	ldr	r0, [r7, #0]
 8008582:	f7fe fb3c 	bl	8006bfe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8008586:	4603      	mov	r3, r0
 8008588:	681d      	ldr	r5, [r3, #0]
 800858a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800858c:	f7fe fb42 	bl	8006c14 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8008590:	4603      	mov	r3, r0
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	462a      	mov	r2, r5
 8008596:	4621      	mov	r1, r4
 8008598:	4630      	mov	r0, r6
 800859a:	f7fc fd24 	bl	8004fe6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 800859e:	4603      	mov	r3, r0
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085a8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80085a8:	b590      	push	{r4, r7, lr}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80085b4:	68b8      	ldr	r0, [r7, #8]
 80085b6:	f7ff ffb1 	bl	800851c <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 80085ba:	4604      	mov	r4, r0
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7f9 f96e 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 80085c2:	4603      	mov	r3, r0
 80085c4:	4619      	mov	r1, r3
 80085c6:	2004      	movs	r0, #4
 80085c8:	f7f9 f80d 	bl	80015e6 <_ZnwjPv>
 80085cc:	4602      	mov	r2, r0
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	6013      	str	r3, [r2, #0]
	}
 80085d2:	bf00      	nop
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd90      	pop	{r4, r7, pc}

080085da <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fa10 	bl	8008a0a <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 80085ea:	bf00      	nop
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	3304      	adds	r3, #4
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 fa0f 	bl	8008a22 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 8008604:	4603      	mov	r3, r0
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8008618:	6838      	ldr	r0, [r7, #0]
 800861a:	f7fe fe07 	bl	800722c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800861e:	4603      	mov	r3, r0
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	601a      	str	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4618      	mov	r0, r3
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 f9f1 	bl	8008a38 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 8008656:	4603      	mov	r3, r0
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>:
      max_size(const _Alloc& __a) noexcept
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 8008668:	2100      	movs	r1, #0
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f9ef 	bl	8008a4e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>
 8008670:	4603      	mov	r3, r0
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d013      	beq.n	80086d2 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 80086aa:	6978      	ldr	r0, [r7, #20]
 80086ac:	f7fe fe0b 	bl	80072c6 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 80086b0:	4604      	mov	r4, r0
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f7fe fe07 	bl	80072c6 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 80086b8:	4603      	mov	r3, r0
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	4619      	mov	r1, r3
 80086be:	4620      	mov	r0, r4
 80086c0:	f000 f9d0 	bl	8008a64 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3308      	adds	r3, #8
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	3308      	adds	r3, #8
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	e7e7      	b.n	80086a2 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x12>
      return __cur;
 80086d2:	697b      	ldr	r3, [r7, #20]
    }
 80086d4:	4618      	mov	r0, r3
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd90      	pop	{r4, r7, pc}

080086dc <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4618      	mov	r0, r3
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 80086f2:	b590      	push	{r4, r7, lr}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f9cc 	bl	8008a9a <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 8008702:	4604      	mov	r4, r0
 8008704:	6838      	ldr	r0, [r7, #0]
 8008706:	f000 f9c8 	bl	8008a9a <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 800870a:	4603      	mov	r3, r0
 800870c:	429c      	cmp	r4, r3
 800870e:	bf0c      	ite	eq
 8008710:	2301      	moveq	r3, #1
 8008712:	2300      	movne	r3, #0
 8008714:	b2db      	uxtb	r3, r3
 8008716:	4618      	mov	r0, r3
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	bd90      	pop	{r4, r7, pc}

0800871e <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4618      	mov	r0, r3
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 8008734:	b590      	push	{r4, r7, lr}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff ffec 	bl	800871e <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8008746:	4604      	mov	r4, r0
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	4619      	mov	r1, r3
 800874c:	2008      	movs	r0, #8
 800874e:	f7f8 ff4a 	bl	80015e6 <_ZnwjPv>
 8008752:	4603      	mov	r3, r0
 8008754:	4622      	mov	r2, r4
 8008756:	e892 0003 	ldmia.w	r2, {r0, r1}
 800875a:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800875e:	bf00      	nop
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	bd90      	pop	{r4, r7, pc}

08008766 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008766:	b580      	push	{r7, lr}
 8008768:	b08a      	sub	sp, #40	; 0x28
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8008772:	f107 020c 	add.w	r2, r7, #12
 8008776:	f107 0308 	add.w	r3, r7, #8
 800877a:	4611      	mov	r1, r2
 800877c:	4618      	mov	r0, r3
 800877e:	f7fe fe26 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8008782:	4603      	mov	r3, r0
 8008784:	2b01      	cmp	r3, #1
 8008786:	bfd4      	ite	le
 8008788:	2301      	movle	r3, #1
 800878a:	2300      	movgt	r3, #0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d142      	bne.n	8008818 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb2>
      const _DistanceType __len = __last - __first;
 8008792:	f107 020c 	add.w	r2, r7, #12
 8008796:	f107 0308 	add.w	r3, r7, #8
 800879a:	4611      	mov	r1, r2
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe fe16 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80087a2:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	3b02      	subs	r3, #2
 80087a8:	0fda      	lsrs	r2, r3, #31
 80087aa:	4413      	add	r3, r2
 80087ac:	105b      	asrs	r3, r3, #1
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 80087b0:	f107 030c 	add.w	r3, r7, #12
 80087b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff f97a 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80087bc:	4603      	mov	r3, r0
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	f107 031c 	add.w	r3, r7, #28
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff fda6 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80087ca:	4603      	mov	r3, r0
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff fdae 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80087d2:	4602      	mov	r2, r0
 80087d4:	f107 0314 	add.w	r3, r7, #20
 80087d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087dc:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80087e0:	f107 0314 	add.w	r3, r7, #20
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff fda2 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80087ea:	4603      	mov	r3, r0
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	ed93 7a00 	vldr	s14, [r3]
 80087f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80087f6:	7813      	ldrb	r3, [r2, #0]
 80087f8:	eeb0 0a47 	vmov.f32	s0, s14
 80087fc:	eef0 0a67 	vmov.f32	s1, s15
 8008800:	6a3a      	ldr	r2, [r7, #32]
 8008802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 f954 	bl	8008ab2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
	  if (__parent == 0)
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	2b00      	cmp	r3, #0
 800880e:	d005      	beq.n	800881c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb6>
	  __parent--;
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	3b01      	subs	r3, #1
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 8008816:	e7cb      	b.n	80087b0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x4a>
	return;
 8008818:	bf00      	nop
 800881a:	e000      	b.n	800881e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb8>
	    return;
 800881c:	bf00      	nop
    }
 800881e:	3728      	adds	r7, #40	; 0x28
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008824:	b590      	push	{r4, r7, lr}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7fe fe0a 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8008834:	4603      	mov	r3, r0
 8008836:	681c      	ldr	r4, [r3, #0]
 8008838:	6838      	ldr	r0, [r7, #0]
 800883a:	f7fe fe05 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800883e:	4603      	mov	r3, r0
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	429c      	cmp	r4, r3
 8008844:	bf34      	ite	cc
 8008846:	2301      	movcc	r3, #1
 8008848:	2300      	movcs	r3, #0
 800884a:	b2db      	uxtb	r3, r3
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	bd90      	pop	{r4, r7, pc}

08008854 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008854:	b590      	push	{r4, r7, lr}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8008862:	1d3b      	adds	r3, r7, #4
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff fd56 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800886a:	4603      	mov	r3, r0
 800886c:	4618      	mov	r0, r3
 800886e:	f7ff fd5e 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008872:	4602      	mov	r2, r0
 8008874:	f107 0310 	add.w	r3, r7, #16
 8008878:	e892 0003 	ldmia.w	r2, {r0, r1}
 800887c:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8008880:	f107 030c 	add.w	r3, r7, #12
 8008884:	4618      	mov	r0, r3
 8008886:	f7ff fd46 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800888a:	4603      	mov	r3, r0
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff fd4e 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008892:	4604      	mov	r4, r0
 8008894:	1d3b      	adds	r3, r7, #4
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff fd3d 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800889c:	4603      	mov	r3, r0
 800889e:	4622      	mov	r2, r4
 80088a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80088a4:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 80088a8:	f107 020c 	add.w	r2, r7, #12
 80088ac:	f107 0308 	add.w	r3, r7, #8
 80088b0:	4611      	mov	r1, r2
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe fd8b 	bl	80073ce <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80088b8:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 80088ba:	f107 0310 	add.w	r3, r7, #16
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff fd35 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80088c4:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	ed93 7a00 	vldr	s14, [r3]
 80088cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80088d0:	7813      	ldrb	r3, [r2, #0]
 80088d2:	eeb0 0a47 	vmov.f32	s0, s14
 80088d6:	eef0 0a67 	vmov.f32	s1, s15
 80088da:	4622      	mov	r2, r4
 80088dc:	2100      	movs	r1, #0
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 f8e7 	bl	8008ab2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
    }
 80088e4:	bf00      	nop
 80088e6:	371c      	adds	r7, #28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd90      	pop	{r4, r7, pc}

080088ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
	--_M_current;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f1a3 0208 	sub.w	r2, r3, #8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	601a      	str	r2, [r3, #0]
	return *this;
 8008900:	687b      	ldr	r3, [r7, #4]
      }
 8008902:	4618      	mov	r0, r3
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800890e:	b590      	push	{r4, r7, lr}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8008918:	1d3b      	adds	r3, r7, #4
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff fcfb 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008920:	4604      	mov	r4, r0
 8008922:	463b      	mov	r3, r7
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff fcf6 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800892a:	4603      	mov	r3, r0
 800892c:	4619      	mov	r1, r3
 800892e:	4620      	mov	r0, r4
 8008930:	f000 f982 	bl	8008c38 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	bd90      	pop	{r4, r7, pc}

0800893c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4618      	mov	r0, r3
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8008952:	b5b0      	push	{r4, r5, r7, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 f991 	bl	8008c86 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008964:	4604      	mov	r4, r0
 8008966:	68b8      	ldr	r0, [r7, #8]
 8008968:	f000 f98d 	bl	8008c86 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800896c:	4605      	mov	r5, r0
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f989 	bl	8008c86 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008974:	4603      	mov	r3, r0
 8008976:	461a      	mov	r2, r3
 8008978:	4629      	mov	r1, r5
 800897a:	4620      	mov	r0, r4
 800897c:	f000 f991 	bl	8008ca2 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8008980:	4603      	mov	r3, r0
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f99c 	bl	8008cc2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>
 800898a:	4603      	mov	r3, r0
    }
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bdb0      	pop	{r4, r5, r7, pc}

08008994 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b082      	sub	sp, #8
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe fd6a 	bl	8007490 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4618      	mov	r0, r3
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 80089c6:	b590      	push	{r4, r7, lr}
 80089c8:	b085      	sub	sp, #20
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 80089d2:	68fc      	ldr	r4, [r7, #12]
 80089d4:	1d3b      	adds	r3, r7, #4
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7ff fc9d 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80089dc:	4603      	mov	r3, r0
 80089de:	461a      	mov	r2, r3
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	4620      	mov	r0, r4
 80089e4:	f7fa fd0e 	bl	8003404 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 80089e8:	4603      	mov	r3, r0
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd90      	pop	{r4, r7, pc}

080089f2 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b082      	sub	sp, #8
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7f8 ff4f 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 8008a00:	4603      	mov	r3, r0
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7f8 ff43 	bl	800189e <_ZNSt9_Any_data9_M_accessEv>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008a22:	b480      	push	{r7}
 8008a24:	b083      	sub	sp, #12
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 8008a4e:	b40f      	push	{r0, r1, r2, r3}
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 8008a54:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
	}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	b004      	add	sp, #16
 8008a62:	4770      	bx	lr

08008a64 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8008a70:	68b8      	ldr	r0, [r7, #8]
 8008a72:	f7ff fc5c 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008a76:	4603      	mov	r3, r0
 8008a78:	461a      	mov	r2, r3
 8008a7a:	68f9      	ldr	r1, [r7, #12]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff fae4 	bl	800804a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8008a82:	68b8      	ldr	r0, [r7, #8]
 8008a84:	f7fe fc1f 	bl	80072c6 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7fe fc25 	bl	80072dc <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
    }
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8008ab2:	b590      	push	{r4, r7, lr}
 8008ab4:	b08f      	sub	sp, #60	; 0x3c
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6178      	str	r0, [r7, #20]
 8008aba:	6139      	str	r1, [r7, #16]
 8008abc:	60fa      	str	r2, [r7, #12]
 8008abe:	eeb0 7a40 	vmov.f32	s14, s0
 8008ac2:	eef0 7a60 	vmov.f32	s15, s1
 8008ac6:	703b      	strb	r3, [r7, #0]
 8008ac8:	ed87 7a01 	vstr	s14, [r7, #4]
 8008acc:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	0fda      	lsrs	r2, r3, #31
 8008ade:	4413      	add	r3, r2
 8008ae0:	105b      	asrs	r3, r3, #1
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	da46      	bge.n	8008b78 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xc6>
	  __secondChild = 2 * (__secondChild + 1);
 8008aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aec:	3301      	adds	r3, #1
 8008aee:	005b      	lsls	r3, r3, #1
 8008af0:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 8008af2:	f107 0314 	add.w	r3, r7, #20
 8008af6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fe ffd9 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008afe:	4604      	mov	r4, r0
 8008b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b02:	1e5a      	subs	r2, r3, #1
 8008b04:	f107 0314 	add.w	r3, r7, #20
 8008b08:	4611      	mov	r1, r2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe ffd0 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008b10:	4602      	mov	r2, r0
 8008b12:	463b      	mov	r3, r7
 8008b14:	4621      	mov	r1, r4
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7ff fb1b 	bl	8008152 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x76>
	    __secondChild--;
 8008b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b24:	3b01      	subs	r3, #1
 8008b26:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8008b28:	f107 0314 	add.w	r3, r7, #20
 8008b2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe ffbe 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008b34:	4603      	mov	r3, r0
 8008b36:	623b      	str	r3, [r7, #32]
 8008b38:	f107 0320 	add.w	r3, r7, #32
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff fbea 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008b42:	4603      	mov	r3, r0
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff fbf2 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	f107 0314 	add.w	r3, r7, #20
 8008b50:	6939      	ldr	r1, [r7, #16]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe ffac 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff fbd8 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008b66:	4603      	mov	r3, r0
 8008b68:	4622      	mov	r2, r4
 8008b6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b6e:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 8008b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b74:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8008b76:	e7af      	b.n	8008ad8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x26>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d136      	bne.n	8008bf0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3b02      	subs	r3, #2
 8008b86:	0fda      	lsrs	r2, r3, #31
 8008b88:	4413      	add	r3, r2
 8008b8a:	105b      	asrs	r3, r3, #1
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d12d      	bne.n	8008bf0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
	  __secondChild = 2 * (__secondChild + 1);
 8008b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b96:	3301      	adds	r3, #1
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9e:	1e5a      	subs	r2, r3, #1
 8008ba0:	f107 0314 	add.w	r3, r7, #20
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe ff82 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008bac:	4603      	mov	r3, r0
 8008bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff fbae 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff fbb6 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	f107 0314 	add.w	r3, r7, #20
 8008bc8:	6939      	ldr	r1, [r7, #16]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe ff70 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff fb9c 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008bde:	4603      	mov	r3, r0
 8008be0:	4622      	mov	r2, r4
 8008be2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008be6:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 8008bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bec:	3b01      	subs	r3, #1
 8008bee:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 8008bf0:	463b      	mov	r3, r7
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff fece 	bl	8008994 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	f107 031c 	add.w	r3, r7, #28
 8008bfe:	4611      	mov	r1, r2
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 f875 	bl	8008cf0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8008c06:	1d3b      	adds	r3, r7, #4
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff fb90 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008c0e:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8008c10:	f107 021c 	add.w	r2, r7, #28
 8008c14:	ed93 7a00 	vldr	s14, [r3]
 8008c18:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	eeb0 0a47 	vmov.f32	s0, s14
 8008c22:	eef0 0a67 	vmov.f32	s1, s15
 8008c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c28:	6939      	ldr	r1, [r7, #16]
 8008c2a:	6978      	ldr	r0, [r7, #20]
 8008c2c:	f000 f86e 	bl	8008d0c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>
    }
 8008c30:	bf00      	nop
 8008c32:	373c      	adds	r7, #60	; 0x3c
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd90      	pop	{r4, r7, pc}

08008c38 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7ff fb73 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	f107 0308 	add.w	r3, r7, #8
 8008c4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c52:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8008c56:	6838      	ldr	r0, [r7, #0]
 8008c58:	f7ff fb69 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c64:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8008c68:	f107 0308 	add.w	r3, r7, #8
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff fb5e 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008c72:	4602      	mov	r2, r0
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c7a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008c7e:	bf00      	nop
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b082      	sub	sp, #8
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8008c8e:	1d3b      	adds	r3, r7, #4
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fe fbd9 	bl	8007448 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8008c96:	4603      	mov	r3, r0
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	68b9      	ldr	r1, [r7, #8]
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 f8a1 	bl	8008dfa <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>:
    __niter_wrap(_From __from, _To __res)
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7ff ffda 	bl	8008c86 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	1a9b      	subs	r3, r3, r2
 8008cd8:	10db      	asrs	r3, r3, #3
 8008cda:	461a      	mov	r2, r3
 8008cdc:	1d3b      	adds	r3, r7, #4
 8008cde:	4611      	mov	r1, r2
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe fee5 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fe fbc7 	bl	8007490 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8008d0c:	b590      	push	{r4, r7, lr}
 8008d0e:	b08b      	sub	sp, #44	; 0x2c
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6178      	str	r0, [r7, #20]
 8008d14:	6139      	str	r1, [r7, #16]
 8008d16:	60fa      	str	r2, [r7, #12]
 8008d18:	eeb0 7a40 	vmov.f32	s14, s0
 8008d1c:	eef0 7a60 	vmov.f32	s15, s1
 8008d20:	603b      	str	r3, [r7, #0]
 8008d22:	ed87 7a01 	vstr	s14, [r7, #4]
 8008d26:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	0fda      	lsrs	r2, r3, #31
 8008d30:	4413      	add	r3, r2
 8008d32:	105b      	asrs	r3, r3, #1
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	dd10      	ble.n	8008d60 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x54>
 8008d3e:	f107 0314 	add.w	r3, r7, #20
 8008d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fe feb3 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	1d3b      	adds	r3, r7, #4
 8008d4e:	461a      	mov	r2, r3
 8008d50:	6838      	ldr	r0, [r7, #0]
 8008d52:	f000 f862 	bl	8008e1a <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x54>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e000      	b.n	8008d62 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x56>
 8008d60:	2300      	movs	r3, #0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d02d      	beq.n	8008dc2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb6>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8008d66:	f107 0314 	add.w	r3, r7, #20
 8008d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe fe9f 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008d72:	4603      	mov	r3, r0
 8008d74:	61bb      	str	r3, [r7, #24]
 8008d76:	f107 0318 	add.w	r3, r7, #24
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff facb 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008d80:	4603      	mov	r3, r0
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff fad3 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008d88:	4604      	mov	r4, r0
 8008d8a:	f107 0314 	add.w	r3, r7, #20
 8008d8e:	6939      	ldr	r1, [r7, #16]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fe fe8d 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008d96:	4603      	mov	r3, r0
 8008d98:	61fb      	str	r3, [r7, #28]
 8008d9a:	f107 031c 	add.w	r3, r7, #28
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff fab9 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008da4:	4603      	mov	r3, r0
 8008da6:	4622      	mov	r2, r4
 8008da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dac:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	0fda      	lsrs	r2, r3, #31
 8008dba:	4413      	add	r3, r2
 8008dbc:	105b      	asrs	r3, r3, #1
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8008dc0:	e7b9      	b.n	8008d36 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x2a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8008dc2:	1d3b      	adds	r3, r7, #4
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff fab2 	bl	800832e <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008dca:	4604      	mov	r4, r0
 8008dcc:	f107 0314 	add.w	r3, r7, #20
 8008dd0:	6939      	ldr	r1, [r7, #16]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe fe6c 	bl	8007ab0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	623b      	str	r3, [r7, #32]
 8008ddc:	f107 0320 	add.w	r3, r7, #32
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff fa98 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008de6:	4603      	mov	r3, r0
 8008de8:	4622      	mov	r2, r4
 8008dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008df2:	bf00      	nop
 8008df4:	372c      	adds	r7, #44	; 0x2c
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd90      	pop	{r4, r7, pc}

08008dfa <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	60f8      	str	r0, [r7, #12]
 8008e02:	60b9      	str	r1, [r7, #8]
 8008e04:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	68b9      	ldr	r1, [r7, #8]
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 f81c 	bl	8008e48 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 8008e10:	4603      	mov	r3, r0
    }
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 8008e1a:	b590      	push	{r4, r7, lr}
 8008e1c:	b085      	sub	sp, #20
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	60f8      	str	r0, [r7, #12]
 8008e22:	60b9      	str	r1, [r7, #8]
 8008e24:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 8008e26:	68fc      	ldr	r4, [r7, #12]
 8008e28:	f107 0308 	add.w	r3, r7, #8
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7ff fa72 	bl	8008316 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008e32:	4603      	mov	r3, r0
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	4619      	mov	r1, r3
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f7fa fae3 	bl	8003404 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd90      	pop	{r4, r7, pc}

08008e48 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	10db      	asrs	r3, r3, #3
 8008e5c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00a      	beq.n	8008e7a <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	425b      	negs	r3, r3
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	18d0      	adds	r0, r2, r3
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	461a      	mov	r2, r3
 8008e74:	68f9      	ldr	r1, [r7, #12]
 8008e76:	f01a fde9 	bl	8023a4c <memmove>
	  return __result - _Num;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	00db      	lsls	r3, r3, #3
 8008e7e:	425b      	negs	r3, r3
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	4413      	add	r3, r2
	}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e92:	2300      	movs	r3, #0
 8008e94:	607b      	str	r3, [r7, #4]
 8008e96:	4b10      	ldr	r3, [pc, #64]	; (8008ed8 <HAL_MspInit+0x4c>)
 8008e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9a:	4a0f      	ldr	r2, [pc, #60]	; (8008ed8 <HAL_MspInit+0x4c>)
 8008e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8008ea2:	4b0d      	ldr	r3, [pc, #52]	; (8008ed8 <HAL_MspInit+0x4c>)
 8008ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eaa:	607b      	str	r3, [r7, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008eae:	2300      	movs	r3, #0
 8008eb0:	603b      	str	r3, [r7, #0]
 8008eb2:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <HAL_MspInit+0x4c>)
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	4a08      	ldr	r2, [pc, #32]	; (8008ed8 <HAL_MspInit+0x4c>)
 8008eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8008ebe:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <HAL_MspInit+0x4c>)
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ec6:	603b      	str	r3, [r7, #0]
 8008ec8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008eca:	2007      	movs	r0, #7
 8008ecc:	f000 fb46 	bl	800955c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	40023800 	.word	0x40023800

08008edc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a0b      	ldr	r2, [pc, #44]	; (8008f18 <HAL_CRC_MspInit+0x3c>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d10d      	bne.n	8008f0a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	4b0a      	ldr	r3, [pc, #40]	; (8008f1c <HAL_CRC_MspInit+0x40>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef6:	4a09      	ldr	r2, [pc, #36]	; (8008f1c <HAL_CRC_MspInit+0x40>)
 8008ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008efc:	6313      	str	r3, [r2, #48]	; 0x30
 8008efe:	4b07      	ldr	r3, [pc, #28]	; (8008f1c <HAL_CRC_MspInit+0x40>)
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008f0a:	bf00      	nop
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	40023000 	.word	0x40023000
 8008f1c:	40023800 	.word	0x40023800

08008f20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08a      	sub	sp, #40	; 0x28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f28:	f107 0314 	add.w	r3, r7, #20
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	601a      	str	r2, [r3, #0]
 8008f30:	605a      	str	r2, [r3, #4]
 8008f32:	609a      	str	r2, [r3, #8]
 8008f34:	60da      	str	r2, [r3, #12]
 8008f36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a19      	ldr	r2, [pc, #100]	; (8008fa4 <HAL_SPI_MspInit+0x84>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d12b      	bne.n	8008f9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008f42:	2300      	movs	r3, #0
 8008f44:	613b      	str	r3, [r7, #16]
 8008f46:	4b18      	ldr	r3, [pc, #96]	; (8008fa8 <HAL_SPI_MspInit+0x88>)
 8008f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f4a:	4a17      	ldr	r2, [pc, #92]	; (8008fa8 <HAL_SPI_MspInit+0x88>)
 8008f4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f50:	6453      	str	r3, [r2, #68]	; 0x44
 8008f52:	4b15      	ldr	r3, [pc, #84]	; (8008fa8 <HAL_SPI_MspInit+0x88>)
 8008f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f5a:	613b      	str	r3, [r7, #16]
 8008f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <HAL_SPI_MspInit+0x88>)
 8008f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f66:	4a10      	ldr	r2, [pc, #64]	; (8008fa8 <HAL_SPI_MspInit+0x88>)
 8008f68:	f043 0301 	orr.w	r3, r3, #1
 8008f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f6e:	4b0e      	ldr	r3, [pc, #56]	; (8008fa8 <HAL_SPI_MspInit+0x88>)
 8008f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008f7a:	23e0      	movs	r3, #224	; 0xe0
 8008f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f7e:	2302      	movs	r3, #2
 8008f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f86:	2303      	movs	r3, #3
 8008f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008f8a:	2305      	movs	r3, #5
 8008f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f8e:	f107 0314 	add.w	r3, r7, #20
 8008f92:	4619      	mov	r1, r3
 8008f94:	4805      	ldr	r0, [pc, #20]	; (8008fac <HAL_SPI_MspInit+0x8c>)
 8008f96:	f000 fb3f 	bl	8009618 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008f9a:	bf00      	nop
 8008f9c:	3728      	adds	r7, #40	; 0x28
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	40013000 	.word	0x40013000
 8008fa8:	40023800 	.word	0x40023800
 8008fac:	40020000 	.word	0x40020000

08008fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a0e      	ldr	r2, [pc, #56]	; (8008ff8 <HAL_TIM_Base_MspInit+0x48>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d115      	bne.n	8008fee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60fb      	str	r3, [r7, #12]
 8008fc6:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <HAL_TIM_Base_MspInit+0x4c>)
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fca:	4a0c      	ldr	r2, [pc, #48]	; (8008ffc <HAL_TIM_Base_MspInit+0x4c>)
 8008fcc:	f043 0320 	orr.w	r3, r3, #32
 8008fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8008fd2:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <HAL_TIM_Base_MspInit+0x4c>)
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	f003 0320 	and.w	r3, r3, #32
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	2037      	movs	r0, #55	; 0x37
 8008fe4:	f000 fac5 	bl	8009572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008fe8:	2037      	movs	r0, #55	; 0x37
 8008fea:	f000 fade 	bl	80095aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8008fee:	bf00      	nop
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	40001400 	.word	0x40001400
 8008ffc:	40023800 	.word	0x40023800

08009000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009000:	b480      	push	{r7}
 8009002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009004:	e7fe      	b.n	8009004 <NMI_Handler+0x4>

08009006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009006:	b480      	push	{r7}
 8009008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800900a:	e7fe      	b.n	800900a <HardFault_Handler+0x4>

0800900c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009010:	e7fe      	b.n	8009010 <MemManage_Handler+0x4>

08009012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009012:	b480      	push	{r7}
 8009014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009016:	e7fe      	b.n	8009016 <BusFault_Handler+0x4>

08009018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009018:	b480      	push	{r7}
 800901a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800901c:	e7fe      	b.n	800901c <UsageFault_Handler+0x4>

0800901e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800901e:	b480      	push	{r7}
 8009020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009022:	bf00      	nop
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800902c:	b480      	push	{r7}
 800902e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009030:	bf00      	nop
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800903a:	b480      	push	{r7}
 800903c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800903e:	bf00      	nop
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800904c:	f000 f972 	bl	8009334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009050:	bf00      	nop
 8009052:	bd80      	pop	{r7, pc}

08009054 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8009058:	2001      	movs	r0, #1
 800905a:	f000 fcad 	bl	80099b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800905e:	bf00      	nop
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009068:	4802      	ldr	r0, [pc, #8]	; (8009074 <TIM7_IRQHandler+0x10>)
 800906a:	f003 f9a2 	bl	800c3b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800906e:	bf00      	nop
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000534 	.word	0x20000534

08009078 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800907c:	4802      	ldr	r0, [pc, #8]	; (8009088 <OTG_FS_IRQHandler+0x10>)
 800907e:	f000 fe03 	bl	8009c88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8009082:	bf00      	nop
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	200045b8 	.word	0x200045b8

0800908c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
  return 1;
 8009090:	2301      	movs	r3, #1
}
 8009092:	4618      	mov	r0, r3
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <_kill>:

int _kill(int pid, int sig)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80090a6:	f01a fc73 	bl	8023990 <__errno>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2216      	movs	r2, #22
 80090ae:	601a      	str	r2, [r3, #0]
  return -1;
 80090b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <_exit>:

void _exit (int status)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80090c4:	f04f 31ff 	mov.w	r1, #4294967295
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff ffe7 	bl	800909c <_kill>
  while (1) {}    /* Make sure we hang here */
 80090ce:	e7fe      	b.n	80090ce <_exit+0x12>

080090d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090dc:	2300      	movs	r3, #0
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	e00a      	b.n	80090f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80090e2:	f3af 8000 	nop.w
 80090e6:	4601      	mov	r1, r0
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	60ba      	str	r2, [r7, #8]
 80090ee:	b2ca      	uxtb	r2, r1
 80090f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	3301      	adds	r3, #1
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	dbf0      	blt.n	80090e2 <_read+0x12>
  }

  return len;
 8009100:	687b      	ldr	r3, [r7, #4]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009116:	2300      	movs	r3, #0
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	e009      	b.n	8009130 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	1c5a      	adds	r2, r3, #1
 8009120:	60ba      	str	r2, [r7, #8]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	4618      	mov	r0, r3
 8009126:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	3301      	adds	r3, #1
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	429a      	cmp	r2, r3
 8009136:	dbf1      	blt.n	800911c <_write+0x12>
  }
  return len;
 8009138:	687b      	ldr	r3, [r7, #4]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <_close>:

int _close(int file)
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800914a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800914e:	4618      	mov	r0, r3
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800915a:	b480      	push	{r7}
 800915c:	b083      	sub	sp, #12
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800916a:	605a      	str	r2, [r3, #4]
  return 0;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <_isatty>:

int _isatty(int file)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009182:	2301      	movs	r3, #1
}
 8009184:	4618      	mov	r0, r3
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
	...

080091ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80091b4:	4a14      	ldr	r2, [pc, #80]	; (8009208 <_sbrk+0x5c>)
 80091b6:	4b15      	ldr	r3, [pc, #84]	; (800920c <_sbrk+0x60>)
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80091c0:	4b13      	ldr	r3, [pc, #76]	; (8009210 <_sbrk+0x64>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d102      	bne.n	80091ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80091c8:	4b11      	ldr	r3, [pc, #68]	; (8009210 <_sbrk+0x64>)
 80091ca:	4a12      	ldr	r2, [pc, #72]	; (8009214 <_sbrk+0x68>)
 80091cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80091ce:	4b10      	ldr	r3, [pc, #64]	; (8009210 <_sbrk+0x64>)
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4413      	add	r3, r2
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d207      	bcs.n	80091ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80091dc:	f01a fbd8 	bl	8023990 <__errno>
 80091e0:	4603      	mov	r3, r0
 80091e2:	220c      	movs	r2, #12
 80091e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80091e6:	f04f 33ff 	mov.w	r3, #4294967295
 80091ea:	e009      	b.n	8009200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80091ec:	4b08      	ldr	r3, [pc, #32]	; (8009210 <_sbrk+0x64>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80091f2:	4b07      	ldr	r3, [pc, #28]	; (8009210 <_sbrk+0x64>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4413      	add	r3, r2
 80091fa:	4a05      	ldr	r2, [pc, #20]	; (8009210 <_sbrk+0x64>)
 80091fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80091fe:	68fb      	ldr	r3, [r7, #12]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	20020000 	.word	0x20020000
 800920c:	00000400 	.word	0x00000400
 8009210:	20002be8 	.word	0x20002be8
 8009214:	20004cf8 	.word	0x20004cf8

08009218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009218:	b480      	push	{r7}
 800921a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800921c:	4b06      	ldr	r3, [pc, #24]	; (8009238 <SystemInit+0x20>)
 800921e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009222:	4a05      	ldr	r2, [pc, #20]	; (8009238 <SystemInit+0x20>)
 8009224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800922c:	bf00      	nop
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	e000ed00 	.word	0xe000ed00

0800923c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800923c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009274 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009240:	480d      	ldr	r0, [pc, #52]	; (8009278 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009242:	490e      	ldr	r1, [pc, #56]	; (800927c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009244:	4a0e      	ldr	r2, [pc, #56]	; (8009280 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009248:	e002      	b.n	8009250 <LoopCopyDataInit>

0800924a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800924a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800924c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800924e:	3304      	adds	r3, #4

08009250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009254:	d3f9      	bcc.n	800924a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009256:	4a0b      	ldr	r2, [pc, #44]	; (8009284 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009258:	4c0b      	ldr	r4, [pc, #44]	; (8009288 <LoopFillZerobss+0x26>)
  movs r3, #0
 800925a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800925c:	e001      	b.n	8009262 <LoopFillZerobss>

0800925e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800925e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009260:	3204      	adds	r2, #4

08009262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009264:	d3fb      	bcc.n	800925e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009266:	f7ff ffd7 	bl	8009218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800926a:	f01a fba9 	bl	80239c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800926e:	f7fc fe7f 	bl	8005f70 <main>
  bx  lr    
 8009272:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800927c:	20000454 	.word	0x20000454
  ldr r2, =_sidata
 8009280:	0802a6c8 	.word	0x0802a6c8
  ldr r2, =_sbss
 8009284:	20000454 	.word	0x20000454
  ldr r4, =_ebss
 8009288:	20004cf8 	.word	0x20004cf8

0800928c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800928c:	e7fe      	b.n	800928c <ADC_IRQHandler>
	...

08009290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009294:	4b0e      	ldr	r3, [pc, #56]	; (80092d0 <HAL_Init+0x40>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a0d      	ldr	r2, [pc, #52]	; (80092d0 <HAL_Init+0x40>)
 800929a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800929e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80092a0:	4b0b      	ldr	r3, [pc, #44]	; (80092d0 <HAL_Init+0x40>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a0a      	ldr	r2, [pc, #40]	; (80092d0 <HAL_Init+0x40>)
 80092a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80092aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80092ac:	4b08      	ldr	r3, [pc, #32]	; (80092d0 <HAL_Init+0x40>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a07      	ldr	r2, [pc, #28]	; (80092d0 <HAL_Init+0x40>)
 80092b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80092b8:	2003      	movs	r0, #3
 80092ba:	f000 f94f 	bl	800955c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80092be:	2000      	movs	r0, #0
 80092c0:	f000 f808 	bl	80092d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80092c4:	f7ff fde2 	bl	8008e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	40023c00 	.word	0x40023c00

080092d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80092dc:	4b12      	ldr	r3, [pc, #72]	; (8009328 <HAL_InitTick+0x54>)
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	4b12      	ldr	r3, [pc, #72]	; (800932c <HAL_InitTick+0x58>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	4619      	mov	r1, r3
 80092e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80092ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 f967 	bl	80095c6 <HAL_SYSTICK_Config>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e00e      	b.n	8009320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b0f      	cmp	r3, #15
 8009306:	d80a      	bhi.n	800931e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009308:	2200      	movs	r2, #0
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
 8009310:	f000 f92f 	bl	8009572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009314:	4a06      	ldr	r2, [pc, #24]	; (8009330 <HAL_InitTick+0x5c>)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	e000      	b.n	8009320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
}
 8009320:	4618      	mov	r0, r3
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	20000070 	.word	0x20000070
 800932c:	20000078 	.word	0x20000078
 8009330:	20000074 	.word	0x20000074

08009334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009334:	b480      	push	{r7}
 8009336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009338:	4b06      	ldr	r3, [pc, #24]	; (8009354 <HAL_IncTick+0x20>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	461a      	mov	r2, r3
 800933e:	4b06      	ldr	r3, [pc, #24]	; (8009358 <HAL_IncTick+0x24>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4413      	add	r3, r2
 8009344:	4a04      	ldr	r2, [pc, #16]	; (8009358 <HAL_IncTick+0x24>)
 8009346:	6013      	str	r3, [r2, #0]
}
 8009348:	bf00      	nop
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	20000078 	.word	0x20000078
 8009358:	20002bec 	.word	0x20002bec

0800935c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800935c:	b480      	push	{r7}
 800935e:	af00      	add	r7, sp, #0
  return uwTick;
 8009360:	4b03      	ldr	r3, [pc, #12]	; (8009370 <HAL_GetTick+0x14>)
 8009362:	681b      	ldr	r3, [r3, #0]
}
 8009364:	4618      	mov	r0, r3
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	20002bec 	.word	0x20002bec

08009374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800937c:	f7ff ffee 	bl	800935c <HAL_GetTick>
 8009380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938c:	d005      	beq.n	800939a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800938e:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <HAL_Delay+0x44>)
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	4413      	add	r3, r2
 8009398:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800939a:	bf00      	nop
 800939c:	f7ff ffde 	bl	800935c <HAL_GetTick>
 80093a0:	4602      	mov	r2, r0
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d8f7      	bhi.n	800939c <HAL_Delay+0x28>
  {
  }
}
 80093ac:	bf00      	nop
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20000078 	.word	0x20000078

080093bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f003 0307 	and.w	r3, r3, #7
 80093ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80093cc:	4b0c      	ldr	r3, [pc, #48]	; (8009400 <__NVIC_SetPriorityGrouping+0x44>)
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80093d8:	4013      	ands	r3, r2
 80093da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80093e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80093e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80093ee:	4a04      	ldr	r2, [pc, #16]	; (8009400 <__NVIC_SetPriorityGrouping+0x44>)
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	60d3      	str	r3, [r2, #12]
}
 80093f4:	bf00      	nop
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	e000ed00 	.word	0xe000ed00

08009404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009404:	b480      	push	{r7}
 8009406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009408:	4b04      	ldr	r3, [pc, #16]	; (800941c <__NVIC_GetPriorityGrouping+0x18>)
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	0a1b      	lsrs	r3, r3, #8
 800940e:	f003 0307 	and.w	r3, r3, #7
}
 8009412:	4618      	mov	r0, r3
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	e000ed00 	.word	0xe000ed00

08009420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	4603      	mov	r3, r0
 8009428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800942a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800942e:	2b00      	cmp	r3, #0
 8009430:	db0b      	blt.n	800944a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009432:	79fb      	ldrb	r3, [r7, #7]
 8009434:	f003 021f 	and.w	r2, r3, #31
 8009438:	4907      	ldr	r1, [pc, #28]	; (8009458 <__NVIC_EnableIRQ+0x38>)
 800943a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	2001      	movs	r0, #1
 8009442:	fa00 f202 	lsl.w	r2, r0, r2
 8009446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800944a:	bf00      	nop
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	e000e100 	.word	0xe000e100

0800945c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	6039      	str	r1, [r7, #0]
 8009466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800946c:	2b00      	cmp	r3, #0
 800946e:	db0a      	blt.n	8009486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	b2da      	uxtb	r2, r3
 8009474:	490c      	ldr	r1, [pc, #48]	; (80094a8 <__NVIC_SetPriority+0x4c>)
 8009476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800947a:	0112      	lsls	r2, r2, #4
 800947c:	b2d2      	uxtb	r2, r2
 800947e:	440b      	add	r3, r1
 8009480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009484:	e00a      	b.n	800949c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	b2da      	uxtb	r2, r3
 800948a:	4908      	ldr	r1, [pc, #32]	; (80094ac <__NVIC_SetPriority+0x50>)
 800948c:	79fb      	ldrb	r3, [r7, #7]
 800948e:	f003 030f 	and.w	r3, r3, #15
 8009492:	3b04      	subs	r3, #4
 8009494:	0112      	lsls	r2, r2, #4
 8009496:	b2d2      	uxtb	r2, r2
 8009498:	440b      	add	r3, r1
 800949a:	761a      	strb	r2, [r3, #24]
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	e000e100 	.word	0xe000e100
 80094ac:	e000ed00 	.word	0xe000ed00

080094b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b089      	sub	sp, #36	; 0x24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f003 0307 	and.w	r3, r3, #7
 80094c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	f1c3 0307 	rsb	r3, r3, #7
 80094ca:	2b04      	cmp	r3, #4
 80094cc:	bf28      	it	cs
 80094ce:	2304      	movcs	r3, #4
 80094d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	3304      	adds	r3, #4
 80094d6:	2b06      	cmp	r3, #6
 80094d8:	d902      	bls.n	80094e0 <NVIC_EncodePriority+0x30>
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	3b03      	subs	r3, #3
 80094de:	e000      	b.n	80094e2 <NVIC_EncodePriority+0x32>
 80094e0:	2300      	movs	r3, #0
 80094e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094e4:	f04f 32ff 	mov.w	r2, #4294967295
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	fa02 f303 	lsl.w	r3, r2, r3
 80094ee:	43da      	mvns	r2, r3
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	401a      	ands	r2, r3
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80094f8:	f04f 31ff 	mov.w	r1, #4294967295
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009502:	43d9      	mvns	r1, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009508:	4313      	orrs	r3, r2
         );
}
 800950a:	4618      	mov	r0, r3
 800950c:	3724      	adds	r7, #36	; 0x24
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
	...

08009518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3b01      	subs	r3, #1
 8009524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009528:	d301      	bcc.n	800952e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800952a:	2301      	movs	r3, #1
 800952c:	e00f      	b.n	800954e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800952e:	4a0a      	ldr	r2, [pc, #40]	; (8009558 <SysTick_Config+0x40>)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3b01      	subs	r3, #1
 8009534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009536:	210f      	movs	r1, #15
 8009538:	f04f 30ff 	mov.w	r0, #4294967295
 800953c:	f7ff ff8e 	bl	800945c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009540:	4b05      	ldr	r3, [pc, #20]	; (8009558 <SysTick_Config+0x40>)
 8009542:	2200      	movs	r2, #0
 8009544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009546:	4b04      	ldr	r3, [pc, #16]	; (8009558 <SysTick_Config+0x40>)
 8009548:	2207      	movs	r2, #7
 800954a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	e000e010 	.word	0xe000e010

0800955c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7ff ff29 	bl	80093bc <__NVIC_SetPriorityGrouping>
}
 800956a:	bf00      	nop
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009572:	b580      	push	{r7, lr}
 8009574:	b086      	sub	sp, #24
 8009576:	af00      	add	r7, sp, #0
 8009578:	4603      	mov	r3, r0
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]
 800957e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009580:	2300      	movs	r3, #0
 8009582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009584:	f7ff ff3e 	bl	8009404 <__NVIC_GetPriorityGrouping>
 8009588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	68b9      	ldr	r1, [r7, #8]
 800958e:	6978      	ldr	r0, [r7, #20]
 8009590:	f7ff ff8e 	bl	80094b0 <NVIC_EncodePriority>
 8009594:	4602      	mov	r2, r0
 8009596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800959a:	4611      	mov	r1, r2
 800959c:	4618      	mov	r0, r3
 800959e:	f7ff ff5d 	bl	800945c <__NVIC_SetPriority>
}
 80095a2:	bf00      	nop
 80095a4:	3718      	adds	r7, #24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	4603      	mov	r3, r0
 80095b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80095b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7ff ff31 	bl	8009420 <__NVIC_EnableIRQ>
}
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff ffa2 	bl	8009518 <SysTick_Config>
 80095d4:	4603      	mov	r3, r0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b082      	sub	sp, #8
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e00e      	b.n	800960e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	795b      	ldrb	r3, [r3, #5]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d105      	bne.n	8009606 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7ff fc6b 	bl	8008edc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009618:	b480      	push	{r7}
 800961a:	b089      	sub	sp, #36	; 0x24
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009622:	2300      	movs	r3, #0
 8009624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009626:	2300      	movs	r3, #0
 8009628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800962a:	2300      	movs	r3, #0
 800962c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800962e:	2300      	movs	r3, #0
 8009630:	61fb      	str	r3, [r7, #28]
 8009632:	e16b      	b.n	800990c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009634:	2201      	movs	r2, #1
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	fa02 f303 	lsl.w	r3, r2, r3
 800963c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	4013      	ands	r3, r2
 8009646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	429a      	cmp	r2, r3
 800964e:	f040 815a 	bne.w	8009906 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f003 0303 	and.w	r3, r3, #3
 800965a:	2b01      	cmp	r3, #1
 800965c:	d005      	beq.n	800966a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009666:	2b02      	cmp	r3, #2
 8009668:	d130      	bne.n	80096cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	005b      	lsls	r3, r3, #1
 8009674:	2203      	movs	r2, #3
 8009676:	fa02 f303 	lsl.w	r3, r2, r3
 800967a:	43db      	mvns	r3, r3
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	4013      	ands	r3, r2
 8009680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	68da      	ldr	r2, [r3, #12]
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	fa02 f303 	lsl.w	r3, r2, r3
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	4313      	orrs	r3, r2
 8009692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80096a0:	2201      	movs	r2, #1
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	fa02 f303 	lsl.w	r3, r2, r3
 80096a8:	43db      	mvns	r3, r3
 80096aa:	69ba      	ldr	r2, [r7, #24]
 80096ac:	4013      	ands	r3, r2
 80096ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	091b      	lsrs	r3, r3, #4
 80096b6:	f003 0201 	and.w	r2, r3, #1
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	fa02 f303 	lsl.w	r3, r2, r3
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	69ba      	ldr	r2, [r7, #24]
 80096ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	f003 0303 	and.w	r3, r3, #3
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d017      	beq.n	8009708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	2203      	movs	r2, #3
 80096e4:	fa02 f303 	lsl.w	r3, r2, r3
 80096e8:	43db      	mvns	r3, r3
 80096ea:	69ba      	ldr	r2, [r7, #24]
 80096ec:	4013      	ands	r3, r2
 80096ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	fa02 f303 	lsl.w	r3, r2, r3
 80096fc:	69ba      	ldr	r2, [r7, #24]
 80096fe:	4313      	orrs	r3, r2
 8009700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	69ba      	ldr	r2, [r7, #24]
 8009706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f003 0303 	and.w	r3, r3, #3
 8009710:	2b02      	cmp	r3, #2
 8009712:	d123      	bne.n	800975c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	08da      	lsrs	r2, r3, #3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3208      	adds	r2, #8
 800971c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	f003 0307 	and.w	r3, r3, #7
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	220f      	movs	r2, #15
 800972c:	fa02 f303 	lsl.w	r3, r2, r3
 8009730:	43db      	mvns	r3, r3
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	4013      	ands	r3, r2
 8009736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	f003 0307 	and.w	r3, r3, #7
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	fa02 f303 	lsl.w	r3, r2, r3
 8009748:	69ba      	ldr	r2, [r7, #24]
 800974a:	4313      	orrs	r3, r2
 800974c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	08da      	lsrs	r2, r3, #3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	3208      	adds	r2, #8
 8009756:	69b9      	ldr	r1, [r7, #24]
 8009758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	005b      	lsls	r3, r3, #1
 8009766:	2203      	movs	r2, #3
 8009768:	fa02 f303 	lsl.w	r3, r2, r3
 800976c:	43db      	mvns	r3, r3
 800976e:	69ba      	ldr	r2, [r7, #24]
 8009770:	4013      	ands	r3, r2
 8009772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f003 0203 	and.w	r2, r3, #3
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	005b      	lsls	r3, r3, #1
 8009780:	fa02 f303 	lsl.w	r3, r2, r3
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	4313      	orrs	r3, r2
 8009788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 80b4 	beq.w	8009906 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]
 80097a2:	4b60      	ldr	r3, [pc, #384]	; (8009924 <HAL_GPIO_Init+0x30c>)
 80097a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a6:	4a5f      	ldr	r2, [pc, #380]	; (8009924 <HAL_GPIO_Init+0x30c>)
 80097a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097ac:	6453      	str	r3, [r2, #68]	; 0x44
 80097ae:	4b5d      	ldr	r3, [pc, #372]	; (8009924 <HAL_GPIO_Init+0x30c>)
 80097b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80097ba:	4a5b      	ldr	r2, [pc, #364]	; (8009928 <HAL_GPIO_Init+0x310>)
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	089b      	lsrs	r3, r3, #2
 80097c0:	3302      	adds	r3, #2
 80097c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	220f      	movs	r2, #15
 80097d2:	fa02 f303 	lsl.w	r3, r2, r3
 80097d6:	43db      	mvns	r3, r3
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	4013      	ands	r3, r2
 80097dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a52      	ldr	r2, [pc, #328]	; (800992c <HAL_GPIO_Init+0x314>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d02b      	beq.n	800983e <HAL_GPIO_Init+0x226>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a51      	ldr	r2, [pc, #324]	; (8009930 <HAL_GPIO_Init+0x318>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d025      	beq.n	800983a <HAL_GPIO_Init+0x222>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a50      	ldr	r2, [pc, #320]	; (8009934 <HAL_GPIO_Init+0x31c>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d01f      	beq.n	8009836 <HAL_GPIO_Init+0x21e>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a4f      	ldr	r2, [pc, #316]	; (8009938 <HAL_GPIO_Init+0x320>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d019      	beq.n	8009832 <HAL_GPIO_Init+0x21a>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a4e      	ldr	r2, [pc, #312]	; (800993c <HAL_GPIO_Init+0x324>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d013      	beq.n	800982e <HAL_GPIO_Init+0x216>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a4d      	ldr	r2, [pc, #308]	; (8009940 <HAL_GPIO_Init+0x328>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d00d      	beq.n	800982a <HAL_GPIO_Init+0x212>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a4c      	ldr	r2, [pc, #304]	; (8009944 <HAL_GPIO_Init+0x32c>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d007      	beq.n	8009826 <HAL_GPIO_Init+0x20e>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a4b      	ldr	r2, [pc, #300]	; (8009948 <HAL_GPIO_Init+0x330>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d101      	bne.n	8009822 <HAL_GPIO_Init+0x20a>
 800981e:	2307      	movs	r3, #7
 8009820:	e00e      	b.n	8009840 <HAL_GPIO_Init+0x228>
 8009822:	2308      	movs	r3, #8
 8009824:	e00c      	b.n	8009840 <HAL_GPIO_Init+0x228>
 8009826:	2306      	movs	r3, #6
 8009828:	e00a      	b.n	8009840 <HAL_GPIO_Init+0x228>
 800982a:	2305      	movs	r3, #5
 800982c:	e008      	b.n	8009840 <HAL_GPIO_Init+0x228>
 800982e:	2304      	movs	r3, #4
 8009830:	e006      	b.n	8009840 <HAL_GPIO_Init+0x228>
 8009832:	2303      	movs	r3, #3
 8009834:	e004      	b.n	8009840 <HAL_GPIO_Init+0x228>
 8009836:	2302      	movs	r3, #2
 8009838:	e002      	b.n	8009840 <HAL_GPIO_Init+0x228>
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <HAL_GPIO_Init+0x228>
 800983e:	2300      	movs	r3, #0
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	f002 0203 	and.w	r2, r2, #3
 8009846:	0092      	lsls	r2, r2, #2
 8009848:	4093      	lsls	r3, r2
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	4313      	orrs	r3, r2
 800984e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009850:	4935      	ldr	r1, [pc, #212]	; (8009928 <HAL_GPIO_Init+0x310>)
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	089b      	lsrs	r3, r3, #2
 8009856:	3302      	adds	r3, #2
 8009858:	69ba      	ldr	r2, [r7, #24]
 800985a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800985e:	4b3b      	ldr	r3, [pc, #236]	; (800994c <HAL_GPIO_Init+0x334>)
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	43db      	mvns	r3, r3
 8009868:	69ba      	ldr	r2, [r7, #24]
 800986a:	4013      	ands	r3, r2
 800986c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d003      	beq.n	8009882 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800987a:	69ba      	ldr	r2, [r7, #24]
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	4313      	orrs	r3, r2
 8009880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009882:	4a32      	ldr	r2, [pc, #200]	; (800994c <HAL_GPIO_Init+0x334>)
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009888:	4b30      	ldr	r3, [pc, #192]	; (800994c <HAL_GPIO_Init+0x334>)
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	43db      	mvns	r3, r3
 8009892:	69ba      	ldr	r2, [r7, #24]
 8009894:	4013      	ands	r3, r2
 8009896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d003      	beq.n	80098ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80098ac:	4a27      	ldr	r2, [pc, #156]	; (800994c <HAL_GPIO_Init+0x334>)
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80098b2:	4b26      	ldr	r3, [pc, #152]	; (800994c <HAL_GPIO_Init+0x334>)
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	43db      	mvns	r3, r3
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	4013      	ands	r3, r2
 80098c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80098d6:	4a1d      	ldr	r2, [pc, #116]	; (800994c <HAL_GPIO_Init+0x334>)
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80098dc:	4b1b      	ldr	r3, [pc, #108]	; (800994c <HAL_GPIO_Init+0x334>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	43db      	mvns	r3, r3
 80098e6:	69ba      	ldr	r2, [r7, #24]
 80098e8:	4013      	ands	r3, r2
 80098ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d003      	beq.n	8009900 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009900:	4a12      	ldr	r2, [pc, #72]	; (800994c <HAL_GPIO_Init+0x334>)
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	3301      	adds	r3, #1
 800990a:	61fb      	str	r3, [r7, #28]
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	2b0f      	cmp	r3, #15
 8009910:	f67f ae90 	bls.w	8009634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop
 8009918:	3724      	adds	r7, #36	; 0x24
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	40023800 	.word	0x40023800
 8009928:	40013800 	.word	0x40013800
 800992c:	40020000 	.word	0x40020000
 8009930:	40020400 	.word	0x40020400
 8009934:	40020800 	.word	0x40020800
 8009938:	40020c00 	.word	0x40020c00
 800993c:	40021000 	.word	0x40021000
 8009940:	40021400 	.word	0x40021400
 8009944:	40021800 	.word	0x40021800
 8009948:	40021c00 	.word	0x40021c00
 800994c:	40013c00 	.word	0x40013c00

08009950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	807b      	strh	r3, [r7, #2]
 800995c:	4613      	mov	r3, r2
 800995e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009960:	787b      	ldrb	r3, [r7, #1]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009966:	887a      	ldrh	r2, [r7, #2]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800996c:	e003      	b.n	8009976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800996e:	887b      	ldrh	r3, [r7, #2]
 8009970:	041a      	lsls	r2, r3, #16
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	619a      	str	r2, [r3, #24]
}
 8009976:	bf00      	nop
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009982:	b480      	push	{r7}
 8009984:	b085      	sub	sp, #20
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	460b      	mov	r3, r1
 800998c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009994:	887a      	ldrh	r2, [r7, #2]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	4013      	ands	r3, r2
 800999a:	041a      	lsls	r2, r3, #16
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	43d9      	mvns	r1, r3
 80099a0:	887b      	ldrh	r3, [r7, #2]
 80099a2:	400b      	ands	r3, r1
 80099a4:	431a      	orrs	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	619a      	str	r2, [r3, #24]
}
 80099aa:	bf00      	nop
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
	...

080099b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	4603      	mov	r3, r0
 80099c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80099c2:	4b08      	ldr	r3, [pc, #32]	; (80099e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80099c4:	695a      	ldr	r2, [r3, #20]
 80099c6:	88fb      	ldrh	r3, [r7, #6]
 80099c8:	4013      	ands	r3, r2
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d006      	beq.n	80099dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80099ce:	4a05      	ldr	r2, [pc, #20]	; (80099e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80099d0:	88fb      	ldrh	r3, [r7, #6]
 80099d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80099d4:	88fb      	ldrh	r3, [r7, #6]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fc fd8e 	bl	80064f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	40013c00 	.word	0x40013c00

080099e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80099e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ea:	b08f      	sub	sp, #60	; 0x3c
 80099ec:	af0a      	add	r7, sp, #40	; 0x28
 80099ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e10f      	b.n	8009c1a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d106      	bne.n	8009a1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f016 ff19 	bl	802084c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2203      	movs	r2, #3
 8009a1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d102      	bne.n	8009a34 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f003 f83a 	bl	800cab2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	603b      	str	r3, [r7, #0]
 8009a44:	687e      	ldr	r6, [r7, #4]
 8009a46:	466d      	mov	r5, sp
 8009a48:	f106 0410 	add.w	r4, r6, #16
 8009a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009a58:	e885 0003 	stmia.w	r5, {r0, r1}
 8009a5c:	1d33      	adds	r3, r6, #4
 8009a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a60:	6838      	ldr	r0, [r7, #0]
 8009a62:	f002 ff11 	bl	800c888 <USB_CoreInit>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d005      	beq.n	8009a78 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e0d0      	b.n	8009c1a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f003 f828 	bl	800cad4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a84:	2300      	movs	r3, #0
 8009a86:	73fb      	strb	r3, [r7, #15]
 8009a88:	e04a      	b.n	8009b20 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009a8a:	7bfa      	ldrb	r2, [r7, #15]
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	00db      	lsls	r3, r3, #3
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	440b      	add	r3, r1
 8009a98:	333d      	adds	r3, #61	; 0x3d
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009a9e:	7bfa      	ldrb	r2, [r7, #15]
 8009aa0:	6879      	ldr	r1, [r7, #4]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	00db      	lsls	r3, r3, #3
 8009aa6:	4413      	add	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	440b      	add	r3, r1
 8009aac:	333c      	adds	r3, #60	; 0x3c
 8009aae:	7bfa      	ldrb	r2, [r7, #15]
 8009ab0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009ab2:	7bfa      	ldrb	r2, [r7, #15]
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	b298      	uxth	r0, r3
 8009ab8:	6879      	ldr	r1, [r7, #4]
 8009aba:	4613      	mov	r3, r2
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	4413      	add	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	440b      	add	r3, r1
 8009ac4:	3344      	adds	r3, #68	; 0x44
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009aca:	7bfa      	ldrb	r2, [r7, #15]
 8009acc:	6879      	ldr	r1, [r7, #4]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	00db      	lsls	r3, r3, #3
 8009ad2:	4413      	add	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	440b      	add	r3, r1
 8009ad8:	3340      	adds	r3, #64	; 0x40
 8009ada:	2200      	movs	r2, #0
 8009adc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009ade:	7bfa      	ldrb	r2, [r7, #15]
 8009ae0:	6879      	ldr	r1, [r7, #4]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	00db      	lsls	r3, r3, #3
 8009ae6:	4413      	add	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	440b      	add	r3, r1
 8009aec:	3348      	adds	r3, #72	; 0x48
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009af2:	7bfa      	ldrb	r2, [r7, #15]
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	00db      	lsls	r3, r3, #3
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	440b      	add	r3, r1
 8009b00:	334c      	adds	r3, #76	; 0x4c
 8009b02:	2200      	movs	r2, #0
 8009b04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009b06:	7bfa      	ldrb	r2, [r7, #15]
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	00db      	lsls	r3, r3, #3
 8009b0e:	4413      	add	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	440b      	add	r3, r1
 8009b14:	3354      	adds	r3, #84	; 0x54
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b1a:	7bfb      	ldrb	r3, [r7, #15]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	73fb      	strb	r3, [r7, #15]
 8009b20:	7bfa      	ldrb	r2, [r7, #15]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d3af      	bcc.n	8009a8a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	73fb      	strb	r3, [r7, #15]
 8009b2e:	e044      	b.n	8009bba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009b30:	7bfa      	ldrb	r2, [r7, #15]
 8009b32:	6879      	ldr	r1, [r7, #4]
 8009b34:	4613      	mov	r3, r2
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	4413      	add	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	440b      	add	r3, r1
 8009b3e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009b42:	2200      	movs	r2, #0
 8009b44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009b46:	7bfa      	ldrb	r2, [r7, #15]
 8009b48:	6879      	ldr	r1, [r7, #4]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	00db      	lsls	r3, r3, #3
 8009b4e:	4413      	add	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	440b      	add	r3, r1
 8009b54:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009b58:	7bfa      	ldrb	r2, [r7, #15]
 8009b5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009b5c:	7bfa      	ldrb	r2, [r7, #15]
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	4613      	mov	r3, r2
 8009b62:	00db      	lsls	r3, r3, #3
 8009b64:	4413      	add	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	440b      	add	r3, r1
 8009b6a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009b6e:	2200      	movs	r2, #0
 8009b70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009b72:	7bfa      	ldrb	r2, [r7, #15]
 8009b74:	6879      	ldr	r1, [r7, #4]
 8009b76:	4613      	mov	r3, r2
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	4413      	add	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	440b      	add	r3, r1
 8009b80:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009b84:	2200      	movs	r2, #0
 8009b86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009b88:	7bfa      	ldrb	r2, [r7, #15]
 8009b8a:	6879      	ldr	r1, [r7, #4]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	00db      	lsls	r3, r3, #3
 8009b90:	4413      	add	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	440b      	add	r3, r1
 8009b96:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009b9e:	7bfa      	ldrb	r2, [r7, #15]
 8009ba0:	6879      	ldr	r1, [r7, #4]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	00db      	lsls	r3, r3, #3
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	440b      	add	r3, r1
 8009bac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	73fb      	strb	r3, [r7, #15]
 8009bba:	7bfa      	ldrb	r2, [r7, #15]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d3b5      	bcc.n	8009b30 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	603b      	str	r3, [r7, #0]
 8009bca:	687e      	ldr	r6, [r7, #4]
 8009bcc:	466d      	mov	r5, sp
 8009bce:	f106 0410 	add.w	r4, r6, #16
 8009bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009bda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009bde:	e885 0003 	stmia.w	r5, {r0, r1}
 8009be2:	1d33      	adds	r3, r6, #4
 8009be4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009be6:	6838      	ldr	r0, [r7, #0]
 8009be8:	f002 ffc0 	bl	800cb6c <USB_DevInit>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d005      	beq.n	8009bfe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e00d      	b.n	8009c1a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f004 f90f 	bl	800de36 <USB_DevDisconnect>

  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c22 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d101      	bne.n	8009c3e <HAL_PCD_Start+0x1c>
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	e020      	b.n	8009c80 <HAL_PCD_Start+0x5e>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d109      	bne.n	8009c62 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d005      	beq.n	8009c62 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f002 ff12 	bl	800ca90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f004 f8bf 	bl	800ddf4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009c88:	b590      	push	{r4, r7, lr}
 8009c8a:	b08d      	sub	sp, #52	; 0x34
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f004 f97d 	bl	800df9e <USB_GetMode>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f040 848a 	bne.w	800a5c0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f004 f8e1 	bl	800de78 <USB_ReadInterrupts>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 8480 	beq.w	800a5be <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	0a1b      	lsrs	r3, r3, #8
 8009cc8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f004 f8ce 	bl	800de78 <USB_ReadInterrupts>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f003 0302 	and.w	r3, r3, #2
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d107      	bne.n	8009cf6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	695a      	ldr	r2, [r3, #20]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f002 0202 	and.w	r2, r2, #2
 8009cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f004 f8bc 	bl	800de78 <USB_ReadInterrupts>
 8009d00:	4603      	mov	r3, r0
 8009d02:	f003 0310 	and.w	r3, r3, #16
 8009d06:	2b10      	cmp	r3, #16
 8009d08:	d161      	bne.n	8009dce <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	699a      	ldr	r2, [r3, #24]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 0210 	bic.w	r2, r2, #16
 8009d18:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	f003 020f 	and.w	r2, r3, #15
 8009d26:	4613      	mov	r3, r2
 8009d28:	00db      	lsls	r3, r3, #3
 8009d2a:	4413      	add	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	4413      	add	r3, r2
 8009d36:	3304      	adds	r3, #4
 8009d38:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	0c5b      	lsrs	r3, r3, #17
 8009d3e:	f003 030f 	and.w	r3, r3, #15
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d124      	bne.n	8009d90 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d035      	beq.n	8009dbe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	091b      	lsrs	r3, r3, #4
 8009d5a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009d5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	461a      	mov	r2, r3
 8009d64:	6a38      	ldr	r0, [r7, #32]
 8009d66:	f003 fef3 	bl	800db50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	691a      	ldr	r2, [r3, #16]
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	091b      	lsrs	r3, r3, #4
 8009d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d76:	441a      	add	r2, r3
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	6a1a      	ldr	r2, [r3, #32]
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	091b      	lsrs	r3, r3, #4
 8009d84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d88:	441a      	add	r2, r3
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	621a      	str	r2, [r3, #32]
 8009d8e:	e016      	b.n	8009dbe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	0c5b      	lsrs	r3, r3, #17
 8009d94:	f003 030f 	and.w	r3, r3, #15
 8009d98:	2b06      	cmp	r3, #6
 8009d9a:	d110      	bne.n	8009dbe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009da2:	2208      	movs	r2, #8
 8009da4:	4619      	mov	r1, r3
 8009da6:	6a38      	ldr	r0, [r7, #32]
 8009da8:	f003 fed2 	bl	800db50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	6a1a      	ldr	r2, [r3, #32]
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	091b      	lsrs	r3, r3, #4
 8009db4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009db8:	441a      	add	r2, r3
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	699a      	ldr	r2, [r3, #24]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f042 0210 	orr.w	r2, r2, #16
 8009dcc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f004 f850 	bl	800de78 <USB_ReadInterrupts>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009dde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009de2:	f040 80a7 	bne.w	8009f34 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009de6:	2300      	movs	r3, #0
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f004 f855 	bl	800de9e <USB_ReadDevAllOutEpInterrupt>
 8009df4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009df6:	e099      	b.n	8009f2c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f000 808e 	beq.w	8009f20 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0a:	b2d2      	uxtb	r2, r2
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f004 f879 	bl	800df06 <USB_ReadDevOutEPInterrupt>
 8009e14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f003 0301 	and.w	r3, r3, #1
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00c      	beq.n	8009e3a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	2301      	movs	r3, #1
 8009e30:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fec3 	bl	800abc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	f003 0308 	and.w	r3, r3, #8
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00c      	beq.n	8009e5e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e50:	461a      	mov	r2, r3
 8009e52:	2308      	movs	r3, #8
 8009e54:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 ff99 	bl	800ad90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f003 0310 	and.w	r3, r3, #16
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d008      	beq.n	8009e7a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e74:	461a      	mov	r2, r3
 8009e76:	2310      	movs	r3, #16
 8009e78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	f003 0302 	and.w	r3, r3, #2
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d030      	beq.n	8009ee6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e8c:	2b80      	cmp	r3, #128	; 0x80
 8009e8e:	d109      	bne.n	8009ea4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	69fa      	ldr	r2, [r7, #28]
 8009e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ea2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	00db      	lsls	r3, r3, #3
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	78db      	ldrb	r3, [r3, #3]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d108      	bne.n	8009ed4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f016 fdc2 	bl	8020a58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f003 0320 	and.w	r3, r3, #32
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d008      	beq.n	8009f02 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efc:	461a      	mov	r2, r3
 8009efe:	2320      	movs	r3, #32
 8009f00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d009      	beq.n	8009f20 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f18:	461a      	mov	r2, r3
 8009f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f1e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	3301      	adds	r3, #1
 8009f24:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f28:	085b      	lsrs	r3, r3, #1
 8009f2a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f47f af62 	bne.w	8009df8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f003 ff9d 	bl	800de78 <USB_ReadInterrupts>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f48:	f040 80db 	bne.w	800a102 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f003 ffbe 	bl	800ded2 <USB_ReadDevAllInEpInterrupt>
 8009f56:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009f5c:	e0cd      	b.n	800a0fa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f60:	f003 0301 	and.w	r3, r3, #1
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 80c2 	beq.w	800a0ee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f70:	b2d2      	uxtb	r2, r2
 8009f72:	4611      	mov	r1, r2
 8009f74:	4618      	mov	r0, r3
 8009f76:	f003 ffe4 	bl	800df42 <USB_ReadDevInEPInterrupt>
 8009f7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	f003 0301 	and.w	r3, r3, #1
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d057      	beq.n	800a036 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	f003 030f 	and.w	r3, r3, #15
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f92:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	43db      	mvns	r3, r3
 8009fa0:	69f9      	ldr	r1, [r7, #28]
 8009fa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	2301      	movs	r3, #1
 8009fba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d132      	bne.n	800a02a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009fc4:	6879      	ldr	r1, [r7, #4]
 8009fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc8:	4613      	mov	r3, r2
 8009fca:	00db      	lsls	r3, r3, #3
 8009fcc:	4413      	add	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	440b      	add	r3, r1
 8009fd2:	334c      	adds	r3, #76	; 0x4c
 8009fd4:	6819      	ldr	r1, [r3, #0]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fda:	4613      	mov	r3, r2
 8009fdc:	00db      	lsls	r3, r3, #3
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4403      	add	r3, r0
 8009fe4:	3348      	adds	r3, #72	; 0x48
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4419      	add	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fee:	4613      	mov	r3, r2
 8009ff0:	00db      	lsls	r3, r3, #3
 8009ff2:	4413      	add	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4403      	add	r3, r0
 8009ff8:	334c      	adds	r3, #76	; 0x4c
 8009ffa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d113      	bne.n	800a02a <HAL_PCD_IRQHandler+0x3a2>
 800a002:	6879      	ldr	r1, [r7, #4]
 800a004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a006:	4613      	mov	r3, r2
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	440b      	add	r3, r1
 800a010:	3354      	adds	r3, #84	; 0x54
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d108      	bne.n	800a02a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6818      	ldr	r0, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a022:	461a      	mov	r2, r3
 800a024:	2101      	movs	r1, #1
 800a026:	f003 ffeb 	bl	800e000 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	4619      	mov	r1, r3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f016 fc8c 	bl	802094e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	f003 0308 	and.w	r3, r3, #8
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d008      	beq.n	800a052 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a04c:	461a      	mov	r2, r3
 800a04e:	2308      	movs	r3, #8
 800a050:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f003 0310 	and.w	r3, r3, #16
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d008      	beq.n	800a06e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	4413      	add	r3, r2
 800a064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a068:	461a      	mov	r2, r3
 800a06a:	2310      	movs	r3, #16
 800a06c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a074:	2b00      	cmp	r3, #0
 800a076:	d008      	beq.n	800a08a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a084:	461a      	mov	r2, r3
 800a086:	2340      	movs	r3, #64	; 0x40
 800a088:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	f003 0302 	and.w	r3, r3, #2
 800a090:	2b00      	cmp	r3, #0
 800a092:	d023      	beq.n	800a0dc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a096:	6a38      	ldr	r0, [r7, #32]
 800a098:	f002 fecc 	bl	800ce34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a09c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a09e:	4613      	mov	r3, r2
 800a0a0:	00db      	lsls	r3, r3, #3
 800a0a2:	4413      	add	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	3338      	adds	r3, #56	; 0x38
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	78db      	ldrb	r3, [r3, #3]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d108      	bne.n	800a0ca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f016 fcd9 	bl	8020a7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0cc:	015a      	lsls	r2, r3, #5
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	2302      	movs	r3, #2
 800a0da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a0e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fcdb 	bl	800aaa4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	085b      	lsrs	r3, r3, #1
 800a0f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f47f af2e 	bne.w	8009f5e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4618      	mov	r0, r3
 800a108:	f003 feb6 	bl	800de78 <USB_ReadInterrupts>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a116:	d122      	bne.n	800a15e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	69fa      	ldr	r2, [r7, #28]
 800a122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a126:	f023 0301 	bic.w	r3, r3, #1
 800a12a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a132:	2b01      	cmp	r3, #1
 800a134:	d108      	bne.n	800a148 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a13e:	2100      	movs	r1, #0
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fec3 	bl	800aecc <HAL_PCDEx_LPM_Callback>
 800a146:	e002      	b.n	800a14e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f016 fc77 	bl	8020a3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	695a      	ldr	r2, [r3, #20]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a15c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4618      	mov	r0, r3
 800a164:	f003 fe88 	bl	800de78 <USB_ReadInterrupts>
 800a168:	4603      	mov	r3, r0
 800a16a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a16e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a172:	d112      	bne.n	800a19a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b01      	cmp	r3, #1
 800a182:	d102      	bne.n	800a18a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f016 fc33 	bl	80209f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	695a      	ldr	r2, [r3, #20]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a198:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f003 fe6a 	bl	800de78 <USB_ReadInterrupts>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ae:	f040 80b7 	bne.w	800a320 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	69fa      	ldr	r2, [r7, #28]
 800a1bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1c0:	f023 0301 	bic.w	r3, r3, #1
 800a1c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2110      	movs	r1, #16
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f002 fe31 	bl	800ce34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1d6:	e046      	b.n	800a266 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	015a      	lsls	r2, r3, #5
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ee:	015a      	lsls	r2, r3, #5
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1fc:	0151      	lsls	r1, r2, #5
 800a1fe:	69fa      	ldr	r2, [r7, #28]
 800a200:	440a      	add	r2, r1
 800a202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a20a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a218:	461a      	mov	r2, r3
 800a21a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a21e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a230:	0151      	lsls	r1, r2, #5
 800a232:	69fa      	ldr	r2, [r7, #28]
 800a234:	440a      	add	r2, r1
 800a236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a23a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a23e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	4413      	add	r3, r2
 800a248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a250:	0151      	lsls	r1, r2, #5
 800a252:	69fa      	ldr	r2, [r7, #28]
 800a254:	440a      	add	r2, r1
 800a256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a25a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a25e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a262:	3301      	adds	r3, #1
 800a264:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d3b3      	bcc.n	800a1d8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	69fa      	ldr	r2, [r7, #28]
 800a27a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a27e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a282:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d016      	beq.n	800a2ba <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a296:	69fa      	ldr	r2, [r7, #28]
 800a298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a29c:	f043 030b 	orr.w	r3, r3, #11
 800a2a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ac:	69fa      	ldr	r2, [r7, #28]
 800a2ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2b2:	f043 030b 	orr.w	r3, r3, #11
 800a2b6:	6453      	str	r3, [r2, #68]	; 0x44
 800a2b8:	e015      	b.n	800a2e6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	69fa      	ldr	r2, [r7, #28]
 800a2c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a2cc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a2d0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	69fa      	ldr	r2, [r7, #28]
 800a2dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2e0:	f043 030b 	orr.w	r3, r3, #11
 800a2e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	69fa      	ldr	r2, [r7, #28]
 800a2f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a2f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6818      	ldr	r0, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a30a:	461a      	mov	r2, r3
 800a30c:	f003 fe78 	bl	800e000 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	695a      	ldr	r2, [r3, #20]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a31e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4618      	mov	r0, r3
 800a326:	f003 fda7 	bl	800de78 <USB_ReadInterrupts>
 800a32a:	4603      	mov	r3, r0
 800a32c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a334:	d124      	bne.n	800a380 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f003 fe3d 	bl	800dfba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4618      	mov	r0, r3
 800a346:	f002 fdf2 	bl	800cf2e <USB_GetDevSpeed>
 800a34a:	4603      	mov	r3, r0
 800a34c:	461a      	mov	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681c      	ldr	r4, [r3, #0]
 800a356:	f001 fa29 	bl	800b7ac <HAL_RCC_GetHCLKFreq>
 800a35a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a360:	b2db      	uxtb	r3, r3
 800a362:	461a      	mov	r2, r3
 800a364:	4620      	mov	r0, r4
 800a366:	f002 faf1 	bl	800c94c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f016 fb17 	bl	802099e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	695a      	ldr	r2, [r3, #20]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a37e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4618      	mov	r0, r3
 800a386:	f003 fd77 	bl	800de78 <USB_ReadInterrupts>
 800a38a:	4603      	mov	r3, r0
 800a38c:	f003 0308 	and.w	r3, r3, #8
 800a390:	2b08      	cmp	r3, #8
 800a392:	d10a      	bne.n	800a3aa <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f016 faf4 	bl	8020982 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	695a      	ldr	r2, [r3, #20]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f002 0208 	and.w	r2, r2, #8
 800a3a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f003 fd62 	bl	800de78 <USB_ReadInterrupts>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ba:	2b80      	cmp	r3, #128	; 0x80
 800a3bc:	d122      	bne.n	800a404 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ce:	e014      	b.n	800a3fa <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	4413      	add	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	440b      	add	r3, r1
 800a3de:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d105      	bne.n	800a3f4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fb27 	bl	800aa42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a400:	429a      	cmp	r2, r3
 800a402:	d3e5      	bcc.n	800a3d0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4618      	mov	r0, r3
 800a40a:	f003 fd35 	bl	800de78 <USB_ReadInterrupts>
 800a40e:	4603      	mov	r3, r0
 800a410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a418:	d13b      	bne.n	800a492 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a41a:	2301      	movs	r3, #1
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
 800a41e:	e02b      	b.n	800a478 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	015a      	lsls	r2, r3, #5
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	4413      	add	r3, r2
 800a428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a430:	6879      	ldr	r1, [r7, #4]
 800a432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a434:	4613      	mov	r3, r2
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	4413      	add	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	440b      	add	r3, r1
 800a43e:	3340      	adds	r3, #64	; 0x40
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d115      	bne.n	800a472 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a446:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a448:	2b00      	cmp	r3, #0
 800a44a:	da12      	bge.n	800a472 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a44c:	6879      	ldr	r1, [r7, #4]
 800a44e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a450:	4613      	mov	r3, r2
 800a452:	00db      	lsls	r3, r3, #3
 800a454:	4413      	add	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	440b      	add	r3, r1
 800a45a:	333f      	adds	r3, #63	; 0x3f
 800a45c:	2201      	movs	r2, #1
 800a45e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	b2db      	uxtb	r3, r3
 800a464:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fae8 	bl	800aa42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	3301      	adds	r3, #1
 800a476:	627b      	str	r3, [r7, #36]	; 0x24
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a47e:	429a      	cmp	r2, r3
 800a480:	d3ce      	bcc.n	800a420 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	695a      	ldr	r2, [r3, #20]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a490:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4618      	mov	r0, r3
 800a498:	f003 fcee 	bl	800de78 <USB_ReadInterrupts>
 800a49c:	4603      	mov	r3, r0
 800a49e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4a6:	d155      	bne.n	800a554 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a4ac:	e045      	b.n	800a53a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	015a      	lsls	r2, r3, #5
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	4413      	add	r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	440b      	add	r3, r1
 800a4cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d12e      	bne.n	800a534 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a4d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	da2b      	bge.n	800a534 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a4e8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d121      	bne.n	800a534 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a4f0:	6879      	ldr	r1, [r7, #4]
 800a4f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	4413      	add	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	440b      	add	r3, r1
 800a4fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a502:	2201      	movs	r2, #1
 800a504:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a50e:	6a3b      	ldr	r3, [r7, #32]
 800a510:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a512:	6a3b      	ldr	r3, [r7, #32]
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10a      	bne.n	800a534 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	69fa      	ldr	r2, [r7, #28]
 800a528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a52c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a530:	6053      	str	r3, [r2, #4]
            break;
 800a532:	e007      	b.n	800a544 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	3301      	adds	r3, #1
 800a538:	627b      	str	r3, [r7, #36]	; 0x24
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a540:	429a      	cmp	r2, r3
 800a542:	d3b4      	bcc.n	800a4ae <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	695a      	ldr	r2, [r3, #20]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a552:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4618      	mov	r0, r3
 800a55a:	f003 fc8d 	bl	800de78 <USB_ReadInterrupts>
 800a55e:	4603      	mov	r3, r0
 800a560:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a568:	d10a      	bne.n	800a580 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f016 fa98 	bl	8020aa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	695a      	ldr	r2, [r3, #20]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a57e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4618      	mov	r0, r3
 800a586:	f003 fc77 	bl	800de78 <USB_ReadInterrupts>
 800a58a:	4603      	mov	r3, r0
 800a58c:	f003 0304 	and.w	r3, r3, #4
 800a590:	2b04      	cmp	r3, #4
 800a592:	d115      	bne.n	800a5c0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	f003 0304 	and.w	r3, r3, #4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d002      	beq.n	800a5ac <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f016 fa88 	bl	8020abc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6859      	ldr	r1, [r3, #4]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	69ba      	ldr	r2, [r7, #24]
 800a5b8:	430a      	orrs	r2, r1
 800a5ba:	605a      	str	r2, [r3, #4]
 800a5bc:	e000      	b.n	800a5c0 <HAL_PCD_IRQHandler+0x938>
      return;
 800a5be:	bf00      	nop
    }
  }
}
 800a5c0:	3734      	adds	r7, #52	; 0x34
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd90      	pop	{r4, r7, pc}

0800a5c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b082      	sub	sp, #8
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d101      	bne.n	800a5e0 <HAL_PCD_SetAddress+0x1a>
 800a5dc:	2302      	movs	r3, #2
 800a5de:	e013      	b.n	800a608 <HAL_PCD_SetAddress+0x42>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	78fa      	ldrb	r2, [r7, #3]
 800a5ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	78fa      	ldrb	r2, [r7, #3]
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f003 fbd5 	bl	800dda8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	4608      	mov	r0, r1
 800a61a:	4611      	mov	r1, r2
 800a61c:	461a      	mov	r2, r3
 800a61e:	4603      	mov	r3, r0
 800a620:	70fb      	strb	r3, [r7, #3]
 800a622:	460b      	mov	r3, r1
 800a624:	803b      	strh	r3, [r7, #0]
 800a626:	4613      	mov	r3, r2
 800a628:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a62e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a632:	2b00      	cmp	r3, #0
 800a634:	da0f      	bge.n	800a656 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a636:	78fb      	ldrb	r3, [r7, #3]
 800a638:	f003 020f 	and.w	r2, r3, #15
 800a63c:	4613      	mov	r3, r2
 800a63e:	00db      	lsls	r3, r3, #3
 800a640:	4413      	add	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	3338      	adds	r3, #56	; 0x38
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	4413      	add	r3, r2
 800a64a:	3304      	adds	r3, #4
 800a64c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2201      	movs	r2, #1
 800a652:	705a      	strb	r2, [r3, #1]
 800a654:	e00f      	b.n	800a676 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a656:	78fb      	ldrb	r3, [r7, #3]
 800a658:	f003 020f 	and.w	r2, r3, #15
 800a65c:	4613      	mov	r3, r2
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	4413      	add	r3, r2
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	4413      	add	r3, r2
 800a66c:	3304      	adds	r3, #4
 800a66e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a676:	78fb      	ldrb	r3, [r7, #3]
 800a678:	f003 030f 	and.w	r3, r3, #15
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a682:	883a      	ldrh	r2, [r7, #0]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	78ba      	ldrb	r2, [r7, #2]
 800a68c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	785b      	ldrb	r3, [r3, #1]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d004      	beq.n	800a6a0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a6a0:	78bb      	ldrb	r3, [r7, #2]
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d102      	bne.n	800a6ac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d101      	bne.n	800a6ba <HAL_PCD_EP_Open+0xaa>
 800a6b6:	2302      	movs	r3, #2
 800a6b8:	e00e      	b.n	800a6d8 <HAL_PCD_EP_Open+0xc8>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68f9      	ldr	r1, [r7, #12]
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f002 fc55 	bl	800cf78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a6d6:	7afb      	ldrb	r3, [r7, #11]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a6ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	da0f      	bge.n	800a714 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	f003 020f 	and.w	r2, r3, #15
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	00db      	lsls	r3, r3, #3
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	3338      	adds	r3, #56	; 0x38
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	4413      	add	r3, r2
 800a708:	3304      	adds	r3, #4
 800a70a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2201      	movs	r2, #1
 800a710:	705a      	strb	r2, [r3, #1]
 800a712:	e00f      	b.n	800a734 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a714:	78fb      	ldrb	r3, [r7, #3]
 800a716:	f003 020f 	and.w	r2, r3, #15
 800a71a:	4613      	mov	r3, r2
 800a71c:	00db      	lsls	r3, r3, #3
 800a71e:	4413      	add	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	4413      	add	r3, r2
 800a72a:	3304      	adds	r3, #4
 800a72c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a734:	78fb      	ldrb	r3, [r7, #3]
 800a736:	f003 030f 	and.w	r3, r3, #15
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a746:	2b01      	cmp	r3, #1
 800a748:	d101      	bne.n	800a74e <HAL_PCD_EP_Close+0x6e>
 800a74a:	2302      	movs	r3, #2
 800a74c:	e00e      	b.n	800a76c <HAL_PCD_EP_Close+0x8c>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68f9      	ldr	r1, [r7, #12]
 800a75c:	4618      	mov	r0, r3
 800a75e:	f002 fc93 	bl	800d088 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	607a      	str	r2, [r7, #4]
 800a77e:	603b      	str	r3, [r7, #0]
 800a780:	460b      	mov	r3, r1
 800a782:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a784:	7afb      	ldrb	r3, [r7, #11]
 800a786:	f003 020f 	and.w	r2, r3, #15
 800a78a:	4613      	mov	r3, r2
 800a78c:	00db      	lsls	r3, r3, #3
 800a78e:	4413      	add	r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	4413      	add	r3, r2
 800a79a:	3304      	adds	r3, #4
 800a79c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a7b6:	7afb      	ldrb	r3, [r7, #11]
 800a7b8:	f003 030f 	and.w	r3, r3, #15
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d102      	bne.n	800a7d0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a7d0:	7afb      	ldrb	r3, [r7, #11]
 800a7d2:	f003 030f 	and.w	r3, r3, #15
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d109      	bne.n	800a7ee <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6818      	ldr	r0, [r3, #0]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	6979      	ldr	r1, [r7, #20]
 800a7e8:	f002 ff72 	bl	800d6d0 <USB_EP0StartXfer>
 800a7ec:	e008      	b.n	800a800 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6818      	ldr	r0, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	6979      	ldr	r1, [r7, #20]
 800a7fc:	f002 fd20 	bl	800d240 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3718      	adds	r7, #24
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a80a:	b480      	push	{r7}
 800a80c:	b083      	sub	sp, #12
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	460b      	mov	r3, r1
 800a814:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a816:	78fb      	ldrb	r3, [r7, #3]
 800a818:	f003 020f 	and.w	r2, r3, #15
 800a81c:	6879      	ldr	r1, [r7, #4]
 800a81e:	4613      	mov	r3, r2
 800a820:	00db      	lsls	r3, r3, #3
 800a822:	4413      	add	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	440b      	add	r3, r1
 800a828:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a82c:	681b      	ldr	r3, [r3, #0]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b086      	sub	sp, #24
 800a83e:	af00      	add	r7, sp, #0
 800a840:	60f8      	str	r0, [r7, #12]
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	603b      	str	r3, [r7, #0]
 800a846:	460b      	mov	r3, r1
 800a848:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a84a:	7afb      	ldrb	r3, [r7, #11]
 800a84c:	f003 020f 	and.w	r2, r3, #15
 800a850:	4613      	mov	r3, r2
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	4413      	add	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	3338      	adds	r3, #56	; 0x38
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	4413      	add	r3, r2
 800a85e:	3304      	adds	r3, #4
 800a860:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	2200      	movs	r2, #0
 800a872:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	2201      	movs	r2, #1
 800a878:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a87a:	7afb      	ldrb	r3, [r7, #11]
 800a87c:	f003 030f 	and.w	r3, r3, #15
 800a880:	b2da      	uxtb	r2, r3
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d102      	bne.n	800a894 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a894:	7afb      	ldrb	r3, [r7, #11]
 800a896:	f003 030f 	and.w	r3, r3, #15
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d109      	bne.n	800a8b2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6818      	ldr	r0, [r3, #0]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	6979      	ldr	r1, [r7, #20]
 800a8ac:	f002 ff10 	bl	800d6d0 <USB_EP0StartXfer>
 800a8b0:	e008      	b.n	800a8c4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6818      	ldr	r0, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	461a      	mov	r2, r3
 800a8be:	6979      	ldr	r1, [r7, #20]
 800a8c0:	f002 fcbe 	bl	800d240 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3718      	adds	r7, #24
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	f003 020f 	and.w	r2, r3, #15
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d901      	bls.n	800a8ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e050      	b.n	800a98e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a8ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	da0f      	bge.n	800a914 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8f4:	78fb      	ldrb	r3, [r7, #3]
 800a8f6:	f003 020f 	and.w	r2, r3, #15
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	00db      	lsls	r3, r3, #3
 800a8fe:	4413      	add	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	3338      	adds	r3, #56	; 0x38
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	4413      	add	r3, r2
 800a908:	3304      	adds	r3, #4
 800a90a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2201      	movs	r2, #1
 800a910:	705a      	strb	r2, [r3, #1]
 800a912:	e00d      	b.n	800a930 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a914:	78fa      	ldrb	r2, [r7, #3]
 800a916:	4613      	mov	r3, r2
 800a918:	00db      	lsls	r3, r3, #3
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	4413      	add	r3, r2
 800a926:	3304      	adds	r3, #4
 800a928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2201      	movs	r2, #1
 800a934:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a936:	78fb      	ldrb	r3, [r7, #3]
 800a938:	f003 030f 	and.w	r3, r3, #15
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d101      	bne.n	800a950 <HAL_PCD_EP_SetStall+0x82>
 800a94c:	2302      	movs	r3, #2
 800a94e:	e01e      	b.n	800a98e <HAL_PCD_EP_SetStall+0xc0>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68f9      	ldr	r1, [r7, #12]
 800a95e:	4618      	mov	r0, r3
 800a960:	f003 f94e 	bl	800dc00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a964:	78fb      	ldrb	r3, [r7, #3]
 800a966:	f003 030f 	and.w	r3, r3, #15
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10a      	bne.n	800a984 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6818      	ldr	r0, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	b2d9      	uxtb	r1, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a97e:	461a      	mov	r2, r3
 800a980:	f003 fb3e 	bl	800e000 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b084      	sub	sp, #16
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	460b      	mov	r3, r1
 800a9a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a9a2:	78fb      	ldrb	r3, [r7, #3]
 800a9a4:	f003 020f 	and.w	r2, r3, #15
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d901      	bls.n	800a9b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e042      	b.n	800aa3a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a9b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	da0f      	bge.n	800a9dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a9bc:	78fb      	ldrb	r3, [r7, #3]
 800a9be:	f003 020f 	and.w	r2, r3, #15
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	00db      	lsls	r3, r3, #3
 800a9c6:	4413      	add	r3, r2
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	3338      	adds	r3, #56	; 0x38
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	705a      	strb	r2, [r3, #1]
 800a9da:	e00f      	b.n	800a9fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a9dc:	78fb      	ldrb	r3, [r7, #3]
 800a9de:	f003 020f 	and.w	r2, r3, #15
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	00db      	lsls	r3, r3, #3
 800a9e6:	4413      	add	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aa02:	78fb      	ldrb	r3, [r7, #3]
 800aa04:	f003 030f 	and.w	r3, r3, #15
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d101      	bne.n	800aa1c <HAL_PCD_EP_ClrStall+0x86>
 800aa18:	2302      	movs	r3, #2
 800aa1a:	e00e      	b.n	800aa3a <HAL_PCD_EP_ClrStall+0xa4>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68f9      	ldr	r1, [r7, #12]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f003 f956 	bl	800dcdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b084      	sub	sp, #16
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800aa4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	da0c      	bge.n	800aa70 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa56:	78fb      	ldrb	r3, [r7, #3]
 800aa58:	f003 020f 	and.w	r2, r3, #15
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	4413      	add	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	3338      	adds	r3, #56	; 0x38
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	4413      	add	r3, r2
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	e00c      	b.n	800aa8a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aa70:	78fb      	ldrb	r3, [r7, #3]
 800aa72:	f003 020f 	and.w	r2, r3, #15
 800aa76:	4613      	mov	r3, r2
 800aa78:	00db      	lsls	r3, r3, #3
 800aa7a:	4413      	add	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	4413      	add	r3, r2
 800aa86:	3304      	adds	r3, #4
 800aa88:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68f9      	ldr	r1, [r7, #12]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f002 ff75 	bl	800d980 <USB_EPStopXfer>
 800aa96:	4603      	mov	r3, r0
 800aa98:	72fb      	strb	r3, [r7, #11]

  return ret;
 800aa9a:	7afb      	ldrb	r3, [r7, #11]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08a      	sub	sp, #40	; 0x28
 800aaa8:	af02      	add	r7, sp, #8
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	4613      	mov	r3, r2
 800aabc:	00db      	lsls	r3, r3, #3
 800aabe:	4413      	add	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	3338      	adds	r3, #56	; 0x38
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	4413      	add	r3, r2
 800aac8:	3304      	adds	r3, #4
 800aaca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6a1a      	ldr	r2, [r3, #32]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d901      	bls.n	800aadc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	e06c      	b.n	800abb6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	699a      	ldr	r2, [r3, #24]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	69fa      	ldr	r2, [r7, #28]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d902      	bls.n	800aaf8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	3303      	adds	r3, #3
 800aafc:	089b      	lsrs	r3, r3, #2
 800aafe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ab00:	e02b      	b.n	800ab5a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	699a      	ldr	r2, [r3, #24]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	69fa      	ldr	r2, [r7, #28]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d902      	bls.n	800ab1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	3303      	adds	r3, #3
 800ab22:	089b      	lsrs	r3, r3, #2
 800ab24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6919      	ldr	r1, [r3, #16]
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	b2da      	uxtb	r2, r3
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	6978      	ldr	r0, [r7, #20]
 800ab3e:	f002 ffc9 	bl	800dad4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	691a      	ldr	r2, [r3, #16]
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	441a      	add	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6a1a      	ldr	r2, [r3, #32]
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	441a      	add	r2, r3
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	015a      	lsls	r2, r3, #5
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	4413      	add	r3, r2
 800ab62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	69ba      	ldr	r2, [r7, #24]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d809      	bhi.n	800ab84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6a1a      	ldr	r2, [r3, #32]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d203      	bcs.n	800ab84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	699b      	ldr	r3, [r3, #24]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1be      	bne.n	800ab02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	699a      	ldr	r2, [r3, #24]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6a1b      	ldr	r3, [r3, #32]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d811      	bhi.n	800abb4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	f003 030f 	and.w	r3, r3, #15
 800ab96:	2201      	movs	r2, #1
 800ab98:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	43db      	mvns	r3, r3
 800abaa:	6939      	ldr	r1, [r7, #16]
 800abac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abb0:	4013      	ands	r3, r2
 800abb2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3720      	adds	r7, #32
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
	...

0800abc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b088      	sub	sp, #32
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	333c      	adds	r3, #60	; 0x3c
 800abd8:	3304      	adds	r3, #4
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	015a      	lsls	r2, r3, #5
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	4413      	add	r3, r2
 800abe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d17b      	bne.n	800acee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	f003 0308 	and.w	r3, r3, #8
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d015      	beq.n	800ac2c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	4a61      	ldr	r2, [pc, #388]	; (800ad88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	f240 80b9 	bls.w	800ad7c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f000 80b3 	beq.w	800ad7c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	015a      	lsls	r2, r3, #5
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac22:	461a      	mov	r2, r3
 800ac24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac28:	6093      	str	r3, [r2, #8]
 800ac2a:	e0a7      	b.n	800ad7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	f003 0320 	and.w	r3, r3, #32
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d009      	beq.n	800ac4a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	015a      	lsls	r2, r3, #5
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac42:	461a      	mov	r2, r3
 800ac44:	2320      	movs	r3, #32
 800ac46:	6093      	str	r3, [r2, #8]
 800ac48:	e098      	b.n	800ad7c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f040 8093 	bne.w	800ad7c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	4a4b      	ldr	r2, [pc, #300]	; (800ad88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d90f      	bls.n	800ac7e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00a      	beq.n	800ac7e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	015a      	lsls	r2, r3, #5
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	4413      	add	r3, r2
 800ac70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac74:	461a      	mov	r2, r3
 800ac76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac7a:	6093      	str	r3, [r2, #8]
 800ac7c:	e07e      	b.n	800ad7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	4613      	mov	r3, r2
 800ac82:	00db      	lsls	r3, r3, #3
 800ac84:	4413      	add	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	4413      	add	r3, r2
 800ac90:	3304      	adds	r3, #4
 800ac92:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	69da      	ldr	r2, [r3, #28]
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	0159      	lsls	r1, r3, #5
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	440b      	add	r3, r1
 800aca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acaa:	1ad2      	subs	r2, r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d114      	bne.n	800ace0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	699b      	ldr	r3, [r3, #24]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d109      	bne.n	800acd2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6818      	ldr	r0, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800acc8:	461a      	mov	r2, r3
 800acca:	2101      	movs	r1, #1
 800accc:	f003 f998 	bl	800e000 <USB_EP0_OutStart>
 800acd0:	e006      	b.n	800ace0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	691a      	ldr	r2, [r3, #16]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	441a      	add	r2, r3
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	4619      	mov	r1, r3
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f015 fe16 	bl	8020918 <HAL_PCD_DataOutStageCallback>
 800acec:	e046      	b.n	800ad7c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	4a26      	ldr	r2, [pc, #152]	; (800ad8c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d124      	bne.n	800ad40 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00a      	beq.n	800ad16 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	015a      	lsls	r2, r3, #5
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	4413      	add	r3, r2
 800ad08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad12:	6093      	str	r3, [r2, #8]
 800ad14:	e032      	b.n	800ad7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	f003 0320 	and.w	r3, r3, #32
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d008      	beq.n	800ad32 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	2320      	movs	r3, #32
 800ad30:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	4619      	mov	r1, r3
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f015 fded 	bl	8020918 <HAL_PCD_DataOutStageCallback>
 800ad3e:	e01d      	b.n	800ad7c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d114      	bne.n	800ad70 <PCD_EP_OutXfrComplete_int+0x1b0>
 800ad46:	6879      	ldr	r1, [r7, #4]
 800ad48:	683a      	ldr	r2, [r7, #0]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	4413      	add	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	440b      	add	r3, r1
 800ad54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d108      	bne.n	800ad70 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6818      	ldr	r0, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ad68:	461a      	mov	r2, r3
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	f003 f948 	bl	800e000 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f015 fdce 	bl	8020918 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3720      	adds	r7, #32
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	4f54300a 	.word	0x4f54300a
 800ad8c:	4f54310a 	.word	0x4f54310a

0800ad90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	333c      	adds	r3, #60	; 0x3c
 800ada8:	3304      	adds	r3, #4
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	4a15      	ldr	r2, [pc, #84]	; (800ae18 <PCD_EP_OutSetupPacket_int+0x88>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d90e      	bls.n	800ade4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d009      	beq.n	800ade4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	4413      	add	r3, r2
 800add8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800addc:	461a      	mov	r2, r3
 800adde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ade2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f015 fd85 	bl	80208f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	4a0a      	ldr	r2, [pc, #40]	; (800ae18 <PCD_EP_OutSetupPacket_int+0x88>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d90c      	bls.n	800ae0c <PCD_EP_OutSetupPacket_int+0x7c>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d108      	bne.n	800ae0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6818      	ldr	r0, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ae04:	461a      	mov	r2, r3
 800ae06:	2101      	movs	r1, #1
 800ae08:	f003 f8fa 	bl	800e000 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	4f54300a 	.word	0x4f54300a

0800ae1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800ae34:	78fb      	ldrb	r3, [r7, #3]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d107      	bne.n	800ae4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ae3a:	883b      	ldrh	r3, [r7, #0]
 800ae3c:	0419      	lsls	r1, r3, #16
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	430a      	orrs	r2, r1
 800ae46:	629a      	str	r2, [r3, #40]	; 0x28
 800ae48:	e028      	b.n	800ae9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae50:	0c1b      	lsrs	r3, r3, #16
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	4413      	add	r3, r2
 800ae56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ae58:	2300      	movs	r3, #0
 800ae5a:	73fb      	strb	r3, [r7, #15]
 800ae5c:	e00d      	b.n	800ae7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
 800ae64:	3340      	adds	r3, #64	; 0x40
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	0c1b      	lsrs	r3, r3, #16
 800ae6e:	68ba      	ldr	r2, [r7, #8]
 800ae70:	4413      	add	r3, r2
 800ae72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	3301      	adds	r3, #1
 800ae78:	73fb      	strb	r3, [r7, #15]
 800ae7a:	7bfa      	ldrb	r2, [r7, #15]
 800ae7c:	78fb      	ldrb	r3, [r7, #3]
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d3ec      	bcc.n	800ae5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ae84:	883b      	ldrh	r3, [r7, #0]
 800ae86:	0418      	lsls	r0, r3, #16
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6819      	ldr	r1, [r3, #0]
 800ae8c:	78fb      	ldrb	r3, [r7, #3]
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	4302      	orrs	r2, r0
 800ae94:	3340      	adds	r3, #64	; 0x40
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	440b      	add	r3, r1
 800ae9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3714      	adds	r7, #20
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b083      	sub	sp, #12
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	887a      	ldrh	r2, [r7, #2]
 800aebc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e267      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0301 	and.w	r3, r3, #1
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d075      	beq.n	800afee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800af02:	4b88      	ldr	r3, [pc, #544]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	f003 030c 	and.w	r3, r3, #12
 800af0a:	2b04      	cmp	r3, #4
 800af0c:	d00c      	beq.n	800af28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af0e:	4b85      	ldr	r3, [pc, #532]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800af16:	2b08      	cmp	r3, #8
 800af18:	d112      	bne.n	800af40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af1a:	4b82      	ldr	r3, [pc, #520]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af26:	d10b      	bne.n	800af40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af28:	4b7e      	ldr	r3, [pc, #504]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af30:	2b00      	cmp	r3, #0
 800af32:	d05b      	beq.n	800afec <HAL_RCC_OscConfig+0x108>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d157      	bne.n	800afec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e242      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af48:	d106      	bne.n	800af58 <HAL_RCC_OscConfig+0x74>
 800af4a:	4b76      	ldr	r3, [pc, #472]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a75      	ldr	r2, [pc, #468]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	e01d      	b.n	800af94 <HAL_RCC_OscConfig+0xb0>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af60:	d10c      	bne.n	800af7c <HAL_RCC_OscConfig+0x98>
 800af62:	4b70      	ldr	r3, [pc, #448]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a6f      	ldr	r2, [pc, #444]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af6c:	6013      	str	r3, [r2, #0]
 800af6e:	4b6d      	ldr	r3, [pc, #436]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a6c      	ldr	r2, [pc, #432]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	e00b      	b.n	800af94 <HAL_RCC_OscConfig+0xb0>
 800af7c:	4b69      	ldr	r3, [pc, #420]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a68      	ldr	r2, [pc, #416]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	4b66      	ldr	r3, [pc, #408]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a65      	ldr	r2, [pc, #404]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800af8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d013      	beq.n	800afc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af9c:	f7fe f9de 	bl	800935c <HAL_GetTick>
 800afa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afa2:	e008      	b.n	800afb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800afa4:	f7fe f9da 	bl	800935c <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	2b64      	cmp	r3, #100	; 0x64
 800afb0:	d901      	bls.n	800afb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e207      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afb6:	4b5b      	ldr	r3, [pc, #364]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0f0      	beq.n	800afa4 <HAL_RCC_OscConfig+0xc0>
 800afc2:	e014      	b.n	800afee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afc4:	f7fe f9ca 	bl	800935c <HAL_GetTick>
 800afc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afca:	e008      	b.n	800afde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800afcc:	f7fe f9c6 	bl	800935c <HAL_GetTick>
 800afd0:	4602      	mov	r2, r0
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	2b64      	cmp	r3, #100	; 0x64
 800afd8:	d901      	bls.n	800afde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800afda:	2303      	movs	r3, #3
 800afdc:	e1f3      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afde:	4b51      	ldr	r3, [pc, #324]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1f0      	bne.n	800afcc <HAL_RCC_OscConfig+0xe8>
 800afea:	e000      	b.n	800afee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 0302 	and.w	r3, r3, #2
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d063      	beq.n	800b0c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800affa:	4b4a      	ldr	r3, [pc, #296]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f003 030c 	and.w	r3, r3, #12
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00b      	beq.n	800b01e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b006:	4b47      	ldr	r3, [pc, #284]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b00e:	2b08      	cmp	r3, #8
 800b010:	d11c      	bne.n	800b04c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b012:	4b44      	ldr	r3, [pc, #272]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d116      	bne.n	800b04c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b01e:	4b41      	ldr	r3, [pc, #260]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 0302 	and.w	r3, r3, #2
 800b026:	2b00      	cmp	r3, #0
 800b028:	d005      	beq.n	800b036 <HAL_RCC_OscConfig+0x152>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d001      	beq.n	800b036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e1c7      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b036:	4b3b      	ldr	r3, [pc, #236]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	00db      	lsls	r3, r3, #3
 800b044:	4937      	ldr	r1, [pc, #220]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800b046:	4313      	orrs	r3, r2
 800b048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b04a:	e03a      	b.n	800b0c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d020      	beq.n	800b096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b054:	4b34      	ldr	r3, [pc, #208]	; (800b128 <HAL_RCC_OscConfig+0x244>)
 800b056:	2201      	movs	r2, #1
 800b058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b05a:	f7fe f97f 	bl	800935c <HAL_GetTick>
 800b05e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b060:	e008      	b.n	800b074 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b062:	f7fe f97b 	bl	800935c <HAL_GetTick>
 800b066:	4602      	mov	r2, r0
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d901      	bls.n	800b074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b070:	2303      	movs	r3, #3
 800b072:	e1a8      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b074:	4b2b      	ldr	r3, [pc, #172]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0302 	and.w	r3, r3, #2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d0f0      	beq.n	800b062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b080:	4b28      	ldr	r3, [pc, #160]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	00db      	lsls	r3, r3, #3
 800b08e:	4925      	ldr	r1, [pc, #148]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800b090:	4313      	orrs	r3, r2
 800b092:	600b      	str	r3, [r1, #0]
 800b094:	e015      	b.n	800b0c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b096:	4b24      	ldr	r3, [pc, #144]	; (800b128 <HAL_RCC_OscConfig+0x244>)
 800b098:	2200      	movs	r2, #0
 800b09a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b09c:	f7fe f95e 	bl	800935c <HAL_GetTick>
 800b0a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0a2:	e008      	b.n	800b0b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b0a4:	f7fe f95a 	bl	800935c <HAL_GetTick>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	1ad3      	subs	r3, r2, r3
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	d901      	bls.n	800b0b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b0b2:	2303      	movs	r3, #3
 800b0b4:	e187      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0b6:	4b1b      	ldr	r3, [pc, #108]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 0302 	and.w	r3, r3, #2
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1f0      	bne.n	800b0a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 0308 	and.w	r3, r3, #8
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d036      	beq.n	800b13c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d016      	beq.n	800b104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b0d6:	4b15      	ldr	r3, [pc, #84]	; (800b12c <HAL_RCC_OscConfig+0x248>)
 800b0d8:	2201      	movs	r2, #1
 800b0da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0dc:	f7fe f93e 	bl	800935c <HAL_GetTick>
 800b0e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0e2:	e008      	b.n	800b0f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b0e4:	f7fe f93a 	bl	800935c <HAL_GetTick>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	d901      	bls.n	800b0f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e167      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0f6:	4b0b      	ldr	r3, [pc, #44]	; (800b124 <HAL_RCC_OscConfig+0x240>)
 800b0f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0fa:	f003 0302 	and.w	r3, r3, #2
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d0f0      	beq.n	800b0e4 <HAL_RCC_OscConfig+0x200>
 800b102:	e01b      	b.n	800b13c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b104:	4b09      	ldr	r3, [pc, #36]	; (800b12c <HAL_RCC_OscConfig+0x248>)
 800b106:	2200      	movs	r2, #0
 800b108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b10a:	f7fe f927 	bl	800935c <HAL_GetTick>
 800b10e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b110:	e00e      	b.n	800b130 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b112:	f7fe f923 	bl	800935c <HAL_GetTick>
 800b116:	4602      	mov	r2, r0
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d907      	bls.n	800b130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b120:	2303      	movs	r3, #3
 800b122:	e150      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
 800b124:	40023800 	.word	0x40023800
 800b128:	42470000 	.word	0x42470000
 800b12c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b130:	4b88      	ldr	r3, [pc, #544]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b134:	f003 0302 	and.w	r3, r3, #2
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1ea      	bne.n	800b112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f003 0304 	and.w	r3, r3, #4
 800b144:	2b00      	cmp	r3, #0
 800b146:	f000 8097 	beq.w	800b278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b14a:	2300      	movs	r3, #0
 800b14c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b14e:	4b81      	ldr	r3, [pc, #516]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10f      	bne.n	800b17a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b15a:	2300      	movs	r3, #0
 800b15c:	60bb      	str	r3, [r7, #8]
 800b15e:	4b7d      	ldr	r3, [pc, #500]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b162:	4a7c      	ldr	r2, [pc, #496]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b168:	6413      	str	r3, [r2, #64]	; 0x40
 800b16a:	4b7a      	ldr	r3, [pc, #488]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b172:	60bb      	str	r3, [r7, #8]
 800b174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b176:	2301      	movs	r3, #1
 800b178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b17a:	4b77      	ldr	r3, [pc, #476]	; (800b358 <HAL_RCC_OscConfig+0x474>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b182:	2b00      	cmp	r3, #0
 800b184:	d118      	bne.n	800b1b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b186:	4b74      	ldr	r3, [pc, #464]	; (800b358 <HAL_RCC_OscConfig+0x474>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a73      	ldr	r2, [pc, #460]	; (800b358 <HAL_RCC_OscConfig+0x474>)
 800b18c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b192:	f7fe f8e3 	bl	800935c <HAL_GetTick>
 800b196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b198:	e008      	b.n	800b1ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b19a:	f7fe f8df 	bl	800935c <HAL_GetTick>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d901      	bls.n	800b1ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e10c      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1ac:	4b6a      	ldr	r3, [pc, #424]	; (800b358 <HAL_RCC_OscConfig+0x474>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d0f0      	beq.n	800b19a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d106      	bne.n	800b1ce <HAL_RCC_OscConfig+0x2ea>
 800b1c0:	4b64      	ldr	r3, [pc, #400]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c4:	4a63      	ldr	r2, [pc, #396]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b1c6:	f043 0301 	orr.w	r3, r3, #1
 800b1ca:	6713      	str	r3, [r2, #112]	; 0x70
 800b1cc:	e01c      	b.n	800b208 <HAL_RCC_OscConfig+0x324>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	2b05      	cmp	r3, #5
 800b1d4:	d10c      	bne.n	800b1f0 <HAL_RCC_OscConfig+0x30c>
 800b1d6:	4b5f      	ldr	r3, [pc, #380]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1da:	4a5e      	ldr	r2, [pc, #376]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b1dc:	f043 0304 	orr.w	r3, r3, #4
 800b1e0:	6713      	str	r3, [r2, #112]	; 0x70
 800b1e2:	4b5c      	ldr	r3, [pc, #368]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e6:	4a5b      	ldr	r2, [pc, #364]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b1e8:	f043 0301 	orr.w	r3, r3, #1
 800b1ec:	6713      	str	r3, [r2, #112]	; 0x70
 800b1ee:	e00b      	b.n	800b208 <HAL_RCC_OscConfig+0x324>
 800b1f0:	4b58      	ldr	r3, [pc, #352]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f4:	4a57      	ldr	r2, [pc, #348]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b1f6:	f023 0301 	bic.w	r3, r3, #1
 800b1fa:	6713      	str	r3, [r2, #112]	; 0x70
 800b1fc:	4b55      	ldr	r3, [pc, #340]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b200:	4a54      	ldr	r2, [pc, #336]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b202:	f023 0304 	bic.w	r3, r3, #4
 800b206:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d015      	beq.n	800b23c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b210:	f7fe f8a4 	bl	800935c <HAL_GetTick>
 800b214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b216:	e00a      	b.n	800b22e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b218:	f7fe f8a0 	bl	800935c <HAL_GetTick>
 800b21c:	4602      	mov	r2, r0
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	1ad3      	subs	r3, r2, r3
 800b222:	f241 3288 	movw	r2, #5000	; 0x1388
 800b226:	4293      	cmp	r3, r2
 800b228:	d901      	bls.n	800b22e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b22a:	2303      	movs	r3, #3
 800b22c:	e0cb      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b22e:	4b49      	ldr	r3, [pc, #292]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b232:	f003 0302 	and.w	r3, r3, #2
 800b236:	2b00      	cmp	r3, #0
 800b238:	d0ee      	beq.n	800b218 <HAL_RCC_OscConfig+0x334>
 800b23a:	e014      	b.n	800b266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b23c:	f7fe f88e 	bl	800935c <HAL_GetTick>
 800b240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b242:	e00a      	b.n	800b25a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b244:	f7fe f88a 	bl	800935c <HAL_GetTick>
 800b248:	4602      	mov	r2, r0
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b252:	4293      	cmp	r3, r2
 800b254:	d901      	bls.n	800b25a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e0b5      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b25a:	4b3e      	ldr	r3, [pc, #248]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b25e:	f003 0302 	and.w	r3, r3, #2
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1ee      	bne.n	800b244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b266:	7dfb      	ldrb	r3, [r7, #23]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d105      	bne.n	800b278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b26c:	4b39      	ldr	r3, [pc, #228]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b270:	4a38      	ldr	r2, [pc, #224]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b276:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	699b      	ldr	r3, [r3, #24]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 80a1 	beq.w	800b3c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b282:	4b34      	ldr	r3, [pc, #208]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	f003 030c 	and.w	r3, r3, #12
 800b28a:	2b08      	cmp	r3, #8
 800b28c:	d05c      	beq.n	800b348 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	2b02      	cmp	r3, #2
 800b294:	d141      	bne.n	800b31a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b296:	4b31      	ldr	r3, [pc, #196]	; (800b35c <HAL_RCC_OscConfig+0x478>)
 800b298:	2200      	movs	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b29c:	f7fe f85e 	bl	800935c <HAL_GetTick>
 800b2a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2a2:	e008      	b.n	800b2b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2a4:	f7fe f85a 	bl	800935c <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d901      	bls.n	800b2b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e087      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2b6:	4b27      	ldr	r3, [pc, #156]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1f0      	bne.n	800b2a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	69da      	ldr	r2, [r3, #28]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a1b      	ldr	r3, [r3, #32]
 800b2ca:	431a      	orrs	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d0:	019b      	lsls	r3, r3, #6
 800b2d2:	431a      	orrs	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d8:	085b      	lsrs	r3, r3, #1
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	041b      	lsls	r3, r3, #16
 800b2de:	431a      	orrs	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e4:	061b      	lsls	r3, r3, #24
 800b2e6:	491b      	ldr	r1, [pc, #108]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b2ec:	4b1b      	ldr	r3, [pc, #108]	; (800b35c <HAL_RCC_OscConfig+0x478>)
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2f2:	f7fe f833 	bl	800935c <HAL_GetTick>
 800b2f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2f8:	e008      	b.n	800b30c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2fa:	f7fe f82f 	bl	800935c <HAL_GetTick>
 800b2fe:	4602      	mov	r2, r0
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	2b02      	cmp	r3, #2
 800b306:	d901      	bls.n	800b30c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e05c      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b30c:	4b11      	ldr	r3, [pc, #68]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d0f0      	beq.n	800b2fa <HAL_RCC_OscConfig+0x416>
 800b318:	e054      	b.n	800b3c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b31a:	4b10      	ldr	r3, [pc, #64]	; (800b35c <HAL_RCC_OscConfig+0x478>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b320:	f7fe f81c 	bl	800935c <HAL_GetTick>
 800b324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b326:	e008      	b.n	800b33a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b328:	f7fe f818 	bl	800935c <HAL_GetTick>
 800b32c:	4602      	mov	r2, r0
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	2b02      	cmp	r3, #2
 800b334:	d901      	bls.n	800b33a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b336:	2303      	movs	r3, #3
 800b338:	e045      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b33a:	4b06      	ldr	r3, [pc, #24]	; (800b354 <HAL_RCC_OscConfig+0x470>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1f0      	bne.n	800b328 <HAL_RCC_OscConfig+0x444>
 800b346:	e03d      	b.n	800b3c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d107      	bne.n	800b360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	e038      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
 800b354:	40023800 	.word	0x40023800
 800b358:	40007000 	.word	0x40007000
 800b35c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b360:	4b1b      	ldr	r3, [pc, #108]	; (800b3d0 <HAL_RCC_OscConfig+0x4ec>)
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	699b      	ldr	r3, [r3, #24]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d028      	beq.n	800b3c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b378:	429a      	cmp	r2, r3
 800b37a:	d121      	bne.n	800b3c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b386:	429a      	cmp	r2, r3
 800b388:	d11a      	bne.n	800b3c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b390:	4013      	ands	r3, r2
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b398:	4293      	cmp	r3, r2
 800b39a:	d111      	bne.n	800b3c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a6:	085b      	lsrs	r3, r3, #1
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d107      	bne.n	800b3c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d001      	beq.n	800b3c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e000      	b.n	800b3c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	40023800 	.word	0x40023800

0800b3d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e0cc      	b.n	800b582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b3e8:	4b68      	ldr	r3, [pc, #416]	; (800b58c <HAL_RCC_ClockConfig+0x1b8>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0307 	and.w	r3, r3, #7
 800b3f0:	683a      	ldr	r2, [r7, #0]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d90c      	bls.n	800b410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3f6:	4b65      	ldr	r3, [pc, #404]	; (800b58c <HAL_RCC_ClockConfig+0x1b8>)
 800b3f8:	683a      	ldr	r2, [r7, #0]
 800b3fa:	b2d2      	uxtb	r2, r2
 800b3fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3fe:	4b63      	ldr	r3, [pc, #396]	; (800b58c <HAL_RCC_ClockConfig+0x1b8>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f003 0307 	and.w	r3, r3, #7
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d001      	beq.n	800b410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e0b8      	b.n	800b582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0302 	and.w	r3, r3, #2
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d020      	beq.n	800b45e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0304 	and.w	r3, r3, #4
 800b424:	2b00      	cmp	r3, #0
 800b426:	d005      	beq.n	800b434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b428:	4b59      	ldr	r3, [pc, #356]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	4a58      	ldr	r2, [pc, #352]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b42e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 0308 	and.w	r3, r3, #8
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d005      	beq.n	800b44c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b440:	4b53      	ldr	r3, [pc, #332]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	4a52      	ldr	r2, [pc, #328]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b44a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b44c:	4b50      	ldr	r3, [pc, #320]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	494d      	ldr	r1, [pc, #308]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b45a:	4313      	orrs	r3, r2
 800b45c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 0301 	and.w	r3, r3, #1
 800b466:	2b00      	cmp	r3, #0
 800b468:	d044      	beq.n	800b4f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d107      	bne.n	800b482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b472:	4b47      	ldr	r3, [pc, #284]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d119      	bne.n	800b4b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	e07f      	b.n	800b582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	2b02      	cmp	r3, #2
 800b488:	d003      	beq.n	800b492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b48e:	2b03      	cmp	r3, #3
 800b490:	d107      	bne.n	800b4a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b492:	4b3f      	ldr	r3, [pc, #252]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d109      	bne.n	800b4b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e06f      	b.n	800b582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4a2:	4b3b      	ldr	r3, [pc, #236]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 0302 	and.w	r3, r3, #2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e067      	b.n	800b582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b4b2:	4b37      	ldr	r3, [pc, #220]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f023 0203 	bic.w	r2, r3, #3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	4934      	ldr	r1, [pc, #208]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b4c4:	f7fd ff4a 	bl	800935c <HAL_GetTick>
 800b4c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4ca:	e00a      	b.n	800b4e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4cc:	f7fd ff46 	bl	800935c <HAL_GetTick>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	1ad3      	subs	r3, r2, r3
 800b4d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d901      	bls.n	800b4e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	e04f      	b.n	800b582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4e2:	4b2b      	ldr	r3, [pc, #172]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	f003 020c 	and.w	r2, r3, #12
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d1eb      	bne.n	800b4cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b4f4:	4b25      	ldr	r3, [pc, #148]	; (800b58c <HAL_RCC_ClockConfig+0x1b8>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f003 0307 	and.w	r3, r3, #7
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d20c      	bcs.n	800b51c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b502:	4b22      	ldr	r3, [pc, #136]	; (800b58c <HAL_RCC_ClockConfig+0x1b8>)
 800b504:	683a      	ldr	r2, [r7, #0]
 800b506:	b2d2      	uxtb	r2, r2
 800b508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b50a:	4b20      	ldr	r3, [pc, #128]	; (800b58c <HAL_RCC_ClockConfig+0x1b8>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 0307 	and.w	r3, r3, #7
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	429a      	cmp	r2, r3
 800b516:	d001      	beq.n	800b51c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e032      	b.n	800b582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 0304 	and.w	r3, r3, #4
 800b524:	2b00      	cmp	r3, #0
 800b526:	d008      	beq.n	800b53a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b528:	4b19      	ldr	r3, [pc, #100]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	4916      	ldr	r1, [pc, #88]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b536:	4313      	orrs	r3, r2
 800b538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 0308 	and.w	r3, r3, #8
 800b542:	2b00      	cmp	r3, #0
 800b544:	d009      	beq.n	800b55a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b546:	4b12      	ldr	r3, [pc, #72]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	00db      	lsls	r3, r3, #3
 800b554:	490e      	ldr	r1, [pc, #56]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b556:	4313      	orrs	r3, r2
 800b558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b55a:	f000 f821 	bl	800b5a0 <HAL_RCC_GetSysClockFreq>
 800b55e:	4602      	mov	r2, r0
 800b560:	4b0b      	ldr	r3, [pc, #44]	; (800b590 <HAL_RCC_ClockConfig+0x1bc>)
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	091b      	lsrs	r3, r3, #4
 800b566:	f003 030f 	and.w	r3, r3, #15
 800b56a:	490a      	ldr	r1, [pc, #40]	; (800b594 <HAL_RCC_ClockConfig+0x1c0>)
 800b56c:	5ccb      	ldrb	r3, [r1, r3]
 800b56e:	fa22 f303 	lsr.w	r3, r2, r3
 800b572:	4a09      	ldr	r2, [pc, #36]	; (800b598 <HAL_RCC_ClockConfig+0x1c4>)
 800b574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b576:	4b09      	ldr	r3, [pc, #36]	; (800b59c <HAL_RCC_ClockConfig+0x1c8>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fd feaa 	bl	80092d4 <HAL_InitTick>

  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	40023c00 	.word	0x40023c00
 800b590:	40023800 	.word	0x40023800
 800b594:	08029960 	.word	0x08029960
 800b598:	20000070 	.word	0x20000070
 800b59c:	20000074 	.word	0x20000074

0800b5a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5a4:	b094      	sub	sp, #80	; 0x50
 800b5a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5b8:	4b79      	ldr	r3, [pc, #484]	; (800b7a0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	f003 030c 	and.w	r3, r3, #12
 800b5c0:	2b08      	cmp	r3, #8
 800b5c2:	d00d      	beq.n	800b5e0 <HAL_RCC_GetSysClockFreq+0x40>
 800b5c4:	2b08      	cmp	r3, #8
 800b5c6:	f200 80e1 	bhi.w	800b78c <HAL_RCC_GetSysClockFreq+0x1ec>
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <HAL_RCC_GetSysClockFreq+0x34>
 800b5ce:	2b04      	cmp	r3, #4
 800b5d0:	d003      	beq.n	800b5da <HAL_RCC_GetSysClockFreq+0x3a>
 800b5d2:	e0db      	b.n	800b78c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b5d4:	4b73      	ldr	r3, [pc, #460]	; (800b7a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800b5d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b5d8:	e0db      	b.n	800b792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b5da:	4b73      	ldr	r3, [pc, #460]	; (800b7a8 <HAL_RCC_GetSysClockFreq+0x208>)
 800b5dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b5de:	e0d8      	b.n	800b792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b5e0:	4b6f      	ldr	r3, [pc, #444]	; (800b7a0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b5ea:	4b6d      	ldr	r3, [pc, #436]	; (800b7a0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d063      	beq.n	800b6be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5f6:	4b6a      	ldr	r3, [pc, #424]	; (800b7a0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	099b      	lsrs	r3, r3, #6
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800b600:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b608:	633b      	str	r3, [r7, #48]	; 0x30
 800b60a:	2300      	movs	r3, #0
 800b60c:	637b      	str	r3, [r7, #52]	; 0x34
 800b60e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b612:	4622      	mov	r2, r4
 800b614:	462b      	mov	r3, r5
 800b616:	f04f 0000 	mov.w	r0, #0
 800b61a:	f04f 0100 	mov.w	r1, #0
 800b61e:	0159      	lsls	r1, r3, #5
 800b620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b624:	0150      	lsls	r0, r2, #5
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	4621      	mov	r1, r4
 800b62c:	1a51      	subs	r1, r2, r1
 800b62e:	6139      	str	r1, [r7, #16]
 800b630:	4629      	mov	r1, r5
 800b632:	eb63 0301 	sbc.w	r3, r3, r1
 800b636:	617b      	str	r3, [r7, #20]
 800b638:	f04f 0200 	mov.w	r2, #0
 800b63c:	f04f 0300 	mov.w	r3, #0
 800b640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b644:	4659      	mov	r1, fp
 800b646:	018b      	lsls	r3, r1, #6
 800b648:	4651      	mov	r1, sl
 800b64a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b64e:	4651      	mov	r1, sl
 800b650:	018a      	lsls	r2, r1, #6
 800b652:	4651      	mov	r1, sl
 800b654:	ebb2 0801 	subs.w	r8, r2, r1
 800b658:	4659      	mov	r1, fp
 800b65a:	eb63 0901 	sbc.w	r9, r3, r1
 800b65e:	f04f 0200 	mov.w	r2, #0
 800b662:	f04f 0300 	mov.w	r3, #0
 800b666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b66a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b66e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b672:	4690      	mov	r8, r2
 800b674:	4699      	mov	r9, r3
 800b676:	4623      	mov	r3, r4
 800b678:	eb18 0303 	adds.w	r3, r8, r3
 800b67c:	60bb      	str	r3, [r7, #8]
 800b67e:	462b      	mov	r3, r5
 800b680:	eb49 0303 	adc.w	r3, r9, r3
 800b684:	60fb      	str	r3, [r7, #12]
 800b686:	f04f 0200 	mov.w	r2, #0
 800b68a:	f04f 0300 	mov.w	r3, #0
 800b68e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b692:	4629      	mov	r1, r5
 800b694:	024b      	lsls	r3, r1, #9
 800b696:	4621      	mov	r1, r4
 800b698:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b69c:	4621      	mov	r1, r4
 800b69e:	024a      	lsls	r2, r1, #9
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b6b0:	f7f5 fb44 	bl	8000d3c <__aeabi_uldivmod>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6bc:	e058      	b.n	800b770 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6be:	4b38      	ldr	r3, [pc, #224]	; (800b7a0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	099b      	lsrs	r3, r3, #6
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b6ce:	623b      	str	r3, [r7, #32]
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b6d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b6d8:	4642      	mov	r2, r8
 800b6da:	464b      	mov	r3, r9
 800b6dc:	f04f 0000 	mov.w	r0, #0
 800b6e0:	f04f 0100 	mov.w	r1, #0
 800b6e4:	0159      	lsls	r1, r3, #5
 800b6e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b6ea:	0150      	lsls	r0, r2, #5
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	4641      	mov	r1, r8
 800b6f2:	ebb2 0a01 	subs.w	sl, r2, r1
 800b6f6:	4649      	mov	r1, r9
 800b6f8:	eb63 0b01 	sbc.w	fp, r3, r1
 800b6fc:	f04f 0200 	mov.w	r2, #0
 800b700:	f04f 0300 	mov.w	r3, #0
 800b704:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b708:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b70c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b710:	ebb2 040a 	subs.w	r4, r2, sl
 800b714:	eb63 050b 	sbc.w	r5, r3, fp
 800b718:	f04f 0200 	mov.w	r2, #0
 800b71c:	f04f 0300 	mov.w	r3, #0
 800b720:	00eb      	lsls	r3, r5, #3
 800b722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b726:	00e2      	lsls	r2, r4, #3
 800b728:	4614      	mov	r4, r2
 800b72a:	461d      	mov	r5, r3
 800b72c:	4643      	mov	r3, r8
 800b72e:	18e3      	adds	r3, r4, r3
 800b730:	603b      	str	r3, [r7, #0]
 800b732:	464b      	mov	r3, r9
 800b734:	eb45 0303 	adc.w	r3, r5, r3
 800b738:	607b      	str	r3, [r7, #4]
 800b73a:	f04f 0200 	mov.w	r2, #0
 800b73e:	f04f 0300 	mov.w	r3, #0
 800b742:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b746:	4629      	mov	r1, r5
 800b748:	028b      	lsls	r3, r1, #10
 800b74a:	4621      	mov	r1, r4
 800b74c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b750:	4621      	mov	r1, r4
 800b752:	028a      	lsls	r2, r1, #10
 800b754:	4610      	mov	r0, r2
 800b756:	4619      	mov	r1, r3
 800b758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b75a:	2200      	movs	r2, #0
 800b75c:	61bb      	str	r3, [r7, #24]
 800b75e:	61fa      	str	r2, [r7, #28]
 800b760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b764:	f7f5 faea 	bl	8000d3c <__aeabi_uldivmod>
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	4613      	mov	r3, r2
 800b76e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b770:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	0c1b      	lsrs	r3, r3, #16
 800b776:	f003 0303 	and.w	r3, r3, #3
 800b77a:	3301      	adds	r3, #1
 800b77c:	005b      	lsls	r3, r3, #1
 800b77e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b780:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b784:	fbb2 f3f3 	udiv	r3, r2, r3
 800b788:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b78a:	e002      	b.n	800b792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b78c:	4b05      	ldr	r3, [pc, #20]	; (800b7a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800b78e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b790:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b794:	4618      	mov	r0, r3
 800b796:	3750      	adds	r7, #80	; 0x50
 800b798:	46bd      	mov	sp, r7
 800b79a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b79e:	bf00      	nop
 800b7a0:	40023800 	.word	0x40023800
 800b7a4:	00f42400 	.word	0x00f42400
 800b7a8:	007a1200 	.word	0x007a1200

0800b7ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b7b0:	4b03      	ldr	r3, [pc, #12]	; (800b7c0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	20000070 	.word	0x20000070

0800b7c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d101      	bne.n	800b7d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e07b      	b.n	800b8ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d108      	bne.n	800b7f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7e6:	d009      	beq.n	800b7fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	61da      	str	r2, [r3, #28]
 800b7ee:	e005      	b.n	800b7fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d106      	bne.n	800b81c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7fd fb82 	bl	8008f20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2202      	movs	r2, #2
 800b820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b832:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b844:	431a      	orrs	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b84e:	431a      	orrs	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	f003 0302 	and.w	r3, r3, #2
 800b858:	431a      	orrs	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	695b      	ldr	r3, [r3, #20]
 800b85e:	f003 0301 	and.w	r3, r3, #1
 800b862:	431a      	orrs	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b86c:	431a      	orrs	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	69db      	ldr	r3, [r3, #28]
 800b872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b876:	431a      	orrs	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a1b      	ldr	r3, [r3, #32]
 800b87c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b880:	ea42 0103 	orr.w	r1, r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b888:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	430a      	orrs	r2, r1
 800b892:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	0c1b      	lsrs	r3, r3, #16
 800b89a:	f003 0104 	and.w	r1, r3, #4
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a2:	f003 0210 	and.w	r2, r3, #16
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	430a      	orrs	r2, r1
 800b8ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	69da      	ldr	r2, [r3, #28]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b088      	sub	sp, #32
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	60f8      	str	r0, [r7, #12]
 800b8de:	60b9      	str	r1, [r7, #8]
 800b8e0:	603b      	str	r3, [r7, #0]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d101      	bne.n	800b8f8 <HAL_SPI_Transmit+0x22>
 800b8f4:	2302      	movs	r3, #2
 800b8f6:	e126      	b.n	800bb46 <HAL_SPI_Transmit+0x270>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b900:	f7fd fd2c 	bl	800935c <HAL_GetTick>
 800b904:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b906:	88fb      	ldrh	r3, [r7, #6]
 800b908:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b910:	b2db      	uxtb	r3, r3
 800b912:	2b01      	cmp	r3, #1
 800b914:	d002      	beq.n	800b91c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b916:	2302      	movs	r3, #2
 800b918:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b91a:	e10b      	b.n	800bb34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d002      	beq.n	800b928 <HAL_SPI_Transmit+0x52>
 800b922:	88fb      	ldrh	r3, [r7, #6]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d102      	bne.n	800b92e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b928:	2301      	movs	r3, #1
 800b92a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b92c:	e102      	b.n	800bb34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2203      	movs	r2, #3
 800b932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	88fa      	ldrh	r2, [r7, #6]
 800b946:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	88fa      	ldrh	r2, [r7, #6]
 800b94c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b974:	d10f      	bne.n	800b996 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b984:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b994:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a0:	2b40      	cmp	r3, #64	; 0x40
 800b9a2:	d007      	beq.n	800b9b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9bc:	d14b      	bne.n	800ba56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d002      	beq.n	800b9cc <HAL_SPI_Transmit+0xf6>
 800b9c6:	8afb      	ldrh	r3, [r7, #22]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d13e      	bne.n	800ba4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d0:	881a      	ldrh	r2, [r3, #0]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9dc:	1c9a      	adds	r2, r3, #2
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b9f0:	e02b      	b.n	800ba4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	f003 0302 	and.w	r3, r3, #2
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d112      	bne.n	800ba26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba04:	881a      	ldrh	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba10:	1c9a      	adds	r2, r3, #2
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	86da      	strh	r2, [r3, #54]	; 0x36
 800ba24:	e011      	b.n	800ba4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba26:	f7fd fc99 	bl	800935c <HAL_GetTick>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	1ad3      	subs	r3, r2, r3
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d803      	bhi.n	800ba3e <HAL_SPI_Transmit+0x168>
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba3c:	d102      	bne.n	800ba44 <HAL_SPI_Transmit+0x16e>
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d102      	bne.n	800ba4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ba44:	2303      	movs	r3, #3
 800ba46:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ba48:	e074      	b.n	800bb34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1ce      	bne.n	800b9f2 <HAL_SPI_Transmit+0x11c>
 800ba54:	e04c      	b.n	800baf0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d002      	beq.n	800ba64 <HAL_SPI_Transmit+0x18e>
 800ba5e:	8afb      	ldrh	r3, [r7, #22]
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d140      	bne.n	800bae6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	330c      	adds	r3, #12
 800ba6e:	7812      	ldrb	r2, [r2, #0]
 800ba70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba76:	1c5a      	adds	r2, r3, #1
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	3b01      	subs	r3, #1
 800ba84:	b29a      	uxth	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ba8a:	e02c      	b.n	800bae6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f003 0302 	and.w	r3, r3, #2
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d113      	bne.n	800bac2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	330c      	adds	r3, #12
 800baa4:	7812      	ldrb	r2, [r2, #0]
 800baa6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baac:	1c5a      	adds	r2, r3, #1
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	3b01      	subs	r3, #1
 800baba:	b29a      	uxth	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	86da      	strh	r2, [r3, #54]	; 0x36
 800bac0:	e011      	b.n	800bae6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bac2:	f7fd fc4b 	bl	800935c <HAL_GetTick>
 800bac6:	4602      	mov	r2, r0
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d803      	bhi.n	800bada <HAL_SPI_Transmit+0x204>
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad8:	d102      	bne.n	800bae0 <HAL_SPI_Transmit+0x20a>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d102      	bne.n	800bae6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800bae0:	2303      	movs	r3, #3
 800bae2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bae4:	e026      	b.n	800bb34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baea:	b29b      	uxth	r3, r3
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1cd      	bne.n	800ba8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800baf0:	69ba      	ldr	r2, [r7, #24]
 800baf2:	6839      	ldr	r1, [r7, #0]
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f000 fbcb 	bl	800c290 <SPI_EndRxTxTransaction>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d002      	beq.n	800bb06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2220      	movs	r2, #32
 800bb04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10a      	bne.n	800bb24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb0e:	2300      	movs	r3, #0
 800bb10:	613b      	str	r3, [r7, #16]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	613b      	str	r3, [r7, #16]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	613b      	str	r3, [r7, #16]
 800bb22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	77fb      	strb	r3, [r7, #31]
 800bb30:	e000      	b.n	800bb34 <HAL_SPI_Transmit+0x25e>
  }

error:
 800bb32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bb44:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3720      	adds	r7, #32
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b088      	sub	sp, #32
 800bb52:	af02      	add	r7, sp, #8
 800bb54:	60f8      	str	r0, [r7, #12]
 800bb56:	60b9      	str	r1, [r7, #8]
 800bb58:	603b      	str	r3, [r7, #0]
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb6a:	d112      	bne.n	800bb92 <HAL_SPI_Receive+0x44>
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d10e      	bne.n	800bb92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2204      	movs	r2, #4
 800bb78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bb7c:	88fa      	ldrh	r2, [r7, #6]
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	4613      	mov	r3, r2
 800bb84:	68ba      	ldr	r2, [r7, #8]
 800bb86:	68b9      	ldr	r1, [r7, #8]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f000 f8f1 	bl	800bd70 <HAL_SPI_TransmitReceive>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	e0ea      	b.n	800bd68 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d101      	bne.n	800bba0 <HAL_SPI_Receive+0x52>
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	e0e3      	b.n	800bd68 <HAL_SPI_Receive+0x21a>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bba8:	f7fd fbd8 	bl	800935c <HAL_GetTick>
 800bbac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d002      	beq.n	800bbc0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bbba:	2302      	movs	r3, #2
 800bbbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bbbe:	e0ca      	b.n	800bd56 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d002      	beq.n	800bbcc <HAL_SPI_Receive+0x7e>
 800bbc6:	88fb      	ldrh	r3, [r7, #6]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d102      	bne.n	800bbd2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bbd0:	e0c1      	b.n	800bd56 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2204      	movs	r2, #4
 800bbd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	88fa      	ldrh	r2, [r7, #6]
 800bbea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	88fa      	ldrh	r2, [r7, #6]
 800bbf0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc18:	d10f      	bne.n	800bc3a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc44:	2b40      	cmp	r3, #64	; 0x40
 800bc46:	d007      	beq.n	800bc58 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d162      	bne.n	800bd26 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bc60:	e02e      	b.n	800bcc0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d115      	bne.n	800bc9c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f103 020c 	add.w	r2, r3, #12
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc7c:	7812      	ldrb	r2, [r2, #0]
 800bc7e:	b2d2      	uxtb	r2, r2
 800bc80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc86:	1c5a      	adds	r2, r3, #1
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	3b01      	subs	r3, #1
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc9a:	e011      	b.n	800bcc0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc9c:	f7fd fb5e 	bl	800935c <HAL_GetTick>
 800bca0:	4602      	mov	r2, r0
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	683a      	ldr	r2, [r7, #0]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d803      	bhi.n	800bcb4 <HAL_SPI_Receive+0x166>
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb2:	d102      	bne.n	800bcba <HAL_SPI_Receive+0x16c>
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d102      	bne.n	800bcc0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800bcba:	2303      	movs	r3, #3
 800bcbc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bcbe:	e04a      	b.n	800bd56 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1cb      	bne.n	800bc62 <HAL_SPI_Receive+0x114>
 800bcca:	e031      	b.n	800bd30 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	f003 0301 	and.w	r3, r3, #1
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d113      	bne.n	800bd02 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68da      	ldr	r2, [r3, #12]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce4:	b292      	uxth	r2, r2
 800bce6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcec:	1c9a      	adds	r2, r3, #2
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd00:	e011      	b.n	800bd26 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd02:	f7fd fb2b 	bl	800935c <HAL_GetTick>
 800bd06:	4602      	mov	r2, r0
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	683a      	ldr	r2, [r7, #0]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d803      	bhi.n	800bd1a <HAL_SPI_Receive+0x1cc>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd18:	d102      	bne.n	800bd20 <HAL_SPI_Receive+0x1d2>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d102      	bne.n	800bd26 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800bd20:	2303      	movs	r3, #3
 800bd22:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bd24:	e017      	b.n	800bd56 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1cd      	bne.n	800bccc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	6839      	ldr	r1, [r7, #0]
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f000 fa45 	bl	800c1c4 <SPI_EndRxTransaction>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2220      	movs	r2, #32
 800bd44:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d002      	beq.n	800bd54 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	75fb      	strb	r3, [r7, #23]
 800bd52:	e000      	b.n	800bd56 <HAL_SPI_Receive+0x208>
  }

error :
 800bd54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bd66:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3718      	adds	r7, #24
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b08c      	sub	sp, #48	; 0x30
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
 800bd7c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d101      	bne.n	800bd96 <HAL_SPI_TransmitReceive+0x26>
 800bd92:	2302      	movs	r3, #2
 800bd94:	e18a      	b.n	800c0ac <HAL_SPI_TransmitReceive+0x33c>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd9e:	f7fd fadd 	bl	800935c <HAL_GetTick>
 800bda2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bdaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bdb4:	887b      	ldrh	r3, [r7, #2]
 800bdb6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bdb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d00f      	beq.n	800bde0 <HAL_SPI_TransmitReceive+0x70>
 800bdc0:	69fb      	ldr	r3, [r7, #28]
 800bdc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdc6:	d107      	bne.n	800bdd8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d103      	bne.n	800bdd8 <HAL_SPI_TransmitReceive+0x68>
 800bdd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdd4:	2b04      	cmp	r3, #4
 800bdd6:	d003      	beq.n	800bde0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bdd8:	2302      	movs	r3, #2
 800bdda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bdde:	e15b      	b.n	800c098 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d005      	beq.n	800bdf2 <HAL_SPI_TransmitReceive+0x82>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <HAL_SPI_TransmitReceive+0x82>
 800bdec:	887b      	ldrh	r3, [r7, #2]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d103      	bne.n	800bdfa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bdf8:	e14e      	b.n	800c098 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be00:	b2db      	uxtb	r3, r3
 800be02:	2b04      	cmp	r3, #4
 800be04:	d003      	beq.n	800be0e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2205      	movs	r2, #5
 800be0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	887a      	ldrh	r2, [r7, #2]
 800be1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	887a      	ldrh	r2, [r7, #2]
 800be24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	887a      	ldrh	r2, [r7, #2]
 800be30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	887a      	ldrh	r2, [r7, #2]
 800be36:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be4e:	2b40      	cmp	r3, #64	; 0x40
 800be50:	d007      	beq.n	800be62 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be6a:	d178      	bne.n	800bf5e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <HAL_SPI_TransmitReceive+0x10a>
 800be74:	8b7b      	ldrh	r3, [r7, #26]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d166      	bne.n	800bf48 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be7e:	881a      	ldrh	r2, [r3, #0]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be8a:	1c9a      	adds	r2, r3, #2
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be94:	b29b      	uxth	r3, r3
 800be96:	3b01      	subs	r3, #1
 800be98:	b29a      	uxth	r2, r3
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be9e:	e053      	b.n	800bf48 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	f003 0302 	and.w	r3, r3, #2
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d11b      	bne.n	800bee6 <HAL_SPI_TransmitReceive+0x176>
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d016      	beq.n	800bee6 <HAL_SPI_TransmitReceive+0x176>
 800beb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d113      	bne.n	800bee6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec2:	881a      	ldrh	r2, [r3, #0]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bece:	1c9a      	adds	r2, r3, #2
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bed8:	b29b      	uxth	r3, r3
 800beda:	3b01      	subs	r3, #1
 800bedc:	b29a      	uxth	r2, r3
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bee2:	2300      	movs	r3, #0
 800bee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	f003 0301 	and.w	r3, r3, #1
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d119      	bne.n	800bf28 <HAL_SPI_TransmitReceive+0x1b8>
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bef8:	b29b      	uxth	r3, r3
 800befa:	2b00      	cmp	r3, #0
 800befc:	d014      	beq.n	800bf28 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68da      	ldr	r2, [r3, #12]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf08:	b292      	uxth	r2, r2
 800bf0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf10:	1c9a      	adds	r2, r3, #2
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf24:	2301      	movs	r3, #1
 800bf26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bf28:	f7fd fa18 	bl	800935c <HAL_GetTick>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d807      	bhi.n	800bf48 <HAL_SPI_TransmitReceive+0x1d8>
 800bf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3e:	d003      	beq.n	800bf48 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bf40:	2303      	movs	r3, #3
 800bf42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bf46:	e0a7      	b.n	800c098 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1a6      	bne.n	800bea0 <HAL_SPI_TransmitReceive+0x130>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1a1      	bne.n	800bea0 <HAL_SPI_TransmitReceive+0x130>
 800bf5c:	e07c      	b.n	800c058 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d002      	beq.n	800bf6c <HAL_SPI_TransmitReceive+0x1fc>
 800bf66:	8b7b      	ldrh	r3, [r7, #26]
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d16b      	bne.n	800c044 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	330c      	adds	r3, #12
 800bf76:	7812      	ldrb	r2, [r2, #0]
 800bf78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf7e:	1c5a      	adds	r2, r3, #1
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf92:	e057      	b.n	800c044 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	f003 0302 	and.w	r3, r3, #2
 800bf9e:	2b02      	cmp	r3, #2
 800bfa0:	d11c      	bne.n	800bfdc <HAL_SPI_TransmitReceive+0x26c>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d017      	beq.n	800bfdc <HAL_SPI_TransmitReceive+0x26c>
 800bfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d114      	bne.n	800bfdc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	330c      	adds	r3, #12
 800bfbc:	7812      	ldrb	r2, [r2, #0]
 800bfbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc4:	1c5a      	adds	r2, r3, #1
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	f003 0301 	and.w	r3, r3, #1
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d119      	bne.n	800c01e <HAL_SPI_TransmitReceive+0x2ae>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d014      	beq.n	800c01e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68da      	ldr	r2, [r3, #12]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bffe:	b2d2      	uxtb	r2, r2
 800c000:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c006:	1c5a      	adds	r2, r3, #1
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c010:	b29b      	uxth	r3, r3
 800c012:	3b01      	subs	r3, #1
 800c014:	b29a      	uxth	r2, r3
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c01a:	2301      	movs	r3, #1
 800c01c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c01e:	f7fd f99d 	bl	800935c <HAL_GetTick>
 800c022:	4602      	mov	r2, r0
 800c024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c026:	1ad3      	subs	r3, r2, r3
 800c028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d803      	bhi.n	800c036 <HAL_SPI_TransmitReceive+0x2c6>
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c034:	d102      	bne.n	800c03c <HAL_SPI_TransmitReceive+0x2cc>
 800c036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d103      	bne.n	800c044 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c03c:	2303      	movs	r3, #3
 800c03e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c042:	e029      	b.n	800c098 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c048:	b29b      	uxth	r3, r3
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1a2      	bne.n	800bf94 <HAL_SPI_TransmitReceive+0x224>
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c052:	b29b      	uxth	r3, r3
 800c054:	2b00      	cmp	r3, #0
 800c056:	d19d      	bne.n	800bf94 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c05a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f000 f917 	bl	800c290 <SPI_EndRxTxTransaction>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d006      	beq.n	800c076 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2220      	movs	r2, #32
 800c072:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c074:	e010      	b.n	800c098 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10b      	bne.n	800c096 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c07e:	2300      	movs	r3, #0
 800c080:	617b      	str	r3, [r7, #20]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	617b      	str	r3, [r7, #20]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	617b      	str	r3, [r7, #20]
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	e000      	b.n	800c098 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c096:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c0a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3730      	adds	r7, #48	; 0x30
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b088      	sub	sp, #32
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	603b      	str	r3, [r7, #0]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c0c4:	f7fd f94a 	bl	800935c <HAL_GetTick>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0cc:	1a9b      	subs	r3, r3, r2
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c0d4:	f7fd f942 	bl	800935c <HAL_GetTick>
 800c0d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c0da:	4b39      	ldr	r3, [pc, #228]	; (800c1c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	015b      	lsls	r3, r3, #5
 800c0e0:	0d1b      	lsrs	r3, r3, #20
 800c0e2:	69fa      	ldr	r2, [r7, #28]
 800c0e4:	fb02 f303 	mul.w	r3, r2, r3
 800c0e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c0ea:	e054      	b.n	800c196 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f2:	d050      	beq.n	800c196 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c0f4:	f7fd f932 	bl	800935c <HAL_GetTick>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	1ad3      	subs	r3, r2, r3
 800c0fe:	69fa      	ldr	r2, [r7, #28]
 800c100:	429a      	cmp	r2, r3
 800c102:	d902      	bls.n	800c10a <SPI_WaitFlagStateUntilTimeout+0x56>
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d13d      	bne.n	800c186 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	685a      	ldr	r2, [r3, #4]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c118:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c122:	d111      	bne.n	800c148 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c12c:	d004      	beq.n	800c138 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c136:	d107      	bne.n	800c148 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c150:	d10f      	bne.n	800c172 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c160:	601a      	str	r2, [r3, #0]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2201      	movs	r2, #1
 800c176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c182:	2303      	movs	r3, #3
 800c184:	e017      	b.n	800c1b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d101      	bne.n	800c190 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c18c:	2300      	movs	r3, #0
 800c18e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	3b01      	subs	r3, #1
 800c194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	689a      	ldr	r2, [r3, #8]
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	4013      	ands	r3, r2
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	bf0c      	ite	eq
 800c1a6:	2301      	moveq	r3, #1
 800c1a8:	2300      	movne	r3, #0
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	79fb      	ldrb	r3, [r7, #7]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d19b      	bne.n	800c0ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3720      	adds	r7, #32
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	20000070 	.word	0x20000070

0800c1c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b086      	sub	sp, #24
 800c1c8:	af02      	add	r7, sp, #8
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1d8:	d111      	bne.n	800c1fe <SPI_EndRxTransaction+0x3a>
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	689b      	ldr	r3, [r3, #8]
 800c1de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1e2:	d004      	beq.n	800c1ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1ec:	d107      	bne.n	800c1fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c206:	d12a      	bne.n	800c25e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c210:	d012      	beq.n	800c238 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	2200      	movs	r2, #0
 800c21a:	2180      	movs	r1, #128	; 0x80
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f7ff ff49 	bl	800c0b4 <SPI_WaitFlagStateUntilTimeout>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d02d      	beq.n	800c284 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c22c:	f043 0220 	orr.w	r2, r3, #32
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c234:	2303      	movs	r3, #3
 800c236:	e026      	b.n	800c286 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	2200      	movs	r2, #0
 800c240:	2101      	movs	r1, #1
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f7ff ff36 	bl	800c0b4 <SPI_WaitFlagStateUntilTimeout>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d01a      	beq.n	800c284 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c252:	f043 0220 	orr.w	r2, r3, #32
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c25a:	2303      	movs	r3, #3
 800c25c:	e013      	b.n	800c286 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	9300      	str	r3, [sp, #0]
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2200      	movs	r2, #0
 800c266:	2101      	movs	r1, #1
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f7ff ff23 	bl	800c0b4 <SPI_WaitFlagStateUntilTimeout>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d007      	beq.n	800c284 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c278:	f043 0220 	orr.w	r2, r3, #32
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c280:	2303      	movs	r3, #3
 800c282:	e000      	b.n	800c286 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
	...

0800c290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af02      	add	r7, sp, #8
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c29c:	4b1b      	ldr	r3, [pc, #108]	; (800c30c <SPI_EndRxTxTransaction+0x7c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a1b      	ldr	r2, [pc, #108]	; (800c310 <SPI_EndRxTxTransaction+0x80>)
 800c2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a6:	0d5b      	lsrs	r3, r3, #21
 800c2a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2ac:	fb02 f303 	mul.w	r3, r2, r3
 800c2b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2ba:	d112      	bne.n	800c2e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	2180      	movs	r1, #128	; 0x80
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f7ff fef4 	bl	800c0b4 <SPI_WaitFlagStateUntilTimeout>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d016      	beq.n	800c300 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d6:	f043 0220 	orr.w	r2, r3, #32
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c2de:	2303      	movs	r3, #3
 800c2e0:	e00f      	b.n	800c302 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d00a      	beq.n	800c2fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2f8:	2b80      	cmp	r3, #128	; 0x80
 800c2fa:	d0f2      	beq.n	800c2e2 <SPI_EndRxTxTransaction+0x52>
 800c2fc:	e000      	b.n	800c300 <SPI_EndRxTxTransaction+0x70>
        break;
 800c2fe:	bf00      	nop
  }

  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3718      	adds	r7, #24
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	20000070 	.word	0x20000070
 800c310:	165e9f81 	.word	0x165e9f81

0800c314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d101      	bne.n	800c326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	e041      	b.n	800c3aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d106      	bne.n	800c340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7fc fe38 	bl	8008fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2202      	movs	r2, #2
 800c344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	3304      	adds	r3, #4
 800c350:	4619      	mov	r1, r3
 800c352:	4610      	mov	r0, r2
 800c354:	f000 f968 	bl	800c628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2201      	movs	r2, #1
 800c364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2201      	movs	r2, #1
 800c36c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2201      	movs	r2, #1
 800c374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2201      	movs	r2, #1
 800c37c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2201      	movs	r2, #1
 800c394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3708      	adds	r7, #8
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b082      	sub	sp, #8
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	f003 0302 	and.w	r3, r3, #2
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d122      	bne.n	800c40e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	f003 0302 	and.w	r3, r3, #2
 800c3d2:	2b02      	cmp	r3, #2
 800c3d4:	d11b      	bne.n	800c40e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f06f 0202 	mvn.w	r2, #2
 800c3de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	699b      	ldr	r3, [r3, #24]
 800c3ec:	f003 0303 	and.w	r3, r3, #3
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d003      	beq.n	800c3fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 f8f8 	bl	800c5ea <HAL_TIM_IC_CaptureCallback>
 800c3fa:	e005      	b.n	800c408 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 f8ea 	bl	800c5d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 f8fb 	bl	800c5fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	f003 0304 	and.w	r3, r3, #4
 800c418:	2b04      	cmp	r3, #4
 800c41a:	d122      	bne.n	800c462 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	f003 0304 	and.w	r3, r3, #4
 800c426:	2b04      	cmp	r3, #4
 800c428:	d11b      	bne.n	800c462 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f06f 0204 	mvn.w	r2, #4
 800c432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2202      	movs	r2, #2
 800c438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	699b      	ldr	r3, [r3, #24]
 800c440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c444:	2b00      	cmp	r3, #0
 800c446:	d003      	beq.n	800c450 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 f8ce 	bl	800c5ea <HAL_TIM_IC_CaptureCallback>
 800c44e:	e005      	b.n	800c45c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 f8c0 	bl	800c5d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f8d1 	bl	800c5fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	f003 0308 	and.w	r3, r3, #8
 800c46c:	2b08      	cmp	r3, #8
 800c46e:	d122      	bne.n	800c4b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	f003 0308 	and.w	r3, r3, #8
 800c47a:	2b08      	cmp	r3, #8
 800c47c:	d11b      	bne.n	800c4b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f06f 0208 	mvn.w	r2, #8
 800c486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2204      	movs	r2, #4
 800c48c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	69db      	ldr	r3, [r3, #28]
 800c494:	f003 0303 	and.w	r3, r3, #3
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d003      	beq.n	800c4a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f8a4 	bl	800c5ea <HAL_TIM_IC_CaptureCallback>
 800c4a2:	e005      	b.n	800c4b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 f896 	bl	800c5d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f8a7 	bl	800c5fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	f003 0310 	and.w	r3, r3, #16
 800c4c0:	2b10      	cmp	r3, #16
 800c4c2:	d122      	bne.n	800c50a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	f003 0310 	and.w	r3, r3, #16
 800c4ce:	2b10      	cmp	r3, #16
 800c4d0:	d11b      	bne.n	800c50a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f06f 0210 	mvn.w	r2, #16
 800c4da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2208      	movs	r2, #8
 800c4e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	69db      	ldr	r3, [r3, #28]
 800c4e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d003      	beq.n	800c4f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 f87a 	bl	800c5ea <HAL_TIM_IC_CaptureCallback>
 800c4f6:	e005      	b.n	800c504 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 f86c 	bl	800c5d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f87d 	bl	800c5fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	691b      	ldr	r3, [r3, #16]
 800c510:	f003 0301 	and.w	r3, r3, #1
 800c514:	2b01      	cmp	r3, #1
 800c516:	d10e      	bne.n	800c536 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	f003 0301 	and.w	r3, r3, #1
 800c522:	2b01      	cmp	r3, #1
 800c524:	d107      	bne.n	800c536 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f06f 0201 	mvn.w	r2, #1
 800c52e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f846 	bl	800c5c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c540:	2b80      	cmp	r3, #128	; 0x80
 800c542:	d10e      	bne.n	800c562 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c54e:	2b80      	cmp	r3, #128	; 0x80
 800c550:	d107      	bne.n	800c562 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 f989 	bl	800c874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c56c:	2b40      	cmp	r3, #64	; 0x40
 800c56e:	d10e      	bne.n	800c58e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c57a:	2b40      	cmp	r3, #64	; 0x40
 800c57c:	d107      	bne.n	800c58e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 f842 	bl	800c612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	f003 0320 	and.w	r3, r3, #32
 800c598:	2b20      	cmp	r3, #32
 800c59a:	d10e      	bne.n	800c5ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	f003 0320 	and.w	r3, r3, #32
 800c5a6:	2b20      	cmp	r3, #32
 800c5a8:	d107      	bne.n	800c5ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f06f 0220 	mvn.w	r2, #32
 800c5b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 f953 	bl	800c860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c5ba:	bf00      	nop
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5c2:	b480      	push	{r7}
 800c5c4:	b083      	sub	sp, #12
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c5ca:	bf00      	nop
 800c5cc:	370c      	adds	r7, #12
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5d6:	b480      	push	{r7}
 800c5d8:	b083      	sub	sp, #12
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5de:	bf00      	nop
 800c5e0:	370c      	adds	r7, #12
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5f2:	bf00      	nop
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5fe:	b480      	push	{r7}
 800c600:	b083      	sub	sp, #12
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c606:	bf00      	nop
 800c608:	370c      	adds	r7, #12
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c612:	b480      	push	{r7}
 800c614:	b083      	sub	sp, #12
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c61a:	bf00      	nop
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
	...

0800c628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c628:	b480      	push	{r7}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a40      	ldr	r2, [pc, #256]	; (800c73c <TIM_Base_SetConfig+0x114>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d013      	beq.n	800c668 <TIM_Base_SetConfig+0x40>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c646:	d00f      	beq.n	800c668 <TIM_Base_SetConfig+0x40>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4a3d      	ldr	r2, [pc, #244]	; (800c740 <TIM_Base_SetConfig+0x118>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d00b      	beq.n	800c668 <TIM_Base_SetConfig+0x40>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a3c      	ldr	r2, [pc, #240]	; (800c744 <TIM_Base_SetConfig+0x11c>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d007      	beq.n	800c668 <TIM_Base_SetConfig+0x40>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a3b      	ldr	r2, [pc, #236]	; (800c748 <TIM_Base_SetConfig+0x120>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d003      	beq.n	800c668 <TIM_Base_SetConfig+0x40>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4a3a      	ldr	r2, [pc, #232]	; (800c74c <TIM_Base_SetConfig+0x124>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d108      	bne.n	800c67a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c66e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	4313      	orrs	r3, r2
 800c678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a2f      	ldr	r2, [pc, #188]	; (800c73c <TIM_Base_SetConfig+0x114>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d02b      	beq.n	800c6da <TIM_Base_SetConfig+0xb2>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c688:	d027      	beq.n	800c6da <TIM_Base_SetConfig+0xb2>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4a2c      	ldr	r2, [pc, #176]	; (800c740 <TIM_Base_SetConfig+0x118>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d023      	beq.n	800c6da <TIM_Base_SetConfig+0xb2>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a2b      	ldr	r2, [pc, #172]	; (800c744 <TIM_Base_SetConfig+0x11c>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d01f      	beq.n	800c6da <TIM_Base_SetConfig+0xb2>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a2a      	ldr	r2, [pc, #168]	; (800c748 <TIM_Base_SetConfig+0x120>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d01b      	beq.n	800c6da <TIM_Base_SetConfig+0xb2>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a29      	ldr	r2, [pc, #164]	; (800c74c <TIM_Base_SetConfig+0x124>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d017      	beq.n	800c6da <TIM_Base_SetConfig+0xb2>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a28      	ldr	r2, [pc, #160]	; (800c750 <TIM_Base_SetConfig+0x128>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d013      	beq.n	800c6da <TIM_Base_SetConfig+0xb2>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a27      	ldr	r2, [pc, #156]	; (800c754 <TIM_Base_SetConfig+0x12c>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d00f      	beq.n	800c6da <TIM_Base_SetConfig+0xb2>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a26      	ldr	r2, [pc, #152]	; (800c758 <TIM_Base_SetConfig+0x130>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d00b      	beq.n	800c6da <TIM_Base_SetConfig+0xb2>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a25      	ldr	r2, [pc, #148]	; (800c75c <TIM_Base_SetConfig+0x134>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d007      	beq.n	800c6da <TIM_Base_SetConfig+0xb2>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a24      	ldr	r2, [pc, #144]	; (800c760 <TIM_Base_SetConfig+0x138>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d003      	beq.n	800c6da <TIM_Base_SetConfig+0xb2>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4a23      	ldr	r2, [pc, #140]	; (800c764 <TIM_Base_SetConfig+0x13c>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d108      	bne.n	800c6ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	689a      	ldr	r2, [r3, #8]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a0a      	ldr	r2, [pc, #40]	; (800c73c <TIM_Base_SetConfig+0x114>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d003      	beq.n	800c720 <TIM_Base_SetConfig+0xf8>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a0c      	ldr	r2, [pc, #48]	; (800c74c <TIM_Base_SetConfig+0x124>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d103      	bne.n	800c728 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	691a      	ldr	r2, [r3, #16]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2201      	movs	r2, #1
 800c72c:	615a      	str	r2, [r3, #20]
}
 800c72e:	bf00      	nop
 800c730:	3714      	adds	r7, #20
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	40010000 	.word	0x40010000
 800c740:	40000400 	.word	0x40000400
 800c744:	40000800 	.word	0x40000800
 800c748:	40000c00 	.word	0x40000c00
 800c74c:	40010400 	.word	0x40010400
 800c750:	40014000 	.word	0x40014000
 800c754:	40014400 	.word	0x40014400
 800c758:	40014800 	.word	0x40014800
 800c75c:	40001800 	.word	0x40001800
 800c760:	40001c00 	.word	0x40001c00
 800c764:	40002000 	.word	0x40002000

0800c768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d101      	bne.n	800c780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c77c:	2302      	movs	r3, #2
 800c77e:	e05a      	b.n	800c836 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2202      	movs	r2, #2
 800c78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a21      	ldr	r2, [pc, #132]	; (800c844 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d022      	beq.n	800c80a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7cc:	d01d      	beq.n	800c80a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a1d      	ldr	r2, [pc, #116]	; (800c848 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d018      	beq.n	800c80a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a1b      	ldr	r2, [pc, #108]	; (800c84c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d013      	beq.n	800c80a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a1a      	ldr	r2, [pc, #104]	; (800c850 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d00e      	beq.n	800c80a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a18      	ldr	r2, [pc, #96]	; (800c854 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d009      	beq.n	800c80a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a17      	ldr	r2, [pc, #92]	; (800c858 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d004      	beq.n	800c80a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a15      	ldr	r2, [pc, #84]	; (800c85c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d10c      	bne.n	800c824 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	4313      	orrs	r3, r2
 800c81a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	40010000 	.word	0x40010000
 800c848:	40000400 	.word	0x40000400
 800c84c:	40000800 	.word	0x40000800
 800c850:	40000c00 	.word	0x40000c00
 800c854:	40010400 	.word	0x40010400
 800c858:	40014000 	.word	0x40014000
 800c85c:	40001800 	.word	0x40001800

0800c860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c868:	bf00      	nop
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c87c:	bf00      	nop
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c888:	b084      	sub	sp, #16
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	f107 001c 	add.w	r0, r7, #28
 800c896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d122      	bne.n	800c8e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c8b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c8c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d105      	bne.n	800c8da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f001 fbee 	bl	800e0bc <USB_CoreReset>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	73fb      	strb	r3, [r7, #15]
 800c8e4:	e01a      	b.n	800c91c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f001 fbe2 	bl	800e0bc <USB_CoreReset>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c8fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d106      	bne.n	800c910 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c906:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	639a      	str	r2, [r3, #56]	; 0x38
 800c90e:	e005      	b.n	800c91c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c914:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d10b      	bne.n	800c93a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	f043 0206 	orr.w	r2, r3, #6
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	f043 0220 	orr.w	r2, r3, #32
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c946:	b004      	add	sp, #16
 800c948:	4770      	bx	lr
	...

0800c94c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b087      	sub	sp, #28
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	4613      	mov	r3, r2
 800c958:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c95a:	79fb      	ldrb	r3, [r7, #7]
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	d165      	bne.n	800ca2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	4a41      	ldr	r2, [pc, #260]	; (800ca68 <USB_SetTurnaroundTime+0x11c>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d906      	bls.n	800c976 <USB_SetTurnaroundTime+0x2a>
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	4a40      	ldr	r2, [pc, #256]	; (800ca6c <USB_SetTurnaroundTime+0x120>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d202      	bcs.n	800c976 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c970:	230f      	movs	r3, #15
 800c972:	617b      	str	r3, [r7, #20]
 800c974:	e062      	b.n	800ca3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	4a3c      	ldr	r2, [pc, #240]	; (800ca6c <USB_SetTurnaroundTime+0x120>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d306      	bcc.n	800c98c <USB_SetTurnaroundTime+0x40>
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	4a3b      	ldr	r2, [pc, #236]	; (800ca70 <USB_SetTurnaroundTime+0x124>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d202      	bcs.n	800c98c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c986:	230e      	movs	r3, #14
 800c988:	617b      	str	r3, [r7, #20]
 800c98a:	e057      	b.n	800ca3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	4a38      	ldr	r2, [pc, #224]	; (800ca70 <USB_SetTurnaroundTime+0x124>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d306      	bcc.n	800c9a2 <USB_SetTurnaroundTime+0x56>
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	4a37      	ldr	r2, [pc, #220]	; (800ca74 <USB_SetTurnaroundTime+0x128>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d202      	bcs.n	800c9a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c99c:	230d      	movs	r3, #13
 800c99e:	617b      	str	r3, [r7, #20]
 800c9a0:	e04c      	b.n	800ca3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	4a33      	ldr	r2, [pc, #204]	; (800ca74 <USB_SetTurnaroundTime+0x128>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d306      	bcc.n	800c9b8 <USB_SetTurnaroundTime+0x6c>
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	4a32      	ldr	r2, [pc, #200]	; (800ca78 <USB_SetTurnaroundTime+0x12c>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d802      	bhi.n	800c9b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c9b2:	230c      	movs	r3, #12
 800c9b4:	617b      	str	r3, [r7, #20]
 800c9b6:	e041      	b.n	800ca3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	4a2f      	ldr	r2, [pc, #188]	; (800ca78 <USB_SetTurnaroundTime+0x12c>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d906      	bls.n	800c9ce <USB_SetTurnaroundTime+0x82>
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	4a2e      	ldr	r2, [pc, #184]	; (800ca7c <USB_SetTurnaroundTime+0x130>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d802      	bhi.n	800c9ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c9c8:	230b      	movs	r3, #11
 800c9ca:	617b      	str	r3, [r7, #20]
 800c9cc:	e036      	b.n	800ca3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	4a2a      	ldr	r2, [pc, #168]	; (800ca7c <USB_SetTurnaroundTime+0x130>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d906      	bls.n	800c9e4 <USB_SetTurnaroundTime+0x98>
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	4a29      	ldr	r2, [pc, #164]	; (800ca80 <USB_SetTurnaroundTime+0x134>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d802      	bhi.n	800c9e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c9de:	230a      	movs	r3, #10
 800c9e0:	617b      	str	r3, [r7, #20]
 800c9e2:	e02b      	b.n	800ca3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	4a26      	ldr	r2, [pc, #152]	; (800ca80 <USB_SetTurnaroundTime+0x134>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d906      	bls.n	800c9fa <USB_SetTurnaroundTime+0xae>
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	4a25      	ldr	r2, [pc, #148]	; (800ca84 <USB_SetTurnaroundTime+0x138>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d202      	bcs.n	800c9fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c9f4:	2309      	movs	r3, #9
 800c9f6:	617b      	str	r3, [r7, #20]
 800c9f8:	e020      	b.n	800ca3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	4a21      	ldr	r2, [pc, #132]	; (800ca84 <USB_SetTurnaroundTime+0x138>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d306      	bcc.n	800ca10 <USB_SetTurnaroundTime+0xc4>
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	4a20      	ldr	r2, [pc, #128]	; (800ca88 <USB_SetTurnaroundTime+0x13c>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d802      	bhi.n	800ca10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ca0a:	2308      	movs	r3, #8
 800ca0c:	617b      	str	r3, [r7, #20]
 800ca0e:	e015      	b.n	800ca3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	4a1d      	ldr	r2, [pc, #116]	; (800ca88 <USB_SetTurnaroundTime+0x13c>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d906      	bls.n	800ca26 <USB_SetTurnaroundTime+0xda>
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	4a1c      	ldr	r2, [pc, #112]	; (800ca8c <USB_SetTurnaroundTime+0x140>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d202      	bcs.n	800ca26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ca20:	2307      	movs	r3, #7
 800ca22:	617b      	str	r3, [r7, #20]
 800ca24:	e00a      	b.n	800ca3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ca26:	2306      	movs	r3, #6
 800ca28:	617b      	str	r3, [r7, #20]
 800ca2a:	e007      	b.n	800ca3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ca2c:	79fb      	ldrb	r3, [r7, #7]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d102      	bne.n	800ca38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ca32:	2309      	movs	r3, #9
 800ca34:	617b      	str	r3, [r7, #20]
 800ca36:	e001      	b.n	800ca3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ca38:	2309      	movs	r3, #9
 800ca3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	68da      	ldr	r2, [r3, #12]
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	029b      	lsls	r3, r3, #10
 800ca50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ca54:	431a      	orrs	r2, r3
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	371c      	adds	r7, #28
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	00d8acbf 	.word	0x00d8acbf
 800ca6c:	00e4e1c0 	.word	0x00e4e1c0
 800ca70:	00f42400 	.word	0x00f42400
 800ca74:	01067380 	.word	0x01067380
 800ca78:	011a499f 	.word	0x011a499f
 800ca7c:	01312cff 	.word	0x01312cff
 800ca80:	014ca43f 	.word	0x014ca43f
 800ca84:	016e3600 	.word	0x016e3600
 800ca88:	01a6ab1f 	.word	0x01a6ab1f
 800ca8c:	01e84800 	.word	0x01e84800

0800ca90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f043 0201 	orr.w	r2, r3, #1
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	370c      	adds	r7, #12
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b083      	sub	sp, #12
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	f023 0201 	bic.w	r2, r3, #1
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr

0800cad4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	460b      	mov	r3, r1
 800cade:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cae0:	2300      	movs	r3, #0
 800cae2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800caf0:	78fb      	ldrb	r3, [r7, #3]
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d115      	bne.n	800cb22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cb02:	2001      	movs	r0, #1
 800cb04:	f7fc fc36 	bl	8009374 <HAL_Delay>
      ms++;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f001 fa45 	bl	800df9e <USB_GetMode>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d01e      	beq.n	800cb58 <USB_SetCurrentMode+0x84>
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2b31      	cmp	r3, #49	; 0x31
 800cb1e:	d9f0      	bls.n	800cb02 <USB_SetCurrentMode+0x2e>
 800cb20:	e01a      	b.n	800cb58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cb22:	78fb      	ldrb	r3, [r7, #3]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d115      	bne.n	800cb54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cb34:	2001      	movs	r0, #1
 800cb36:	f7fc fc1d 	bl	8009374 <HAL_Delay>
      ms++;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f001 fa2c 	bl	800df9e <USB_GetMode>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d005      	beq.n	800cb58 <USB_SetCurrentMode+0x84>
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2b31      	cmp	r3, #49	; 0x31
 800cb50:	d9f0      	bls.n	800cb34 <USB_SetCurrentMode+0x60>
 800cb52:	e001      	b.n	800cb58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cb54:	2301      	movs	r3, #1
 800cb56:	e005      	b.n	800cb64 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2b32      	cmp	r3, #50	; 0x32
 800cb5c:	d101      	bne.n	800cb62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e000      	b.n	800cb64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb6c:	b084      	sub	sp, #16
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b086      	sub	sp, #24
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cb7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cb86:	2300      	movs	r3, #0
 800cb88:	613b      	str	r3, [r7, #16]
 800cb8a:	e009      	b.n	800cba0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	3340      	adds	r3, #64	; 0x40
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4413      	add	r3, r2
 800cb96:	2200      	movs	r2, #0
 800cb98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	613b      	str	r3, [r7, #16]
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	2b0e      	cmp	r3, #14
 800cba4:	d9f2      	bls.n	800cb8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d11c      	bne.n	800cbe6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbba:	f043 0302 	orr.w	r3, r3, #2
 800cbbe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbdc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	639a      	str	r2, [r3, #56]	; 0x38
 800cbe4:	e00b      	b.n	800cbfe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc04:	461a      	mov	r2, r3
 800cc06:	2300      	movs	r3, #0
 800cc08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc10:	4619      	mov	r1, r3
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc18:	461a      	mov	r2, r3
 800cc1a:	680b      	ldr	r3, [r1, #0]
 800cc1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d10c      	bne.n	800cc3e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d104      	bne.n	800cc34 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 f965 	bl	800cefc <USB_SetDevSpeed>
 800cc32:	e008      	b.n	800cc46 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cc34:	2101      	movs	r1, #1
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f960 	bl	800cefc <USB_SetDevSpeed>
 800cc3c:	e003      	b.n	800cc46 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cc3e:	2103      	movs	r1, #3
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 f95b 	bl	800cefc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cc46:	2110      	movs	r1, #16
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f8f3 	bl	800ce34 <USB_FlushTxFifo>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 f91f 	bl	800ce9c <USB_FlushRxFifo>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d001      	beq.n	800cc68 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800cc64:	2301      	movs	r3, #1
 800cc66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc6e:	461a      	mov	r2, r3
 800cc70:	2300      	movs	r3, #0
 800cc72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc86:	461a      	mov	r2, r3
 800cc88:	2300      	movs	r3, #0
 800cc8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	613b      	str	r3, [r7, #16]
 800cc90:	e043      	b.n	800cd1a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	015a      	lsls	r2, r3, #5
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	4413      	add	r3, r2
 800cc9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cca8:	d118      	bne.n	800ccdc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10a      	bne.n	800ccc6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	015a      	lsls	r2, r3, #5
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ccc2:	6013      	str	r3, [r2, #0]
 800ccc4:	e013      	b.n	800ccee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	015a      	lsls	r2, r3, #5
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	4413      	add	r3, r2
 800ccce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ccd8:	6013      	str	r3, [r2, #0]
 800ccda:	e008      	b.n	800ccee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	015a      	lsls	r2, r3, #5
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	4413      	add	r3, r2
 800cce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cce8:	461a      	mov	r2, r3
 800ccea:	2300      	movs	r3, #0
 800ccec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	015a      	lsls	r2, r3, #5
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	015a      	lsls	r2, r3, #5
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	4413      	add	r3, r2
 800cd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cd12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	3301      	adds	r3, #1
 800cd18:	613b      	str	r3, [r7, #16]
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1c:	693a      	ldr	r2, [r7, #16]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d3b7      	bcc.n	800cc92 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd22:	2300      	movs	r3, #0
 800cd24:	613b      	str	r3, [r7, #16]
 800cd26:	e043      	b.n	800cdb0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	015a      	lsls	r2, r3, #5
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	4413      	add	r3, r2
 800cd30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd3e:	d118      	bne.n	800cd72 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d10a      	bne.n	800cd5c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	015a      	lsls	r2, r3, #5
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd52:	461a      	mov	r2, r3
 800cd54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cd58:	6013      	str	r3, [r2, #0]
 800cd5a:	e013      	b.n	800cd84 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd68:	461a      	mov	r2, r3
 800cd6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cd6e:	6013      	str	r3, [r2, #0]
 800cd70:	e008      	b.n	800cd84 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	015a      	lsls	r2, r3, #5
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	4413      	add	r3, r2
 800cd7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd7e:	461a      	mov	r2, r3
 800cd80:	2300      	movs	r3, #0
 800cd82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	015a      	lsls	r2, r3, #5
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd90:	461a      	mov	r2, r3
 800cd92:	2300      	movs	r3, #0
 800cd94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	015a      	lsls	r2, r3, #5
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda2:	461a      	mov	r2, r3
 800cda4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cda8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	3301      	adds	r3, #1
 800cdae:	613b      	str	r3, [r7, #16]
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	693a      	ldr	r2, [r7, #16]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d3b7      	bcc.n	800cd28 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdbe:	691b      	ldr	r3, [r3, #16]
 800cdc0:	68fa      	ldr	r2, [r7, #12]
 800cdc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cdd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d105      	bne.n	800cdec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	699b      	ldr	r3, [r3, #24]
 800cde4:	f043 0210 	orr.w	r2, r3, #16
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	699a      	ldr	r2, [r3, #24]
 800cdf0:	4b0f      	ldr	r3, [pc, #60]	; (800ce30 <USB_DevInit+0x2c4>)
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cdf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d005      	beq.n	800ce0a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	f043 0208 	orr.w	r2, r3, #8
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ce0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d107      	bne.n	800ce20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	699b      	ldr	r3, [r3, #24]
 800ce14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce18:	f043 0304 	orr.w	r3, r3, #4
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ce20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3718      	adds	r7, #24
 800ce26:	46bd      	mov	sp, r7
 800ce28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce2c:	b004      	add	sp, #16
 800ce2e:	4770      	bx	lr
 800ce30:	803c3800 	.word	0x803c3800

0800ce34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b085      	sub	sp, #20
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	3301      	adds	r3, #1
 800ce46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	4a13      	ldr	r2, [pc, #76]	; (800ce98 <USB_FlushTxFifo+0x64>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d901      	bls.n	800ce54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ce50:	2303      	movs	r3, #3
 800ce52:	e01b      	b.n	800ce8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	691b      	ldr	r3, [r3, #16]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	daf2      	bge.n	800ce42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	019b      	lsls	r3, r3, #6
 800ce64:	f043 0220 	orr.w	r2, r3, #32
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	4a08      	ldr	r2, [pc, #32]	; (800ce98 <USB_FlushTxFifo+0x64>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d901      	bls.n	800ce7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	e006      	b.n	800ce8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	691b      	ldr	r3, [r3, #16]
 800ce82:	f003 0320 	and.w	r3, r3, #32
 800ce86:	2b20      	cmp	r3, #32
 800ce88:	d0f0      	beq.n	800ce6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3714      	adds	r7, #20
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr
 800ce98:	00030d40 	.word	0x00030d40

0800ce9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b085      	sub	sp, #20
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cea4:	2300      	movs	r3, #0
 800cea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	4a11      	ldr	r2, [pc, #68]	; (800cef8 <USB_FlushRxFifo+0x5c>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d901      	bls.n	800ceba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ceb6:	2303      	movs	r3, #3
 800ceb8:	e018      	b.n	800ceec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	daf2      	bge.n	800cea8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cec2:	2300      	movs	r3, #0
 800cec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2210      	movs	r2, #16
 800ceca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	3301      	adds	r3, #1
 800ced0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	4a08      	ldr	r2, [pc, #32]	; (800cef8 <USB_FlushRxFifo+0x5c>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d901      	bls.n	800cede <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ceda:	2303      	movs	r3, #3
 800cedc:	e006      	b.n	800ceec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	691b      	ldr	r3, [r3, #16]
 800cee2:	f003 0310 	and.w	r3, r3, #16
 800cee6:	2b10      	cmp	r3, #16
 800cee8:	d0f0      	beq.n	800cecc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3714      	adds	r7, #20
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr
 800cef8:	00030d40 	.word	0x00030d40

0800cefc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	460b      	mov	r3, r1
 800cf06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	78fb      	ldrb	r3, [r7, #3]
 800cf16:	68f9      	ldr	r1, [r7, #12]
 800cf18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3714      	adds	r7, #20
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr

0800cf2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cf2e:	b480      	push	{r7}
 800cf30:	b087      	sub	sp, #28
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	f003 0306 	and.w	r3, r3, #6
 800cf46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d102      	bne.n	800cf54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	75fb      	strb	r3, [r7, #23]
 800cf52:	e00a      	b.n	800cf6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2b02      	cmp	r3, #2
 800cf58:	d002      	beq.n	800cf60 <USB_GetDevSpeed+0x32>
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2b06      	cmp	r3, #6
 800cf5e:	d102      	bne.n	800cf66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cf60:	2302      	movs	r3, #2
 800cf62:	75fb      	strb	r3, [r7, #23]
 800cf64:	e001      	b.n	800cf6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cf66:	230f      	movs	r3, #15
 800cf68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cf6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	371c      	adds	r7, #28
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	785b      	ldrb	r3, [r3, #1]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d13a      	bne.n	800d00a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf9a:	69da      	ldr	r2, [r3, #28]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	f003 030f 	and.w	r3, r3, #15
 800cfa4:	2101      	movs	r1, #1
 800cfa6:	fa01 f303 	lsl.w	r3, r1, r3
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	68f9      	ldr	r1, [r7, #12]
 800cfae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	015a      	lsls	r2, r3, #5
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d155      	bne.n	800d078 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	015a      	lsls	r2, r3, #5
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	68db      	ldr	r3, [r3, #12]
 800cfde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	791b      	ldrb	r3, [r3, #4]
 800cfe6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cfe8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	059b      	lsls	r3, r3, #22
 800cfee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cff0:	4313      	orrs	r3, r2
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	0151      	lsls	r1, r2, #5
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	440a      	add	r2, r1
 800cffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d006:	6013      	str	r3, [r2, #0]
 800d008:	e036      	b.n	800d078 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d010:	69da      	ldr	r2, [r3, #28]
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	f003 030f 	and.w	r3, r3, #15
 800d01a:	2101      	movs	r1, #1
 800d01c:	fa01 f303 	lsl.w	r3, r1, r3
 800d020:	041b      	lsls	r3, r3, #16
 800d022:	68f9      	ldr	r1, [r7, #12]
 800d024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d028:	4313      	orrs	r3, r2
 800d02a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	015a      	lsls	r2, r3, #5
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	4413      	add	r3, r2
 800d034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d11a      	bne.n	800d078 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	015a      	lsls	r2, r3, #5
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	4413      	add	r3, r2
 800d04a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d04e:	681a      	ldr	r2, [r3, #0]
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	791b      	ldrb	r3, [r3, #4]
 800d05c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d05e:	430b      	orrs	r3, r1
 800d060:	4313      	orrs	r3, r2
 800d062:	68ba      	ldr	r2, [r7, #8]
 800d064:	0151      	lsls	r1, r2, #5
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	440a      	add	r2, r1
 800d06a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d06e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d076:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3714      	adds	r7, #20
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
	...

0800d088 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	785b      	ldrb	r3, [r3, #1]
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d161      	bne.n	800d168 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	015a      	lsls	r2, r3, #5
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	4413      	add	r3, r2
 800d0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d0b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0ba:	d11f      	bne.n	800d0fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	015a      	lsls	r2, r3, #5
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	0151      	lsls	r1, r2, #5
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	440a      	add	r2, r1
 800d0d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d0da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	015a      	lsls	r2, r3, #5
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	68ba      	ldr	r2, [r7, #8]
 800d0ec:	0151      	lsls	r1, r2, #5
 800d0ee:	68fa      	ldr	r2, [r7, #12]
 800d0f0:	440a      	add	r2, r1
 800d0f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d0fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	f003 030f 	and.w	r3, r3, #15
 800d10c:	2101      	movs	r1, #1
 800d10e:	fa01 f303 	lsl.w	r3, r1, r3
 800d112:	b29b      	uxth	r3, r3
 800d114:	43db      	mvns	r3, r3
 800d116:	68f9      	ldr	r1, [r7, #12]
 800d118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d11c:	4013      	ands	r3, r2
 800d11e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d126:	69da      	ldr	r2, [r3, #28]
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	f003 030f 	and.w	r3, r3, #15
 800d130:	2101      	movs	r1, #1
 800d132:	fa01 f303 	lsl.w	r3, r1, r3
 800d136:	b29b      	uxth	r3, r3
 800d138:	43db      	mvns	r3, r3
 800d13a:	68f9      	ldr	r1, [r7, #12]
 800d13c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d140:	4013      	ands	r3, r2
 800d142:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	015a      	lsls	r2, r3, #5
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	4413      	add	r3, r2
 800d14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	0159      	lsls	r1, r3, #5
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	440b      	add	r3, r1
 800d15a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d15e:	4619      	mov	r1, r3
 800d160:	4b35      	ldr	r3, [pc, #212]	; (800d238 <USB_DeactivateEndpoint+0x1b0>)
 800d162:	4013      	ands	r3, r2
 800d164:	600b      	str	r3, [r1, #0]
 800d166:	e060      	b.n	800d22a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	015a      	lsls	r2, r3, #5
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	4413      	add	r3, r2
 800d170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d17a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d17e:	d11f      	bne.n	800d1c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	015a      	lsls	r2, r3, #5
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	4413      	add	r3, r2
 800d188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68ba      	ldr	r2, [r7, #8]
 800d190:	0151      	lsls	r1, r2, #5
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	440a      	add	r2, r1
 800d196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d19a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d19e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	015a      	lsls	r2, r3, #5
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	68ba      	ldr	r2, [r7, #8]
 800d1b0:	0151      	lsls	r1, r2, #5
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	440a      	add	r2, r1
 800d1b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d1be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	f003 030f 	and.w	r3, r3, #15
 800d1d0:	2101      	movs	r1, #1
 800d1d2:	fa01 f303 	lsl.w	r3, r1, r3
 800d1d6:	041b      	lsls	r3, r3, #16
 800d1d8:	43db      	mvns	r3, r3
 800d1da:	68f9      	ldr	r1, [r7, #12]
 800d1dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1ea:	69da      	ldr	r2, [r3, #28]
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	f003 030f 	and.w	r3, r3, #15
 800d1f4:	2101      	movs	r1, #1
 800d1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800d1fa:	041b      	lsls	r3, r3, #16
 800d1fc:	43db      	mvns	r3, r3
 800d1fe:	68f9      	ldr	r1, [r7, #12]
 800d200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d204:	4013      	ands	r3, r2
 800d206:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	015a      	lsls	r2, r3, #5
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	4413      	add	r3, r2
 800d210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	0159      	lsls	r1, r3, #5
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	440b      	add	r3, r1
 800d21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d222:	4619      	mov	r1, r3
 800d224:	4b05      	ldr	r3, [pc, #20]	; (800d23c <USB_DeactivateEndpoint+0x1b4>)
 800d226:	4013      	ands	r3, r2
 800d228:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3714      	adds	r7, #20
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr
 800d238:	ec337800 	.word	0xec337800
 800d23c:	eff37800 	.word	0xeff37800

0800d240 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b08a      	sub	sp, #40	; 0x28
 800d244:	af02      	add	r7, sp, #8
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	4613      	mov	r3, r2
 800d24c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	785b      	ldrb	r3, [r3, #1]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	f040 815c 	bne.w	800d51a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	699b      	ldr	r3, [r3, #24]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d132      	bne.n	800d2d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	015a      	lsls	r2, r3, #5
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	4413      	add	r3, r2
 800d272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	69ba      	ldr	r2, [r7, #24]
 800d27a:	0151      	lsls	r1, r2, #5
 800d27c:	69fa      	ldr	r2, [r7, #28]
 800d27e:	440a      	add	r2, r1
 800d280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d284:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d288:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d28c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	015a      	lsls	r2, r3, #5
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	4413      	add	r3, r2
 800d296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d29a:	691b      	ldr	r3, [r3, #16]
 800d29c:	69ba      	ldr	r2, [r7, #24]
 800d29e:	0151      	lsls	r1, r2, #5
 800d2a0:	69fa      	ldr	r2, [r7, #28]
 800d2a2:	440a      	add	r2, r1
 800d2a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	015a      	lsls	r2, r3, #5
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	4413      	add	r3, r2
 800d2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ba:	691b      	ldr	r3, [r3, #16]
 800d2bc:	69ba      	ldr	r2, [r7, #24]
 800d2be:	0151      	lsls	r1, r2, #5
 800d2c0:	69fa      	ldr	r2, [r7, #28]
 800d2c2:	440a      	add	r2, r1
 800d2c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2c8:	0cdb      	lsrs	r3, r3, #19
 800d2ca:	04db      	lsls	r3, r3, #19
 800d2cc:	6113      	str	r3, [r2, #16]
 800d2ce:	e074      	b.n	800d3ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	015a      	lsls	r2, r3, #5
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2dc:	691b      	ldr	r3, [r3, #16]
 800d2de:	69ba      	ldr	r2, [r7, #24]
 800d2e0:	0151      	lsls	r1, r2, #5
 800d2e2:	69fa      	ldr	r2, [r7, #28]
 800d2e4:	440a      	add	r2, r1
 800d2e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2ea:	0cdb      	lsrs	r3, r3, #19
 800d2ec:	04db      	lsls	r3, r3, #19
 800d2ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	015a      	lsls	r2, r3, #5
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2fc:	691b      	ldr	r3, [r3, #16]
 800d2fe:	69ba      	ldr	r2, [r7, #24]
 800d300:	0151      	lsls	r1, r2, #5
 800d302:	69fa      	ldr	r2, [r7, #28]
 800d304:	440a      	add	r2, r1
 800d306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d30a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d30e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d312:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	015a      	lsls	r2, r3, #5
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	4413      	add	r3, r2
 800d31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d320:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	6999      	ldr	r1, [r3, #24]
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	440b      	add	r3, r1
 800d32c:	1e59      	subs	r1, r3, #1
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	fbb1 f3f3 	udiv	r3, r1, r3
 800d336:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d338:	4b9d      	ldr	r3, [pc, #628]	; (800d5b0 <USB_EPStartXfer+0x370>)
 800d33a:	400b      	ands	r3, r1
 800d33c:	69b9      	ldr	r1, [r7, #24]
 800d33e:	0148      	lsls	r0, r1, #5
 800d340:	69f9      	ldr	r1, [r7, #28]
 800d342:	4401      	add	r1, r0
 800d344:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d348:	4313      	orrs	r3, r2
 800d34a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	015a      	lsls	r2, r3, #5
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	4413      	add	r3, r2
 800d354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d358:	691a      	ldr	r2, [r3, #16]
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	699b      	ldr	r3, [r3, #24]
 800d35e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d362:	69b9      	ldr	r1, [r7, #24]
 800d364:	0148      	lsls	r0, r1, #5
 800d366:	69f9      	ldr	r1, [r7, #28]
 800d368:	4401      	add	r1, r0
 800d36a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d36e:	4313      	orrs	r3, r2
 800d370:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	791b      	ldrb	r3, [r3, #4]
 800d376:	2b01      	cmp	r3, #1
 800d378:	d11f      	bne.n	800d3ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d37a:	69bb      	ldr	r3, [r7, #24]
 800d37c:	015a      	lsls	r2, r3, #5
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	4413      	add	r3, r2
 800d382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d386:	691b      	ldr	r3, [r3, #16]
 800d388:	69ba      	ldr	r2, [r7, #24]
 800d38a:	0151      	lsls	r1, r2, #5
 800d38c:	69fa      	ldr	r2, [r7, #28]
 800d38e:	440a      	add	r2, r1
 800d390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d394:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d398:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	015a      	lsls	r2, r3, #5
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3a6:	691b      	ldr	r3, [r3, #16]
 800d3a8:	69ba      	ldr	r2, [r7, #24]
 800d3aa:	0151      	lsls	r1, r2, #5
 800d3ac:	69fa      	ldr	r2, [r7, #28]
 800d3ae:	440a      	add	r2, r1
 800d3b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d3b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d3ba:	79fb      	ldrb	r3, [r7, #7]
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d14b      	bne.n	800d458 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	695b      	ldr	r3, [r3, #20]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d009      	beq.n	800d3dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d3c8:	69bb      	ldr	r3, [r7, #24]
 800d3ca:	015a      	lsls	r2, r3, #5
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	4413      	add	r3, r2
 800d3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	695b      	ldr	r3, [r3, #20]
 800d3da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	791b      	ldrb	r3, [r3, #4]
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d128      	bne.n	800d436 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d110      	bne.n	800d416 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	015a      	lsls	r2, r3, #5
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	69ba      	ldr	r2, [r7, #24]
 800d404:	0151      	lsls	r1, r2, #5
 800d406:	69fa      	ldr	r2, [r7, #28]
 800d408:	440a      	add	r2, r1
 800d40a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d40e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d412:	6013      	str	r3, [r2, #0]
 800d414:	e00f      	b.n	800d436 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	015a      	lsls	r2, r3, #5
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	4413      	add	r3, r2
 800d41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	69ba      	ldr	r2, [r7, #24]
 800d426:	0151      	lsls	r1, r2, #5
 800d428:	69fa      	ldr	r2, [r7, #28]
 800d42a:	440a      	add	r2, r1
 800d42c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d434:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	015a      	lsls	r2, r3, #5
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	4413      	add	r3, r2
 800d43e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	69ba      	ldr	r2, [r7, #24]
 800d446:	0151      	lsls	r1, r2, #5
 800d448:	69fa      	ldr	r2, [r7, #28]
 800d44a:	440a      	add	r2, r1
 800d44c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d450:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d454:	6013      	str	r3, [r2, #0]
 800d456:	e133      	b.n	800d6c0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	015a      	lsls	r2, r3, #5
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	4413      	add	r3, r2
 800d460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	69ba      	ldr	r2, [r7, #24]
 800d468:	0151      	lsls	r1, r2, #5
 800d46a:	69fa      	ldr	r2, [r7, #28]
 800d46c:	440a      	add	r2, r1
 800d46e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d472:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d476:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	791b      	ldrb	r3, [r3, #4]
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d015      	beq.n	800d4ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	699b      	ldr	r3, [r3, #24]
 800d484:	2b00      	cmp	r3, #0
 800d486:	f000 811b 	beq.w	800d6c0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	f003 030f 	and.w	r3, r3, #15
 800d49a:	2101      	movs	r1, #1
 800d49c:	fa01 f303 	lsl.w	r3, r1, r3
 800d4a0:	69f9      	ldr	r1, [r7, #28]
 800d4a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	634b      	str	r3, [r1, #52]	; 0x34
 800d4aa:	e109      	b.n	800d6c0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d110      	bne.n	800d4de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	015a      	lsls	r2, r3, #5
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	4413      	add	r3, r2
 800d4c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	69ba      	ldr	r2, [r7, #24]
 800d4cc:	0151      	lsls	r1, r2, #5
 800d4ce:	69fa      	ldr	r2, [r7, #28]
 800d4d0:	440a      	add	r2, r1
 800d4d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d4da:	6013      	str	r3, [r2, #0]
 800d4dc:	e00f      	b.n	800d4fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	015a      	lsls	r2, r3, #5
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	69ba      	ldr	r2, [r7, #24]
 800d4ee:	0151      	lsls	r1, r2, #5
 800d4f0:	69fa      	ldr	r2, [r7, #28]
 800d4f2:	440a      	add	r2, r1
 800d4f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	6919      	ldr	r1, [r3, #16]
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	781a      	ldrb	r2, [r3, #0]
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	699b      	ldr	r3, [r3, #24]
 800d50a:	b298      	uxth	r0, r3
 800d50c:	79fb      	ldrb	r3, [r7, #7]
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	4603      	mov	r3, r0
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f000 fade 	bl	800dad4 <USB_WritePacket>
 800d518:	e0d2      	b.n	800d6c0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	015a      	lsls	r2, r3, #5
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	4413      	add	r3, r2
 800d522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d526:	691b      	ldr	r3, [r3, #16]
 800d528:	69ba      	ldr	r2, [r7, #24]
 800d52a:	0151      	lsls	r1, r2, #5
 800d52c:	69fa      	ldr	r2, [r7, #28]
 800d52e:	440a      	add	r2, r1
 800d530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d534:	0cdb      	lsrs	r3, r3, #19
 800d536:	04db      	lsls	r3, r3, #19
 800d538:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	015a      	lsls	r2, r3, #5
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	4413      	add	r3, r2
 800d542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	69ba      	ldr	r2, [r7, #24]
 800d54a:	0151      	lsls	r1, r2, #5
 800d54c:	69fa      	ldr	r2, [r7, #28]
 800d54e:	440a      	add	r2, r1
 800d550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d554:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d558:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d55c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	699b      	ldr	r3, [r3, #24]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d126      	bne.n	800d5b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	015a      	lsls	r2, r3, #5
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	4413      	add	r3, r2
 800d56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d572:	691a      	ldr	r2, [r3, #16]
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d57c:	69b9      	ldr	r1, [r7, #24]
 800d57e:	0148      	lsls	r0, r1, #5
 800d580:	69f9      	ldr	r1, [r7, #28]
 800d582:	4401      	add	r1, r0
 800d584:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d588:	4313      	orrs	r3, r2
 800d58a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	015a      	lsls	r2, r3, #5
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	4413      	add	r3, r2
 800d594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d598:	691b      	ldr	r3, [r3, #16]
 800d59a:	69ba      	ldr	r2, [r7, #24]
 800d59c:	0151      	lsls	r1, r2, #5
 800d59e:	69fa      	ldr	r2, [r7, #28]
 800d5a0:	440a      	add	r2, r1
 800d5a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5aa:	6113      	str	r3, [r2, #16]
 800d5ac:	e03a      	b.n	800d624 <USB_EPStartXfer+0x3e4>
 800d5ae:	bf00      	nop
 800d5b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	699a      	ldr	r2, [r3, #24]
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	4413      	add	r3, r2
 800d5be:	1e5a      	subs	r2, r3, #1
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5c8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	68db      	ldr	r3, [r3, #12]
 800d5ce:	8afa      	ldrh	r2, [r7, #22]
 800d5d0:	fb03 f202 	mul.w	r2, r3, r2
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d5d8:	69bb      	ldr	r3, [r7, #24]
 800d5da:	015a      	lsls	r2, r3, #5
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	4413      	add	r3, r2
 800d5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5e4:	691a      	ldr	r2, [r3, #16]
 800d5e6:	8afb      	ldrh	r3, [r7, #22]
 800d5e8:	04d9      	lsls	r1, r3, #19
 800d5ea:	4b38      	ldr	r3, [pc, #224]	; (800d6cc <USB_EPStartXfer+0x48c>)
 800d5ec:	400b      	ands	r3, r1
 800d5ee:	69b9      	ldr	r1, [r7, #24]
 800d5f0:	0148      	lsls	r0, r1, #5
 800d5f2:	69f9      	ldr	r1, [r7, #28]
 800d5f4:	4401      	add	r1, r0
 800d5f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	015a      	lsls	r2, r3, #5
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	4413      	add	r3, r2
 800d606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d60a:	691a      	ldr	r2, [r3, #16]
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	69db      	ldr	r3, [r3, #28]
 800d610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d614:	69b9      	ldr	r1, [r7, #24]
 800d616:	0148      	lsls	r0, r1, #5
 800d618:	69f9      	ldr	r1, [r7, #28]
 800d61a:	4401      	add	r1, r0
 800d61c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d620:	4313      	orrs	r3, r2
 800d622:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d624:	79fb      	ldrb	r3, [r7, #7]
 800d626:	2b01      	cmp	r3, #1
 800d628:	d10d      	bne.n	800d646 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d009      	beq.n	800d646 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	6919      	ldr	r1, [r3, #16]
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	015a      	lsls	r2, r3, #5
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	4413      	add	r3, r2
 800d63e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d642:	460a      	mov	r2, r1
 800d644:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	791b      	ldrb	r3, [r3, #4]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d128      	bne.n	800d6a0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d110      	bne.n	800d680 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	015a      	lsls	r2, r3, #5
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	4413      	add	r3, r2
 800d666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	69ba      	ldr	r2, [r7, #24]
 800d66e:	0151      	lsls	r1, r2, #5
 800d670:	69fa      	ldr	r2, [r7, #28]
 800d672:	440a      	add	r2, r1
 800d674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d678:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d67c:	6013      	str	r3, [r2, #0]
 800d67e:	e00f      	b.n	800d6a0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	015a      	lsls	r2, r3, #5
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	4413      	add	r3, r2
 800d688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	69ba      	ldr	r2, [r7, #24]
 800d690:	0151      	lsls	r1, r2, #5
 800d692:	69fa      	ldr	r2, [r7, #28]
 800d694:	440a      	add	r2, r1
 800d696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d69a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d69e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	015a      	lsls	r2, r3, #5
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	4413      	add	r3, r2
 800d6a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	69ba      	ldr	r2, [r7, #24]
 800d6b0:	0151      	lsls	r1, r2, #5
 800d6b2:	69fa      	ldr	r2, [r7, #28]
 800d6b4:	440a      	add	r2, r1
 800d6b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d6be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d6c0:	2300      	movs	r3, #0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3720      	adds	r7, #32
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	1ff80000 	.word	0x1ff80000

0800d6d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b087      	sub	sp, #28
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	4613      	mov	r3, r2
 800d6dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	785b      	ldrb	r3, [r3, #1]
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	f040 80ce 	bne.w	800d88e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d132      	bne.n	800d760 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	015a      	lsls	r2, r3, #5
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	4413      	add	r3, r2
 800d702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d706:	691b      	ldr	r3, [r3, #16]
 800d708:	693a      	ldr	r2, [r7, #16]
 800d70a:	0151      	lsls	r1, r2, #5
 800d70c:	697a      	ldr	r2, [r7, #20]
 800d70e:	440a      	add	r2, r1
 800d710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d714:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d718:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d71c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	015a      	lsls	r2, r3, #5
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	4413      	add	r3, r2
 800d726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d72a:	691b      	ldr	r3, [r3, #16]
 800d72c:	693a      	ldr	r2, [r7, #16]
 800d72e:	0151      	lsls	r1, r2, #5
 800d730:	697a      	ldr	r2, [r7, #20]
 800d732:	440a      	add	r2, r1
 800d734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d738:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d73c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	015a      	lsls	r2, r3, #5
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	4413      	add	r3, r2
 800d746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d74a:	691b      	ldr	r3, [r3, #16]
 800d74c:	693a      	ldr	r2, [r7, #16]
 800d74e:	0151      	lsls	r1, r2, #5
 800d750:	697a      	ldr	r2, [r7, #20]
 800d752:	440a      	add	r2, r1
 800d754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d758:	0cdb      	lsrs	r3, r3, #19
 800d75a:	04db      	lsls	r3, r3, #19
 800d75c:	6113      	str	r3, [r2, #16]
 800d75e:	e04e      	b.n	800d7fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	015a      	lsls	r2, r3, #5
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	4413      	add	r3, r2
 800d768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d76c:	691b      	ldr	r3, [r3, #16]
 800d76e:	693a      	ldr	r2, [r7, #16]
 800d770:	0151      	lsls	r1, r2, #5
 800d772:	697a      	ldr	r2, [r7, #20]
 800d774:	440a      	add	r2, r1
 800d776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d77a:	0cdb      	lsrs	r3, r3, #19
 800d77c:	04db      	lsls	r3, r3, #19
 800d77e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	015a      	lsls	r2, r3, #5
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	4413      	add	r3, r2
 800d788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d78c:	691b      	ldr	r3, [r3, #16]
 800d78e:	693a      	ldr	r2, [r7, #16]
 800d790:	0151      	lsls	r1, r2, #5
 800d792:	697a      	ldr	r2, [r7, #20]
 800d794:	440a      	add	r2, r1
 800d796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d79a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d79e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d7a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	699a      	ldr	r2, [r3, #24]
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d903      	bls.n	800d7b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	68da      	ldr	r2, [r3, #12]
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	015a      	lsls	r2, r3, #5
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	4413      	add	r3, r2
 800d7c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7c4:	691b      	ldr	r3, [r3, #16]
 800d7c6:	693a      	ldr	r2, [r7, #16]
 800d7c8:	0151      	lsls	r1, r2, #5
 800d7ca:	697a      	ldr	r2, [r7, #20]
 800d7cc:	440a      	add	r2, r1
 800d7ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	015a      	lsls	r2, r3, #5
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7e4:	691a      	ldr	r2, [r3, #16]
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	699b      	ldr	r3, [r3, #24]
 800d7ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d7ee:	6939      	ldr	r1, [r7, #16]
 800d7f0:	0148      	lsls	r0, r1, #5
 800d7f2:	6979      	ldr	r1, [r7, #20]
 800d7f4:	4401      	add	r1, r0
 800d7f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d7fe:	79fb      	ldrb	r3, [r7, #7]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d11e      	bne.n	800d842 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	695b      	ldr	r3, [r3, #20]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d009      	beq.n	800d820 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	015a      	lsls	r2, r3, #5
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	4413      	add	r3, r2
 800d814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d818:	461a      	mov	r2, r3
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	695b      	ldr	r3, [r3, #20]
 800d81e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	015a      	lsls	r2, r3, #5
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	4413      	add	r3, r2
 800d828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	693a      	ldr	r2, [r7, #16]
 800d830:	0151      	lsls	r1, r2, #5
 800d832:	697a      	ldr	r2, [r7, #20]
 800d834:	440a      	add	r2, r1
 800d836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d83a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d83e:	6013      	str	r3, [r2, #0]
 800d840:	e097      	b.n	800d972 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	015a      	lsls	r2, r3, #5
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	4413      	add	r3, r2
 800d84a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	693a      	ldr	r2, [r7, #16]
 800d852:	0151      	lsls	r1, r2, #5
 800d854:	697a      	ldr	r2, [r7, #20]
 800d856:	440a      	add	r2, r1
 800d858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d85c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d860:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	699b      	ldr	r3, [r3, #24]
 800d866:	2b00      	cmp	r3, #0
 800d868:	f000 8083 	beq.w	800d972 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	f003 030f 	and.w	r3, r3, #15
 800d87c:	2101      	movs	r1, #1
 800d87e:	fa01 f303 	lsl.w	r3, r1, r3
 800d882:	6979      	ldr	r1, [r7, #20]
 800d884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d888:	4313      	orrs	r3, r2
 800d88a:	634b      	str	r3, [r1, #52]	; 0x34
 800d88c:	e071      	b.n	800d972 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	015a      	lsls	r2, r3, #5
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	4413      	add	r3, r2
 800d896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d89a:	691b      	ldr	r3, [r3, #16]
 800d89c:	693a      	ldr	r2, [r7, #16]
 800d89e:	0151      	lsls	r1, r2, #5
 800d8a0:	697a      	ldr	r2, [r7, #20]
 800d8a2:	440a      	add	r2, r1
 800d8a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8a8:	0cdb      	lsrs	r3, r3, #19
 800d8aa:	04db      	lsls	r3, r3, #19
 800d8ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	015a      	lsls	r2, r3, #5
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8ba:	691b      	ldr	r3, [r3, #16]
 800d8bc:	693a      	ldr	r2, [r7, #16]
 800d8be:	0151      	lsls	r1, r2, #5
 800d8c0:	697a      	ldr	r2, [r7, #20]
 800d8c2:	440a      	add	r2, r1
 800d8c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d8cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d8d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d003      	beq.n	800d8e2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	68da      	ldr	r2, [r3, #12]
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	68da      	ldr	r2, [r3, #12]
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	015a      	lsls	r2, r3, #5
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8f6:	691b      	ldr	r3, [r3, #16]
 800d8f8:	693a      	ldr	r2, [r7, #16]
 800d8fa:	0151      	lsls	r1, r2, #5
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	440a      	add	r2, r1
 800d900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d908:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	015a      	lsls	r2, r3, #5
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	4413      	add	r3, r2
 800d912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d916:	691a      	ldr	r2, [r3, #16]
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	69db      	ldr	r3, [r3, #28]
 800d91c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d920:	6939      	ldr	r1, [r7, #16]
 800d922:	0148      	lsls	r0, r1, #5
 800d924:	6979      	ldr	r1, [r7, #20]
 800d926:	4401      	add	r1, r0
 800d928:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d92c:	4313      	orrs	r3, r2
 800d92e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d930:	79fb      	ldrb	r3, [r7, #7]
 800d932:	2b01      	cmp	r3, #1
 800d934:	d10d      	bne.n	800d952 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d009      	beq.n	800d952 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	6919      	ldr	r1, [r3, #16]
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	015a      	lsls	r2, r3, #5
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	4413      	add	r3, r2
 800d94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d94e:	460a      	mov	r2, r1
 800d950:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	015a      	lsls	r2, r3, #5
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	4413      	add	r3, r2
 800d95a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	693a      	ldr	r2, [r7, #16]
 800d962:	0151      	lsls	r1, r2, #5
 800d964:	697a      	ldr	r2, [r7, #20]
 800d966:	440a      	add	r2, r1
 800d968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d96c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d970:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	371c      	adds	r7, #28
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d980:	b480      	push	{r7}
 800d982:	b087      	sub	sp, #28
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d98a:	2300      	movs	r3, #0
 800d98c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d98e:	2300      	movs	r3, #0
 800d990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	785b      	ldrb	r3, [r3, #1]
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d14a      	bne.n	800da34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	015a      	lsls	r2, r3, #5
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9b6:	f040 8086 	bne.w	800dac6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	015a      	lsls	r2, r3, #5
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	683a      	ldr	r2, [r7, #0]
 800d9cc:	7812      	ldrb	r2, [r2, #0]
 800d9ce:	0151      	lsls	r1, r2, #5
 800d9d0:	693a      	ldr	r2, [r7, #16]
 800d9d2:	440a      	add	r2, r1
 800d9d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d9dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	015a      	lsls	r2, r3, #5
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	683a      	ldr	r2, [r7, #0]
 800d9f0:	7812      	ldrb	r2, [r2, #0]
 800d9f2:	0151      	lsls	r1, r2, #5
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	440a      	add	r2, r1
 800d9f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	3301      	adds	r3, #1
 800da06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f242 7210 	movw	r2, #10000	; 0x2710
 800da0e:	4293      	cmp	r3, r2
 800da10:	d902      	bls.n	800da18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800da12:	2301      	movs	r3, #1
 800da14:	75fb      	strb	r3, [r7, #23]
          break;
 800da16:	e056      	b.n	800dac6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	015a      	lsls	r2, r3, #5
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	4413      	add	r3, r2
 800da22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da30:	d0e7      	beq.n	800da02 <USB_EPStopXfer+0x82>
 800da32:	e048      	b.n	800dac6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	015a      	lsls	r2, r3, #5
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	4413      	add	r3, r2
 800da3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da4c:	d13b      	bne.n	800dac6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	015a      	lsls	r2, r3, #5
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	4413      	add	r3, r2
 800da58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	683a      	ldr	r2, [r7, #0]
 800da60:	7812      	ldrb	r2, [r2, #0]
 800da62:	0151      	lsls	r1, r2, #5
 800da64:	693a      	ldr	r2, [r7, #16]
 800da66:	440a      	add	r2, r1
 800da68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800da70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	015a      	lsls	r2, r3, #5
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	4413      	add	r3, r2
 800da7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	683a      	ldr	r2, [r7, #0]
 800da84:	7812      	ldrb	r2, [r2, #0]
 800da86:	0151      	lsls	r1, r2, #5
 800da88:	693a      	ldr	r2, [r7, #16]
 800da8a:	440a      	add	r2, r1
 800da8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	3301      	adds	r3, #1
 800da9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f242 7210 	movw	r2, #10000	; 0x2710
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d902      	bls.n	800daac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800daa6:	2301      	movs	r3, #1
 800daa8:	75fb      	strb	r3, [r7, #23]
          break;
 800daaa:	e00c      	b.n	800dac6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	015a      	lsls	r2, r3, #5
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	4413      	add	r3, r2
 800dab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dac4:	d0e7      	beq.n	800da96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800dac6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	371c      	adds	r7, #28
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b089      	sub	sp, #36	; 0x24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	4611      	mov	r1, r2
 800dae0:	461a      	mov	r2, r3
 800dae2:	460b      	mov	r3, r1
 800dae4:	71fb      	strb	r3, [r7, #7]
 800dae6:	4613      	mov	r3, r2
 800dae8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800daf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d123      	bne.n	800db42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dafa:	88bb      	ldrh	r3, [r7, #4]
 800dafc:	3303      	adds	r3, #3
 800dafe:	089b      	lsrs	r3, r3, #2
 800db00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800db02:	2300      	movs	r3, #0
 800db04:	61bb      	str	r3, [r7, #24]
 800db06:	e018      	b.n	800db3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800db08:	79fb      	ldrb	r3, [r7, #7]
 800db0a:	031a      	lsls	r2, r3, #12
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	4413      	add	r3, r2
 800db10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db14:	461a      	mov	r2, r3
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	3301      	adds	r3, #1
 800db20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	3301      	adds	r3, #1
 800db26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	3301      	adds	r3, #1
 800db2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	3301      	adds	r3, #1
 800db32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	3301      	adds	r3, #1
 800db38:	61bb      	str	r3, [r7, #24]
 800db3a:	69ba      	ldr	r2, [r7, #24]
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d3e2      	bcc.n	800db08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800db42:	2300      	movs	r3, #0
}
 800db44:	4618      	mov	r0, r3
 800db46:	3724      	adds	r7, #36	; 0x24
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800db50:	b480      	push	{r7}
 800db52:	b08b      	sub	sp, #44	; 0x2c
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	4613      	mov	r3, r2
 800db5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800db66:	88fb      	ldrh	r3, [r7, #6]
 800db68:	089b      	lsrs	r3, r3, #2
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800db6e:	88fb      	ldrh	r3, [r7, #6]
 800db70:	f003 0303 	and.w	r3, r3, #3
 800db74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800db76:	2300      	movs	r3, #0
 800db78:	623b      	str	r3, [r7, #32]
 800db7a:	e014      	b.n	800dba6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	601a      	str	r2, [r3, #0]
    pDest++;
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	3301      	adds	r3, #1
 800db8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800db8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db90:	3301      	adds	r3, #1
 800db92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800db94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db96:	3301      	adds	r3, #1
 800db98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800db9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9c:	3301      	adds	r3, #1
 800db9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800dba0:	6a3b      	ldr	r3, [r7, #32]
 800dba2:	3301      	adds	r3, #1
 800dba4:	623b      	str	r3, [r7, #32]
 800dba6:	6a3a      	ldr	r2, [r7, #32]
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d3e6      	bcc.n	800db7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800dbae:	8bfb      	ldrh	r3, [r7, #30]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d01e      	beq.n	800dbf2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800dbb8:	69bb      	ldr	r3, [r7, #24]
 800dbba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	f107 0310 	add.w	r3, r7, #16
 800dbc4:	6812      	ldr	r2, [r2, #0]
 800dbc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800dbc8:	693a      	ldr	r2, [r7, #16]
 800dbca:	6a3b      	ldr	r3, [r7, #32]
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	00db      	lsls	r3, r3, #3
 800dbd0:	fa22 f303 	lsr.w	r3, r2, r3
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd8:	701a      	strb	r2, [r3, #0]
      i++;
 800dbda:	6a3b      	ldr	r3, [r7, #32]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	623b      	str	r3, [r7, #32]
      pDest++;
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800dbe6:	8bfb      	ldrh	r3, [r7, #30]
 800dbe8:	3b01      	subs	r3, #1
 800dbea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dbec:	8bfb      	ldrh	r3, [r7, #30]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d1ea      	bne.n	800dbc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	372c      	adds	r7, #44	; 0x2c
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	785b      	ldrb	r3, [r3, #1]
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d12c      	bne.n	800dc76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	015a      	lsls	r2, r3, #5
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	4413      	add	r3, r2
 800dc24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	db12      	blt.n	800dc54 <USB_EPSetStall+0x54>
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d00f      	beq.n	800dc54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	015a      	lsls	r2, r3, #5
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	68ba      	ldr	r2, [r7, #8]
 800dc44:	0151      	lsls	r1, r2, #5
 800dc46:	68fa      	ldr	r2, [r7, #12]
 800dc48:	440a      	add	r2, r1
 800dc4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dc52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	015a      	lsls	r2, r3, #5
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	68ba      	ldr	r2, [r7, #8]
 800dc64:	0151      	lsls	r1, r2, #5
 800dc66:	68fa      	ldr	r2, [r7, #12]
 800dc68:	440a      	add	r2, r1
 800dc6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dc72:	6013      	str	r3, [r2, #0]
 800dc74:	e02b      	b.n	800dcce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	015a      	lsls	r2, r3, #5
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	db12      	blt.n	800dcae <USB_EPSetStall+0xae>
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00f      	beq.n	800dcae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	015a      	lsls	r2, r3, #5
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	4413      	add	r3, r2
 800dc96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	0151      	lsls	r1, r2, #5
 800dca0:	68fa      	ldr	r2, [r7, #12]
 800dca2:	440a      	add	r2, r1
 800dca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dca8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dcac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	015a      	lsls	r2, r3, #5
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	68ba      	ldr	r2, [r7, #8]
 800dcbe:	0151      	lsls	r1, r2, #5
 800dcc0:	68fa      	ldr	r2, [r7, #12]
 800dcc2:	440a      	add	r2, r1
 800dcc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dccc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dcce:	2300      	movs	r3, #0
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3714      	adds	r7, #20
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr

0800dcdc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b085      	sub	sp, #20
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	785b      	ldrb	r3, [r3, #1]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d128      	bne.n	800dd4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	015a      	lsls	r2, r3, #5
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	4413      	add	r3, r2
 800dd00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	68ba      	ldr	r2, [r7, #8]
 800dd08:	0151      	lsls	r1, r2, #5
 800dd0a:	68fa      	ldr	r2, [r7, #12]
 800dd0c:	440a      	add	r2, r1
 800dd0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dd16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	791b      	ldrb	r3, [r3, #4]
 800dd1c:	2b03      	cmp	r3, #3
 800dd1e:	d003      	beq.n	800dd28 <USB_EPClearStall+0x4c>
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	791b      	ldrb	r3, [r3, #4]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d138      	bne.n	800dd9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	015a      	lsls	r2, r3, #5
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4413      	add	r3, r2
 800dd30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	68ba      	ldr	r2, [r7, #8]
 800dd38:	0151      	lsls	r1, r2, #5
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	440a      	add	r2, r1
 800dd3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd46:	6013      	str	r3, [r2, #0]
 800dd48:	e027      	b.n	800dd9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	015a      	lsls	r2, r3, #5
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	4413      	add	r3, r2
 800dd52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	68ba      	ldr	r2, [r7, #8]
 800dd5a:	0151      	lsls	r1, r2, #5
 800dd5c:	68fa      	ldr	r2, [r7, #12]
 800dd5e:	440a      	add	r2, r1
 800dd60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dd68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	791b      	ldrb	r3, [r3, #4]
 800dd6e:	2b03      	cmp	r3, #3
 800dd70:	d003      	beq.n	800dd7a <USB_EPClearStall+0x9e>
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	791b      	ldrb	r3, [r3, #4]
 800dd76:	2b02      	cmp	r3, #2
 800dd78:	d10f      	bne.n	800dd9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	015a      	lsls	r2, r3, #5
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	4413      	add	r3, r2
 800dd82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68ba      	ldr	r2, [r7, #8]
 800dd8a:	0151      	lsls	r1, r2, #5
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	440a      	add	r2, r1
 800dd90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dd9a:	2300      	movs	r3, #0
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3714      	adds	r7, #20
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b085      	sub	sp, #20
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	68fa      	ldr	r2, [r7, #12]
 800ddc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ddc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ddca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	78fb      	ldrb	r3, [r7, #3]
 800ddd6:	011b      	lsls	r3, r3, #4
 800ddd8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800dddc:	68f9      	ldr	r1, [r7, #12]
 800ddde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dde2:	4313      	orrs	r3, r2
 800dde4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3714      	adds	r7, #20
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr

0800ddf4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800de0e:	f023 0303 	bic.w	r3, r3, #3
 800de12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de22:	f023 0302 	bic.w	r3, r3, #2
 800de26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3714      	adds	r7, #20
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr

0800de36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800de36:	b480      	push	{r7}
 800de38:	b085      	sub	sp, #20
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	68fa      	ldr	r2, [r7, #12]
 800de4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800de50:	f023 0303 	bic.w	r3, r3, #3
 800de54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	68fa      	ldr	r2, [r7, #12]
 800de60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de64:	f043 0302 	orr.w	r3, r3, #2
 800de68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800de6a:	2300      	movs	r3, #0
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3714      	adds	r7, #20
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr

0800de78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	695b      	ldr	r3, [r3, #20]
 800de84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	699b      	ldr	r3, [r3, #24]
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	4013      	ands	r3, r2
 800de8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800de90:	68fb      	ldr	r3, [r7, #12]
}
 800de92:	4618      	mov	r0, r3
 800de94:	3714      	adds	r7, #20
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr

0800de9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800de9e:	b480      	push	{r7}
 800dea0:	b085      	sub	sp, #20
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deb0:	699b      	ldr	r3, [r3, #24]
 800deb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deba:	69db      	ldr	r3, [r3, #28]
 800debc:	68ba      	ldr	r2, [r7, #8]
 800debe:	4013      	ands	r3, r2
 800dec0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	0c1b      	lsrs	r3, r3, #16
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3714      	adds	r7, #20
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr

0800ded2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ded2:	b480      	push	{r7}
 800ded4:	b085      	sub	sp, #20
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dee4:	699b      	ldr	r3, [r3, #24]
 800dee6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deee:	69db      	ldr	r3, [r3, #28]
 800def0:	68ba      	ldr	r2, [r7, #8]
 800def2:	4013      	ands	r3, r2
 800def4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	b29b      	uxth	r3, r3
}
 800defa:	4618      	mov	r0, r3
 800defc:	3714      	adds	r7, #20
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr

0800df06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800df06:	b480      	push	{r7}
 800df08:	b085      	sub	sp, #20
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
 800df0e:	460b      	mov	r3, r1
 800df10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800df16:	78fb      	ldrb	r3, [r7, #3]
 800df18:	015a      	lsls	r2, r3, #5
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	4413      	add	r3, r2
 800df1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	4013      	ands	r3, r2
 800df32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800df34:	68bb      	ldr	r3, [r7, #8]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3714      	adds	r7, #20
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr

0800df42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800df42:	b480      	push	{r7}
 800df44:	b087      	sub	sp, #28
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
 800df4a:	460b      	mov	r3, r1
 800df4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df58:	691b      	ldr	r3, [r3, #16]
 800df5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800df66:	78fb      	ldrb	r3, [r7, #3]
 800df68:	f003 030f 	and.w	r3, r3, #15
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	fa22 f303 	lsr.w	r3, r2, r3
 800df72:	01db      	lsls	r3, r3, #7
 800df74:	b2db      	uxtb	r3, r3
 800df76:	693a      	ldr	r2, [r7, #16]
 800df78:	4313      	orrs	r3, r2
 800df7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800df7c:	78fb      	ldrb	r3, [r7, #3]
 800df7e:	015a      	lsls	r2, r3, #5
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	4413      	add	r3, r2
 800df84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	693a      	ldr	r2, [r7, #16]
 800df8c:	4013      	ands	r3, r2
 800df8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800df90:	68bb      	ldr	r3, [r7, #8]
}
 800df92:	4618      	mov	r0, r3
 800df94:	371c      	adds	r7, #28
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr

0800df9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800df9e:	b480      	push	{r7}
 800dfa0:	b083      	sub	sp, #12
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	695b      	ldr	r3, [r3, #20]
 800dfaa:	f003 0301 	and.w	r3, r3, #1
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	370c      	adds	r7, #12
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr

0800dfba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800dfba:	b480      	push	{r7}
 800dfbc:	b085      	sub	sp, #20
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dfd8:	f023 0307 	bic.w	r3, r3, #7
 800dfdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dfec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dff0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dff2:	2300      	movs	r3, #0
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3714      	adds	r7, #20
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e000:	b480      	push	{r7}
 800e002:	b087      	sub	sp, #28
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	460b      	mov	r3, r1
 800e00a:	607a      	str	r2, [r7, #4]
 800e00c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	333c      	adds	r3, #60	; 0x3c
 800e016:	3304      	adds	r3, #4
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	4a26      	ldr	r2, [pc, #152]	; (800e0b8 <USB_EP0_OutStart+0xb8>)
 800e020:	4293      	cmp	r3, r2
 800e022:	d90a      	bls.n	800e03a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e034:	d101      	bne.n	800e03a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e036:	2300      	movs	r3, #0
 800e038:	e037      	b.n	800e0aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e040:	461a      	mov	r2, r3
 800e042:	2300      	movs	r3, #0
 800e044:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e04c:	691b      	ldr	r3, [r3, #16]
 800e04e:	697a      	ldr	r2, [r7, #20]
 800e050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e054:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e058:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	697a      	ldr	r2, [r7, #20]
 800e064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e068:	f043 0318 	orr.w	r3, r3, #24
 800e06c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e074:	691b      	ldr	r3, [r3, #16]
 800e076:	697a      	ldr	r2, [r7, #20]
 800e078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e07c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e080:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e082:	7afb      	ldrb	r3, [r7, #11]
 800e084:	2b01      	cmp	r3, #1
 800e086:	d10f      	bne.n	800e0a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e08e:	461a      	mov	r2, r3
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	697a      	ldr	r2, [r7, #20]
 800e09e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e0a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	371c      	adds	r7, #28
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr
 800e0b6:	bf00      	nop
 800e0b8:	4f54300a 	.word	0x4f54300a

0800e0bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	4a13      	ldr	r2, [pc, #76]	; (800e120 <USB_CoreReset+0x64>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d901      	bls.n	800e0da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	e01b      	b.n	800e112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	691b      	ldr	r3, [r3, #16]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	daf2      	bge.n	800e0c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	691b      	ldr	r3, [r3, #16]
 800e0ea:	f043 0201 	orr.w	r2, r3, #1
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	4a09      	ldr	r2, [pc, #36]	; (800e120 <USB_CoreReset+0x64>)
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d901      	bls.n	800e104 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e100:	2303      	movs	r3, #3
 800e102:	e006      	b.n	800e112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	691b      	ldr	r3, [r3, #16]
 800e108:	f003 0301 	and.w	r3, r3, #1
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d0f0      	beq.n	800e0f2 <USB_CoreReset+0x36>

  return HAL_OK;
 800e110:	2300      	movs	r3, #0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3714      	adds	r7, #20
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	00030d40 	.word	0x00030d40

0800e124 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	460b      	mov	r3, r1
 800e12e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e130:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e134:	f012 fe5a 	bl	8020dec <USBD_static_malloc>
 800e138:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d109      	bne.n	800e154 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	32b0      	adds	r2, #176	; 0xb0
 800e14a:	2100      	movs	r1, #0
 800e14c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e150:	2302      	movs	r3, #2
 800e152:	e0d4      	b.n	800e2fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e154:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800e158:	2100      	movs	r1, #0
 800e15a:	68f8      	ldr	r0, [r7, #12]
 800e15c:	f015 fc90 	bl	8023a80 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	32b0      	adds	r2, #176	; 0xb0
 800e16a:	68f9      	ldr	r1, [r7, #12]
 800e16c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	32b0      	adds	r2, #176	; 0xb0
 800e17a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	7c1b      	ldrb	r3, [r3, #16]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d138      	bne.n	800e1fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e18c:	4b5e      	ldr	r3, [pc, #376]	; (800e308 <USBD_CDC_Init+0x1e4>)
 800e18e:	7819      	ldrb	r1, [r3, #0]
 800e190:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e194:	2202      	movs	r2, #2
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f012 fd05 	bl	8020ba6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e19c:	4b5a      	ldr	r3, [pc, #360]	; (800e308 <USBD_CDC_Init+0x1e4>)
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	f003 020f 	and.w	r2, r3, #15
 800e1a4:	6879      	ldr	r1, [r7, #4]
 800e1a6:	4613      	mov	r3, r2
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	4413      	add	r3, r2
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	440b      	add	r3, r1
 800e1b0:	3324      	adds	r3, #36	; 0x24
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e1b6:	4b55      	ldr	r3, [pc, #340]	; (800e30c <USBD_CDC_Init+0x1e8>)
 800e1b8:	7819      	ldrb	r1, [r3, #0]
 800e1ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1be:	2202      	movs	r2, #2
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f012 fcf0 	bl	8020ba6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e1c6:	4b51      	ldr	r3, [pc, #324]	; (800e30c <USBD_CDC_Init+0x1e8>)
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	f003 020f 	and.w	r2, r3, #15
 800e1ce:	6879      	ldr	r1, [r7, #4]
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	009b      	lsls	r3, r3, #2
 800e1d4:	4413      	add	r3, r2
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	440b      	add	r3, r1
 800e1da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e1de:	2201      	movs	r2, #1
 800e1e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e1e2:	4b4b      	ldr	r3, [pc, #300]	; (800e310 <USBD_CDC_Init+0x1ec>)
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	f003 020f 	and.w	r2, r3, #15
 800e1ea:	6879      	ldr	r1, [r7, #4]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	440b      	add	r3, r1
 800e1f6:	3326      	adds	r3, #38	; 0x26
 800e1f8:	2210      	movs	r2, #16
 800e1fa:	801a      	strh	r2, [r3, #0]
 800e1fc:	e035      	b.n	800e26a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e1fe:	4b42      	ldr	r3, [pc, #264]	; (800e308 <USBD_CDC_Init+0x1e4>)
 800e200:	7819      	ldrb	r1, [r3, #0]
 800e202:	2340      	movs	r3, #64	; 0x40
 800e204:	2202      	movs	r2, #2
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f012 fccd 	bl	8020ba6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e20c:	4b3e      	ldr	r3, [pc, #248]	; (800e308 <USBD_CDC_Init+0x1e4>)
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	f003 020f 	and.w	r2, r3, #15
 800e214:	6879      	ldr	r1, [r7, #4]
 800e216:	4613      	mov	r3, r2
 800e218:	009b      	lsls	r3, r3, #2
 800e21a:	4413      	add	r3, r2
 800e21c:	009b      	lsls	r3, r3, #2
 800e21e:	440b      	add	r3, r1
 800e220:	3324      	adds	r3, #36	; 0x24
 800e222:	2201      	movs	r2, #1
 800e224:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e226:	4b39      	ldr	r3, [pc, #228]	; (800e30c <USBD_CDC_Init+0x1e8>)
 800e228:	7819      	ldrb	r1, [r3, #0]
 800e22a:	2340      	movs	r3, #64	; 0x40
 800e22c:	2202      	movs	r2, #2
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f012 fcb9 	bl	8020ba6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e234:	4b35      	ldr	r3, [pc, #212]	; (800e30c <USBD_CDC_Init+0x1e8>)
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	f003 020f 	and.w	r2, r3, #15
 800e23c:	6879      	ldr	r1, [r7, #4]
 800e23e:	4613      	mov	r3, r2
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	4413      	add	r3, r2
 800e244:	009b      	lsls	r3, r3, #2
 800e246:	440b      	add	r3, r1
 800e248:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e24c:	2201      	movs	r2, #1
 800e24e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e250:	4b2f      	ldr	r3, [pc, #188]	; (800e310 <USBD_CDC_Init+0x1ec>)
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	f003 020f 	and.w	r2, r3, #15
 800e258:	6879      	ldr	r1, [r7, #4]
 800e25a:	4613      	mov	r3, r2
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	4413      	add	r3, r2
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	440b      	add	r3, r1
 800e264:	3326      	adds	r3, #38	; 0x26
 800e266:	2210      	movs	r2, #16
 800e268:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e26a:	4b29      	ldr	r3, [pc, #164]	; (800e310 <USBD_CDC_Init+0x1ec>)
 800e26c:	7819      	ldrb	r1, [r3, #0]
 800e26e:	2308      	movs	r3, #8
 800e270:	2203      	movs	r2, #3
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f012 fc97 	bl	8020ba6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e278:	4b25      	ldr	r3, [pc, #148]	; (800e310 <USBD_CDC_Init+0x1ec>)
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	f003 020f 	and.w	r2, r3, #15
 800e280:	6879      	ldr	r1, [r7, #4]
 800e282:	4613      	mov	r3, r2
 800e284:	009b      	lsls	r3, r3, #2
 800e286:	4413      	add	r3, r2
 800e288:	009b      	lsls	r3, r3, #2
 800e28a:	440b      	add	r3, r1
 800e28c:	3324      	adds	r3, #36	; 0x24
 800e28e:	2201      	movs	r2, #1
 800e290:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2200      	movs	r2, #0
 800e296:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	33b0      	adds	r3, #176	; 0xb0
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	4413      	add	r3, r2
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d101      	bne.n	800e2cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e2c8:	2302      	movs	r3, #2
 800e2ca:	e018      	b.n	800e2fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	7c1b      	ldrb	r3, [r3, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d10a      	bne.n	800e2ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e2d4:	4b0d      	ldr	r3, [pc, #52]	; (800e30c <USBD_CDC_Init+0x1e8>)
 800e2d6:	7819      	ldrb	r1, [r3, #0]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e2de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f012 fd4e 	bl	8020d84 <USBD_LL_PrepareReceive>
 800e2e8:	e008      	b.n	800e2fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e2ea:	4b08      	ldr	r3, [pc, #32]	; (800e30c <USBD_CDC_Init+0x1e8>)
 800e2ec:	7819      	ldrb	r1, [r3, #0]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e2f4:	2340      	movs	r3, #64	; 0x40
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f012 fd44 	bl	8020d84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e2fc:	2300      	movs	r3, #0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	20000103 	.word	0x20000103
 800e30c:	20000104 	.word	0x20000104
 800e310:	20000105 	.word	0x20000105

0800e314 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	460b      	mov	r3, r1
 800e31e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e320:	4b3a      	ldr	r3, [pc, #232]	; (800e40c <USBD_CDC_DeInit+0xf8>)
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	4619      	mov	r1, r3
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f012 fc63 	bl	8020bf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e32c:	4b37      	ldr	r3, [pc, #220]	; (800e40c <USBD_CDC_DeInit+0xf8>)
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	f003 020f 	and.w	r2, r3, #15
 800e334:	6879      	ldr	r1, [r7, #4]
 800e336:	4613      	mov	r3, r2
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	4413      	add	r3, r2
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	440b      	add	r3, r1
 800e340:	3324      	adds	r3, #36	; 0x24
 800e342:	2200      	movs	r2, #0
 800e344:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e346:	4b32      	ldr	r3, [pc, #200]	; (800e410 <USBD_CDC_DeInit+0xfc>)
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	4619      	mov	r1, r3
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f012 fc50 	bl	8020bf2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e352:	4b2f      	ldr	r3, [pc, #188]	; (800e410 <USBD_CDC_DeInit+0xfc>)
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	f003 020f 	and.w	r2, r3, #15
 800e35a:	6879      	ldr	r1, [r7, #4]
 800e35c:	4613      	mov	r3, r2
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	4413      	add	r3, r2
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	440b      	add	r3, r1
 800e366:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e36a:	2200      	movs	r2, #0
 800e36c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e36e:	4b29      	ldr	r3, [pc, #164]	; (800e414 <USBD_CDC_DeInit+0x100>)
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	4619      	mov	r1, r3
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f012 fc3c 	bl	8020bf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e37a:	4b26      	ldr	r3, [pc, #152]	; (800e414 <USBD_CDC_DeInit+0x100>)
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	f003 020f 	and.w	r2, r3, #15
 800e382:	6879      	ldr	r1, [r7, #4]
 800e384:	4613      	mov	r3, r2
 800e386:	009b      	lsls	r3, r3, #2
 800e388:	4413      	add	r3, r2
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	440b      	add	r3, r1
 800e38e:	3324      	adds	r3, #36	; 0x24
 800e390:	2200      	movs	r2, #0
 800e392:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e394:	4b1f      	ldr	r3, [pc, #124]	; (800e414 <USBD_CDC_DeInit+0x100>)
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	f003 020f 	and.w	r2, r3, #15
 800e39c:	6879      	ldr	r1, [r7, #4]
 800e39e:	4613      	mov	r3, r2
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	4413      	add	r3, r2
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	440b      	add	r3, r1
 800e3a8:	3326      	adds	r3, #38	; 0x26
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	32b0      	adds	r2, #176	; 0xb0
 800e3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d01f      	beq.n	800e400 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	33b0      	adds	r3, #176	; 0xb0
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	4413      	add	r3, r2
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	32b0      	adds	r2, #176	; 0xb0
 800e3de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f012 fd10 	bl	8020e08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	32b0      	adds	r2, #176	; 0xb0
 800e3f2:	2100      	movs	r1, #0
 800e3f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e400:	2300      	movs	r3, #0
}
 800e402:	4618      	mov	r0, r3
 800e404:	3708      	adds	r7, #8
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	20000103 	.word	0x20000103
 800e410:	20000104 	.word	0x20000104
 800e414:	20000105 	.word	0x20000105

0800e418 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b086      	sub	sp, #24
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	32b0      	adds	r2, #176	; 0xb0
 800e42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e430:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e432:	2300      	movs	r3, #0
 800e434:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e436:	2300      	movs	r3, #0
 800e438:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e43a:	2300      	movs	r3, #0
 800e43c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d101      	bne.n	800e448 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e444:	2303      	movs	r3, #3
 800e446:	e0bf      	b.n	800e5c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e450:	2b00      	cmp	r3, #0
 800e452:	d050      	beq.n	800e4f6 <USBD_CDC_Setup+0xde>
 800e454:	2b20      	cmp	r3, #32
 800e456:	f040 80af 	bne.w	800e5b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	88db      	ldrh	r3, [r3, #6]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d03a      	beq.n	800e4d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	b25b      	sxtb	r3, r3
 800e468:	2b00      	cmp	r3, #0
 800e46a:	da1b      	bge.n	800e4a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	33b0      	adds	r3, #176	; 0xb0
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	4413      	add	r3, r2
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	689b      	ldr	r3, [r3, #8]
 800e47e:	683a      	ldr	r2, [r7, #0]
 800e480:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e482:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e484:	683a      	ldr	r2, [r7, #0]
 800e486:	88d2      	ldrh	r2, [r2, #6]
 800e488:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	88db      	ldrh	r3, [r3, #6]
 800e48e:	2b07      	cmp	r3, #7
 800e490:	bf28      	it	cs
 800e492:	2307      	movcs	r3, #7
 800e494:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	89fa      	ldrh	r2, [r7, #14]
 800e49a:	4619      	mov	r1, r3
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f001 fd89 	bl	800ffb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e4a2:	e090      	b.n	800e5c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	785a      	ldrb	r2, [r3, #1]
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	88db      	ldrh	r3, [r3, #6]
 800e4b2:	2b3f      	cmp	r3, #63	; 0x3f
 800e4b4:	d803      	bhi.n	800e4be <USBD_CDC_Setup+0xa6>
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	88db      	ldrh	r3, [r3, #6]
 800e4ba:	b2da      	uxtb	r2, r3
 800e4bc:	e000      	b.n	800e4c0 <USBD_CDC_Setup+0xa8>
 800e4be:	2240      	movs	r2, #64	; 0x40
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e4c6:	6939      	ldr	r1, [r7, #16]
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f001 fd9b 	bl	801000c <USBD_CtlPrepareRx>
      break;
 800e4d6:	e076      	b.n	800e5c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	33b0      	adds	r3, #176	; 0xb0
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	4413      	add	r3, r2
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	689b      	ldr	r3, [r3, #8]
 800e4ea:	683a      	ldr	r2, [r7, #0]
 800e4ec:	7850      	ldrb	r0, [r2, #1]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	6839      	ldr	r1, [r7, #0]
 800e4f2:	4798      	blx	r3
      break;
 800e4f4:	e067      	b.n	800e5c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	785b      	ldrb	r3, [r3, #1]
 800e4fa:	2b0b      	cmp	r3, #11
 800e4fc:	d851      	bhi.n	800e5a2 <USBD_CDC_Setup+0x18a>
 800e4fe:	a201      	add	r2, pc, #4	; (adr r2, 800e504 <USBD_CDC_Setup+0xec>)
 800e500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e504:	0800e535 	.word	0x0800e535
 800e508:	0800e5b1 	.word	0x0800e5b1
 800e50c:	0800e5a3 	.word	0x0800e5a3
 800e510:	0800e5a3 	.word	0x0800e5a3
 800e514:	0800e5a3 	.word	0x0800e5a3
 800e518:	0800e5a3 	.word	0x0800e5a3
 800e51c:	0800e5a3 	.word	0x0800e5a3
 800e520:	0800e5a3 	.word	0x0800e5a3
 800e524:	0800e5a3 	.word	0x0800e5a3
 800e528:	0800e5a3 	.word	0x0800e5a3
 800e52c:	0800e55f 	.word	0x0800e55f
 800e530:	0800e589 	.word	0x0800e589
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	2b03      	cmp	r3, #3
 800e53e:	d107      	bne.n	800e550 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e540:	f107 030a 	add.w	r3, r7, #10
 800e544:	2202      	movs	r2, #2
 800e546:	4619      	mov	r1, r3
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f001 fd33 	bl	800ffb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e54e:	e032      	b.n	800e5b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e550:	6839      	ldr	r1, [r7, #0]
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f001 fcbd 	bl	800fed2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e558:	2303      	movs	r3, #3
 800e55a:	75fb      	strb	r3, [r7, #23]
          break;
 800e55c:	e02b      	b.n	800e5b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e564:	b2db      	uxtb	r3, r3
 800e566:	2b03      	cmp	r3, #3
 800e568:	d107      	bne.n	800e57a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e56a:	f107 030d 	add.w	r3, r7, #13
 800e56e:	2201      	movs	r2, #1
 800e570:	4619      	mov	r1, r3
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f001 fd1e 	bl	800ffb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e578:	e01d      	b.n	800e5b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e57a:	6839      	ldr	r1, [r7, #0]
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f001 fca8 	bl	800fed2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e582:	2303      	movs	r3, #3
 800e584:	75fb      	strb	r3, [r7, #23]
          break;
 800e586:	e016      	b.n	800e5b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	2b03      	cmp	r3, #3
 800e592:	d00f      	beq.n	800e5b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e594:	6839      	ldr	r1, [r7, #0]
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f001 fc9b 	bl	800fed2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e59c:	2303      	movs	r3, #3
 800e59e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e5a0:	e008      	b.n	800e5b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e5a2:	6839      	ldr	r1, [r7, #0]
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f001 fc94 	bl	800fed2 <USBD_CtlError>
          ret = USBD_FAIL;
 800e5aa:	2303      	movs	r3, #3
 800e5ac:	75fb      	strb	r3, [r7, #23]
          break;
 800e5ae:	e002      	b.n	800e5b6 <USBD_CDC_Setup+0x19e>
          break;
 800e5b0:	bf00      	nop
 800e5b2:	e008      	b.n	800e5c6 <USBD_CDC_Setup+0x1ae>
          break;
 800e5b4:	bf00      	nop
      }
      break;
 800e5b6:	e006      	b.n	800e5c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e5b8:	6839      	ldr	r1, [r7, #0]
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f001 fc89 	bl	800fed2 <USBD_CtlError>
      ret = USBD_FAIL;
 800e5c0:	2303      	movs	r3, #3
 800e5c2:	75fb      	strb	r3, [r7, #23]
      break;
 800e5c4:	bf00      	nop
  }

  return (uint8_t)ret;
 800e5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3718      	adds	r7, #24
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	460b      	mov	r3, r1
 800e5da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	32b0      	adds	r2, #176	; 0xb0
 800e5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d101      	bne.n	800e5fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e5f6:	2303      	movs	r3, #3
 800e5f8:	e065      	b.n	800e6c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	32b0      	adds	r2, #176	; 0xb0
 800e604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e608:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e60a:	78fb      	ldrb	r3, [r7, #3]
 800e60c:	f003 020f 	and.w	r2, r3, #15
 800e610:	6879      	ldr	r1, [r7, #4]
 800e612:	4613      	mov	r3, r2
 800e614:	009b      	lsls	r3, r3, #2
 800e616:	4413      	add	r3, r2
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	440b      	add	r3, r1
 800e61c:	3318      	adds	r3, #24
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d02f      	beq.n	800e684 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e624:	78fb      	ldrb	r3, [r7, #3]
 800e626:	f003 020f 	and.w	r2, r3, #15
 800e62a:	6879      	ldr	r1, [r7, #4]
 800e62c:	4613      	mov	r3, r2
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	4413      	add	r3, r2
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	440b      	add	r3, r1
 800e636:	3318      	adds	r3, #24
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	78fb      	ldrb	r3, [r7, #3]
 800e63c:	f003 010f 	and.w	r1, r3, #15
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	460b      	mov	r3, r1
 800e644:	00db      	lsls	r3, r3, #3
 800e646:	440b      	add	r3, r1
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	4403      	add	r3, r0
 800e64c:	3348      	adds	r3, #72	; 0x48
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	fbb2 f1f3 	udiv	r1, r2, r3
 800e654:	fb01 f303 	mul.w	r3, r1, r3
 800e658:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d112      	bne.n	800e684 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e65e:	78fb      	ldrb	r3, [r7, #3]
 800e660:	f003 020f 	and.w	r2, r3, #15
 800e664:	6879      	ldr	r1, [r7, #4]
 800e666:	4613      	mov	r3, r2
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	4413      	add	r3, r2
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	440b      	add	r3, r1
 800e670:	3318      	adds	r3, #24
 800e672:	2200      	movs	r2, #0
 800e674:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e676:	78f9      	ldrb	r1, [r7, #3]
 800e678:	2300      	movs	r3, #0
 800e67a:	2200      	movs	r2, #0
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f012 fb60 	bl	8020d42 <USBD_LL_Transmit>
 800e682:	e01f      	b.n	800e6c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	2200      	movs	r2, #0
 800e688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	33b0      	adds	r3, #176	; 0xb0
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	4413      	add	r3, r2
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	691b      	ldr	r3, [r3, #16]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d010      	beq.n	800e6c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	33b0      	adds	r3, #176	; 0xb0
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	4413      	add	r3, r2
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	691b      	ldr	r3, [r3, #16]
 800e6b4:	68ba      	ldr	r2, [r7, #8]
 800e6b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e6c0:	78fa      	ldrb	r2, [r7, #3]
 800e6c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b084      	sub	sp, #16
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	32b0      	adds	r2, #176	; 0xb0
 800e6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	32b0      	adds	r2, #176	; 0xb0
 800e6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d101      	bne.n	800e700 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e6fc:	2303      	movs	r3, #3
 800e6fe:	e01a      	b.n	800e736 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e700:	78fb      	ldrb	r3, [r7, #3]
 800e702:	4619      	mov	r1, r3
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f012 fb5e 	bl	8020dc6 <USBD_LL_GetRxDataSize>
 800e70a:	4602      	mov	r2, r0
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	33b0      	adds	r3, #176	; 0xb0
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4413      	add	r3, r2
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	68db      	ldr	r3, [r3, #12]
 800e724:	68fa      	ldr	r2, [r7, #12]
 800e726:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e72a:	68fa      	ldr	r2, [r7, #12]
 800e72c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e730:	4611      	mov	r1, r2
 800e732:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e734:	2300      	movs	r3, #0
}
 800e736:	4618      	mov	r0, r3
 800e738:	3710      	adds	r7, #16
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}

0800e73e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e73e:	b580      	push	{r7, lr}
 800e740:	b084      	sub	sp, #16
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	32b0      	adds	r2, #176	; 0xb0
 800e750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e754:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d101      	bne.n	800e760 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e75c:	2303      	movs	r3, #3
 800e75e:	e025      	b.n	800e7ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	33b0      	adds	r3, #176	; 0xb0
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	4413      	add	r3, r2
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d01a      	beq.n	800e7aa <USBD_CDC_EP0_RxReady+0x6c>
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e77a:	2bff      	cmp	r3, #255	; 0xff
 800e77c:	d015      	beq.n	800e7aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	33b0      	adds	r3, #176	; 0xb0
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	4413      	add	r3, r2
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e796:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e798:	68fa      	ldr	r2, [r7, #12]
 800e79a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e79e:	b292      	uxth	r2, r2
 800e7a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	22ff      	movs	r2, #255	; 0xff
 800e7a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3710      	adds	r7, #16
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b086      	sub	sp, #24
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e7bc:	2182      	movs	r1, #130	; 0x82
 800e7be:	4818      	ldr	r0, [pc, #96]	; (800e820 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e7c0:	f000 fd4f 	bl	800f262 <USBD_GetEpDesc>
 800e7c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e7c6:	2101      	movs	r1, #1
 800e7c8:	4815      	ldr	r0, [pc, #84]	; (800e820 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e7ca:	f000 fd4a 	bl	800f262 <USBD_GetEpDesc>
 800e7ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e7d0:	2181      	movs	r1, #129	; 0x81
 800e7d2:	4813      	ldr	r0, [pc, #76]	; (800e820 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e7d4:	f000 fd45 	bl	800f262 <USBD_GetEpDesc>
 800e7d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d002      	beq.n	800e7e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	2210      	movs	r2, #16
 800e7e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d006      	beq.n	800e7fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7f4:	711a      	strb	r2, [r3, #4]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d006      	beq.n	800e80e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2200      	movs	r2, #0
 800e804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e808:	711a      	strb	r2, [r3, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2243      	movs	r2, #67	; 0x43
 800e812:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e814:	4b02      	ldr	r3, [pc, #8]	; (800e820 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e816:	4618      	mov	r0, r3
 800e818:	3718      	adds	r7, #24
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	200000c0 	.word	0x200000c0

0800e824 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b086      	sub	sp, #24
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e82c:	2182      	movs	r1, #130	; 0x82
 800e82e:	4818      	ldr	r0, [pc, #96]	; (800e890 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e830:	f000 fd17 	bl	800f262 <USBD_GetEpDesc>
 800e834:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e836:	2101      	movs	r1, #1
 800e838:	4815      	ldr	r0, [pc, #84]	; (800e890 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e83a:	f000 fd12 	bl	800f262 <USBD_GetEpDesc>
 800e83e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e840:	2181      	movs	r1, #129	; 0x81
 800e842:	4813      	ldr	r0, [pc, #76]	; (800e890 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e844:	f000 fd0d 	bl	800f262 <USBD_GetEpDesc>
 800e848:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d002      	beq.n	800e856 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	2210      	movs	r2, #16
 800e854:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d006      	beq.n	800e86a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	2200      	movs	r2, #0
 800e860:	711a      	strb	r2, [r3, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	f042 0202 	orr.w	r2, r2, #2
 800e868:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d006      	beq.n	800e87e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2200      	movs	r2, #0
 800e874:	711a      	strb	r2, [r3, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	f042 0202 	orr.w	r2, r2, #2
 800e87c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2243      	movs	r2, #67	; 0x43
 800e882:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e884:	4b02      	ldr	r3, [pc, #8]	; (800e890 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e886:	4618      	mov	r0, r3
 800e888:	3718      	adds	r7, #24
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	200000c0 	.word	0x200000c0

0800e894 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e89c:	2182      	movs	r1, #130	; 0x82
 800e89e:	4818      	ldr	r0, [pc, #96]	; (800e900 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e8a0:	f000 fcdf 	bl	800f262 <USBD_GetEpDesc>
 800e8a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e8a6:	2101      	movs	r1, #1
 800e8a8:	4815      	ldr	r0, [pc, #84]	; (800e900 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e8aa:	f000 fcda 	bl	800f262 <USBD_GetEpDesc>
 800e8ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e8b0:	2181      	movs	r1, #129	; 0x81
 800e8b2:	4813      	ldr	r0, [pc, #76]	; (800e900 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e8b4:	f000 fcd5 	bl	800f262 <USBD_GetEpDesc>
 800e8b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d002      	beq.n	800e8c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	2210      	movs	r2, #16
 800e8c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d006      	beq.n	800e8da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8d4:	711a      	strb	r2, [r3, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d006      	beq.n	800e8ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8e8:	711a      	strb	r2, [r3, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2243      	movs	r2, #67	; 0x43
 800e8f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e8f4:	4b02      	ldr	r3, [pc, #8]	; (800e900 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3718      	adds	r7, #24
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	200000c0 	.word	0x200000c0

0800e904 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	220a      	movs	r2, #10
 800e910:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e912:	4b03      	ldr	r3, [pc, #12]	; (800e920 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e914:	4618      	mov	r0, r3
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr
 800e920:	2000007c 	.word	0x2000007c

0800e924 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d101      	bne.n	800e938 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e934:	2303      	movs	r3, #3
 800e936:	e009      	b.n	800e94c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	33b0      	adds	r3, #176	; 0xb0
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	4413      	add	r3, r2
 800e946:	683a      	ldr	r2, [r7, #0]
 800e948:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e94a:	2300      	movs	r3, #0
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e958:	b480      	push	{r7}
 800e95a:	b087      	sub	sp, #28
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	32b0      	adds	r2, #176	; 0xb0
 800e96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e972:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d101      	bne.n	800e97e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e97a:	2303      	movs	r3, #3
 800e97c:	e008      	b.n	800e990 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	68ba      	ldr	r2, [r7, #8]
 800e982:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e98e:	2300      	movs	r3, #0
}
 800e990:	4618      	mov	r0, r3
 800e992:	371c      	adds	r7, #28
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b085      	sub	sp, #20
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	32b0      	adds	r2, #176	; 0xb0
 800e9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d101      	bne.n	800e9c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e9bc:	2303      	movs	r3, #3
 800e9be:	e004      	b.n	800e9ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	683a      	ldr	r2, [r7, #0]
 800e9c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3714      	adds	r7, #20
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr
	...

0800e9d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	32b0      	adds	r2, #176	; 0xb0
 800e9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	32b0      	adds	r2, #176	; 0xb0
 800e9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ea06:	2303      	movs	r3, #3
 800ea08:	e025      	b.n	800ea56 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d11f      	bne.n	800ea54 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	2201      	movs	r2, #1
 800ea18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ea1c:	4b10      	ldr	r3, [pc, #64]	; (800ea60 <USBD_CDC_TransmitPacket+0x88>)
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	f003 020f 	and.w	r2, r3, #15
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	4413      	add	r3, r2
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	4403      	add	r3, r0
 800ea36:	3318      	adds	r3, #24
 800ea38:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ea3a:	4b09      	ldr	r3, [pc, #36]	; (800ea60 <USBD_CDC_TransmitPacket+0x88>)
 800ea3c:	7819      	ldrb	r1, [r3, #0]
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f012 f979 	bl	8020d42 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ea50:	2300      	movs	r3, #0
 800ea52:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ea54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3710      	adds	r7, #16
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	20000103 	.word	0x20000103

0800ea64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	32b0      	adds	r2, #176	; 0xb0
 800ea76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea7a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	32b0      	adds	r2, #176	; 0xb0
 800ea86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d101      	bne.n	800ea92 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ea8e:	2303      	movs	r3, #3
 800ea90:	e018      	b.n	800eac4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	7c1b      	ldrb	r3, [r3, #16]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d10a      	bne.n	800eab0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ea9a:	4b0c      	ldr	r3, [pc, #48]	; (800eacc <USBD_CDC_ReceivePacket+0x68>)
 800ea9c:	7819      	ldrb	r1, [r3, #0]
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eaa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f012 f96b 	bl	8020d84 <USBD_LL_PrepareReceive>
 800eaae:	e008      	b.n	800eac2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eab0:	4b06      	ldr	r3, [pc, #24]	; (800eacc <USBD_CDC_ReceivePacket+0x68>)
 800eab2:	7819      	ldrb	r1, [r3, #0]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eaba:	2340      	movs	r3, #64	; 0x40
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f012 f961 	bl	8020d84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eac2:	2300      	movs	r3, #0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3710      	adds	r7, #16
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	20000104 	.word	0x20000104

0800ead0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	4613      	mov	r3, r2
 800eadc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d101      	bne.n	800eae8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eae4:	2303      	movs	r3, #3
 800eae6:	e01f      	b.n	800eb28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2200      	movs	r2, #0
 800eafc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d003      	beq.n	800eb0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2201      	movs	r2, #1
 800eb12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	79fa      	ldrb	r2, [r7, #7]
 800eb1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eb1c:	68f8      	ldr	r0, [r7, #12]
 800eb1e:	f011 ffdb 	bl	8020ad8 <USBD_LL_Init>
 800eb22:	4603      	mov	r3, r0
 800eb24:	75fb      	strb	r3, [r7, #23]

  return ret;
 800eb26:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3718      	adds	r7, #24
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d101      	bne.n	800eb48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eb44:	2303      	movs	r3, #3
 800eb46:	e025      	b.n	800eb94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	683a      	ldr	r2, [r7, #0]
 800eb4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	32ae      	adds	r2, #174	; 0xae
 800eb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00f      	beq.n	800eb84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	32ae      	adds	r2, #174	; 0xae
 800eb6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb74:	f107 020e 	add.w	r2, r7, #14
 800eb78:	4610      	mov	r0, r2
 800eb7a:	4798      	blx	r3
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800eb8a:	1c5a      	adds	r2, r3, #1
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800eb92:	2300      	movs	r3, #0
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3710      	adds	r7, #16
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f011 ffe3 	bl	8020b70 <USBD_LL_Start>
 800ebaa:	4603      	mov	r3, r0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ebbc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	370c      	adds	r7, #12
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr

0800ebca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b084      	sub	sp, #16
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
 800ebd2:	460b      	mov	r3, r1
 800ebd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d009      	beq.n	800ebf8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	78fa      	ldrb	r2, [r7, #3]
 800ebee:	4611      	mov	r1, r2
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	4798      	blx	r3
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ebf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3710      	adds	r7, #16
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec02:	b580      	push	{r7, lr}
 800ec04:	b084      	sub	sp, #16
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec18:	685b      	ldr	r3, [r3, #4]
 800ec1a:	78fa      	ldrb	r2, [r7, #3]
 800ec1c:	4611      	mov	r1, r2
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	4798      	blx	r3
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d001      	beq.n	800ec2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ec28:	2303      	movs	r3, #3
 800ec2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ec2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3710      	adds	r7, #16
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}

0800ec36 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b084      	sub	sp, #16
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
 800ec3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec46:	6839      	ldr	r1, [r7, #0]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f001 f908 	bl	800fe5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2201      	movs	r2, #1
 800ec52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ec6a:	f003 031f 	and.w	r3, r3, #31
 800ec6e:	2b02      	cmp	r3, #2
 800ec70:	d01a      	beq.n	800eca8 <USBD_LL_SetupStage+0x72>
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	d822      	bhi.n	800ecbc <USBD_LL_SetupStage+0x86>
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d002      	beq.n	800ec80 <USBD_LL_SetupStage+0x4a>
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d00a      	beq.n	800ec94 <USBD_LL_SetupStage+0x5e>
 800ec7e:	e01d      	b.n	800ecbc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec86:	4619      	mov	r1, r3
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f000 fb5f 	bl	800f34c <USBD_StdDevReq>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	73fb      	strb	r3, [r7, #15]
      break;
 800ec92:	e020      	b.n	800ecd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f000 fbc7 	bl	800f430 <USBD_StdItfReq>
 800eca2:	4603      	mov	r3, r0
 800eca4:	73fb      	strb	r3, [r7, #15]
      break;
 800eca6:	e016      	b.n	800ecd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecae:	4619      	mov	r1, r3
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 fc29 	bl	800f508 <USBD_StdEPReq>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	73fb      	strb	r3, [r7, #15]
      break;
 800ecba:	e00c      	b.n	800ecd6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ecc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ecc6:	b2db      	uxtb	r3, r3
 800ecc8:	4619      	mov	r1, r3
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f011 ffb0 	bl	8020c30 <USBD_LL_StallEP>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	73fb      	strb	r3, [r7, #15]
      break;
 800ecd4:	bf00      	nop
  }

  return ret;
 800ecd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3710      	adds	r7, #16
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b086      	sub	sp, #24
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	460b      	mov	r3, r1
 800ecea:	607a      	str	r2, [r7, #4]
 800ecec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ecf2:	7afb      	ldrb	r3, [r7, #11]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d16e      	bne.n	800edd6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ecfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	f040 8098 	bne.w	800ee3c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	689a      	ldr	r2, [r3, #8]
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d913      	bls.n	800ed40 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	689a      	ldr	r2, [r3, #8]
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	1ad2      	subs	r2, r2, r3
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	68da      	ldr	r2, [r3, #12]
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	689b      	ldr	r3, [r3, #8]
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	bf28      	it	cs
 800ed32:	4613      	movcs	r3, r2
 800ed34:	461a      	mov	r2, r3
 800ed36:	6879      	ldr	r1, [r7, #4]
 800ed38:	68f8      	ldr	r0, [r7, #12]
 800ed3a:	f001 f984 	bl	8010046 <USBD_CtlContinueRx>
 800ed3e:	e07d      	b.n	800ee3c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed46:	f003 031f 	and.w	r3, r3, #31
 800ed4a:	2b02      	cmp	r3, #2
 800ed4c:	d014      	beq.n	800ed78 <USBD_LL_DataOutStage+0x98>
 800ed4e:	2b02      	cmp	r3, #2
 800ed50:	d81d      	bhi.n	800ed8e <USBD_LL_DataOutStage+0xae>
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d002      	beq.n	800ed5c <USBD_LL_DataOutStage+0x7c>
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d003      	beq.n	800ed62 <USBD_LL_DataOutStage+0x82>
 800ed5a:	e018      	b.n	800ed8e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	75bb      	strb	r3, [r7, #22]
            break;
 800ed60:	e018      	b.n	800ed94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	4619      	mov	r1, r3
 800ed6c:	68f8      	ldr	r0, [r7, #12]
 800ed6e:	f000 fa5e 	bl	800f22e <USBD_CoreFindIF>
 800ed72:	4603      	mov	r3, r0
 800ed74:	75bb      	strb	r3, [r7, #22]
            break;
 800ed76:	e00d      	b.n	800ed94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	4619      	mov	r1, r3
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f000 fa60 	bl	800f248 <USBD_CoreFindEP>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	75bb      	strb	r3, [r7, #22]
            break;
 800ed8c:	e002      	b.n	800ed94 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	75bb      	strb	r3, [r7, #22]
            break;
 800ed92:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ed94:	7dbb      	ldrb	r3, [r7, #22]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d119      	bne.n	800edce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	2b03      	cmp	r3, #3
 800eda4:	d113      	bne.n	800edce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800eda6:	7dba      	ldrb	r2, [r7, #22]
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	32ae      	adds	r2, #174	; 0xae
 800edac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edb0:	691b      	ldr	r3, [r3, #16]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d00b      	beq.n	800edce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800edb6:	7dba      	ldrb	r2, [r7, #22]
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800edbe:	7dba      	ldrb	r2, [r7, #22]
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	32ae      	adds	r2, #174	; 0xae
 800edc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edc8:	691b      	ldr	r3, [r3, #16]
 800edca:	68f8      	ldr	r0, [r7, #12]
 800edcc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	f001 f94a 	bl	8010068 <USBD_CtlSendStatus>
 800edd4:	e032      	b.n	800ee3c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800edd6:	7afb      	ldrb	r3, [r7, #11]
 800edd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	4619      	mov	r1, r3
 800ede0:	68f8      	ldr	r0, [r7, #12]
 800ede2:	f000 fa31 	bl	800f248 <USBD_CoreFindEP>
 800ede6:	4603      	mov	r3, r0
 800ede8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800edea:	7dbb      	ldrb	r3, [r7, #22]
 800edec:	2bff      	cmp	r3, #255	; 0xff
 800edee:	d025      	beq.n	800ee3c <USBD_LL_DataOutStage+0x15c>
 800edf0:	7dbb      	ldrb	r3, [r7, #22]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d122      	bne.n	800ee3c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	2b03      	cmp	r3, #3
 800ee00:	d117      	bne.n	800ee32 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ee02:	7dba      	ldrb	r2, [r7, #22]
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	32ae      	adds	r2, #174	; 0xae
 800ee08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee0c:	699b      	ldr	r3, [r3, #24]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d00f      	beq.n	800ee32 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ee12:	7dba      	ldrb	r2, [r7, #22]
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ee1a:	7dba      	ldrb	r2, [r7, #22]
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	32ae      	adds	r2, #174	; 0xae
 800ee20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee24:	699b      	ldr	r3, [r3, #24]
 800ee26:	7afa      	ldrb	r2, [r7, #11]
 800ee28:	4611      	mov	r1, r2
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	4798      	blx	r3
 800ee2e:	4603      	mov	r3, r0
 800ee30:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ee32:	7dfb      	ldrb	r3, [r7, #23]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d001      	beq.n	800ee3c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ee38:	7dfb      	ldrb	r3, [r7, #23]
 800ee3a:	e000      	b.n	800ee3e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3718      	adds	r7, #24
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ee46:	b580      	push	{r7, lr}
 800ee48:	b086      	sub	sp, #24
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	60f8      	str	r0, [r7, #12]
 800ee4e:	460b      	mov	r3, r1
 800ee50:	607a      	str	r2, [r7, #4]
 800ee52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ee54:	7afb      	ldrb	r3, [r7, #11]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d16f      	bne.n	800ef3a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	3314      	adds	r3, #20
 800ee5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ee66:	2b02      	cmp	r3, #2
 800ee68:	d15a      	bne.n	800ef20 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	689a      	ldr	r2, [r3, #8]
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	68db      	ldr	r3, [r3, #12]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d914      	bls.n	800eea0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	689a      	ldr	r2, [r3, #8]
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	1ad2      	subs	r2, r2, r3
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	461a      	mov	r2, r3
 800ee8a:	6879      	ldr	r1, [r7, #4]
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	f001 f8ac 	bl	800ffea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee92:	2300      	movs	r3, #0
 800ee94:	2200      	movs	r2, #0
 800ee96:	2100      	movs	r1, #0
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f011 ff73 	bl	8020d84 <USBD_LL_PrepareReceive>
 800ee9e:	e03f      	b.n	800ef20 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	68da      	ldr	r2, [r3, #12]
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d11c      	bne.n	800eee6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	685a      	ldr	r2, [r3, #4]
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d316      	bcc.n	800eee6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	685a      	ldr	r2, [r3, #4]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d20f      	bcs.n	800eee6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eec6:	2200      	movs	r2, #0
 800eec8:	2100      	movs	r1, #0
 800eeca:	68f8      	ldr	r0, [r7, #12]
 800eecc:	f001 f88d 	bl	800ffea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2200      	movs	r2, #0
 800eed4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eed8:	2300      	movs	r3, #0
 800eeda:	2200      	movs	r2, #0
 800eedc:	2100      	movs	r1, #0
 800eede:	68f8      	ldr	r0, [r7, #12]
 800eee0:	f011 ff50 	bl	8020d84 <USBD_LL_PrepareReceive>
 800eee4:	e01c      	b.n	800ef20 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eeec:	b2db      	uxtb	r3, r3
 800eeee:	2b03      	cmp	r3, #3
 800eef0:	d10f      	bne.n	800ef12 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d009      	beq.n	800ef12 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2200      	movs	r2, #0
 800ef02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef12:	2180      	movs	r1, #128	; 0x80
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f011 fe8b 	bl	8020c30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ef1a:	68f8      	ldr	r0, [r7, #12]
 800ef1c:	f001 f8b7 	bl	801008e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d03a      	beq.n	800efa0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f7ff fe42 	bl	800ebb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2200      	movs	r2, #0
 800ef34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ef38:	e032      	b.n	800efa0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ef3a:	7afb      	ldrb	r3, [r7, #11]
 800ef3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	4619      	mov	r1, r3
 800ef44:	68f8      	ldr	r0, [r7, #12]
 800ef46:	f000 f97f 	bl	800f248 <USBD_CoreFindEP>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ef4e:	7dfb      	ldrb	r3, [r7, #23]
 800ef50:	2bff      	cmp	r3, #255	; 0xff
 800ef52:	d025      	beq.n	800efa0 <USBD_LL_DataInStage+0x15a>
 800ef54:	7dfb      	ldrb	r3, [r7, #23]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d122      	bne.n	800efa0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	2b03      	cmp	r3, #3
 800ef64:	d11c      	bne.n	800efa0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ef66:	7dfa      	ldrb	r2, [r7, #23]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	32ae      	adds	r2, #174	; 0xae
 800ef6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef70:	695b      	ldr	r3, [r3, #20]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d014      	beq.n	800efa0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ef76:	7dfa      	ldrb	r2, [r7, #23]
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ef7e:	7dfa      	ldrb	r2, [r7, #23]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	32ae      	adds	r2, #174	; 0xae
 800ef84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef88:	695b      	ldr	r3, [r3, #20]
 800ef8a:	7afa      	ldrb	r2, [r7, #11]
 800ef8c:	4611      	mov	r1, r2
 800ef8e:	68f8      	ldr	r0, [r7, #12]
 800ef90:	4798      	blx	r3
 800ef92:	4603      	mov	r3, r0
 800ef94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ef96:	7dbb      	ldrb	r3, [r7, #22]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d001      	beq.n	800efa0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ef9c:	7dbb      	ldrb	r3, [r7, #22]
 800ef9e:	e000      	b.n	800efa2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800efa0:	2300      	movs	r3, #0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3718      	adds	r7, #24
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800efaa:	b580      	push	{r7, lr}
 800efac:	b084      	sub	sp, #16
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800efb2:	2300      	movs	r3, #0
 800efb4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2201      	movs	r2, #1
 800efba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2200      	movs	r2, #0
 800efc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d014      	beq.n	800f010 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00e      	beq.n	800f010 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	6852      	ldr	r2, [r2, #4]
 800effe:	b2d2      	uxtb	r2, r2
 800f000:	4611      	mov	r1, r2
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	4798      	blx	r3
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d001      	beq.n	800f010 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f00c:	2303      	movs	r3, #3
 800f00e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f010:	2340      	movs	r3, #64	; 0x40
 800f012:	2200      	movs	r2, #0
 800f014:	2100      	movs	r1, #0
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f011 fdc5 	bl	8020ba6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2201      	movs	r2, #1
 800f020:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2240      	movs	r2, #64	; 0x40
 800f028:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f02c:	2340      	movs	r3, #64	; 0x40
 800f02e:	2200      	movs	r2, #0
 800f030:	2180      	movs	r1, #128	; 0x80
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f011 fdb7 	bl	8020ba6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2201      	movs	r2, #1
 800f03c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2240      	movs	r2, #64	; 0x40
 800f042:	621a      	str	r2, [r3, #32]

  return ret;
 800f044:	7bfb      	ldrb	r3, [r7, #15]
}
 800f046:	4618      	mov	r0, r3
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}

0800f04e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f04e:	b480      	push	{r7}
 800f050:	b083      	sub	sp, #12
 800f052:	af00      	add	r7, sp, #0
 800f054:	6078      	str	r0, [r7, #4]
 800f056:	460b      	mov	r3, r1
 800f058:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	78fa      	ldrb	r2, [r7, #3]
 800f05e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	370c      	adds	r7, #12
 800f066:	46bd      	mov	sp, r7
 800f068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06c:	4770      	bx	lr

0800f06e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f06e:	b480      	push	{r7}
 800f070:	b083      	sub	sp, #12
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f07c:	b2da      	uxtb	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2204      	movs	r2, #4
 800f088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f08c:	2300      	movs	r3, #0
}
 800f08e:	4618      	mov	r0, r3
 800f090:	370c      	adds	r7, #12
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr

0800f09a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f09a:	b480      	push	{r7}
 800f09c:	b083      	sub	sp, #12
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	2b04      	cmp	r3, #4
 800f0ac:	d106      	bne.n	800f0bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f0b4:	b2da      	uxtb	r2, r3
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f0bc:	2300      	movs	r3, #0
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	370c      	adds	r7, #12
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr

0800f0ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b082      	sub	sp, #8
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	2b03      	cmp	r3, #3
 800f0dc:	d110      	bne.n	800f100 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d00b      	beq.n	800f100 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0ee:	69db      	ldr	r3, [r3, #28]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d005      	beq.n	800f100 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0fa:	69db      	ldr	r3, [r3, #28]
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	3708      	adds	r7, #8
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}

0800f10a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f10a:	b580      	push	{r7, lr}
 800f10c:	b082      	sub	sp, #8
 800f10e:	af00      	add	r7, sp, #0
 800f110:	6078      	str	r0, [r7, #4]
 800f112:	460b      	mov	r3, r1
 800f114:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	32ae      	adds	r2, #174	; 0xae
 800f120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d101      	bne.n	800f12c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f128:	2303      	movs	r3, #3
 800f12a:	e01c      	b.n	800f166 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f132:	b2db      	uxtb	r3, r3
 800f134:	2b03      	cmp	r3, #3
 800f136:	d115      	bne.n	800f164 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	32ae      	adds	r2, #174	; 0xae
 800f142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f146:	6a1b      	ldr	r3, [r3, #32]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d00b      	beq.n	800f164 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	32ae      	adds	r2, #174	; 0xae
 800f156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f15a:	6a1b      	ldr	r3, [r3, #32]
 800f15c:	78fa      	ldrb	r2, [r7, #3]
 800f15e:	4611      	mov	r1, r2
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f164:	2300      	movs	r3, #0
}
 800f166:	4618      	mov	r0, r3
 800f168:	3708      	adds	r7, #8
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b082      	sub	sp, #8
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
 800f176:	460b      	mov	r3, r1
 800f178:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	32ae      	adds	r2, #174	; 0xae
 800f184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d101      	bne.n	800f190 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f18c:	2303      	movs	r3, #3
 800f18e:	e01c      	b.n	800f1ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f196:	b2db      	uxtb	r3, r3
 800f198:	2b03      	cmp	r3, #3
 800f19a:	d115      	bne.n	800f1c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	32ae      	adds	r2, #174	; 0xae
 800f1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d00b      	beq.n	800f1c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	32ae      	adds	r2, #174	; 0xae
 800f1ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c0:	78fa      	ldrb	r2, [r7, #3]
 800f1c2:	4611      	mov	r1, r2
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f1c8:	2300      	movs	r3, #0
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3708      	adds	r7, #8
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}

0800f1d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f1d2:	b480      	push	{r7}
 800f1d4:	b083      	sub	sp, #12
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f1da:	2300      	movs	r3, #0
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f202:	2b00      	cmp	r3, #0
 800f204:	d00e      	beq.n	800f224 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	687a      	ldr	r2, [r7, #4]
 800f210:	6852      	ldr	r2, [r2, #4]
 800f212:	b2d2      	uxtb	r2, r2
 800f214:	4611      	mov	r1, r2
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	4798      	blx	r3
 800f21a:	4603      	mov	r3, r0
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d001      	beq.n	800f224 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f220:	2303      	movs	r3, #3
 800f222:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f224:	7bfb      	ldrb	r3, [r7, #15]
}
 800f226:	4618      	mov	r0, r3
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f22e:	b480      	push	{r7}
 800f230:	b083      	sub	sp, #12
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
 800f236:	460b      	mov	r3, r1
 800f238:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f23a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	370c      	adds	r7, #12
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr

0800f248 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	460b      	mov	r3, r1
 800f252:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f254:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f256:	4618      	mov	r0, r3
 800f258:	370c      	adds	r7, #12
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr

0800f262 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f262:	b580      	push	{r7, lr}
 800f264:	b086      	sub	sp, #24
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
 800f26a:	460b      	mov	r3, r1
 800f26c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f276:	2300      	movs	r3, #0
 800f278:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	885b      	ldrh	r3, [r3, #2]
 800f27e:	b29a      	uxth	r2, r3
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	b29b      	uxth	r3, r3
 800f286:	429a      	cmp	r2, r3
 800f288:	d920      	bls.n	800f2cc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	b29b      	uxth	r3, r3
 800f290:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f292:	e013      	b.n	800f2bc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f294:	f107 030a 	add.w	r3, r7, #10
 800f298:	4619      	mov	r1, r3
 800f29a:	6978      	ldr	r0, [r7, #20]
 800f29c:	f000 f81b 	bl	800f2d6 <USBD_GetNextDesc>
 800f2a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	785b      	ldrb	r3, [r3, #1]
 800f2a6:	2b05      	cmp	r3, #5
 800f2a8:	d108      	bne.n	800f2bc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	789b      	ldrb	r3, [r3, #2]
 800f2b2:	78fa      	ldrb	r2, [r7, #3]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d008      	beq.n	800f2ca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	885b      	ldrh	r3, [r3, #2]
 800f2c0:	b29a      	uxth	r2, r3
 800f2c2:	897b      	ldrh	r3, [r7, #10]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d8e5      	bhi.n	800f294 <USBD_GetEpDesc+0x32>
 800f2c8:	e000      	b.n	800f2cc <USBD_GetEpDesc+0x6a>
          break;
 800f2ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f2cc:	693b      	ldr	r3, [r7, #16]
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3718      	adds	r7, #24
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f2d6:	b480      	push	{r7}
 800f2d8:	b085      	sub	sp, #20
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
 800f2de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	881a      	ldrh	r2, [r3, #0]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	4413      	add	r3, r2
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4413      	add	r3, r2
 800f300:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f302:	68fb      	ldr	r3, [r7, #12]
}
 800f304:	4618      	mov	r0, r3
 800f306:	3714      	adds	r7, #20
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f310:	b480      	push	{r7}
 800f312:	b087      	sub	sp, #28
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	3301      	adds	r3, #1
 800f326:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f32e:	8a3b      	ldrh	r3, [r7, #16]
 800f330:	021b      	lsls	r3, r3, #8
 800f332:	b21a      	sxth	r2, r3
 800f334:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f338:	4313      	orrs	r3, r2
 800f33a:	b21b      	sxth	r3, r3
 800f33c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f33e:	89fb      	ldrh	r3, [r7, #14]
}
 800f340:	4618      	mov	r0, r3
 800f342:	371c      	adds	r7, #28
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f356:	2300      	movs	r3, #0
 800f358:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f362:	2b40      	cmp	r3, #64	; 0x40
 800f364:	d005      	beq.n	800f372 <USBD_StdDevReq+0x26>
 800f366:	2b40      	cmp	r3, #64	; 0x40
 800f368:	d857      	bhi.n	800f41a <USBD_StdDevReq+0xce>
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00f      	beq.n	800f38e <USBD_StdDevReq+0x42>
 800f36e:	2b20      	cmp	r3, #32
 800f370:	d153      	bne.n	800f41a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	32ae      	adds	r2, #174	; 0xae
 800f37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f380:	689b      	ldr	r3, [r3, #8]
 800f382:	6839      	ldr	r1, [r7, #0]
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	4798      	blx	r3
 800f388:	4603      	mov	r3, r0
 800f38a:	73fb      	strb	r3, [r7, #15]
      break;
 800f38c:	e04a      	b.n	800f424 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	785b      	ldrb	r3, [r3, #1]
 800f392:	2b09      	cmp	r3, #9
 800f394:	d83b      	bhi.n	800f40e <USBD_StdDevReq+0xc2>
 800f396:	a201      	add	r2, pc, #4	; (adr r2, 800f39c <USBD_StdDevReq+0x50>)
 800f398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f39c:	0800f3f1 	.word	0x0800f3f1
 800f3a0:	0800f405 	.word	0x0800f405
 800f3a4:	0800f40f 	.word	0x0800f40f
 800f3a8:	0800f3fb 	.word	0x0800f3fb
 800f3ac:	0800f40f 	.word	0x0800f40f
 800f3b0:	0800f3cf 	.word	0x0800f3cf
 800f3b4:	0800f3c5 	.word	0x0800f3c5
 800f3b8:	0800f40f 	.word	0x0800f40f
 800f3bc:	0800f3e7 	.word	0x0800f3e7
 800f3c0:	0800f3d9 	.word	0x0800f3d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f3c4:	6839      	ldr	r1, [r7, #0]
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f000 fa3c 	bl	800f844 <USBD_GetDescriptor>
          break;
 800f3cc:	e024      	b.n	800f418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f3ce:	6839      	ldr	r1, [r7, #0]
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 fba1 	bl	800fb18 <USBD_SetAddress>
          break;
 800f3d6:	e01f      	b.n	800f418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f3d8:	6839      	ldr	r1, [r7, #0]
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 fbe0 	bl	800fba0 <USBD_SetConfig>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	73fb      	strb	r3, [r7, #15]
          break;
 800f3e4:	e018      	b.n	800f418 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f3e6:	6839      	ldr	r1, [r7, #0]
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 fc83 	bl	800fcf4 <USBD_GetConfig>
          break;
 800f3ee:	e013      	b.n	800f418 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f3f0:	6839      	ldr	r1, [r7, #0]
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 fcb4 	bl	800fd60 <USBD_GetStatus>
          break;
 800f3f8:	e00e      	b.n	800f418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f3fa:	6839      	ldr	r1, [r7, #0]
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 fce3 	bl	800fdc8 <USBD_SetFeature>
          break;
 800f402:	e009      	b.n	800f418 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f404:	6839      	ldr	r1, [r7, #0]
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f000 fd07 	bl	800fe1a <USBD_ClrFeature>
          break;
 800f40c:	e004      	b.n	800f418 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f40e:	6839      	ldr	r1, [r7, #0]
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f000 fd5e 	bl	800fed2 <USBD_CtlError>
          break;
 800f416:	bf00      	nop
      }
      break;
 800f418:	e004      	b.n	800f424 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f41a:	6839      	ldr	r1, [r7, #0]
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f000 fd58 	bl	800fed2 <USBD_CtlError>
      break;
 800f422:	bf00      	nop
  }

  return ret;
 800f424:	7bfb      	ldrb	r3, [r7, #15]
}
 800f426:	4618      	mov	r0, r3
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop

0800f430 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b084      	sub	sp, #16
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f43a:	2300      	movs	r3, #0
 800f43c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f446:	2b40      	cmp	r3, #64	; 0x40
 800f448:	d005      	beq.n	800f456 <USBD_StdItfReq+0x26>
 800f44a:	2b40      	cmp	r3, #64	; 0x40
 800f44c:	d852      	bhi.n	800f4f4 <USBD_StdItfReq+0xc4>
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d001      	beq.n	800f456 <USBD_StdItfReq+0x26>
 800f452:	2b20      	cmp	r3, #32
 800f454:	d14e      	bne.n	800f4f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	3b01      	subs	r3, #1
 800f460:	2b02      	cmp	r3, #2
 800f462:	d840      	bhi.n	800f4e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	889b      	ldrh	r3, [r3, #4]
 800f468:	b2db      	uxtb	r3, r3
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d836      	bhi.n	800f4dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	889b      	ldrh	r3, [r3, #4]
 800f472:	b2db      	uxtb	r3, r3
 800f474:	4619      	mov	r1, r3
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f7ff fed9 	bl	800f22e <USBD_CoreFindIF>
 800f47c:	4603      	mov	r3, r0
 800f47e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f480:	7bbb      	ldrb	r3, [r7, #14]
 800f482:	2bff      	cmp	r3, #255	; 0xff
 800f484:	d01d      	beq.n	800f4c2 <USBD_StdItfReq+0x92>
 800f486:	7bbb      	ldrb	r3, [r7, #14]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d11a      	bne.n	800f4c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f48c:	7bba      	ldrb	r2, [r7, #14]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	32ae      	adds	r2, #174	; 0xae
 800f492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f496:	689b      	ldr	r3, [r3, #8]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d00f      	beq.n	800f4bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f49c:	7bba      	ldrb	r2, [r7, #14]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f4a4:	7bba      	ldrb	r2, [r7, #14]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	32ae      	adds	r2, #174	; 0xae
 800f4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4ae:	689b      	ldr	r3, [r3, #8]
 800f4b0:	6839      	ldr	r1, [r7, #0]
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	4798      	blx	r3
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f4ba:	e004      	b.n	800f4c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f4bc:	2303      	movs	r3, #3
 800f4be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f4c0:	e001      	b.n	800f4c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f4c2:	2303      	movs	r3, #3
 800f4c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	88db      	ldrh	r3, [r3, #6]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d110      	bne.n	800f4f0 <USBD_StdItfReq+0xc0>
 800f4ce:	7bfb      	ldrb	r3, [r7, #15]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d10d      	bne.n	800f4f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f000 fdc7 	bl	8010068 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f4da:	e009      	b.n	800f4f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f4dc:	6839      	ldr	r1, [r7, #0]
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 fcf7 	bl	800fed2 <USBD_CtlError>
          break;
 800f4e4:	e004      	b.n	800f4f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f4e6:	6839      	ldr	r1, [r7, #0]
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f000 fcf2 	bl	800fed2 <USBD_CtlError>
          break;
 800f4ee:	e000      	b.n	800f4f2 <USBD_StdItfReq+0xc2>
          break;
 800f4f0:	bf00      	nop
      }
      break;
 800f4f2:	e004      	b.n	800f4fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f4f4:	6839      	ldr	r1, [r7, #0]
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 fceb 	bl	800fed2 <USBD_CtlError>
      break;
 800f4fc:	bf00      	nop
  }

  return ret;
 800f4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f500:	4618      	mov	r0, r3
 800f502:	3710      	adds	r7, #16
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f512:	2300      	movs	r3, #0
 800f514:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	889b      	ldrh	r3, [r3, #4]
 800f51a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f524:	2b40      	cmp	r3, #64	; 0x40
 800f526:	d007      	beq.n	800f538 <USBD_StdEPReq+0x30>
 800f528:	2b40      	cmp	r3, #64	; 0x40
 800f52a:	f200 817f 	bhi.w	800f82c <USBD_StdEPReq+0x324>
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d02a      	beq.n	800f588 <USBD_StdEPReq+0x80>
 800f532:	2b20      	cmp	r3, #32
 800f534:	f040 817a 	bne.w	800f82c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f538:	7bbb      	ldrb	r3, [r7, #14]
 800f53a:	4619      	mov	r1, r3
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f7ff fe83 	bl	800f248 <USBD_CoreFindEP>
 800f542:	4603      	mov	r3, r0
 800f544:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f546:	7b7b      	ldrb	r3, [r7, #13]
 800f548:	2bff      	cmp	r3, #255	; 0xff
 800f54a:	f000 8174 	beq.w	800f836 <USBD_StdEPReq+0x32e>
 800f54e:	7b7b      	ldrb	r3, [r7, #13]
 800f550:	2b00      	cmp	r3, #0
 800f552:	f040 8170 	bne.w	800f836 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f556:	7b7a      	ldrb	r2, [r7, #13]
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f55e:	7b7a      	ldrb	r2, [r7, #13]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	32ae      	adds	r2, #174	; 0xae
 800f564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f568:	689b      	ldr	r3, [r3, #8]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	f000 8163 	beq.w	800f836 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f570:	7b7a      	ldrb	r2, [r7, #13]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	32ae      	adds	r2, #174	; 0xae
 800f576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f57a:	689b      	ldr	r3, [r3, #8]
 800f57c:	6839      	ldr	r1, [r7, #0]
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	4798      	blx	r3
 800f582:	4603      	mov	r3, r0
 800f584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f586:	e156      	b.n	800f836 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	785b      	ldrb	r3, [r3, #1]
 800f58c:	2b03      	cmp	r3, #3
 800f58e:	d008      	beq.n	800f5a2 <USBD_StdEPReq+0x9a>
 800f590:	2b03      	cmp	r3, #3
 800f592:	f300 8145 	bgt.w	800f820 <USBD_StdEPReq+0x318>
 800f596:	2b00      	cmp	r3, #0
 800f598:	f000 809b 	beq.w	800f6d2 <USBD_StdEPReq+0x1ca>
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d03c      	beq.n	800f61a <USBD_StdEPReq+0x112>
 800f5a0:	e13e      	b.n	800f820 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	2b02      	cmp	r3, #2
 800f5ac:	d002      	beq.n	800f5b4 <USBD_StdEPReq+0xac>
 800f5ae:	2b03      	cmp	r3, #3
 800f5b0:	d016      	beq.n	800f5e0 <USBD_StdEPReq+0xd8>
 800f5b2:	e02c      	b.n	800f60e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f5b4:	7bbb      	ldrb	r3, [r7, #14]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d00d      	beq.n	800f5d6 <USBD_StdEPReq+0xce>
 800f5ba:	7bbb      	ldrb	r3, [r7, #14]
 800f5bc:	2b80      	cmp	r3, #128	; 0x80
 800f5be:	d00a      	beq.n	800f5d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f5c0:	7bbb      	ldrb	r3, [r7, #14]
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f011 fb33 	bl	8020c30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5ca:	2180      	movs	r1, #128	; 0x80
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f011 fb2f 	bl	8020c30 <USBD_LL_StallEP>
 800f5d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f5d4:	e020      	b.n	800f618 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f5d6:	6839      	ldr	r1, [r7, #0]
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f000 fc7a 	bl	800fed2 <USBD_CtlError>
              break;
 800f5de:	e01b      	b.n	800f618 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	885b      	ldrh	r3, [r3, #2]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d10e      	bne.n	800f606 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f5e8:	7bbb      	ldrb	r3, [r7, #14]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00b      	beq.n	800f606 <USBD_StdEPReq+0xfe>
 800f5ee:	7bbb      	ldrb	r3, [r7, #14]
 800f5f0:	2b80      	cmp	r3, #128	; 0x80
 800f5f2:	d008      	beq.n	800f606 <USBD_StdEPReq+0xfe>
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	88db      	ldrh	r3, [r3, #6]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d104      	bne.n	800f606 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f5fc:	7bbb      	ldrb	r3, [r7, #14]
 800f5fe:	4619      	mov	r1, r3
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f011 fb15 	bl	8020c30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f000 fd2e 	bl	8010068 <USBD_CtlSendStatus>

              break;
 800f60c:	e004      	b.n	800f618 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f60e:	6839      	ldr	r1, [r7, #0]
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 fc5e 	bl	800fed2 <USBD_CtlError>
              break;
 800f616:	bf00      	nop
          }
          break;
 800f618:	e107      	b.n	800f82a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f620:	b2db      	uxtb	r3, r3
 800f622:	2b02      	cmp	r3, #2
 800f624:	d002      	beq.n	800f62c <USBD_StdEPReq+0x124>
 800f626:	2b03      	cmp	r3, #3
 800f628:	d016      	beq.n	800f658 <USBD_StdEPReq+0x150>
 800f62a:	e04b      	b.n	800f6c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f62c:	7bbb      	ldrb	r3, [r7, #14]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d00d      	beq.n	800f64e <USBD_StdEPReq+0x146>
 800f632:	7bbb      	ldrb	r3, [r7, #14]
 800f634:	2b80      	cmp	r3, #128	; 0x80
 800f636:	d00a      	beq.n	800f64e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f638:	7bbb      	ldrb	r3, [r7, #14]
 800f63a:	4619      	mov	r1, r3
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f011 faf7 	bl	8020c30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f642:	2180      	movs	r1, #128	; 0x80
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f011 faf3 	bl	8020c30 <USBD_LL_StallEP>
 800f64a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f64c:	e040      	b.n	800f6d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f64e:	6839      	ldr	r1, [r7, #0]
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f000 fc3e 	bl	800fed2 <USBD_CtlError>
              break;
 800f656:	e03b      	b.n	800f6d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	885b      	ldrh	r3, [r3, #2]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d136      	bne.n	800f6ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f660:	7bbb      	ldrb	r3, [r7, #14]
 800f662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f666:	2b00      	cmp	r3, #0
 800f668:	d004      	beq.n	800f674 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f66a:	7bbb      	ldrb	r3, [r7, #14]
 800f66c:	4619      	mov	r1, r3
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f011 fafd 	bl	8020c6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 fcf7 	bl	8010068 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f67a:	7bbb      	ldrb	r3, [r7, #14]
 800f67c:	4619      	mov	r1, r3
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f7ff fde2 	bl	800f248 <USBD_CoreFindEP>
 800f684:	4603      	mov	r3, r0
 800f686:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f688:	7b7b      	ldrb	r3, [r7, #13]
 800f68a:	2bff      	cmp	r3, #255	; 0xff
 800f68c:	d01f      	beq.n	800f6ce <USBD_StdEPReq+0x1c6>
 800f68e:	7b7b      	ldrb	r3, [r7, #13]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d11c      	bne.n	800f6ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f694:	7b7a      	ldrb	r2, [r7, #13]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f69c:	7b7a      	ldrb	r2, [r7, #13]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	32ae      	adds	r2, #174	; 0xae
 800f6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6a6:	689b      	ldr	r3, [r3, #8]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d010      	beq.n	800f6ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f6ac:	7b7a      	ldrb	r2, [r7, #13]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	32ae      	adds	r2, #174	; 0xae
 800f6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	6839      	ldr	r1, [r7, #0]
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	4798      	blx	r3
 800f6be:	4603      	mov	r3, r0
 800f6c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f6c2:	e004      	b.n	800f6ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f6c4:	6839      	ldr	r1, [r7, #0]
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f000 fc03 	bl	800fed2 <USBD_CtlError>
              break;
 800f6cc:	e000      	b.n	800f6d0 <USBD_StdEPReq+0x1c8>
              break;
 800f6ce:	bf00      	nop
          }
          break;
 800f6d0:	e0ab      	b.n	800f82a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6d8:	b2db      	uxtb	r3, r3
 800f6da:	2b02      	cmp	r3, #2
 800f6dc:	d002      	beq.n	800f6e4 <USBD_StdEPReq+0x1dc>
 800f6de:	2b03      	cmp	r3, #3
 800f6e0:	d032      	beq.n	800f748 <USBD_StdEPReq+0x240>
 800f6e2:	e097      	b.n	800f814 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f6e4:	7bbb      	ldrb	r3, [r7, #14]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d007      	beq.n	800f6fa <USBD_StdEPReq+0x1f2>
 800f6ea:	7bbb      	ldrb	r3, [r7, #14]
 800f6ec:	2b80      	cmp	r3, #128	; 0x80
 800f6ee:	d004      	beq.n	800f6fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f6f0:	6839      	ldr	r1, [r7, #0]
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f000 fbed 	bl	800fed2 <USBD_CtlError>
                break;
 800f6f8:	e091      	b.n	800f81e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f6fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	da0b      	bge.n	800f71a <USBD_StdEPReq+0x212>
 800f702:	7bbb      	ldrb	r3, [r7, #14]
 800f704:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f708:	4613      	mov	r3, r2
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	4413      	add	r3, r2
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	3310      	adds	r3, #16
 800f712:	687a      	ldr	r2, [r7, #4]
 800f714:	4413      	add	r3, r2
 800f716:	3304      	adds	r3, #4
 800f718:	e00b      	b.n	800f732 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f71a:	7bbb      	ldrb	r3, [r7, #14]
 800f71c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f720:	4613      	mov	r3, r2
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	4413      	add	r3, r2
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	4413      	add	r3, r2
 800f730:	3304      	adds	r3, #4
 800f732:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	2200      	movs	r2, #0
 800f738:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	2202      	movs	r2, #2
 800f73e:	4619      	mov	r1, r3
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 fc37 	bl	800ffb4 <USBD_CtlSendData>
              break;
 800f746:	e06a      	b.n	800f81e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	da11      	bge.n	800f774 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f750:	7bbb      	ldrb	r3, [r7, #14]
 800f752:	f003 020f 	and.w	r2, r3, #15
 800f756:	6879      	ldr	r1, [r7, #4]
 800f758:	4613      	mov	r3, r2
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	4413      	add	r3, r2
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	440b      	add	r3, r1
 800f762:	3324      	adds	r3, #36	; 0x24
 800f764:	881b      	ldrh	r3, [r3, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d117      	bne.n	800f79a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f76a:	6839      	ldr	r1, [r7, #0]
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 fbb0 	bl	800fed2 <USBD_CtlError>
                  break;
 800f772:	e054      	b.n	800f81e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f774:	7bbb      	ldrb	r3, [r7, #14]
 800f776:	f003 020f 	and.w	r2, r3, #15
 800f77a:	6879      	ldr	r1, [r7, #4]
 800f77c:	4613      	mov	r3, r2
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	4413      	add	r3, r2
 800f782:	009b      	lsls	r3, r3, #2
 800f784:	440b      	add	r3, r1
 800f786:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f78a:	881b      	ldrh	r3, [r3, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d104      	bne.n	800f79a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f790:	6839      	ldr	r1, [r7, #0]
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f000 fb9d 	bl	800fed2 <USBD_CtlError>
                  break;
 800f798:	e041      	b.n	800f81e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f79a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	da0b      	bge.n	800f7ba <USBD_StdEPReq+0x2b2>
 800f7a2:	7bbb      	ldrb	r3, [r7, #14]
 800f7a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	009b      	lsls	r3, r3, #2
 800f7ac:	4413      	add	r3, r2
 800f7ae:	009b      	lsls	r3, r3, #2
 800f7b0:	3310      	adds	r3, #16
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	4413      	add	r3, r2
 800f7b6:	3304      	adds	r3, #4
 800f7b8:	e00b      	b.n	800f7d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f7ba:	7bbb      	ldrb	r3, [r7, #14]
 800f7bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	009b      	lsls	r3, r3, #2
 800f7c4:	4413      	add	r3, r2
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f7cc:	687a      	ldr	r2, [r7, #4]
 800f7ce:	4413      	add	r3, r2
 800f7d0:	3304      	adds	r3, #4
 800f7d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f7d4:	7bbb      	ldrb	r3, [r7, #14]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d002      	beq.n	800f7e0 <USBD_StdEPReq+0x2d8>
 800f7da:	7bbb      	ldrb	r3, [r7, #14]
 800f7dc:	2b80      	cmp	r3, #128	; 0x80
 800f7de:	d103      	bne.n	800f7e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	601a      	str	r2, [r3, #0]
 800f7e6:	e00e      	b.n	800f806 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f7e8:	7bbb      	ldrb	r3, [r7, #14]
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f011 fa5d 	bl	8020cac <USBD_LL_IsStallEP>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d003      	beq.n	800f800 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	601a      	str	r2, [r3, #0]
 800f7fe:	e002      	b.n	800f806 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	2200      	movs	r2, #0
 800f804:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	2202      	movs	r2, #2
 800f80a:	4619      	mov	r1, r3
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 fbd1 	bl	800ffb4 <USBD_CtlSendData>
              break;
 800f812:	e004      	b.n	800f81e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f814:	6839      	ldr	r1, [r7, #0]
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f000 fb5b 	bl	800fed2 <USBD_CtlError>
              break;
 800f81c:	bf00      	nop
          }
          break;
 800f81e:	e004      	b.n	800f82a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f820:	6839      	ldr	r1, [r7, #0]
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 fb55 	bl	800fed2 <USBD_CtlError>
          break;
 800f828:	bf00      	nop
      }
      break;
 800f82a:	e005      	b.n	800f838 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f82c:	6839      	ldr	r1, [r7, #0]
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 fb4f 	bl	800fed2 <USBD_CtlError>
      break;
 800f834:	e000      	b.n	800f838 <USBD_StdEPReq+0x330>
      break;
 800f836:	bf00      	nop
  }

  return ret;
 800f838:	7bfb      	ldrb	r3, [r7, #15]
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
	...

0800f844 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f84e:	2300      	movs	r3, #0
 800f850:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f852:	2300      	movs	r3, #0
 800f854:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f856:	2300      	movs	r3, #0
 800f858:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	885b      	ldrh	r3, [r3, #2]
 800f85e:	0a1b      	lsrs	r3, r3, #8
 800f860:	b29b      	uxth	r3, r3
 800f862:	3b01      	subs	r3, #1
 800f864:	2b06      	cmp	r3, #6
 800f866:	f200 8128 	bhi.w	800faba <USBD_GetDescriptor+0x276>
 800f86a:	a201      	add	r2, pc, #4	; (adr r2, 800f870 <USBD_GetDescriptor+0x2c>)
 800f86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f870:	0800f88d 	.word	0x0800f88d
 800f874:	0800f8a5 	.word	0x0800f8a5
 800f878:	0800f8e5 	.word	0x0800f8e5
 800f87c:	0800fabb 	.word	0x0800fabb
 800f880:	0800fabb 	.word	0x0800fabb
 800f884:	0800fa5b 	.word	0x0800fa5b
 800f888:	0800fa87 	.word	0x0800fa87
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	7c12      	ldrb	r2, [r2, #16]
 800f898:	f107 0108 	add.w	r1, r7, #8
 800f89c:	4610      	mov	r0, r2
 800f89e:	4798      	blx	r3
 800f8a0:	60f8      	str	r0, [r7, #12]
      break;
 800f8a2:	e112      	b.n	800faca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	7c1b      	ldrb	r3, [r3, #16]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d10d      	bne.n	800f8c8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8b4:	f107 0208 	add.w	r2, r7, #8
 800f8b8:	4610      	mov	r0, r2
 800f8ba:	4798      	blx	r3
 800f8bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	2202      	movs	r2, #2
 800f8c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f8c6:	e100      	b.n	800faca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d0:	f107 0208 	add.w	r2, r7, #8
 800f8d4:	4610      	mov	r0, r2
 800f8d6:	4798      	blx	r3
 800f8d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	2202      	movs	r2, #2
 800f8e0:	701a      	strb	r2, [r3, #0]
      break;
 800f8e2:	e0f2      	b.n	800faca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	885b      	ldrh	r3, [r3, #2]
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	2b05      	cmp	r3, #5
 800f8ec:	f200 80ac 	bhi.w	800fa48 <USBD_GetDescriptor+0x204>
 800f8f0:	a201      	add	r2, pc, #4	; (adr r2, 800f8f8 <USBD_GetDescriptor+0xb4>)
 800f8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f6:	bf00      	nop
 800f8f8:	0800f911 	.word	0x0800f911
 800f8fc:	0800f945 	.word	0x0800f945
 800f900:	0800f979 	.word	0x0800f979
 800f904:	0800f9ad 	.word	0x0800f9ad
 800f908:	0800f9e1 	.word	0x0800f9e1
 800f90c:	0800fa15 	.word	0x0800fa15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d00b      	beq.n	800f934 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f922:	685b      	ldr	r3, [r3, #4]
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	7c12      	ldrb	r2, [r2, #16]
 800f928:	f107 0108 	add.w	r1, r7, #8
 800f92c:	4610      	mov	r0, r2
 800f92e:	4798      	blx	r3
 800f930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f932:	e091      	b.n	800fa58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f934:	6839      	ldr	r1, [r7, #0]
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f000 facb 	bl	800fed2 <USBD_CtlError>
            err++;
 800f93c:	7afb      	ldrb	r3, [r7, #11]
 800f93e:	3301      	adds	r3, #1
 800f940:	72fb      	strb	r3, [r7, #11]
          break;
 800f942:	e089      	b.n	800fa58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f94a:	689b      	ldr	r3, [r3, #8]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d00b      	beq.n	800f968 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f956:	689b      	ldr	r3, [r3, #8]
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	7c12      	ldrb	r2, [r2, #16]
 800f95c:	f107 0108 	add.w	r1, r7, #8
 800f960:	4610      	mov	r0, r2
 800f962:	4798      	blx	r3
 800f964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f966:	e077      	b.n	800fa58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f968:	6839      	ldr	r1, [r7, #0]
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f000 fab1 	bl	800fed2 <USBD_CtlError>
            err++;
 800f970:	7afb      	ldrb	r3, [r7, #11]
 800f972:	3301      	adds	r3, #1
 800f974:	72fb      	strb	r3, [r7, #11]
          break;
 800f976:	e06f      	b.n	800fa58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f97e:	68db      	ldr	r3, [r3, #12]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d00b      	beq.n	800f99c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	7c12      	ldrb	r2, [r2, #16]
 800f990:	f107 0108 	add.w	r1, r7, #8
 800f994:	4610      	mov	r0, r2
 800f996:	4798      	blx	r3
 800f998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f99a:	e05d      	b.n	800fa58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f99c:	6839      	ldr	r1, [r7, #0]
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 fa97 	bl	800fed2 <USBD_CtlError>
            err++;
 800f9a4:	7afb      	ldrb	r3, [r7, #11]
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	72fb      	strb	r3, [r7, #11]
          break;
 800f9aa:	e055      	b.n	800fa58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9b2:	691b      	ldr	r3, [r3, #16]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d00b      	beq.n	800f9d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9be:	691b      	ldr	r3, [r3, #16]
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	7c12      	ldrb	r2, [r2, #16]
 800f9c4:	f107 0108 	add.w	r1, r7, #8
 800f9c8:	4610      	mov	r0, r2
 800f9ca:	4798      	blx	r3
 800f9cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f9ce:	e043      	b.n	800fa58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f9d0:	6839      	ldr	r1, [r7, #0]
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 fa7d 	bl	800fed2 <USBD_CtlError>
            err++;
 800f9d8:	7afb      	ldrb	r3, [r7, #11]
 800f9da:	3301      	adds	r3, #1
 800f9dc:	72fb      	strb	r3, [r7, #11]
          break;
 800f9de:	e03b      	b.n	800fa58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9e6:	695b      	ldr	r3, [r3, #20]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d00b      	beq.n	800fa04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9f2:	695b      	ldr	r3, [r3, #20]
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	7c12      	ldrb	r2, [r2, #16]
 800f9f8:	f107 0108 	add.w	r1, r7, #8
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	4798      	blx	r3
 800fa00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa02:	e029      	b.n	800fa58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa04:	6839      	ldr	r1, [r7, #0]
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 fa63 	bl	800fed2 <USBD_CtlError>
            err++;
 800fa0c:	7afb      	ldrb	r3, [r7, #11]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	72fb      	strb	r3, [r7, #11]
          break;
 800fa12:	e021      	b.n	800fa58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa1a:	699b      	ldr	r3, [r3, #24]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d00b      	beq.n	800fa38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa26:	699b      	ldr	r3, [r3, #24]
 800fa28:	687a      	ldr	r2, [r7, #4]
 800fa2a:	7c12      	ldrb	r2, [r2, #16]
 800fa2c:	f107 0108 	add.w	r1, r7, #8
 800fa30:	4610      	mov	r0, r2
 800fa32:	4798      	blx	r3
 800fa34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa36:	e00f      	b.n	800fa58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa38:	6839      	ldr	r1, [r7, #0]
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 fa49 	bl	800fed2 <USBD_CtlError>
            err++;
 800fa40:	7afb      	ldrb	r3, [r7, #11]
 800fa42:	3301      	adds	r3, #1
 800fa44:	72fb      	strb	r3, [r7, #11]
          break;
 800fa46:	e007      	b.n	800fa58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fa48:	6839      	ldr	r1, [r7, #0]
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 fa41 	bl	800fed2 <USBD_CtlError>
          err++;
 800fa50:	7afb      	ldrb	r3, [r7, #11]
 800fa52:	3301      	adds	r3, #1
 800fa54:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fa56:	bf00      	nop
      }
      break;
 800fa58:	e037      	b.n	800faca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	7c1b      	ldrb	r3, [r3, #16]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d109      	bne.n	800fa76 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa6a:	f107 0208 	add.w	r2, r7, #8
 800fa6e:	4610      	mov	r0, r2
 800fa70:	4798      	blx	r3
 800fa72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fa74:	e029      	b.n	800faca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fa76:	6839      	ldr	r1, [r7, #0]
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f000 fa2a 	bl	800fed2 <USBD_CtlError>
        err++;
 800fa7e:	7afb      	ldrb	r3, [r7, #11]
 800fa80:	3301      	adds	r3, #1
 800fa82:	72fb      	strb	r3, [r7, #11]
      break;
 800fa84:	e021      	b.n	800faca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	7c1b      	ldrb	r3, [r3, #16]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d10d      	bne.n	800faaa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa96:	f107 0208 	add.w	r2, r7, #8
 800fa9a:	4610      	mov	r0, r2
 800fa9c:	4798      	blx	r3
 800fa9e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	3301      	adds	r3, #1
 800faa4:	2207      	movs	r2, #7
 800faa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800faa8:	e00f      	b.n	800faca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800faaa:	6839      	ldr	r1, [r7, #0]
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f000 fa10 	bl	800fed2 <USBD_CtlError>
        err++;
 800fab2:	7afb      	ldrb	r3, [r7, #11]
 800fab4:	3301      	adds	r3, #1
 800fab6:	72fb      	strb	r3, [r7, #11]
      break;
 800fab8:	e007      	b.n	800faca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800faba:	6839      	ldr	r1, [r7, #0]
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 fa08 	bl	800fed2 <USBD_CtlError>
      err++;
 800fac2:	7afb      	ldrb	r3, [r7, #11]
 800fac4:	3301      	adds	r3, #1
 800fac6:	72fb      	strb	r3, [r7, #11]
      break;
 800fac8:	bf00      	nop
  }

  if (err != 0U)
 800faca:	7afb      	ldrb	r3, [r7, #11]
 800facc:	2b00      	cmp	r3, #0
 800face:	d11e      	bne.n	800fb0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	88db      	ldrh	r3, [r3, #6]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d016      	beq.n	800fb06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fad8:	893b      	ldrh	r3, [r7, #8]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d00e      	beq.n	800fafc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	88da      	ldrh	r2, [r3, #6]
 800fae2:	893b      	ldrh	r3, [r7, #8]
 800fae4:	4293      	cmp	r3, r2
 800fae6:	bf28      	it	cs
 800fae8:	4613      	movcs	r3, r2
 800faea:	b29b      	uxth	r3, r3
 800faec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800faee:	893b      	ldrh	r3, [r7, #8]
 800faf0:	461a      	mov	r2, r3
 800faf2:	68f9      	ldr	r1, [r7, #12]
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f000 fa5d 	bl	800ffb4 <USBD_CtlSendData>
 800fafa:	e009      	b.n	800fb10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fafc:	6839      	ldr	r1, [r7, #0]
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 f9e7 	bl	800fed2 <USBD_CtlError>
 800fb04:	e004      	b.n	800fb10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f000 faae 	bl	8010068 <USBD_CtlSendStatus>
 800fb0c:	e000      	b.n	800fb10 <USBD_GetDescriptor+0x2cc>
    return;
 800fb0e:	bf00      	nop
  }
}
 800fb10:	3710      	adds	r7, #16
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop

0800fb18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	889b      	ldrh	r3, [r3, #4]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d131      	bne.n	800fb8e <USBD_SetAddress+0x76>
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	88db      	ldrh	r3, [r3, #6]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d12d      	bne.n	800fb8e <USBD_SetAddress+0x76>
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	885b      	ldrh	r3, [r3, #2]
 800fb36:	2b7f      	cmp	r3, #127	; 0x7f
 800fb38:	d829      	bhi.n	800fb8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	885b      	ldrh	r3, [r3, #2]
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	2b03      	cmp	r3, #3
 800fb50:	d104      	bne.n	800fb5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fb52:	6839      	ldr	r1, [r7, #0]
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 f9bc 	bl	800fed2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb5a:	e01d      	b.n	800fb98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	7bfa      	ldrb	r2, [r7, #15]
 800fb60:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fb64:	7bfb      	ldrb	r3, [r7, #15]
 800fb66:	4619      	mov	r1, r3
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f011 f8cb 	bl	8020d04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 fa7a 	bl	8010068 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fb74:	7bfb      	ldrb	r3, [r7, #15]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d004      	beq.n	800fb84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2202      	movs	r2, #2
 800fb7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb82:	e009      	b.n	800fb98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2201      	movs	r2, #1
 800fb88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb8c:	e004      	b.n	800fb98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fb8e:	6839      	ldr	r1, [r7, #0]
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 f99e 	bl	800fed2 <USBD_CtlError>
  }
}
 800fb96:	bf00      	nop
 800fb98:	bf00      	nop
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	885b      	ldrh	r3, [r3, #2]
 800fbb2:	b2da      	uxtb	r2, r3
 800fbb4:	4b4e      	ldr	r3, [pc, #312]	; (800fcf0 <USBD_SetConfig+0x150>)
 800fbb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fbb8:	4b4d      	ldr	r3, [pc, #308]	; (800fcf0 <USBD_SetConfig+0x150>)
 800fbba:	781b      	ldrb	r3, [r3, #0]
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	d905      	bls.n	800fbcc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fbc0:	6839      	ldr	r1, [r7, #0]
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f000 f985 	bl	800fed2 <USBD_CtlError>
    return USBD_FAIL;
 800fbc8:	2303      	movs	r3, #3
 800fbca:	e08c      	b.n	800fce6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	2b02      	cmp	r3, #2
 800fbd6:	d002      	beq.n	800fbde <USBD_SetConfig+0x3e>
 800fbd8:	2b03      	cmp	r3, #3
 800fbda:	d029      	beq.n	800fc30 <USBD_SetConfig+0x90>
 800fbdc:	e075      	b.n	800fcca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fbde:	4b44      	ldr	r3, [pc, #272]	; (800fcf0 <USBD_SetConfig+0x150>)
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d020      	beq.n	800fc28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fbe6:	4b42      	ldr	r3, [pc, #264]	; (800fcf0 <USBD_SetConfig+0x150>)
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	461a      	mov	r2, r3
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fbf0:	4b3f      	ldr	r3, [pc, #252]	; (800fcf0 <USBD_SetConfig+0x150>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f7fe ffe7 	bl	800ebca <USBD_SetClassConfig>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fc00:	7bfb      	ldrb	r3, [r7, #15]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d008      	beq.n	800fc18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fc06:	6839      	ldr	r1, [r7, #0]
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 f962 	bl	800fed2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2202      	movs	r2, #2
 800fc12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fc16:	e065      	b.n	800fce4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f000 fa25 	bl	8010068 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2203      	movs	r2, #3
 800fc22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fc26:	e05d      	b.n	800fce4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 fa1d 	bl	8010068 <USBD_CtlSendStatus>
      break;
 800fc2e:	e059      	b.n	800fce4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fc30:	4b2f      	ldr	r3, [pc, #188]	; (800fcf0 <USBD_SetConfig+0x150>)
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d112      	bne.n	800fc5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2202      	movs	r2, #2
 800fc3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fc40:	4b2b      	ldr	r3, [pc, #172]	; (800fcf0 <USBD_SetConfig+0x150>)
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	461a      	mov	r2, r3
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fc4a:	4b29      	ldr	r3, [pc, #164]	; (800fcf0 <USBD_SetConfig+0x150>)
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	4619      	mov	r1, r3
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7fe ffd6 	bl	800ec02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f000 fa06 	bl	8010068 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fc5c:	e042      	b.n	800fce4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fc5e:	4b24      	ldr	r3, [pc, #144]	; (800fcf0 <USBD_SetConfig+0x150>)
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	461a      	mov	r2, r3
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d02a      	beq.n	800fcc2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	4619      	mov	r1, r3
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f7fe ffc4 	bl	800ec02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fc7a:	4b1d      	ldr	r3, [pc, #116]	; (800fcf0 <USBD_SetConfig+0x150>)
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fc84:	4b1a      	ldr	r3, [pc, #104]	; (800fcf0 <USBD_SetConfig+0x150>)
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	4619      	mov	r1, r3
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f7fe ff9d 	bl	800ebca <USBD_SetClassConfig>
 800fc90:	4603      	mov	r3, r0
 800fc92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fc94:	7bfb      	ldrb	r3, [r7, #15]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d00f      	beq.n	800fcba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fc9a:	6839      	ldr	r1, [r7, #0]
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f000 f918 	bl	800fed2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	685b      	ldr	r3, [r3, #4]
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	4619      	mov	r1, r3
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f7fe ffa9 	bl	800ec02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2202      	movs	r2, #2
 800fcb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fcb8:	e014      	b.n	800fce4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 f9d4 	bl	8010068 <USBD_CtlSendStatus>
      break;
 800fcc0:	e010      	b.n	800fce4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 f9d0 	bl	8010068 <USBD_CtlSendStatus>
      break;
 800fcc8:	e00c      	b.n	800fce4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fcca:	6839      	ldr	r1, [r7, #0]
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 f900 	bl	800fed2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fcd2:	4b07      	ldr	r3, [pc, #28]	; (800fcf0 <USBD_SetConfig+0x150>)
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f7fe ff92 	bl	800ec02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fcde:	2303      	movs	r3, #3
 800fce0:	73fb      	strb	r3, [r7, #15]
      break;
 800fce2:	bf00      	nop
  }

  return ret;
 800fce4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3710      	adds	r7, #16
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	20002bf0 	.word	0x20002bf0

0800fcf4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	88db      	ldrh	r3, [r3, #6]
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d004      	beq.n	800fd10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fd06:	6839      	ldr	r1, [r7, #0]
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f000 f8e2 	bl	800fed2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fd0e:	e023      	b.n	800fd58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	2b02      	cmp	r3, #2
 800fd1a:	dc02      	bgt.n	800fd22 <USBD_GetConfig+0x2e>
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	dc03      	bgt.n	800fd28 <USBD_GetConfig+0x34>
 800fd20:	e015      	b.n	800fd4e <USBD_GetConfig+0x5a>
 800fd22:	2b03      	cmp	r3, #3
 800fd24:	d00b      	beq.n	800fd3e <USBD_GetConfig+0x4a>
 800fd26:	e012      	b.n	800fd4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	3308      	adds	r3, #8
 800fd32:	2201      	movs	r2, #1
 800fd34:	4619      	mov	r1, r3
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 f93c 	bl	800ffb4 <USBD_CtlSendData>
        break;
 800fd3c:	e00c      	b.n	800fd58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	3304      	adds	r3, #4
 800fd42:	2201      	movs	r2, #1
 800fd44:	4619      	mov	r1, r3
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f000 f934 	bl	800ffb4 <USBD_CtlSendData>
        break;
 800fd4c:	e004      	b.n	800fd58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fd4e:	6839      	ldr	r1, [r7, #0]
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 f8be 	bl	800fed2 <USBD_CtlError>
        break;
 800fd56:	bf00      	nop
}
 800fd58:	bf00      	nop
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	3b01      	subs	r3, #1
 800fd74:	2b02      	cmp	r3, #2
 800fd76:	d81e      	bhi.n	800fdb6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	88db      	ldrh	r3, [r3, #6]
 800fd7c:	2b02      	cmp	r3, #2
 800fd7e:	d004      	beq.n	800fd8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fd80:	6839      	ldr	r1, [r7, #0]
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f000 f8a5 	bl	800fed2 <USBD_CtlError>
        break;
 800fd88:	e01a      	b.n	800fdc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d005      	beq.n	800fda6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	68db      	ldr	r3, [r3, #12]
 800fd9e:	f043 0202 	orr.w	r2, r3, #2
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	330c      	adds	r3, #12
 800fdaa:	2202      	movs	r2, #2
 800fdac:	4619      	mov	r1, r3
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f000 f900 	bl	800ffb4 <USBD_CtlSendData>
      break;
 800fdb4:	e004      	b.n	800fdc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fdb6:	6839      	ldr	r1, [r7, #0]
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f000 f88a 	bl	800fed2 <USBD_CtlError>
      break;
 800fdbe:	bf00      	nop
  }
}
 800fdc0:	bf00      	nop
 800fdc2:	3708      	adds	r7, #8
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}

0800fdc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	885b      	ldrh	r3, [r3, #2]
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d107      	bne.n	800fdea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2201      	movs	r2, #1
 800fdde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 f940 	bl	8010068 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fde8:	e013      	b.n	800fe12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	885b      	ldrh	r3, [r3, #2]
 800fdee:	2b02      	cmp	r3, #2
 800fdf0:	d10b      	bne.n	800fe0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	889b      	ldrh	r3, [r3, #4]
 800fdf6:	0a1b      	lsrs	r3, r3, #8
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	b2da      	uxtb	r2, r3
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 f930 	bl	8010068 <USBD_CtlSendStatus>
}
 800fe08:	e003      	b.n	800fe12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fe0a:	6839      	ldr	r1, [r7, #0]
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f000 f860 	bl	800fed2 <USBD_CtlError>
}
 800fe12:	bf00      	nop
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}

0800fe1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe1a:	b580      	push	{r7, lr}
 800fe1c:	b082      	sub	sp, #8
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
 800fe22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	3b01      	subs	r3, #1
 800fe2e:	2b02      	cmp	r3, #2
 800fe30:	d80b      	bhi.n	800fe4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	885b      	ldrh	r3, [r3, #2]
 800fe36:	2b01      	cmp	r3, #1
 800fe38:	d10c      	bne.n	800fe54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f000 f910 	bl	8010068 <USBD_CtlSendStatus>
      }
      break;
 800fe48:	e004      	b.n	800fe54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fe4a:	6839      	ldr	r1, [r7, #0]
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f000 f840 	bl	800fed2 <USBD_CtlError>
      break;
 800fe52:	e000      	b.n	800fe56 <USBD_ClrFeature+0x3c>
      break;
 800fe54:	bf00      	nop
  }
}
 800fe56:	bf00      	nop
 800fe58:	3708      	adds	r7, #8
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}

0800fe5e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fe5e:	b580      	push	{r7, lr}
 800fe60:	b084      	sub	sp, #16
 800fe62:	af00      	add	r7, sp, #0
 800fe64:	6078      	str	r0, [r7, #4]
 800fe66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	781a      	ldrb	r2, [r3, #0]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	3301      	adds	r3, #1
 800fe78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	781a      	ldrb	r2, [r3, #0]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	3301      	adds	r3, #1
 800fe86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fe88:	68f8      	ldr	r0, [r7, #12]
 800fe8a:	f7ff fa41 	bl	800f310 <SWAPBYTE>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	461a      	mov	r2, r3
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	3301      	adds	r3, #1
 800fea0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fea2:	68f8      	ldr	r0, [r7, #12]
 800fea4:	f7ff fa34 	bl	800f310 <SWAPBYTE>
 800fea8:	4603      	mov	r3, r0
 800feaa:	461a      	mov	r2, r3
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	3301      	adds	r3, #1
 800feb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	3301      	adds	r3, #1
 800feba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800febc:	68f8      	ldr	r0, [r7, #12]
 800febe:	f7ff fa27 	bl	800f310 <SWAPBYTE>
 800fec2:	4603      	mov	r3, r0
 800fec4:	461a      	mov	r2, r3
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	80da      	strh	r2, [r3, #6]
}
 800feca:	bf00      	nop
 800fecc:	3710      	adds	r7, #16
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}

0800fed2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fed2:	b580      	push	{r7, lr}
 800fed4:	b082      	sub	sp, #8
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
 800feda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fedc:	2180      	movs	r1, #128	; 0x80
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f010 fea6 	bl	8020c30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fee4:	2100      	movs	r1, #0
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f010 fea2 	bl	8020c30 <USBD_LL_StallEP>
}
 800feec:	bf00      	nop
 800feee:	3708      	adds	r7, #8
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b086      	sub	sp, #24
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ff00:	2300      	movs	r3, #0
 800ff02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d036      	beq.n	800ff78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ff0e:	6938      	ldr	r0, [r7, #16]
 800ff10:	f000 f836 	bl	800ff80 <USBD_GetLen>
 800ff14:	4603      	mov	r3, r0
 800ff16:	3301      	adds	r3, #1
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	005b      	lsls	r3, r3, #1
 800ff1c:	b29a      	uxth	r2, r3
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ff22:	7dfb      	ldrb	r3, [r7, #23]
 800ff24:	68ba      	ldr	r2, [r7, #8]
 800ff26:	4413      	add	r3, r2
 800ff28:	687a      	ldr	r2, [r7, #4]
 800ff2a:	7812      	ldrb	r2, [r2, #0]
 800ff2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ff2e:	7dfb      	ldrb	r3, [r7, #23]
 800ff30:	3301      	adds	r3, #1
 800ff32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ff34:	7dfb      	ldrb	r3, [r7, #23]
 800ff36:	68ba      	ldr	r2, [r7, #8]
 800ff38:	4413      	add	r3, r2
 800ff3a:	2203      	movs	r2, #3
 800ff3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ff3e:	7dfb      	ldrb	r3, [r7, #23]
 800ff40:	3301      	adds	r3, #1
 800ff42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ff44:	e013      	b.n	800ff6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ff46:	7dfb      	ldrb	r3, [r7, #23]
 800ff48:	68ba      	ldr	r2, [r7, #8]
 800ff4a:	4413      	add	r3, r2
 800ff4c:	693a      	ldr	r2, [r7, #16]
 800ff4e:	7812      	ldrb	r2, [r2, #0]
 800ff50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	3301      	adds	r3, #1
 800ff56:	613b      	str	r3, [r7, #16]
    idx++;
 800ff58:	7dfb      	ldrb	r3, [r7, #23]
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ff5e:	7dfb      	ldrb	r3, [r7, #23]
 800ff60:	68ba      	ldr	r2, [r7, #8]
 800ff62:	4413      	add	r3, r2
 800ff64:	2200      	movs	r2, #0
 800ff66:	701a      	strb	r2, [r3, #0]
    idx++;
 800ff68:	7dfb      	ldrb	r3, [r7, #23]
 800ff6a:	3301      	adds	r3, #1
 800ff6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d1e7      	bne.n	800ff46 <USBD_GetString+0x52>
 800ff76:	e000      	b.n	800ff7a <USBD_GetString+0x86>
    return;
 800ff78:	bf00      	nop
  }
}
 800ff7a:	3718      	adds	r7, #24
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b085      	sub	sp, #20
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ff90:	e005      	b.n	800ff9e <USBD_GetLen+0x1e>
  {
    len++;
 800ff92:	7bfb      	ldrb	r3, [r7, #15]
 800ff94:	3301      	adds	r3, #1
 800ff96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d1f5      	bne.n	800ff92 <USBD_GetLen+0x12>
  }

  return len;
 800ffa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3714      	adds	r7, #20
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr

0800ffb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	60b9      	str	r1, [r7, #8]
 800ffbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	2202      	movs	r2, #2
 800ffc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	687a      	ldr	r2, [r7, #4]
 800ffd2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	68ba      	ldr	r2, [r7, #8]
 800ffd8:	2100      	movs	r1, #0
 800ffda:	68f8      	ldr	r0, [r7, #12]
 800ffdc:	f010 feb1 	bl	8020d42 <USBD_LL_Transmit>

  return USBD_OK;
 800ffe0:	2300      	movs	r3, #0
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b084      	sub	sp, #16
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	60f8      	str	r0, [r7, #12]
 800fff2:	60b9      	str	r1, [r7, #8]
 800fff4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	68ba      	ldr	r2, [r7, #8]
 800fffa:	2100      	movs	r1, #0
 800fffc:	68f8      	ldr	r0, [r7, #12]
 800fffe:	f010 fea0 	bl	8020d42 <USBD_LL_Transmit>

  return USBD_OK;
 8010002:	2300      	movs	r3, #0
}
 8010004:	4618      	mov	r0, r3
 8010006:	3710      	adds	r7, #16
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	60b9      	str	r1, [r7, #8]
 8010016:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2203      	movs	r2, #3
 801001c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	68ba      	ldr	r2, [r7, #8]
 8010034:	2100      	movs	r1, #0
 8010036:	68f8      	ldr	r0, [r7, #12]
 8010038:	f010 fea4 	bl	8020d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801003c:	2300      	movs	r3, #0
}
 801003e:	4618      	mov	r0, r3
 8010040:	3710      	adds	r7, #16
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}

08010046 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010046:	b580      	push	{r7, lr}
 8010048:	b084      	sub	sp, #16
 801004a:	af00      	add	r7, sp, #0
 801004c:	60f8      	str	r0, [r7, #12]
 801004e:	60b9      	str	r1, [r7, #8]
 8010050:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	68ba      	ldr	r2, [r7, #8]
 8010056:	2100      	movs	r1, #0
 8010058:	68f8      	ldr	r0, [r7, #12]
 801005a:	f010 fe93 	bl	8020d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801005e:	2300      	movs	r3, #0
}
 8010060:	4618      	mov	r0, r3
 8010062:	3710      	adds	r7, #16
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}

08010068 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b082      	sub	sp, #8
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2204      	movs	r2, #4
 8010074:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010078:	2300      	movs	r3, #0
 801007a:	2200      	movs	r2, #0
 801007c:	2100      	movs	r1, #0
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f010 fe5f 	bl	8020d42 <USBD_LL_Transmit>

  return USBD_OK;
 8010084:	2300      	movs	r3, #0
}
 8010086:	4618      	mov	r0, r3
 8010088:	3708      	adds	r7, #8
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}

0801008e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801008e:	b580      	push	{r7, lr}
 8010090:	b082      	sub	sp, #8
 8010092:	af00      	add	r7, sp, #0
 8010094:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2205      	movs	r2, #5
 801009a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801009e:	2300      	movs	r3, #0
 80100a0:	2200      	movs	r2, #0
 80100a2:	2100      	movs	r1, #0
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f010 fe6d 	bl	8020d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80100aa:	2300      	movs	r3, #0
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3708      	adds	r7, #8
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 80100b4:	b480      	push	{r7}
 80100b6:	b08b      	sub	sp, #44	; 0x2c
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80100c0:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	881b      	ldrh	r3, [r3, #0]
 80100d2:	461a      	mov	r2, r3
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	885b      	ldrh	r3, [r3, #2]
 80100d8:	fb02 f303 	mul.w	r3, r2, r3
 80100dc:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80100de:	69bb      	ldr	r3, [r7, #24]
 80100e0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80100e2:	e010      	b.n	8010106 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 80100e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e6:	1d1a      	adds	r2, r3, #4
 80100e8:	627a      	str	r2, [r7, #36]	; 0x24
 80100ea:	ed93 7a00 	vldr	s14, [r3]
 80100ee:	6a3b      	ldr	r3, [r7, #32]
 80100f0:	1d1a      	adds	r2, r3, #4
 80100f2:	623a      	str	r2, [r7, #32]
 80100f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80100f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100fc:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	3b01      	subs	r3, #1
 8010104:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d1eb      	bne.n	80100e4 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 801010c:	2300      	movs	r3, #0
 801010e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8010110:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010114:	4618      	mov	r0, r3
 8010116:	372c      	adds	r7, #44	; 0x2c
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8010120:	b480      	push	{r7}
 8010122:	b08b      	sub	sp, #44	; 0x2c
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	881b      	ldrh	r3, [r3, #0]
 801013a:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	885b      	ldrh	r3, [r3, #2]
 8010140:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8010142:	89fb      	ldrh	r3, [r7, #14]
 8010144:	61bb      	str	r3, [r7, #24]
 8010146:	2300      	movs	r3, #0
 8010148:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	693a      	ldr	r2, [r7, #16]
 8010150:	4413      	add	r3, r2
 8010152:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8010154:	89bb      	ldrh	r3, [r7, #12]
 8010156:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8010158:	e00d      	b.n	8010176 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 801015a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015c:	1d1a      	adds	r2, r3, #4
 801015e:	627a      	str	r2, [r7, #36]	; 0x24
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	6a3b      	ldr	r3, [r7, #32]
 8010164:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8010166:	89fb      	ldrh	r3, [r7, #14]
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	6a3a      	ldr	r2, [r7, #32]
 801016c:	4413      	add	r3, r2
 801016e:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	3b01      	subs	r3, #1
 8010174:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8010176:	69fb      	ldr	r3, [r7, #28]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d1ee      	bne.n	801015a <arm_mat_trans_f32+0x3a>
      }

      i++;
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	3301      	adds	r3, #1
 8010180:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8010182:	69bb      	ldr	r3, [r7, #24]
 8010184:	3b01      	subs	r3, #1
 8010186:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8010188:	69bb      	ldr	r3, [r7, #24]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d1dd      	bne.n	801014a <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 801018e:	2300      	movs	r3, #0
 8010190:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8010192:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010196:	4618      	mov	r0, r3
 8010198:	372c      	adds	r7, #44	; 0x2c
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr

080101a2 <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 80101a2:	b480      	push	{r7}
 80101a4:	b087      	sub	sp, #28
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	60f8      	str	r0, [r7, #12]
 80101aa:	60b9      	str	r1, [r7, #8]
 80101ac:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 80101ae:	f04f 0300 	mov.w	r3, #0
 80101b2:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80101b8:	e00d      	b.n	80101d6 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	1d1a      	adds	r2, r3, #4
 80101be:	60fa      	str	r2, [r7, #12]
 80101c0:	edd3 7a00 	vldr	s15, [r3]
 80101c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80101c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101cc:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	3b01      	subs	r3, #1
 80101d4:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d1ee      	bne.n	80101ba <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	ee07 3a90 	vmov	s15, r3
 80101e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80101e6:	edd7 6a04 	vldr	s13, [r7, #16]
 80101ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	edc3 7a00 	vstr	s15, [r3]
}
 80101f4:	bf00      	nop
 80101f6:	371c      	adds	r7, #28
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b08a      	sub	sp, #40	; 0x28
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 801020c:	f04f 0300 	mov.w	r3, #0
 8010210:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8010216:	e011      	b.n	801023c <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	1d1a      	adds	r2, r3, #4
 801021c:	60fa      	str	r2, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 8010222:	edd7 7a07 	vldr	s15, [r7, #28]
 8010226:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801022a:	ed97 7a08 	vldr	s14, [r7, #32]
 801022e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010232:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 8010236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010238:	3b01      	subs	r3, #1
 801023a:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 801023c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023e:	2b00      	cmp	r3, #0
 8010240:	d1ea      	bne.n	8010218 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	ee07 3a90 	vmov	s15, r3
 8010248:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801024c:	edd7 6a08 	vldr	s13, [r7, #32]
 8010250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010254:	edc7 7a06 	vstr	s15, [r7, #24]
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 801025c:	edd7 7a06 	vldr	s15, [r7, #24]
 8010260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010268:	db09      	blt.n	801027e <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 801026a:	ed97 0a06 	vldr	s0, [r7, #24]
 801026e:	f011 f94d 	bl	802150c <sqrtf>
 8010272:	eef0 7a40 	vmov.f32	s15, s0
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 801027c:	e004      	b.n	8010288 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	f04f 0200 	mov.w	r2, #0
 8010284:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8010286:	bf00      	nop
}
 8010288:	bf00      	nop
 801028a:	3728      	adds	r7, #40	; 0x28
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8010290:	b480      	push	{r7}
 8010292:	b089      	sub	sp, #36	; 0x24
 8010294:	af00      	add	r7, sp, #0
 8010296:	60f8      	str	r0, [r7, #12]
 8010298:	460b      	mov	r3, r1
 801029a:	607a      	str	r2, [r7, #4]
 801029c:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 801029e:	2300      	movs	r3, #0
 80102a0:	61fb      	str	r3, [r7, #28]
 80102a2:	e043      	b.n	801032c <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	005b      	lsls	r3, r3, #1
 80102a8:	687a      	ldr	r2, [r7, #4]
 80102aa:	4413      	add	r3, r2
 80102ac:	881b      	ldrh	r3, [r3, #0]
 80102ae:	089b      	lsrs	r3, r3, #2
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	3301      	adds	r3, #1
 80102b8:	005b      	lsls	r3, r3, #1
 80102ba:	687a      	ldr	r2, [r7, #4]
 80102bc:	4413      	add	r3, r2
 80102be:	881b      	ldrh	r3, [r3, #0]
 80102c0:	089b      	lsrs	r3, r3, #2
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 80102c6:	69bb      	ldr	r3, [r7, #24]
 80102c8:	009b      	lsls	r3, r3, #2
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	4413      	add	r3, r2
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	68fa      	ldr	r2, [r7, #12]
 80102d8:	441a      	add	r2, r3
 80102da:	69bb      	ldr	r3, [r7, #24]
 80102dc:	009b      	lsls	r3, r3, #2
 80102de:	68f9      	ldr	r1, [r7, #12]
 80102e0:	440b      	add	r3, r1
 80102e2:	6812      	ldr	r2, [r2, #0]
 80102e4:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	009b      	lsls	r3, r3, #2
 80102ea:	68fa      	ldr	r2, [r7, #12]
 80102ec:	4413      	add	r3, r2
 80102ee:	693a      	ldr	r2, [r7, #16]
 80102f0:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	3301      	adds	r3, #1
 80102f6:	009b      	lsls	r3, r3, #2
 80102f8:	68fa      	ldr	r2, [r7, #12]
 80102fa:	4413      	add	r3, r2
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8010300:	697b      	ldr	r3, [r7, #20]
 8010302:	3301      	adds	r3, #1
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	68fa      	ldr	r2, [r7, #12]
 8010308:	441a      	add	r2, r3
 801030a:	69bb      	ldr	r3, [r7, #24]
 801030c:	3301      	adds	r3, #1
 801030e:	009b      	lsls	r3, r3, #2
 8010310:	68f9      	ldr	r1, [r7, #12]
 8010312:	440b      	add	r3, r1
 8010314:	6812      	ldr	r2, [r2, #0]
 8010316:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	3301      	adds	r3, #1
 801031c:	009b      	lsls	r3, r3, #2
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	4413      	add	r3, r2
 8010322:	693a      	ldr	r2, [r7, #16]
 8010324:	601a      	str	r2, [r3, #0]

    i += 2;
 8010326:	69fb      	ldr	r3, [r7, #28]
 8010328:	3302      	adds	r3, #2
 801032a:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 801032c:	897b      	ldrh	r3, [r7, #10]
 801032e:	69fa      	ldr	r2, [r7, #28]
 8010330:	429a      	cmp	r2, r3
 8010332:	d3b7      	bcc.n	80102a4 <arm_bitreversal_32+0x14>
  }
}
 8010334:	bf00      	nop
 8010336:	bf00      	nop
 8010338:	3724      	adds	r7, #36	; 0x24
 801033a:	46bd      	mov	sp, r7
 801033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010340:	4770      	bx	lr

08010342 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8010342:	b580      	push	{r7, lr}
 8010344:	b0a0      	sub	sp, #128	; 0x80
 8010346:	af00      	add	r7, sp, #0
 8010348:	6078      	str	r0, [r7, #4]
 801034a:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	881b      	ldrh	r3, [r3, #0]
 8010350:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8010352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010354:	009b      	lsls	r3, r3, #2
 8010356:	683a      	ldr	r2, [r7, #0]
 8010358:	4413      	add	r3, r2
 801035a:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8010366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010368:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 801036a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801036c:	085b      	lsrs	r3, r3, #1
 801036e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8010370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	683a      	ldr	r2, [r7, #0]
 8010376:	4413      	add	r3, r2
 8010378:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 801037a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801037c:	009b      	lsls	r3, r3, #2
 801037e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010380:	4413      	add	r3, r2
 8010382:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8010384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010386:	089b      	lsrs	r3, r3, #2
 8010388:	66fb      	str	r3, [r7, #108]	; 0x6c
 801038a:	e1b6      	b.n	80106fa <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	685b      	ldr	r3, [r3, #4]
 8010396:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	689b      	ldr	r3, [r3, #8]
 801039c:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	68db      	ldr	r3, [r3, #12]
 80103a2:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 80103a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 80103aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103ac:	685b      	ldr	r3, [r3, #4]
 80103ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 80103b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103b2:	689b      	ldr	r3, [r3, #8]
 80103b4:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 80103b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103b8:	68db      	ldr	r3, [r3, #12]
 80103ba:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 80103bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 80103c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 80103c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80103ca:	689b      	ldr	r3, [r3, #8]
 80103cc:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 80103ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80103d0:	68db      	ldr	r3, [r3, #12]
 80103d2:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 80103d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 80103da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 80103e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103e2:	689b      	ldr	r3, [r3, #8]
 80103e4:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 80103e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 80103ec:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80103f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	1d1a      	adds	r2, r3, #4
 80103f8:	603a      	str	r2, [r7, #0]
 80103fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103fe:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8010402:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8010406:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	1d1a      	adds	r2, r3, #4
 801040e:	603a      	str	r2, [r7, #0]
 8010410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010414:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8010418:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801041c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	1d1a      	adds	r2, r3, #4
 8010424:	603a      	str	r2, [r7, #0]
 8010426:	ee77 7a27 	vadd.f32	s15, s14, s15
 801042a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 801042e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8010432:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	1d1a      	adds	r2, r3, #4
 801043a:	603a      	str	r2, [r7, #0]
 801043c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010440:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8010444:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8010448:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801044c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010450:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8010454:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8010458:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801045c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010460:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8010464:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010468:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801046c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010470:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8010474:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8010478:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801047c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010480:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8010484:	ed97 7a06 	vldr	s14, [r7, #24]
 8010488:	edd7 7a02 	vldr	s15, [r7, #8]
 801048c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801048e:	1d1a      	adds	r2, r3, #4
 8010490:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010496:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 801049a:	ed97 7a07 	vldr	s14, [r7, #28]
 801049e:	edd7 7a03 	vldr	s15, [r7, #12]
 80104a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80104a4:	1d1a      	adds	r2, r3, #4
 80104a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80104a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104ac:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 80104b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80104b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80104b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80104ba:	1d1a      	adds	r2, r3, #4
 80104bc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80104be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104c2:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 80104c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80104ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80104ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80104d0:	1d1a      	adds	r2, r3, #4
 80104d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80104d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104d8:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 80104dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80104e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80104e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104e8:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 80104ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80104f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80104f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104f8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 80104fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8010500:	edd7 7a08 	vldr	s15, [r7, #32]
 8010504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010508:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 801050c:	ed97 7a05 	vldr	s14, [r7, #20]
 8010510:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010518:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 801051c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801051e:	1d1a      	adds	r2, r3, #4
 8010520:	673a      	str	r2, [r7, #112]	; 0x70
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8010526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010528:	1d1a      	adds	r2, r3, #4
 801052a:	673a      	str	r2, [r7, #112]	; 0x70
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8010530:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010534:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010538:	ee67 7a27 	vmul.f32	s15, s14, s15
 801053c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8010540:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010544:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010548:	ee67 7a27 	vmul.f32	s15, s14, s15
 801054c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8010550:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010554:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010558:	ee67 7a27 	vmul.f32	s15, s14, s15
 801055c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8010560:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010564:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010568:	ee67 7a27 	vmul.f32	s15, s14, s15
 801056c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8010570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010572:	1d1a      	adds	r2, r3, #4
 8010574:	677a      	str	r2, [r7, #116]	; 0x74
 8010576:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801057a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801057e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010582:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8010586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010588:	1d1a      	adds	r2, r3, #4
 801058a:	677a      	str	r2, [r7, #116]	; 0x74
 801058c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010590:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8010594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010598:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 801059c:	edd7 7a02 	vldr	s15, [r7, #8]
 80105a0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80105a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105a8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 80105ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80105b0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80105b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105b8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 80105bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80105c0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80105c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105c8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 80105cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80105d0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80105d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105d8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 80105dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105de:	1d1a      	adds	r2, r3, #4
 80105e0:	67ba      	str	r2, [r7, #120]	; 0x78
 80105e2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80105e6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80105ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105ee:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80105f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105f4:	1d1a      	adds	r2, r3, #4
 80105f6:	67ba      	str	r2, [r7, #120]	; 0x78
 80105f8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80105fc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8010600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010604:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8010608:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801060a:	1d1a      	adds	r2, r3, #4
 801060c:	673a      	str	r2, [r7, #112]	; 0x70
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8010612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010614:	1d1a      	adds	r2, r3, #4
 8010616:	673a      	str	r2, [r7, #112]	; 0x70
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 801061c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010620:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010628:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 801062c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010630:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010638:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 801063c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010640:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010648:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 801064c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010650:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010658:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 801065c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801065e:	1d1a      	adds	r2, r3, #4
 8010660:	677a      	str	r2, [r7, #116]	; 0x74
 8010662:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010666:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801066a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801066e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8010672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010674:	1d1a      	adds	r2, r3, #4
 8010676:	677a      	str	r2, [r7, #116]	; 0x74
 8010678:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801067c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8010680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010684:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8010688:	edd7 7a04 	vldr	s15, [r7, #16]
 801068c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010694:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8010698:	edd7 7a05 	vldr	s15, [r7, #20]
 801069c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80106a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106a4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 80106a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80106ac:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80106b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106b4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 80106b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80106bc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80106c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106c4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 80106c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106ca:	1d1a      	adds	r2, r3, #4
 80106cc:	67ba      	str	r2, [r7, #120]	; 0x78
 80106ce:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80106d2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80106d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106da:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80106de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106e0:	1d1a      	adds	r2, r3, #4
 80106e2:	67ba      	str	r2, [r7, #120]	; 0x78
 80106e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80106e8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80106ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106f0:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 80106f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106f6:	3b01      	subs	r3, #1
 80106f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80106fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	f47f ae45 	bne.w	801038c <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8010702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010704:	b299      	uxth	r1, r3
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	685a      	ldr	r2, [r3, #4]
 801070a:	2302      	movs	r3, #2
 801070c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801070e:	f000 fef1 	bl	80114f4 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8010712:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010714:	b299      	uxth	r1, r3
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	685a      	ldr	r2, [r3, #4]
 801071a:	2302      	movs	r3, #2
 801071c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801071e:	f000 fee9 	bl	80114f4 <arm_radix8_butterfly_f32>
}
 8010722:	bf00      	nop
 8010724:	3780      	adds	r7, #128	; 0x80
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}

0801072a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 801072a:	b580      	push	{r7, lr}
 801072c:	b0ac      	sub	sp, #176	; 0xb0
 801072e:	af00      	add	r7, sp, #0
 8010730:	6078      	str	r0, [r7, #4]
 8010732:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	881b      	ldrh	r3, [r3, #0]
 8010738:	085b      	lsrs	r3, r3, #1
 801073a:	b29b      	uxth	r3, r3
 801073c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8010740:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010744:	009b      	lsls	r3, r3, #2
 8010746:	683a      	ldr	r2, [r7, #0]
 8010748:	4413      	add	r3, r2
 801074a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 801074e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010752:	009b      	lsls	r3, r3, #2
 8010754:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010758:	4413      	add	r3, r2
 801075a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 801075e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010762:	009b      	lsls	r3, r3, #2
 8010764:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010768:	4413      	add	r3, r2
 801076a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8010772:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010776:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8010778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801077c:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 801077e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010782:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8010784:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010788:	3b04      	subs	r3, #4
 801078a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 801078e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010792:	3b04      	subs	r3, #4
 8010794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8010798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801079c:	3b04      	subs	r3, #4
 801079e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80107a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107a6:	009b      	lsls	r3, r3, #2
 80107a8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80107ac:	4413      	add	r3, r2
 80107ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80107ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80107be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80107c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80107c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80107ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107ce:	085b      	lsrs	r3, r3, #1
 80107d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 80107d4:	2302      	movs	r3, #2
 80107d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80107d8:	2304      	movs	r3, #4
 80107da:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80107dc:	2306      	movs	r3, #6
 80107de:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	ed93 7a00 	vldr	s14, [r3]
 80107e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107ea:	edd3 7a00 	vldr	s15, [r3]
 80107ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107f2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	ed93 7a00 	vldr	s14, [r3]
 80107fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010800:	edd3 7a00 	vldr	s15, [r3]
 8010804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010808:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	3304      	adds	r3, #4
 8010810:	ed93 7a00 	vldr	s14, [r3]
 8010814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010818:	3304      	adds	r3, #4
 801081a:	edd3 7a00 	vldr	s15, [r3]
 801081e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010822:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	3304      	adds	r3, #4
 801082a:	ed93 7a00 	vldr	s14, [r3]
 801082e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010832:	3304      	adds	r3, #4
 8010834:	edd3 7a00 	vldr	s15, [r3]
 8010838:	ee77 7a67 	vsub.f32	s15, s14, s15
 801083c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8010840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010844:	3304      	adds	r3, #4
 8010846:	ed93 7a00 	vldr	s14, [r3]
 801084a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801084e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010852:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010856:	3304      	adds	r3, #4
 8010858:	edd3 7a00 	vldr	s15, [r3]
 801085c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010860:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8010864:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010868:	edd3 7a00 	vldr	s15, [r3]
 801086c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010870:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010878:	edd3 7a00 	vldr	s15, [r3]
 801087c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010880:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8010884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010888:	edd3 7a00 	vldr	s15, [r3]
 801088c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010894:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010898:	edd3 7a00 	vldr	s15, [r3]
 801089c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108a0:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80108a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108a8:	3304      	adds	r3, #4
 80108aa:	edd3 7a00 	vldr	s15, [r3]
 80108ae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80108b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80108b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80108ba:	3304      	adds	r3, #4
 80108bc:	edd3 7a00 	vldr	s15, [r3]
 80108c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108c4:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80108c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108cc:	3304      	adds	r3, #4
 80108ce:	edd3 7a00 	vldr	s15, [r3]
 80108d2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80108d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80108da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80108de:	3304      	adds	r3, #4
 80108e0:	edd3 7a00 	vldr	s15, [r3]
 80108e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108e8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80108ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108f0:	ed93 7a00 	vldr	s14, [r3]
 80108f4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80108f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80108fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010900:	edd3 7a00 	vldr	s15, [r3]
 8010904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010908:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 801090c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010910:	ed93 7a00 	vldr	s14, [r3]
 8010914:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010918:	ee37 7a27 	vadd.f32	s14, s14, s15
 801091c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010920:	edd3 7a00 	vldr	s15, [r3]
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	1d1a      	adds	r2, r3, #4
 8010928:	603a      	str	r2, [r7, #0]
 801092a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801092e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8010932:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010936:	3304      	adds	r3, #4
 8010938:	ed93 7a00 	vldr	s14, [r3]
 801093c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010940:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010948:	3304      	adds	r3, #4
 801094a:	edd3 7a00 	vldr	s15, [r3]
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	1d1a      	adds	r2, r3, #4
 8010952:	603a      	str	r2, [r7, #0]
 8010954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010958:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 801095c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010960:	1d1a      	adds	r2, r3, #4
 8010962:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010968:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 801096a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801096e:	1d1a      	adds	r2, r3, #4
 8010970:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010976:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8010978:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801097c:	1d1a      	adds	r2, r3, #4
 801097e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010982:	69fa      	ldr	r2, [r7, #28]
 8010984:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8010986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801098a:	1d1a      	adds	r2, r3, #4
 801098c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010990:	6a3a      	ldr	r2, [r7, #32]
 8010992:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8010994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010998:	1d1a      	adds	r2, r3, #4
 801099a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 801099e:	68fa      	ldr	r2, [r7, #12]
 80109a0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80109a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80109a6:	1d1a      	adds	r2, r3, #4
 80109a8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80109ac:	693a      	ldr	r2, [r7, #16]
 80109ae:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80109b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80109b2:	009b      	lsls	r3, r3, #2
 80109b4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80109b8:	4413      	add	r3, r2
 80109ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80109be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109c0:	009b      	lsls	r3, r3, #2
 80109c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80109c6:	4413      	add	r3, r2
 80109c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80109cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109ce:	009b      	lsls	r3, r3, #2
 80109d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80109d4:	4413      	add	r3, r2
 80109d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80109da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80109de:	3b02      	subs	r3, #2
 80109e0:	085b      	lsrs	r3, r3, #1
 80109e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80109e6:	e31a      	b.n	801101e <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	ed93 7a00 	vldr	s14, [r3]
 80109ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80109f2:	edd3 7a00 	vldr	s15, [r3]
 80109f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109fa:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	ed93 7a00 	vldr	s14, [r3]
 8010a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010a08:	edd3 7a00 	vldr	s15, [r3]
 8010a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a10:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	3304      	adds	r3, #4
 8010a18:	ed93 7a00 	vldr	s14, [r3]
 8010a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010a20:	3304      	adds	r3, #4
 8010a22:	edd3 7a00 	vldr	s15, [r3]
 8010a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a2a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	3304      	adds	r3, #4
 8010a32:	ed93 7a00 	vldr	s14, [r3]
 8010a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010a3a:	3304      	adds	r3, #4
 8010a3c:	edd3 7a00 	vldr	s15, [r3]
 8010a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a44:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8010a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a4c:	3304      	adds	r3, #4
 8010a4e:	ed93 7a00 	vldr	s14, [r3]
 8010a52:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8010a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a5e:	3304      	adds	r3, #4
 8010a60:	edd3 7a00 	vldr	s15, [r3]
 8010a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a68:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8010a6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a70:	edd3 7a00 	vldr	s15, [r3]
 8010a74:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010a78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010a7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a80:	edd3 7a00 	vldr	s15, [r3]
 8010a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a88:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8010a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a90:	edd3 7a00 	vldr	s15, [r3]
 8010a94:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010a98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010aa0:	edd3 7a00 	vldr	s15, [r3]
 8010aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010aa8:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8010aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ab0:	3304      	adds	r3, #4
 8010ab2:	edd3 7a00 	vldr	s15, [r3]
 8010ab6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010aba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010ac2:	3304      	adds	r3, #4
 8010ac4:	edd3 7a00 	vldr	s15, [r3]
 8010ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010acc:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8010ad0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ad4:	3304      	adds	r3, #4
 8010ad6:	edd3 7a00 	vldr	s15, [r3]
 8010ada:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010ade:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010ae6:	3304      	adds	r3, #4
 8010ae8:	edd3 7a00 	vldr	s15, [r3]
 8010aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010af0:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8010af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010af8:	ed93 7a00 	vldr	s14, [r3]
 8010afc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b08:	edd3 7a00 	vldr	s15, [r3]
 8010b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b10:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8010b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b18:	ed93 7a00 	vldr	s14, [r3]
 8010b1c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b28:	edd3 7a00 	vldr	s15, [r3]
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	1d1a      	adds	r2, r3, #4
 8010b30:	603a      	str	r2, [r7, #0]
 8010b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b36:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8010b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b3e:	3304      	adds	r3, #4
 8010b40:	ed93 7a00 	vldr	s14, [r3]
 8010b44:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010b48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010b4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b50:	3304      	adds	r3, #4
 8010b52:	edd3 7a00 	vldr	s15, [r3]
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	1d1a      	adds	r2, r3, #4
 8010b5a:	603a      	str	r2, [r7, #0]
 8010b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b60:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8010b64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010b68:	3b04      	subs	r3, #4
 8010b6a:	ed93 7a00 	vldr	s14, [r3]
 8010b6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010b72:	3b04      	subs	r3, #4
 8010b74:	edd3 7a00 	vldr	s15, [r3]
 8010b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b7c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8010b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010b84:	3b04      	subs	r3, #4
 8010b86:	ed93 7a00 	vldr	s14, [r3]
 8010b8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010b8e:	3b04      	subs	r3, #4
 8010b90:	edd3 7a00 	vldr	s15, [r3]
 8010b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b98:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8010b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010ba0:	ed93 7a00 	vldr	s14, [r3]
 8010ba4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010ba8:	edd3 7a00 	vldr	s15, [r3]
 8010bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010bb0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8010bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010bb8:	ed93 7a00 	vldr	s14, [r3]
 8010bbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010bc0:	edd3 7a00 	vldr	s15, [r3]
 8010bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010bc8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8010bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010bd0:	ed93 7a00 	vldr	s14, [r3]
 8010bd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010bd8:	edd3 7a00 	vldr	s15, [r3]
 8010bdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010be0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010be8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8010bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010bf0:	ed93 7a00 	vldr	s14, [r3]
 8010bf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010bf8:	edd3 7a00 	vldr	s15, [r3]
 8010bfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c04:	3b04      	subs	r3, #4
 8010c06:	edd3 7a00 	vldr	s15, [r3]
 8010c0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c12:	3b04      	subs	r3, #4
 8010c14:	edd3 7a00 	vldr	s15, [r3]
 8010c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c1c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8010c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c24:	3b04      	subs	r3, #4
 8010c26:	edd3 7a00 	vldr	s15, [r3]
 8010c2a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010c2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c36:	3b04      	subs	r3, #4
 8010c38:	edd3 7a00 	vldr	s15, [r3]
 8010c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c40:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8010c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c48:	edd3 7a00 	vldr	s15, [r3]
 8010c4c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010c50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c58:	edd3 7a00 	vldr	s15, [r3]
 8010c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c60:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8010c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c68:	ed93 7a00 	vldr	s14, [r3]
 8010c6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c70:	edd3 7a00 	vldr	s15, [r3]
 8010c74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c78:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c80:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8010c84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c88:	3b04      	subs	r3, #4
 8010c8a:	ed93 7a00 	vldr	s14, [r3]
 8010c8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c92:	3b04      	subs	r3, #4
 8010c94:	edd3 7a00 	vldr	s15, [r3]
 8010c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c9c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8010ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ca4:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8010ca8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010cac:	ed93 7a00 	vldr	s14, [r3]
 8010cb0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010cb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010cbc:	edd3 7a00 	vldr	s15, [r3]
 8010cc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010cc4:	1f1a      	subs	r2, r3, #4
 8010cc6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cce:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8010cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010cd6:	3b04      	subs	r3, #4
 8010cd8:	ed93 7a00 	vldr	s14, [r3]
 8010cdc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010ce4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010ce8:	3b04      	subs	r3, #4
 8010cea:	edd3 7a00 	vldr	s15, [r3]
 8010cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010cf2:	1f1a      	subs	r2, r3, #4
 8010cf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cfc:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8010d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d04:	1d1a      	adds	r2, r3, #4
 8010d06:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 8010d0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d12:	1d1a      	adds	r2, r3, #4
 8010d14:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8010d1c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010d20:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d28:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8010d2c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010d30:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d38:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8010d3c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010d40:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d48:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8010d4c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010d50:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8010d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010d60:	1d1a      	adds	r2, r3, #4
 8010d62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010d66:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010d6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d72:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8010d76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010d7a:	1d1a      	adds	r2, r3, #4
 8010d7c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010d80:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010d84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d8c:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8010d90:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010d94:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d9c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8010da0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010da4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8010db0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8010db4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dbc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8010dc0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010dc4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dcc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8010dd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010dd4:	1f1a      	subs	r2, r3, #4
 8010dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010dda:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010dde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010de6:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8010dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010dee:	1f1a      	subs	r2, r3, #4
 8010df0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010df4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010df8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e00:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8010e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8010e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8010e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010e16:	009b      	lsls	r3, r3, #2
 8010e18:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010e1c:	4413      	add	r3, r2
 8010e1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8010e22:	edd7 7a07 	vldr	s15, [r7, #28]
 8010e26:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e2e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8010e32:	edd7 7a08 	vldr	s15, [r7, #32]
 8010e36:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e3e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8010e42:	edd7 7a08 	vldr	s15, [r7, #32]
 8010e46:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e4e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8010e52:	edd7 7a07 	vldr	s15, [r7, #28]
 8010e56:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e5e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8010e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e66:	1d1a      	adds	r2, r3, #4
 8010e68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010e6c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010e70:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e78:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8010e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e80:	1d1a      	adds	r2, r3, #4
 8010e82:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010e86:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010e8a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e92:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8010e96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010e9a:	eef1 7a67 	vneg.f32	s15, s15
 8010e9e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ea6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8010eaa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010eae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eb6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8010eba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010ebe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ec6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8010eca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8010ece:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ed6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8010eda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010ede:	1f1a      	subs	r2, r3, #4
 8010ee0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010ee4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010ee8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ef0:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8010ef4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010ef8:	1f1a      	subs	r2, r3, #4
 8010efa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010efe:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8010f02:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8010f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f0a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8010f0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8010f16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8010f1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f20:	009b      	lsls	r3, r3, #2
 8010f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010f26:	4413      	add	r3, r2
 8010f28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8010f2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8010f30:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f38:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8010f3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010f40:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f48:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8010f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010f50:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f58:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8010f5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8010f60:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f68:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8010f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010f70:	1d1a      	adds	r2, r3, #4
 8010f72:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010f76:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010f7a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f82:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8010f86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010f8a:	1d1a      	adds	r2, r3, #4
 8010f8c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010f90:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010f94:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f9c:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8010fa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8010fa4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8010fb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8010fb4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fbc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8010fc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8010fc4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fcc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8010fd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8010fd4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fdc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8010fe0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010fe4:	1f1a      	subs	r2, r3, #4
 8010fe6:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8010fea:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010fee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ff6:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8010ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010ffe:	1f1a      	subs	r2, r3, #4
 8011000:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8011004:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8011008:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801100c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011010:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8011014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011018:	3b01      	subs	r3, #1
 801101a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801101e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011022:	2b00      	cmp	r3, #0
 8011024:	f47f ace0 	bne.w	80109e8 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	ed93 7a00 	vldr	s14, [r3]
 801102e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011032:	edd3 7a00 	vldr	s15, [r3]
 8011036:	ee77 7a27 	vadd.f32	s15, s14, s15
 801103a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	ed93 7a00 	vldr	s14, [r3]
 8011044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011048:	edd3 7a00 	vldr	s15, [r3]
 801104c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011050:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	3304      	adds	r3, #4
 8011058:	ed93 7a00 	vldr	s14, [r3]
 801105c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011060:	3304      	adds	r3, #4
 8011062:	edd3 7a00 	vldr	s15, [r3]
 8011066:	ee77 7a27 	vadd.f32	s15, s14, s15
 801106a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	3304      	adds	r3, #4
 8011072:	ed93 7a00 	vldr	s14, [r3]
 8011076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801107a:	3304      	adds	r3, #4
 801107c:	edd3 7a00 	vldr	s15, [r3]
 8011080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011084:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8011088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801108c:	3304      	adds	r3, #4
 801108e:	ed93 7a00 	vldr	s14, [r3]
 8011092:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8011096:	ee37 7a27 	vadd.f32	s14, s14, s15
 801109a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801109e:	3304      	adds	r3, #4
 80110a0:	edd3 7a00 	vldr	s15, [r3]
 80110a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110a8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80110ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80110b0:	edd3 7a00 	vldr	s15, [r3]
 80110b4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80110b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80110bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80110c0:	edd3 7a00 	vldr	s15, [r3]
 80110c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110c8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80110cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80110d0:	edd3 7a00 	vldr	s15, [r3]
 80110d4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80110d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80110dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80110e0:	edd3 7a00 	vldr	s15, [r3]
 80110e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110e8:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80110ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80110f0:	3304      	adds	r3, #4
 80110f2:	edd3 7a00 	vldr	s15, [r3]
 80110f6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80110fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80110fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011102:	3304      	adds	r3, #4
 8011104:	edd3 7a00 	vldr	s15, [r3]
 8011108:	ee77 7a67 	vsub.f32	s15, s14, s15
 801110c:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8011110:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011114:	3304      	adds	r3, #4
 8011116:	edd3 7a00 	vldr	s15, [r3]
 801111a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801111e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011122:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011126:	3304      	adds	r3, #4
 8011128:	edd3 7a00 	vldr	s15, [r3]
 801112c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011130:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8011134:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011138:	ed93 7a00 	vldr	s14, [r3]
 801113c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8011140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011148:	edd3 7a00 	vldr	s15, [r3]
 801114c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011150:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8011154:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011158:	ed93 7a00 	vldr	s14, [r3]
 801115c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8011160:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011164:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011168:	edd3 7a00 	vldr	s15, [r3]
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	1d1a      	adds	r2, r3, #4
 8011170:	603a      	str	r2, [r7, #0]
 8011172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011176:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 801117a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801117e:	3304      	adds	r3, #4
 8011180:	ed93 7a00 	vldr	s14, [r3]
 8011184:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8011188:	ee37 7a27 	vadd.f32	s14, s14, s15
 801118c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011190:	3304      	adds	r3, #4
 8011192:	edd3 7a00 	vldr	s15, [r3]
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	1d1a      	adds	r2, r3, #4
 801119a:	603a      	str	r2, [r7, #0]
 801119c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111a0:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 80111a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 80111ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 80111b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80111b8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80111bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111c0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 80111c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80111c8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80111cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111d0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 80111d4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80111d8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80111dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111e0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 80111e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80111e8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80111ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111f0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80111f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80111f8:	1d1a      	adds	r2, r3, #4
 80111fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80111fe:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8011202:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011206:	ee77 7a27 	vadd.f32	s15, s14, s15
 801120a:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 801120e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011212:	1d1a      	adds	r2, r3, #4
 8011214:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8011218:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801121c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8011220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011224:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8011228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8011230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8011238:	edd7 7a07 	vldr	s15, [r7, #28]
 801123c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8011240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011244:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8011248:	edd7 7a08 	vldr	s15, [r7, #32]
 801124c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8011250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011254:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8011258:	edd7 7a08 	vldr	s15, [r7, #32]
 801125c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8011260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011264:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8011268:	edd7 7a07 	vldr	s15, [r7, #28]
 801126c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8011270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011274:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8011278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801127c:	1d1a      	adds	r2, r3, #4
 801127e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011282:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8011286:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801128a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801128e:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8011292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011296:	1d1a      	adds	r2, r3, #4
 8011298:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801129c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80112a0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80112a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112a8:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 80112ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 80112b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 80112bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80112c0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80112c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112c8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 80112cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80112d0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80112d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112d8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 80112dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80112e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80112e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112e8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 80112ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80112f0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80112f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112f8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80112fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011300:	1d1a      	adds	r2, r3, #4
 8011302:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8011306:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801130a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011312:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8011316:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801131a:	1d1a      	adds	r2, r3, #4
 801131c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8011320:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8011324:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8011328:	ee77 7a67 	vsub.f32	s15, s14, s15
 801132c:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8011330:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011334:	b299      	uxth	r1, r3
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	685a      	ldr	r2, [r3, #4]
 801133a:	2304      	movs	r3, #4
 801133c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801133e:	f000 f8d9 	bl	80114f4 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8011342:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011346:	b299      	uxth	r1, r3
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	685a      	ldr	r2, [r3, #4]
 801134c:	2304      	movs	r3, #4
 801134e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8011350:	f000 f8d0 	bl	80114f4 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8011354:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011358:	b299      	uxth	r1, r3
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	685a      	ldr	r2, [r3, #4]
 801135e:	2304      	movs	r3, #4
 8011360:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8011362:	f000 f8c7 	bl	80114f4 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8011366:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801136a:	b299      	uxth	r1, r3
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	685a      	ldr	r2, [r3, #4]
 8011370:	2304      	movs	r3, #4
 8011372:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8011374:	f000 f8be 	bl	80114f4 <arm_radix8_butterfly_f32>
}
 8011378:	bf00      	nop
 801137a:	37b0      	adds	r7, #176	; 0xb0
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b088      	sub	sp, #32
 8011384:	af00      	add	r7, sp, #0
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	60b9      	str	r1, [r7, #8]
 801138a:	4611      	mov	r1, r2
 801138c:	461a      	mov	r2, r3
 801138e:	460b      	mov	r3, r1
 8011390:	71fb      	strb	r3, [r7, #7]
 8011392:	4613      	mov	r3, r2
 8011394:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	881b      	ldrh	r3, [r3, #0]
 801139a:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 801139c:	79fb      	ldrb	r3, [r7, #7]
 801139e:	2b01      	cmp	r3, #1
 80113a0:	d117      	bne.n	80113d2 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	3304      	adds	r3, #4
 80113a6:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80113a8:	2300      	movs	r3, #0
 80113aa:	61fb      	str	r3, [r7, #28]
 80113ac:	e00d      	b.n	80113ca <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 80113ae:	69bb      	ldr	r3, [r7, #24]
 80113b0:	edd3 7a00 	vldr	s15, [r3]
 80113b4:	eef1 7a67 	vneg.f32	s15, s15
 80113b8:	69bb      	ldr	r3, [r7, #24]
 80113ba:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 80113be:	69bb      	ldr	r3, [r7, #24]
 80113c0:	3308      	adds	r3, #8
 80113c2:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80113c4:	69fb      	ldr	r3, [r7, #28]
 80113c6:	3301      	adds	r3, #1
 80113c8:	61fb      	str	r3, [r7, #28]
 80113ca:	69fa      	ldr	r2, [r7, #28]
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d3ed      	bcc.n	80113ae <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113d8:	d040      	beq.n	801145c <arm_cfft_f32+0xdc>
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113e0:	d845      	bhi.n	801146e <arm_cfft_f32+0xee>
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80113e8:	d033      	beq.n	8011452 <arm_cfft_f32+0xd2>
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80113f0:	d83d      	bhi.n	801146e <arm_cfft_f32+0xee>
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80113f8:	d026      	beq.n	8011448 <arm_cfft_f32+0xc8>
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011400:	d835      	bhi.n	801146e <arm_cfft_f32+0xee>
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011408:	d028      	beq.n	801145c <arm_cfft_f32+0xdc>
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011410:	d82d      	bhi.n	801146e <arm_cfft_f32+0xee>
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011418:	d01b      	beq.n	8011452 <arm_cfft_f32+0xd2>
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011420:	d825      	bhi.n	801146e <arm_cfft_f32+0xee>
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	2b80      	cmp	r3, #128	; 0x80
 8011426:	d00f      	beq.n	8011448 <arm_cfft_f32+0xc8>
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	2b80      	cmp	r3, #128	; 0x80
 801142c:	d81f      	bhi.n	801146e <arm_cfft_f32+0xee>
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	2b40      	cmp	r3, #64	; 0x40
 8011432:	d013      	beq.n	801145c <arm_cfft_f32+0xdc>
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	2b40      	cmp	r3, #64	; 0x40
 8011438:	d819      	bhi.n	801146e <arm_cfft_f32+0xee>
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	2b10      	cmp	r3, #16
 801143e:	d003      	beq.n	8011448 <arm_cfft_f32+0xc8>
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	2b20      	cmp	r3, #32
 8011444:	d005      	beq.n	8011452 <arm_cfft_f32+0xd2>
 8011446:	e012      	b.n	801146e <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8011448:	68b9      	ldr	r1, [r7, #8]
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f7fe ff79 	bl	8010342 <arm_cfft_radix8by2_f32>
    break;
 8011450:	e00d      	b.n	801146e <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8011452:	68b9      	ldr	r1, [r7, #8]
 8011454:	68f8      	ldr	r0, [r7, #12]
 8011456:	f7ff f968 	bl	801072a <arm_cfft_radix8by4_f32>
    break;
 801145a:	e008      	b.n	801146e <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	b299      	uxth	r1, r3
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	685a      	ldr	r2, [r3, #4]
 8011464:	2301      	movs	r3, #1
 8011466:	68b8      	ldr	r0, [r7, #8]
 8011468:	f000 f844 	bl	80114f4 <arm_radix8_butterfly_f32>
    break;
 801146c:	bf00      	nop
  }

  if ( bitReverseFlag )
 801146e:	79bb      	ldrb	r3, [r7, #6]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d007      	beq.n	8011484 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	8999      	ldrh	r1, [r3, #12]
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	689b      	ldr	r3, [r3, #8]
 801147c:	461a      	mov	r2, r3
 801147e:	68b8      	ldr	r0, [r7, #8]
 8011480:	f7fe ff06 	bl	8010290 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8011484:	79fb      	ldrb	r3, [r7, #7]
 8011486:	2b01      	cmp	r3, #1
 8011488:	d130      	bne.n	80114ec <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	ee07 3a90 	vmov	s15, r3
 8011490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801149c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80114a4:	2300      	movs	r3, #0
 80114a6:	61fb      	str	r3, [r7, #28]
 80114a8:	e01c      	b.n	80114e4 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 80114aa:	69bb      	ldr	r3, [r7, #24]
 80114ac:	1d1a      	adds	r2, r3, #4
 80114ae:	61ba      	str	r2, [r7, #24]
 80114b0:	ed93 7a00 	vldr	s14, [r3]
 80114b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80114b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114bc:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 80114c0:	69bb      	ldr	r3, [r7, #24]
 80114c2:	edd3 7a00 	vldr	s15, [r3]
 80114c6:	eeb1 7a67 	vneg.f32	s14, s15
 80114ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80114ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114d2:	69bb      	ldr	r3, [r7, #24]
 80114d4:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 80114d8:	69bb      	ldr	r3, [r7, #24]
 80114da:	3304      	adds	r3, #4
 80114dc:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80114de:	69fb      	ldr	r3, [r7, #28]
 80114e0:	3301      	adds	r3, #1
 80114e2:	61fb      	str	r3, [r7, #28]
 80114e4:	69fa      	ldr	r2, [r7, #28]
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d3de      	bcc.n	80114aa <arm_cfft_f32+0x12a>
    }
  }
}
 80114ec:	bf00      	nop
 80114ee:	3720      	adds	r7, #32
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 80114f4:	b480      	push	{r7}
 80114f6:	b0bd      	sub	sp, #244	; 0xf4
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	607a      	str	r2, [r7, #4]
 80114fe:	461a      	mov	r2, r3
 8011500:	460b      	mov	r3, r1
 8011502:	817b      	strh	r3, [r7, #10]
 8011504:	4613      	mov	r3, r2
 8011506:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8011508:	4b09      	ldr	r3, [pc, #36]	; (8011530 <arm_radix8_butterfly_f32+0x3c>)
 801150a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 801150e:	897b      	ldrh	r3, [r7, #10]
 8011510:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8011514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011518:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 801151c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011520:	08db      	lsrs	r3, r3, #3
 8011522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8011526:	2300      	movs	r3, #0
 8011528:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801152c:	e002      	b.n	8011534 <arm_radix8_butterfly_f32+0x40>
 801152e:	bf00      	nop
 8011530:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8011534:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801153c:	4413      	add	r3, r2
 801153e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8011542:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8011546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801154a:	4413      	add	r3, r2
 801154c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8011550:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011558:	4413      	add	r3, r2
 801155a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 801155e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011566:	4413      	add	r3, r2
 8011568:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 801156c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011574:	4413      	add	r3, r2
 8011576:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 801157a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801157e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011582:	4413      	add	r3, r2
 8011584:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8011588:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801158c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011590:	4413      	add	r3, r2
 8011592:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8011596:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801159a:	00db      	lsls	r3, r3, #3
 801159c:	68fa      	ldr	r2, [r7, #12]
 801159e:	4413      	add	r3, r2
 80115a0:	ed93 7a00 	vldr	s14, [r3]
 80115a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80115a8:	00db      	lsls	r3, r3, #3
 80115aa:	68fa      	ldr	r2, [r7, #12]
 80115ac:	4413      	add	r3, r2
 80115ae:	edd3 7a00 	vldr	s15, [r3]
 80115b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115b6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80115ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80115be:	00db      	lsls	r3, r3, #3
 80115c0:	68fa      	ldr	r2, [r7, #12]
 80115c2:	4413      	add	r3, r2
 80115c4:	ed93 7a00 	vldr	s14, [r3]
 80115c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80115cc:	00db      	lsls	r3, r3, #3
 80115ce:	68fa      	ldr	r2, [r7, #12]
 80115d0:	4413      	add	r3, r2
 80115d2:	edd3 7a00 	vldr	s15, [r3]
 80115d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115da:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80115de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80115e2:	00db      	lsls	r3, r3, #3
 80115e4:	68fa      	ldr	r2, [r7, #12]
 80115e6:	4413      	add	r3, r2
 80115e8:	ed93 7a00 	vldr	s14, [r3]
 80115ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80115f0:	00db      	lsls	r3, r3, #3
 80115f2:	68fa      	ldr	r2, [r7, #12]
 80115f4:	4413      	add	r3, r2
 80115f6:	edd3 7a00 	vldr	s15, [r3]
 80115fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115fe:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8011602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011606:	00db      	lsls	r3, r3, #3
 8011608:	68fa      	ldr	r2, [r7, #12]
 801160a:	4413      	add	r3, r2
 801160c:	ed93 7a00 	vldr	s14, [r3]
 8011610:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011614:	00db      	lsls	r3, r3, #3
 8011616:	68fa      	ldr	r2, [r7, #12]
 8011618:	4413      	add	r3, r2
 801161a:	edd3 7a00 	vldr	s15, [r3]
 801161e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011622:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8011626:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801162a:	00db      	lsls	r3, r3, #3
 801162c:	68fa      	ldr	r2, [r7, #12]
 801162e:	4413      	add	r3, r2
 8011630:	ed93 7a00 	vldr	s14, [r3]
 8011634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011638:	00db      	lsls	r3, r3, #3
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	4413      	add	r3, r2
 801163e:	edd3 7a00 	vldr	s15, [r3]
 8011642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011646:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 801164a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801164e:	00db      	lsls	r3, r3, #3
 8011650:	68fa      	ldr	r2, [r7, #12]
 8011652:	4413      	add	r3, r2
 8011654:	ed93 7a00 	vldr	s14, [r3]
 8011658:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801165c:	00db      	lsls	r3, r3, #3
 801165e:	68fa      	ldr	r2, [r7, #12]
 8011660:	4413      	add	r3, r2
 8011662:	edd3 7a00 	vldr	s15, [r3]
 8011666:	ee77 7a67 	vsub.f32	s15, s14, s15
 801166a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 801166e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011672:	00db      	lsls	r3, r3, #3
 8011674:	68fa      	ldr	r2, [r7, #12]
 8011676:	4413      	add	r3, r2
 8011678:	ed93 7a00 	vldr	s14, [r3]
 801167c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011680:	00db      	lsls	r3, r3, #3
 8011682:	68fa      	ldr	r2, [r7, #12]
 8011684:	4413      	add	r3, r2
 8011686:	edd3 7a00 	vldr	s15, [r3]
 801168a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801168e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8011692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011696:	00db      	lsls	r3, r3, #3
 8011698:	68fa      	ldr	r2, [r7, #12]
 801169a:	4413      	add	r3, r2
 801169c:	ed93 7a00 	vldr	s14, [r3]
 80116a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80116a4:	00db      	lsls	r3, r3, #3
 80116a6:	68fa      	ldr	r2, [r7, #12]
 80116a8:	4413      	add	r3, r2
 80116aa:	edd3 7a00 	vldr	s15, [r3]
 80116ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116b2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80116b6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80116ba:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80116be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116c2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80116c6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80116ca:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80116ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116d2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80116d6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80116da:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80116de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116e2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80116e6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80116ea:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80116ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116f2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 80116f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80116fa:	00db      	lsls	r3, r3, #3
 80116fc:	68fa      	ldr	r2, [r7, #12]
 80116fe:	4413      	add	r3, r2
 8011700:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011704:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011708:	ee77 7a27 	vadd.f32	s15, s14, s15
 801170c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8011710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011714:	00db      	lsls	r3, r3, #3
 8011716:	68fa      	ldr	r2, [r7, #12]
 8011718:	4413      	add	r3, r2
 801171a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801171e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011726:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 801172a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801172e:	00db      	lsls	r3, r3, #3
 8011730:	3304      	adds	r3, #4
 8011732:	68fa      	ldr	r2, [r7, #12]
 8011734:	4413      	add	r3, r2
 8011736:	ed93 7a00 	vldr	s14, [r3]
 801173a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801173e:	00db      	lsls	r3, r3, #3
 8011740:	3304      	adds	r3, #4
 8011742:	68fa      	ldr	r2, [r7, #12]
 8011744:	4413      	add	r3, r2
 8011746:	edd3 7a00 	vldr	s15, [r3]
 801174a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801174e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8011752:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011756:	00db      	lsls	r3, r3, #3
 8011758:	3304      	adds	r3, #4
 801175a:	68fa      	ldr	r2, [r7, #12]
 801175c:	4413      	add	r3, r2
 801175e:	ed93 7a00 	vldr	s14, [r3]
 8011762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011766:	00db      	lsls	r3, r3, #3
 8011768:	3304      	adds	r3, #4
 801176a:	68fa      	ldr	r2, [r7, #12]
 801176c:	4413      	add	r3, r2
 801176e:	edd3 7a00 	vldr	s15, [r3]
 8011772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011776:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 801177a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801177e:	00db      	lsls	r3, r3, #3
 8011780:	3304      	adds	r3, #4
 8011782:	68fa      	ldr	r2, [r7, #12]
 8011784:	4413      	add	r3, r2
 8011786:	ed93 7a00 	vldr	s14, [r3]
 801178a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801178e:	00db      	lsls	r3, r3, #3
 8011790:	3304      	adds	r3, #4
 8011792:	68fa      	ldr	r2, [r7, #12]
 8011794:	4413      	add	r3, r2
 8011796:	edd3 7a00 	vldr	s15, [r3]
 801179a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801179e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80117a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80117a6:	00db      	lsls	r3, r3, #3
 80117a8:	3304      	adds	r3, #4
 80117aa:	68fa      	ldr	r2, [r7, #12]
 80117ac:	4413      	add	r3, r2
 80117ae:	ed93 7a00 	vldr	s14, [r3]
 80117b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80117b6:	00db      	lsls	r3, r3, #3
 80117b8:	3304      	adds	r3, #4
 80117ba:	68fa      	ldr	r2, [r7, #12]
 80117bc:	4413      	add	r3, r2
 80117be:	edd3 7a00 	vldr	s15, [r3]
 80117c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117c6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80117ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80117ce:	00db      	lsls	r3, r3, #3
 80117d0:	3304      	adds	r3, #4
 80117d2:	68fa      	ldr	r2, [r7, #12]
 80117d4:	4413      	add	r3, r2
 80117d6:	ed93 7a00 	vldr	s14, [r3]
 80117da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80117de:	00db      	lsls	r3, r3, #3
 80117e0:	3304      	adds	r3, #4
 80117e2:	68fa      	ldr	r2, [r7, #12]
 80117e4:	4413      	add	r3, r2
 80117e6:	edd3 7a00 	vldr	s15, [r3]
 80117ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117ee:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80117f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80117f6:	00db      	lsls	r3, r3, #3
 80117f8:	3304      	adds	r3, #4
 80117fa:	68fa      	ldr	r2, [r7, #12]
 80117fc:	4413      	add	r3, r2
 80117fe:	ed93 7a00 	vldr	s14, [r3]
 8011802:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011806:	00db      	lsls	r3, r3, #3
 8011808:	3304      	adds	r3, #4
 801180a:	68fa      	ldr	r2, [r7, #12]
 801180c:	4413      	add	r3, r2
 801180e:	edd3 7a00 	vldr	s15, [r3]
 8011812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011816:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 801181a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801181e:	00db      	lsls	r3, r3, #3
 8011820:	3304      	adds	r3, #4
 8011822:	68fa      	ldr	r2, [r7, #12]
 8011824:	4413      	add	r3, r2
 8011826:	ed93 7a00 	vldr	s14, [r3]
 801182a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801182e:	00db      	lsls	r3, r3, #3
 8011830:	3304      	adds	r3, #4
 8011832:	68fa      	ldr	r2, [r7, #12]
 8011834:	4413      	add	r3, r2
 8011836:	edd3 7a00 	vldr	s15, [r3]
 801183a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801183e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8011842:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011846:	00db      	lsls	r3, r3, #3
 8011848:	3304      	adds	r3, #4
 801184a:	68fa      	ldr	r2, [r7, #12]
 801184c:	4413      	add	r3, r2
 801184e:	ed93 7a00 	vldr	s14, [r3]
 8011852:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011856:	00db      	lsls	r3, r3, #3
 8011858:	3304      	adds	r3, #4
 801185a:	68fa      	ldr	r2, [r7, #12]
 801185c:	4413      	add	r3, r2
 801185e:	edd3 7a00 	vldr	s15, [r3]
 8011862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011866:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 801186a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801186e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011876:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 801187a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801187e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011886:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 801188a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 801188e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8011892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011896:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 801189a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 801189e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80118a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118a6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80118aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80118ae:	00db      	lsls	r3, r3, #3
 80118b0:	3304      	adds	r3, #4
 80118b2:	68fa      	ldr	r2, [r7, #12]
 80118b4:	4413      	add	r3, r2
 80118b6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80118ba:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80118be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118c2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80118c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80118ca:	00db      	lsls	r3, r3, #3
 80118cc:	3304      	adds	r3, #4
 80118ce:	68fa      	ldr	r2, [r7, #12]
 80118d0:	4413      	add	r3, r2
 80118d2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80118d6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80118da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118de:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80118e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80118e6:	00db      	lsls	r3, r3, #3
 80118e8:	68fa      	ldr	r2, [r7, #12]
 80118ea:	4413      	add	r3, r2
 80118ec:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80118f0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80118f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118f8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80118fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011900:	00db      	lsls	r3, r3, #3
 8011902:	68fa      	ldr	r2, [r7, #12]
 8011904:	4413      	add	r3, r2
 8011906:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 801190a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801190e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011912:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8011916:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801191a:	00db      	lsls	r3, r3, #3
 801191c:	3304      	adds	r3, #4
 801191e:	68fa      	ldr	r2, [r7, #12]
 8011920:	4413      	add	r3, r2
 8011922:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011926:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801192a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801192e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8011932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011936:	00db      	lsls	r3, r3, #3
 8011938:	3304      	adds	r3, #4
 801193a:	68fa      	ldr	r2, [r7, #12]
 801193c:	4413      	add	r3, r2
 801193e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011942:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011946:	ee77 7a27 	vadd.f32	s15, s14, s15
 801194a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 801194e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8011952:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011956:	ee77 7a67 	vsub.f32	s15, s14, s15
 801195a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801195e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011962:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8011966:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 801196a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011972:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011976:	ee67 7a27 	vmul.f32	s15, s14, s15
 801197a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 801197e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8011982:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011986:	ee77 7a67 	vsub.f32	s15, s14, s15
 801198a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801198e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011992:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8011996:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 801199a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801199e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119a2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80119a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119aa:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80119ae:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80119b2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80119b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119ba:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80119be:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80119c2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80119c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119ca:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80119ce:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80119d2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80119d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119da:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80119de:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80119e2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80119e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119ea:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 80119ee:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80119f2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80119f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119fa:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80119fe:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011a02:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a0a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8011a0e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8011a12:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a1a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8011a1e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8011a22:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a2a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8011a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011a32:	00db      	lsls	r3, r3, #3
 8011a34:	68fa      	ldr	r2, [r7, #12]
 8011a36:	4413      	add	r3, r2
 8011a38:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011a3c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a44:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8011a48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011a4c:	00db      	lsls	r3, r3, #3
 8011a4e:	68fa      	ldr	r2, [r7, #12]
 8011a50:	4413      	add	r3, r2
 8011a52:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8011a56:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a5e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8011a62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011a66:	00db      	lsls	r3, r3, #3
 8011a68:	68fa      	ldr	r2, [r7, #12]
 8011a6a:	4413      	add	r3, r2
 8011a6c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011a70:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a78:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8011a7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011a80:	00db      	lsls	r3, r3, #3
 8011a82:	68fa      	ldr	r2, [r7, #12]
 8011a84:	4413      	add	r3, r2
 8011a86:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011a8a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a92:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8011a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011a9a:	00db      	lsls	r3, r3, #3
 8011a9c:	3304      	adds	r3, #4
 8011a9e:	68fa      	ldr	r2, [r7, #12]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011aa6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011aae:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8011ab2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011ab6:	00db      	lsls	r3, r3, #3
 8011ab8:	3304      	adds	r3, #4
 8011aba:	68fa      	ldr	r2, [r7, #12]
 8011abc:	4413      	add	r3, r2
 8011abe:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8011ac2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011aca:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8011ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011ad2:	00db      	lsls	r3, r3, #3
 8011ad4:	3304      	adds	r3, #4
 8011ad6:	68fa      	ldr	r2, [r7, #12]
 8011ad8:	4413      	add	r3, r2
 8011ada:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011ade:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ae6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8011aea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011aee:	00db      	lsls	r3, r3, #3
 8011af0:	3304      	adds	r3, #4
 8011af2:	68fa      	ldr	r2, [r7, #12]
 8011af4:	4413      	add	r3, r2
 8011af6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011afa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b02:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8011b06:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011b0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011b0e:	4413      	add	r3, r2
 8011b10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8011b14:	897b      	ldrh	r3, [r7, #10]
 8011b16:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	f4ff ad0a 	bcc.w	8011534 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8011b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b24:	2b07      	cmp	r3, #7
 8011b26:	f240 84e3 	bls.w	80124f0 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8011b30:	2301      	movs	r3, #1
 8011b32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8011b36:	893b      	ldrh	r3, [r7, #8]
 8011b38:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011b3c:	4413      	add	r3, r2
 8011b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8011b40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8011b46:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011b4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b4c:	4413      	add	r3, r2
 8011b4e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8011b50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011b52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b54:	4413      	add	r3, r2
 8011b56:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8011b58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011b5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b5c:	4413      	add	r3, r2
 8011b5e:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8011b60:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011b62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b64:	4413      	add	r3, r2
 8011b66:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8011b68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011b6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b6c:	4413      	add	r3, r2
 8011b6e:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8011b70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011b72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b74:	4413      	add	r3, r2
 8011b76:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8011b78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b7c:	00db      	lsls	r3, r3, #3
 8011b7e:	687a      	ldr	r2, [r7, #4]
 8011b80:	4413      	add	r3, r2
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8011b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b88:	00db      	lsls	r3, r3, #3
 8011b8a:	687a      	ldr	r2, [r7, #4]
 8011b8c:	4413      	add	r3, r2
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8011b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011b94:	00db      	lsls	r3, r3, #3
 8011b96:	687a      	ldr	r2, [r7, #4]
 8011b98:	4413      	add	r3, r2
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8011b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ba0:	00db      	lsls	r3, r3, #3
 8011ba2:	687a      	ldr	r2, [r7, #4]
 8011ba4:	4413      	add	r3, r2
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8011baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bac:	00db      	lsls	r3, r3, #3
 8011bae:	687a      	ldr	r2, [r7, #4]
 8011bb0:	4413      	add	r3, r2
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8011bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011bb8:	00db      	lsls	r3, r3, #3
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8011bc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011bc4:	00db      	lsls	r3, r3, #3
 8011bc6:	687a      	ldr	r2, [r7, #4]
 8011bc8:	4413      	add	r3, r2
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8011bce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011bd2:	00db      	lsls	r3, r3, #3
 8011bd4:	3304      	adds	r3, #4
 8011bd6:	687a      	ldr	r2, [r7, #4]
 8011bd8:	4413      	add	r3, r2
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8011bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011be0:	00db      	lsls	r3, r3, #3
 8011be2:	3304      	adds	r3, #4
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	4413      	add	r3, r2
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8011bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011bee:	00db      	lsls	r3, r3, #3
 8011bf0:	3304      	adds	r3, #4
 8011bf2:	687a      	ldr	r2, [r7, #4]
 8011bf4:	4413      	add	r3, r2
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8011bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011bfc:	00db      	lsls	r3, r3, #3
 8011bfe:	3304      	adds	r3, #4
 8011c00:	687a      	ldr	r2, [r7, #4]
 8011c02:	4413      	add	r3, r2
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8011c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c0a:	00db      	lsls	r3, r3, #3
 8011c0c:	3304      	adds	r3, #4
 8011c0e:	687a      	ldr	r2, [r7, #4]
 8011c10:	4413      	add	r3, r2
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8011c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c18:	00db      	lsls	r3, r3, #3
 8011c1a:	3304      	adds	r3, #4
 8011c1c:	687a      	ldr	r2, [r7, #4]
 8011c1e:	4413      	add	r3, r2
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8011c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c26:	00db      	lsls	r3, r3, #3
 8011c28:	3304      	adds	r3, #4
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	4413      	add	r3, r2
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8011c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8011c3a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c42:	4413      	add	r3, r2
 8011c44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8011c48:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8011c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c50:	4413      	add	r3, r2
 8011c52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8011c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c5e:	4413      	add	r3, r2
 8011c60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8011c64:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c6c:	4413      	add	r3, r2
 8011c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8011c72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c7a:	4413      	add	r3, r2
 8011c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8011c80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c88:	4413      	add	r3, r2
 8011c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8011c8e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c96:	4413      	add	r3, r2
 8011c98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8011c9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011ca0:	00db      	lsls	r3, r3, #3
 8011ca2:	68fa      	ldr	r2, [r7, #12]
 8011ca4:	4413      	add	r3, r2
 8011ca6:	ed93 7a00 	vldr	s14, [r3]
 8011caa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011cae:	00db      	lsls	r3, r3, #3
 8011cb0:	68fa      	ldr	r2, [r7, #12]
 8011cb2:	4413      	add	r3, r2
 8011cb4:	edd3 7a00 	vldr	s15, [r3]
 8011cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011cbc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8011cc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011cc4:	00db      	lsls	r3, r3, #3
 8011cc6:	68fa      	ldr	r2, [r7, #12]
 8011cc8:	4413      	add	r3, r2
 8011cca:	ed93 7a00 	vldr	s14, [r3]
 8011cce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011cd2:	00db      	lsls	r3, r3, #3
 8011cd4:	68fa      	ldr	r2, [r7, #12]
 8011cd6:	4413      	add	r3, r2
 8011cd8:	edd3 7a00 	vldr	s15, [r3]
 8011cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ce0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8011ce4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011ce8:	00db      	lsls	r3, r3, #3
 8011cea:	68fa      	ldr	r2, [r7, #12]
 8011cec:	4413      	add	r3, r2
 8011cee:	ed93 7a00 	vldr	s14, [r3]
 8011cf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011cf6:	00db      	lsls	r3, r3, #3
 8011cf8:	68fa      	ldr	r2, [r7, #12]
 8011cfa:	4413      	add	r3, r2
 8011cfc:	edd3 7a00 	vldr	s15, [r3]
 8011d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d04:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8011d08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011d0c:	00db      	lsls	r3, r3, #3
 8011d0e:	68fa      	ldr	r2, [r7, #12]
 8011d10:	4413      	add	r3, r2
 8011d12:	ed93 7a00 	vldr	s14, [r3]
 8011d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011d1a:	00db      	lsls	r3, r3, #3
 8011d1c:	68fa      	ldr	r2, [r7, #12]
 8011d1e:	4413      	add	r3, r2
 8011d20:	edd3 7a00 	vldr	s15, [r3]
 8011d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d28:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8011d2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011d30:	00db      	lsls	r3, r3, #3
 8011d32:	68fa      	ldr	r2, [r7, #12]
 8011d34:	4413      	add	r3, r2
 8011d36:	ed93 7a00 	vldr	s14, [r3]
 8011d3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011d3e:	00db      	lsls	r3, r3, #3
 8011d40:	68fa      	ldr	r2, [r7, #12]
 8011d42:	4413      	add	r3, r2
 8011d44:	edd3 7a00 	vldr	s15, [r3]
 8011d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d4c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8011d50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011d54:	00db      	lsls	r3, r3, #3
 8011d56:	68fa      	ldr	r2, [r7, #12]
 8011d58:	4413      	add	r3, r2
 8011d5a:	ed93 7a00 	vldr	s14, [r3]
 8011d5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011d62:	00db      	lsls	r3, r3, #3
 8011d64:	68fa      	ldr	r2, [r7, #12]
 8011d66:	4413      	add	r3, r2
 8011d68:	edd3 7a00 	vldr	s15, [r3]
 8011d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d70:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8011d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011d78:	00db      	lsls	r3, r3, #3
 8011d7a:	68fa      	ldr	r2, [r7, #12]
 8011d7c:	4413      	add	r3, r2
 8011d7e:	ed93 7a00 	vldr	s14, [r3]
 8011d82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011d86:	00db      	lsls	r3, r3, #3
 8011d88:	68fa      	ldr	r2, [r7, #12]
 8011d8a:	4413      	add	r3, r2
 8011d8c:	edd3 7a00 	vldr	s15, [r3]
 8011d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d94:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8011d98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011d9c:	00db      	lsls	r3, r3, #3
 8011d9e:	68fa      	ldr	r2, [r7, #12]
 8011da0:	4413      	add	r3, r2
 8011da2:	ed93 7a00 	vldr	s14, [r3]
 8011da6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011daa:	00db      	lsls	r3, r3, #3
 8011dac:	68fa      	ldr	r2, [r7, #12]
 8011dae:	4413      	add	r3, r2
 8011db0:	edd3 7a00 	vldr	s15, [r3]
 8011db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011db8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8011dbc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011dc0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011dc8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8011dcc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011dd0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011dd8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8011ddc:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8011de0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8011de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011de8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8011dec:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8011df0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8011df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011df8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8011dfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011e00:	00db      	lsls	r3, r3, #3
 8011e02:	68fa      	ldr	r2, [r7, #12]
 8011e04:	4413      	add	r3, r2
 8011e06:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011e0a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011e12:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8011e16:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8011e1a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e22:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8011e26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011e2a:	00db      	lsls	r3, r3, #3
 8011e2c:	3304      	adds	r3, #4
 8011e2e:	68fa      	ldr	r2, [r7, #12]
 8011e30:	4413      	add	r3, r2
 8011e32:	ed93 7a00 	vldr	s14, [r3]
 8011e36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011e3a:	00db      	lsls	r3, r3, #3
 8011e3c:	3304      	adds	r3, #4
 8011e3e:	68fa      	ldr	r2, [r7, #12]
 8011e40:	4413      	add	r3, r2
 8011e42:	edd3 7a00 	vldr	s15, [r3]
 8011e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011e4a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8011e4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011e52:	00db      	lsls	r3, r3, #3
 8011e54:	3304      	adds	r3, #4
 8011e56:	68fa      	ldr	r2, [r7, #12]
 8011e58:	4413      	add	r3, r2
 8011e5a:	ed93 7a00 	vldr	s14, [r3]
 8011e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011e62:	00db      	lsls	r3, r3, #3
 8011e64:	3304      	adds	r3, #4
 8011e66:	68fa      	ldr	r2, [r7, #12]
 8011e68:	4413      	add	r3, r2
 8011e6a:	edd3 7a00 	vldr	s15, [r3]
 8011e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e72:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8011e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011e7a:	00db      	lsls	r3, r3, #3
 8011e7c:	3304      	adds	r3, #4
 8011e7e:	68fa      	ldr	r2, [r7, #12]
 8011e80:	4413      	add	r3, r2
 8011e82:	ed93 7a00 	vldr	s14, [r3]
 8011e86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011e8a:	00db      	lsls	r3, r3, #3
 8011e8c:	3304      	adds	r3, #4
 8011e8e:	68fa      	ldr	r2, [r7, #12]
 8011e90:	4413      	add	r3, r2
 8011e92:	edd3 7a00 	vldr	s15, [r3]
 8011e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011e9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8011e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011ea2:	00db      	lsls	r3, r3, #3
 8011ea4:	3304      	adds	r3, #4
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	4413      	add	r3, r2
 8011eaa:	ed93 7a00 	vldr	s14, [r3]
 8011eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011eb2:	00db      	lsls	r3, r3, #3
 8011eb4:	3304      	adds	r3, #4
 8011eb6:	68fa      	ldr	r2, [r7, #12]
 8011eb8:	4413      	add	r3, r2
 8011eba:	edd3 7a00 	vldr	s15, [r3]
 8011ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ec2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8011ec6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011eca:	00db      	lsls	r3, r3, #3
 8011ecc:	3304      	adds	r3, #4
 8011ece:	68fa      	ldr	r2, [r7, #12]
 8011ed0:	4413      	add	r3, r2
 8011ed2:	ed93 7a00 	vldr	s14, [r3]
 8011ed6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011eda:	00db      	lsls	r3, r3, #3
 8011edc:	3304      	adds	r3, #4
 8011ede:	68fa      	ldr	r2, [r7, #12]
 8011ee0:	4413      	add	r3, r2
 8011ee2:	edd3 7a00 	vldr	s15, [r3]
 8011ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011eea:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8011eee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011ef2:	00db      	lsls	r3, r3, #3
 8011ef4:	3304      	adds	r3, #4
 8011ef6:	68fa      	ldr	r2, [r7, #12]
 8011ef8:	4413      	add	r3, r2
 8011efa:	ed93 7a00 	vldr	s14, [r3]
 8011efe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011f02:	00db      	lsls	r3, r3, #3
 8011f04:	3304      	adds	r3, #4
 8011f06:	68fa      	ldr	r2, [r7, #12]
 8011f08:	4413      	add	r3, r2
 8011f0a:	edd3 7a00 	vldr	s15, [r3]
 8011f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f12:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8011f16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011f1a:	00db      	lsls	r3, r3, #3
 8011f1c:	3304      	adds	r3, #4
 8011f1e:	68fa      	ldr	r2, [r7, #12]
 8011f20:	4413      	add	r3, r2
 8011f22:	ed93 7a00 	vldr	s14, [r3]
 8011f26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011f2a:	00db      	lsls	r3, r3, #3
 8011f2c:	3304      	adds	r3, #4
 8011f2e:	68fa      	ldr	r2, [r7, #12]
 8011f30:	4413      	add	r3, r2
 8011f32:	edd3 7a00 	vldr	s15, [r3]
 8011f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f3a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8011f3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011f42:	00db      	lsls	r3, r3, #3
 8011f44:	3304      	adds	r3, #4
 8011f46:	68fa      	ldr	r2, [r7, #12]
 8011f48:	4413      	add	r3, r2
 8011f4a:	ed93 7a00 	vldr	s14, [r3]
 8011f4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011f52:	00db      	lsls	r3, r3, #3
 8011f54:	3304      	adds	r3, #4
 8011f56:	68fa      	ldr	r2, [r7, #12]
 8011f58:	4413      	add	r3, r2
 8011f5a:	edd3 7a00 	vldr	s15, [r3]
 8011f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f62:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8011f66:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011f6a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f72:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8011f76:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011f7a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f82:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8011f86:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011f8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8011f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f92:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8011f96:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011f9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8011f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fa2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8011fa6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011faa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fb2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8011fb6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8011fba:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8011fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fc2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8011fc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011fca:	00db      	lsls	r3, r3, #3
 8011fcc:	3304      	adds	r3, #4
 8011fce:	68fa      	ldr	r2, [r7, #12]
 8011fd0:	4413      	add	r3, r2
 8011fd2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011fd6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fde:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8011fe2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011fe6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8011ff2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8011ff6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8011ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ffe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8012002:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8012006:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801200a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801200e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8012012:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8012016:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801201e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8012022:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8012026:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801202a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801202e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8012032:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8012036:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801203e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8012042:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8012046:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801204a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801204e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8012052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012056:	00db      	lsls	r3, r3, #3
 8012058:	68fa      	ldr	r2, [r7, #12]
 801205a:	4413      	add	r3, r2
 801205c:	ed97 7a07 	vldr	s14, [r7, #28]
 8012060:	edd7 7a06 	vldr	s15, [r7, #24]
 8012064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012068:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 801206c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012070:	00db      	lsls	r3, r3, #3
 8012072:	3304      	adds	r3, #4
 8012074:	68fa      	ldr	r2, [r7, #12]
 8012076:	4413      	add	r3, r2
 8012078:	ed97 7a05 	vldr	s14, [r7, #20]
 801207c:	edd7 7a04 	vldr	s15, [r7, #16]
 8012080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012084:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8012088:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801208c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8012090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012094:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8012098:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801209c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80120a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120a4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80120a8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80120ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80120b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120b4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80120b8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80120bc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80120c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120c4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 80120c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80120cc:	00db      	lsls	r3, r3, #3
 80120ce:	68fa      	ldr	r2, [r7, #12]
 80120d0:	4413      	add	r3, r2
 80120d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80120d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80120da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80120de:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 80120e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80120e6:	00db      	lsls	r3, r3, #3
 80120e8:	3304      	adds	r3, #4
 80120ea:	68fa      	ldr	r2, [r7, #12]
 80120ec:	4413      	add	r3, r2
 80120ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80120f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80120f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120fa:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 80120fe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012102:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8012106:	ee67 7a27 	vmul.f32	s15, s14, s15
 801210a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 801210e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8012112:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8012116:	ee67 7a27 	vmul.f32	s15, s14, s15
 801211a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 801211e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012122:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8012126:	ee67 7a27 	vmul.f32	s15, s14, s15
 801212a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 801212e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8012132:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8012136:	ee67 7a27 	vmul.f32	s15, s14, s15
 801213a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 801213e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012142:	00db      	lsls	r3, r3, #3
 8012144:	68fa      	ldr	r2, [r7, #12]
 8012146:	4413      	add	r3, r2
 8012148:	ed97 7a07 	vldr	s14, [r7, #28]
 801214c:	edd7 7a06 	vldr	s15, [r7, #24]
 8012150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012154:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8012158:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801215c:	00db      	lsls	r3, r3, #3
 801215e:	3304      	adds	r3, #4
 8012160:	68fa      	ldr	r2, [r7, #12]
 8012162:	4413      	add	r3, r2
 8012164:	ed97 7a05 	vldr	s14, [r7, #20]
 8012168:	edd7 7a04 	vldr	s15, [r7, #16]
 801216c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012170:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8012174:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8012178:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801217c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012180:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8012184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012188:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 801218c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8012190:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8012194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012198:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801219c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121a0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 80121a4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80121a8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80121ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121b0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80121b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121b8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 80121bc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80121c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80121c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121c8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80121cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121d0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 80121d4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80121d8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80121dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121e0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 80121e4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80121e8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80121ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121f0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 80121f4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80121f8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80121fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012200:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8012204:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8012208:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 801220c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012210:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8012214:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8012218:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801221c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012220:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8012224:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8012228:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801222c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012230:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8012234:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8012238:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801223c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012240:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8012244:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8012248:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801224c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012250:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8012254:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8012258:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 801225c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012260:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8012264:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8012268:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 801226c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012270:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8012274:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8012278:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801227c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012280:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8012284:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8012288:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801228c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012290:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8012294:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8012298:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 801229c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80122a0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 80122a4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80122a8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80122ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122b0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 80122b4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80122b8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80122bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80122c0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80122c4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80122c8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80122cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122d0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 80122d4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80122d8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80122dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122e0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80122e4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80122e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80122ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122f0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80122f4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80122f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80122fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012300:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8012304:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8012308:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 801230c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012310:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8012314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012318:	00db      	lsls	r3, r3, #3
 801231a:	68fa      	ldr	r2, [r7, #12]
 801231c:	4413      	add	r3, r2
 801231e:	ed97 7a07 	vldr	s14, [r7, #28]
 8012322:	edd7 7a06 	vldr	s15, [r7, #24]
 8012326:	ee77 7a27 	vadd.f32	s15, s14, s15
 801232a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 801232e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012332:	00db      	lsls	r3, r3, #3
 8012334:	3304      	adds	r3, #4
 8012336:	68fa      	ldr	r2, [r7, #12]
 8012338:	4413      	add	r3, r2
 801233a:	ed97 7a05 	vldr	s14, [r7, #20]
 801233e:	edd7 7a04 	vldr	s15, [r7, #16]
 8012342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012346:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 801234a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801234e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8012352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012356:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 801235a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801235e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8012362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012366:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 801236a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801236e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8012372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012376:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 801237a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801237e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8012382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012386:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 801238a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801238e:	00db      	lsls	r3, r3, #3
 8012390:	68fa      	ldr	r2, [r7, #12]
 8012392:	4413      	add	r3, r2
 8012394:	ed97 7a07 	vldr	s14, [r7, #28]
 8012398:	edd7 7a06 	vldr	s15, [r7, #24]
 801239c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80123a0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80123a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80123a8:	00db      	lsls	r3, r3, #3
 80123aa:	3304      	adds	r3, #4
 80123ac:	68fa      	ldr	r2, [r7, #12]
 80123ae:	4413      	add	r3, r2
 80123b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80123b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80123b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123bc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80123c0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80123c4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80123c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123cc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80123d0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80123d4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80123d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123dc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80123e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80123e4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80123e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123ec:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80123f0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80123f4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80123f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123fc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8012400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012404:	00db      	lsls	r3, r3, #3
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	4413      	add	r3, r2
 801240a:	ed97 7a07 	vldr	s14, [r7, #28]
 801240e:	edd7 7a06 	vldr	s15, [r7, #24]
 8012412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012416:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 801241a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801241e:	00db      	lsls	r3, r3, #3
 8012420:	3304      	adds	r3, #4
 8012422:	68fa      	ldr	r2, [r7, #12]
 8012424:	4413      	add	r3, r2
 8012426:	ed97 7a05 	vldr	s14, [r7, #20]
 801242a:	edd7 7a04 	vldr	s15, [r7, #16]
 801242e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012432:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8012436:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801243a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012442:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8012446:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801244a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012452:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8012456:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801245a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801245e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012462:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8012466:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801246a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801246e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012472:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8012476:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801247a:	00db      	lsls	r3, r3, #3
 801247c:	68fa      	ldr	r2, [r7, #12]
 801247e:	4413      	add	r3, r2
 8012480:	ed97 7a07 	vldr	s14, [r7, #28]
 8012484:	edd7 7a06 	vldr	s15, [r7, #24]
 8012488:	ee77 7a27 	vadd.f32	s15, s14, s15
 801248c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8012490:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012494:	00db      	lsls	r3, r3, #3
 8012496:	3304      	adds	r3, #4
 8012498:	68fa      	ldr	r2, [r7, #12]
 801249a:	4413      	add	r3, r2
 801249c:	ed97 7a05 	vldr	s14, [r7, #20]
 80124a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80124a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80124a8:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80124ac:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80124b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80124b4:	4413      	add	r3, r2
 80124b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 80124ba:	897b      	ldrh	r3, [r7, #10]
 80124bc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80124c0:	429a      	cmp	r2, r3
 80124c2:	f4ff abba 	bcc.w	8011c3a <arm_radix8_butterfly_f32+0x746>

         j++;
 80124c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80124ca:	3301      	adds	r3, #1
 80124cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 80124d0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80124d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80124d8:	429a      	cmp	r2, r3
 80124da:	f4ff ab2c 	bcc.w	8011b36 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80124de:	893b      	ldrh	r3, [r7, #8]
 80124e0:	00db      	lsls	r3, r3, #3
 80124e2:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 80124e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80124e8:	2b07      	cmp	r3, #7
 80124ea:	f63f a813 	bhi.w	8011514 <arm_radix8_butterfly_f32+0x20>
}
 80124ee:	e000      	b.n	80124f2 <arm_radix8_butterfly_f32+0xffe>
         break;
 80124f0:	bf00      	nop
}
 80124f2:	bf00      	nop
 80124f4:	37f4      	adds	r7, #244	; 0xf4
 80124f6:	46bd      	mov	sp, r7
 80124f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fc:	4770      	bx	lr
 80124fe:	bf00      	nop

08012500 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8012500:	b480      	push	{r7}
 8012502:	b095      	sub	sp, #84	; 0x54
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	60b9      	str	r1, [r7, #8]
 801250a:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	695b      	ldr	r3, [r3, #20]
 8012510:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	881b      	ldrh	r3, [r3, #0]
 801251e:	3b01      	subs	r3, #1
 8012520:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8012522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8012528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 801252e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8012534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012536:	685b      	ldr	r3, [r3, #4]
 8012538:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 801253a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801253c:	1d1a      	adds	r2, r3, #4
 801253e:	64ba      	str	r2, [r7, #72]	; 0x48
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8012544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012546:	1d1a      	adds	r2, r3, #4
 8012548:	64ba      	str	r2, [r7, #72]	; 0x48
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 801254e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012552:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012556:	ee77 7a27 	vadd.f32	s15, s14, s15
 801255a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 801255e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8012562:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012566:	ee77 7a27 	vadd.f32	s15, s14, s15
 801256a:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 801256e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8012572:	edd7 7a08 	vldr	s15, [r7, #32]
 8012576:	ee77 7a27 	vadd.f32	s15, s14, s15
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	1d1a      	adds	r2, r3, #4
 801257e:	607a      	str	r2, [r7, #4]
 8012580:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012588:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 801258c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8012590:	edd7 7a08 	vldr	s15, [r7, #32]
 8012594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	1d1a      	adds	r2, r3, #4
 801259c:	607a      	str	r2, [r7, #4]
 801259e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80125a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125a6:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80125aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125ac:	00db      	lsls	r3, r3, #3
 80125ae:	68ba      	ldr	r2, [r7, #8]
 80125b0:	4413      	add	r3, r2
 80125b2:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80125b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125b6:	3308      	adds	r3, #8
 80125b8:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80125ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80125c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80125c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 80125cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125ce:	685b      	ldr	r3, [r3, #4]
 80125d0:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80125d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125d4:	1d1a      	adds	r2, r3, #4
 80125d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80125dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125de:	1d1a      	adds	r2, r3, #4
 80125e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80125e6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80125ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80125ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80125f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80125f6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80125fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80125fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012602:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8012606:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801260a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801260e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012612:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8012616:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801261a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801261e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012622:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8012626:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801262a:	edd7 7a08 	vldr	s15, [r7, #32]
 801262e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012632:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8012636:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801263a:	edd7 7a08 	vldr	s15, [r7, #32]
 801263e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012642:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8012646:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801264a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801264e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012652:	edd7 7a07 	vldr	s15, [r7, #28]
 8012656:	ee37 7a27 	vadd.f32	s14, s14, s15
 801265a:	edd7 7a04 	vldr	s15, [r7, #16]
 801265e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	1d1a      	adds	r2, r3, #4
 8012666:	607a      	str	r2, [r7, #4]
 8012668:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801266c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012670:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8012674:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8012678:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801267c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012680:	edd7 7a06 	vldr	s15, [r7, #24]
 8012684:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012688:	edd7 7a05 	vldr	s15, [r7, #20]
 801268c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	1d1a      	adds	r2, r3, #4
 8012694:	607a      	str	r2, [r7, #4]
 8012696:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801269a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801269e:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 80126a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126a4:	3308      	adds	r3, #8
 80126a6:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80126a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126aa:	3b08      	subs	r3, #8
 80126ac:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80126ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126b0:	3b01      	subs	r3, #1
 80126b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 80126b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	f73f af7f 	bgt.w	80125ba <stage_rfft_f32+0xba>
}
 80126bc:	bf00      	nop
 80126be:	bf00      	nop
 80126c0:	3754      	adds	r7, #84	; 0x54
 80126c2:	46bd      	mov	sp, r7
 80126c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c8:	4770      	bx	lr

080126ca <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80126ca:	b480      	push	{r7}
 80126cc:	b095      	sub	sp, #84	; 0x54
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	60f8      	str	r0, [r7, #12]
 80126d2:	60b9      	str	r1, [r7, #8]
 80126d4:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	695b      	ldr	r3, [r3, #20]
 80126da:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80126e0:	68bb      	ldr	r3, [r7, #8]
 80126e2:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	881b      	ldrh	r3, [r3, #0]
 80126e8:	3b01      	subs	r3, #1
 80126ea:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 80126ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 80126f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80126f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126fa:	3308      	adds	r3, #8
 80126fc:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 80126fe:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012702:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8012706:	ee77 7a27 	vadd.f32	s15, s14, s15
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	1d1a      	adds	r2, r3, #4
 801270e:	607a      	str	r2, [r7, #4]
 8012710:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012718:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 801271c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012720:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8012724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	1d1a      	adds	r2, r3, #4
 801272c:	607a      	str	r2, [r7, #4]
 801272e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012736:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 801273a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801273c:	00db      	lsls	r3, r3, #3
 801273e:	68ba      	ldr	r2, [r7, #8]
 8012740:	4413      	add	r3, r2
 8012742:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8012744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012746:	3308      	adds	r3, #8
 8012748:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 801274a:	e07c      	b.n	8012846 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 801274c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801274e:	685b      	ldr	r3, [r3, #4]
 8012750:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8012752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8012758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 801275e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8012764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012766:	1d1a      	adds	r2, r3, #4
 8012768:	64ba      	str	r2, [r7, #72]	; 0x48
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 801276e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012770:	1d1a      	adds	r2, r3, #4
 8012772:	64ba      	str	r2, [r7, #72]	; 0x48
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8012778:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801277c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012784:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8012788:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801278c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012794:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8012798:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801279c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80127a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127a4:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80127a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80127ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80127b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127b4:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80127b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80127bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80127c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127c4:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80127c8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80127cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80127d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127d4:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80127d8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80127dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80127e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80127e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80127e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80127ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80127f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	1d1a      	adds	r2, r3, #4
 80127f8:	607a      	str	r2, [r7, #4]
 80127fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80127fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012802:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8012806:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801280a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801280e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012812:	edd7 7a05 	vldr	s15, [r7, #20]
 8012816:	ee37 7a27 	vadd.f32	s14, s14, s15
 801281a:	edd7 7a04 	vldr	s15, [r7, #16]
 801281e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	1d1a      	adds	r2, r3, #4
 8012826:	607a      	str	r2, [r7, #4]
 8012828:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801282c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012830:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8012834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012836:	3308      	adds	r3, #8
 8012838:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 801283a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801283c:	3b08      	subs	r3, #8
 801283e:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8012840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012842:	3b01      	subs	r3, #1
 8012844:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 8012846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012848:	2b00      	cmp	r3, #0
 801284a:	f73f af7f 	bgt.w	801274c <merge_rfft_f32+0x82>
   }

}
 801284e:	bf00      	nop
 8012850:	bf00      	nop
 8012852:	3754      	adds	r7, #84	; 0x54
 8012854:	46bd      	mov	sp, r7
 8012856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285a:	4770      	bx	lr

0801285c <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b086      	sub	sp, #24
 8012860:	af00      	add	r7, sp, #0
 8012862:	60f8      	str	r0, [r7, #12]
 8012864:	60b9      	str	r1, [r7, #8]
 8012866:	607a      	str	r2, [r7, #4]
 8012868:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 801286e:	78fb      	ldrb	r3, [r7, #3]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d00b      	beq.n	801288c <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8012874:	687a      	ldr	r2, [r7, #4]
 8012876:	68b9      	ldr	r1, [r7, #8]
 8012878:	68f8      	ldr	r0, [r7, #12]
 801287a:	f7ff ff26 	bl	80126ca <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 801287e:	78fa      	ldrb	r2, [r7, #3]
 8012880:	2301      	movs	r3, #1
 8012882:	6879      	ldr	r1, [r7, #4]
 8012884:	6978      	ldr	r0, [r7, #20]
 8012886:	f7fe fd7b 	bl	8011380 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 801288a:	e00a      	b.n	80128a2 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 801288c:	78fa      	ldrb	r2, [r7, #3]
 801288e:	2301      	movs	r3, #1
 8012890:	68b9      	ldr	r1, [r7, #8]
 8012892:	6978      	ldr	r0, [r7, #20]
 8012894:	f7fe fd74 	bl	8011380 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	68b9      	ldr	r1, [r7, #8]
 801289c:	68f8      	ldr	r0, [r7, #12]
 801289e:	f7ff fe2f 	bl	8012500 <stage_rfft_f32>
}
 80128a2:	bf00      	nop
 80128a4:	3718      	adds	r7, #24
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}

080128aa <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 80128aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128ac:	b093      	sub	sp, #76	; 0x4c
 80128ae:	af0a      	add	r7, sp, #40	; 0x28
 80128b0:	6178      	str	r0, [r7, #20]
 80128b2:	6139      	str	r1, [r7, #16]
 80128b4:	60fa      	str	r2, [r7, #12]
 80128b6:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 80128be:	e033      	b.n	8012928 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 80128c0:	693b      	ldr	r3, [r7, #16]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	607b      	str	r3, [r7, #4]
 80128c6:	693a      	ldr	r2, [r7, #16]
 80128c8:	6852      	ldr	r2, [r2, #4]
 80128ca:	6939      	ldr	r1, [r7, #16]
 80128cc:	6889      	ldr	r1, [r1, #8]
 80128ce:	68f8      	ldr	r0, [r7, #12]
 80128d0:	6800      	ldr	r0, [r0, #0]
 80128d2:	68fc      	ldr	r4, [r7, #12]
 80128d4:	6864      	ldr	r4, [r4, #4]
 80128d6:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 80128d8:	682d      	ldr	r5, [r5, #0]
 80128da:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 80128dc:	68f6      	ldr	r6, [r6, #12]
 80128de:	693b      	ldr	r3, [r7, #16]
 80128e0:	68db      	ldr	r3, [r3, #12]
 80128e2:	603b      	str	r3, [r7, #0]
 80128e4:	693b      	ldr	r3, [r7, #16]
 80128e6:	691b      	ldr	r3, [r3, #16]
 80128e8:	9308      	str	r3, [sp, #32]
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	9307      	str	r3, [sp, #28]
 80128ee:	9606      	str	r6, [sp, #24]
 80128f0:	9505      	str	r5, [sp, #20]
 80128f2:	9404      	str	r4, [sp, #16]
 80128f4:	9003      	str	r0, [sp, #12]
 80128f6:	9102      	str	r1, [sp, #8]
 80128f8:	9201      	str	r2, [sp, #4]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	9300      	str	r3, [sp, #0]
 80128fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012902:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012904:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012906:	f000 f822 	bl	801294e <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 801290a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	461a      	mov	r2, r3
 8012910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012912:	4413      	add	r3, r2
 8012914:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 8012916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012918:	68db      	ldr	r3, [r3, #12]
 801291a:	461a      	mov	r2, r3
 801291c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801291e:	4413      	add	r3, r2
 8012920:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 8012922:	69fb      	ldr	r3, [r7, #28]
 8012924:	3b01      	subs	r3, #1
 8012926:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 8012928:	69fb      	ldr	r3, [r7, #28]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d1c8      	bne.n	80128c0 <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 801292e:	2300      	movs	r3, #0
}
 8012930:	4618      	mov	r0, r3
 8012932:	3724      	adds	r7, #36	; 0x24
 8012934:	46bd      	mov	sp, r7
 8012936:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012938 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 8012940:	2300      	movs	r3, #0
}
 8012942:	4618      	mov	r0, r3
 8012944:	370c      	adds	r7, #12
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr

0801294e <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 801294e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012952:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 8012956:	af00      	add	r7, sp, #0
 8012958:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 801295c:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 8012960:	6020      	str	r0, [r4, #0]
 8012962:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 8012966:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 801296a:	6001      	str	r1, [r0, #0]
 801296c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8012970:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 8012974:	600a      	str	r2, [r1, #0]
 8012976:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801297a:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 801297e:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 8012980:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8012984:	3b04      	subs	r3, #4
 8012986:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 801298a:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 801298e:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 8012992:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8012996:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 801299a:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 801299e:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 80129a2:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 80129a6:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 80129aa:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 80129ae:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 80129b2:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 80129b6:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 80129ba:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 80129be:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 80129c2:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 80129c6:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 80129ca:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 80129ce:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 80129d2:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 80129d6:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 80129da:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 80129de:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80129e2:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 80129e6:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 80129ea:	2300      	movs	r3, #0
 80129ec:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 80129f0:	f001 bd13 	b.w	801441a <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 80129f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129f8:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 80129fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a00:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 8012a08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a0c:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 8012a10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a14:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 8012a22:	2300      	movs	r3, #0
 8012a24:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 8012a28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a2c:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d01b      	beq.n	8012a6e <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 8012a36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a3a:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8012a3e:	6819      	ldr	r1, [r3, #0]
 8012a40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a44:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 8012a48:	1d0b      	adds	r3, r1, #4
 8012a4a:	6013      	str	r3, [r2, #0]
 8012a4c:	680b      	ldr	r3, [r1, #0]
 8012a4e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 8012a52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a56:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8012a5a:	6819      	ldr	r1, [r3, #0]
 8012a5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a60:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 8012a64:	1d0b      	adds	r3, r1, #4
 8012a66:	6013      	str	r3, [r2, #0]
 8012a68:	680b      	ldr	r3, [r1, #0]
 8012a6a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8012a74:	f001 b9db 	b.w	8013e2e <arm_nn_vec_mat_mult_t_s8+0x14e0>
 8012a78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a7c:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 8012a80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012a84:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 8012a86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a8a:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	461a      	mov	r2, r3
 8012a96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a9a:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012a9e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012aa0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012aa4:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	1d1a      	adds	r2, r3, #4
 8012aae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ab2:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	601a      	str	r2, [r3, #0]

    return (val);
 8012aba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012abe:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8012ac2:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8012ac4:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8012ac8:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8012acc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ad0:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8012ad4:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012ad8:	6013      	str	r3, [r2, #0]
 8012ada:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ade:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8012ae2:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012ae4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ae8:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8012aec:	681a      	ldr	r2, [r3, #0]
 8012aee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012af2:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	fa22 f283 	sxtab16	r2, r2, r3
 8012afc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b00:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8012b04:	601a      	str	r2, [r3, #0]
  return(result);
 8012b06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b0a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8012b14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b18:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8012b1c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012b20:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012b22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b26:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	461a      	mov	r2, r3
 8012b32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b36:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012b3a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012b3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b40:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	1d1a      	adds	r2, r3, #4
 8012b4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b4e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	601a      	str	r2, [r3, #0]
    return (val);
 8012b56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b5a:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8012b5e:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8012b60:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8012b64:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8012b68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b6c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8012b70:	601a      	str	r2, [r3, #0]
 8012b72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b76:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8012b7a:	2308      	movs	r3, #8
 8012b7c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012b7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b82:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8012b86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b8a:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	f003 031f 	and.w	r3, r3, #31
 8012b94:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012b96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b9a:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d105      	bne.n	8012bb0 <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 8012ba4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ba8:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8012bac:	6819      	ldr	r1, [r3, #0]
 8012bae:	e00b      	b.n	8012bc8 <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012bb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bb4:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8012bb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bbc:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8012bc0:	6812      	ldr	r2, [r2, #0]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	fa62 f103 	ror.w	r1, r2, r3
 8012bc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bcc:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 8012bd0:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012bd4:	6013      	str	r3, [r2, #0]
 8012bd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bda:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8012bde:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012be0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012be4:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8012be8:	681a      	ldr	r2, [r3, #0]
 8012bea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bee:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	fa22 f283 	sxtab16	r2, r2, r3
 8012bf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bfc:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8012c00:	601a      	str	r2, [r3, #0]
  return(result);
 8012c02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c06:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8012c10:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012c14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c18:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 8012c1c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012c20:	6013      	str	r3, [r2, #0]
 8012c22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c26:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8012c2a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c30:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8012c34:	681a      	ldr	r2, [r3, #0]
 8012c36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c3a:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	fa22 f283 	sxtab16	r2, r2, r3
 8012c44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c48:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8012c4c:	601a      	str	r2, [r3, #0]
  return(result);
 8012c4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c52:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8012c5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c60:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012c64:	681a      	ldr	r2, [r3, #0]
 8012c66:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8012c6a:	441a      	add	r2, r3
 8012c6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c70:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8012c74:	601a      	str	r2, [r3, #0]
 8012c76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c7a:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 8012c84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c88:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 8012c8c:	601a      	str	r2, [r3, #0]

    return (val);
 8012c8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c92:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8012c9c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012ca0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ca4:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8012ca8:	601a      	str	r2, [r3, #0]
 8012caa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cae:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8012cb2:	2308      	movs	r3, #8
 8012cb4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012cb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cba:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8012cbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cc2:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	f003 031f 	and.w	r3, r3, #31
 8012ccc:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012cce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cd2:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d105      	bne.n	8012ce8 <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 8012cdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ce0:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8012ce4:	6819      	ldr	r1, [r3, #0]
 8012ce6:	e00b      	b.n	8012d00 <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012ce8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cec:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8012cf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012cf4:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8012cf8:	6812      	ldr	r2, [r2, #0]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	fa62 f103 	ror.w	r1, r2, r3
 8012d00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d04:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8012d08:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012d0c:	6013      	str	r3, [r2, #0]
 8012d0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d12:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8012d16:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012d18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d1c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8012d20:	681a      	ldr	r2, [r3, #0]
 8012d22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d26:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	fa22 f283 	sxtab16	r2, r2, r3
 8012d30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d34:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8012d38:	601a      	str	r2, [r3, #0]
  return(result);
 8012d3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d3e:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8012d48:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012d4c:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8012d50:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012d54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d58:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8012d5c:	601a      	str	r2, [r3, #0]
 8012d5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d62:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8012d66:	6019      	str	r1, [r3, #0]
 8012d68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d6c:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8012d70:	6018      	str	r0, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012d72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d76:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8012d7a:	6819      	ldr	r1, [r3, #0]
 8012d7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d80:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8012d84:	681a      	ldr	r2, [r3, #0]
 8012d86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d8a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	fb21 3202 	smlad	r2, r1, r2, r3
 8012d94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012d98:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8012d9c:	601a      	str	r2, [r3, #0]
  return(result);
 8012d9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012da2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8012dac:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8012db0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012db4:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8012db8:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012dbc:	6013      	str	r3, [r2, #0]
 8012dbe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dc2:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8012dc6:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012dc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dcc:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8012dd0:	681a      	ldr	r2, [r3, #0]
 8012dd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dd6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	fa22 f283 	sxtab16	r2, r2, r3
 8012de0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012de4:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8012de8:	601a      	str	r2, [r3, #0]
  return(result);
 8012dea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dee:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8012df8:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012dfc:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8012e00:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012e04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e08:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8012e0c:	601a      	str	r2, [r3, #0]
 8012e0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e12:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8012e16:	6019      	str	r1, [r3, #0]
 8012e18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e1c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8012e20:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012e22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e26:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8012e2a:	6819      	ldr	r1, [r3, #0]
 8012e2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e30:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e3a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	fb21 3202 	smlad	r2, r1, r2, r3
 8012e44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e48:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8012e4c:	601a      	str	r2, [r3, #0]
  return(result);
 8012e4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e52:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8012e5c:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8012e60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e64:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8012e68:	601a      	str	r2, [r3, #0]
 8012e6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e6e:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8012e72:	2308      	movs	r3, #8
 8012e74:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012e76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e7a:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8012e7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e82:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	f003 031f 	and.w	r3, r3, #31
 8012e8c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012e8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e92:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d105      	bne.n	8012ea8 <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 8012e9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ea0:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8012ea4:	6819      	ldr	r1, [r3, #0]
 8012ea6:	e00b      	b.n	8012ec0 <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012ea8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eac:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8012eb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eb4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8012eb8:	6812      	ldr	r2, [r2, #0]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	fa62 f103 	ror.w	r1, r2, r3
 8012ec0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ec4:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8012ec8:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012ecc:	6013      	str	r3, [r2, #0]
 8012ece:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ed2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8012ed6:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012ed8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012edc:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8012ee0:	681a      	ldr	r2, [r3, #0]
 8012ee2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ee6:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	fa22 f283 	sxtab16	r2, r2, r3
 8012ef0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ef4:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8012ef8:	601a      	str	r2, [r3, #0]
  return(result);
 8012efa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012efe:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8012f08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f0c:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8012f10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012f14:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012f16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f1a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	461a      	mov	r2, r3
 8012f26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f2a:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8012f2e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012f30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f34:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	1d1a      	adds	r2, r3, #4
 8012f3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f42:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	601a      	str	r2, [r3, #0]
    return (val);
 8012f4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f4e:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8012f52:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8012f54:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8012f58:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012f5c:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8012f60:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8012f64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f68:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012f6c:	601a      	str	r2, [r3, #0]
 8012f6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f72:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8012f76:	6019      	str	r1, [r3, #0]
 8012f78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f7c:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8012f80:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012f82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f86:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012f8a:	6819      	ldr	r1, [r3, #0]
 8012f8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f90:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8012f94:	681a      	ldr	r2, [r3, #0]
 8012f96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f9a:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	fb21 3202 	smlad	r2, r1, r2, r3
 8012fa4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fa8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012fac:	601a      	str	r2, [r3, #0]
  return(result);
 8012fae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fb2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8012fbc:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012fc0:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8012fc4:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8012fc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fcc:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8012fd0:	601a      	str	r2, [r3, #0]
 8012fd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fd6:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8012fda:	6019      	str	r1, [r3, #0]
 8012fdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fe0:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8012fe4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012fe6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fea:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8012fee:	6819      	ldr	r1, [r3, #0]
 8012ff0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ff4:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8012ff8:	681a      	ldr	r2, [r3, #0]
 8012ffa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ffe:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	fb21 3202 	smlad	r2, r1, r2, r3
 8013008:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801300c:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8013010:	601a      	str	r2, [r3, #0]
  return(result);
 8013012:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013016:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8013020:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8013024:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013028:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 801302c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013030:	6013      	str	r3, [r2, #0]
 8013032:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013036:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801303a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801303c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013040:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8013044:	681a      	ldr	r2, [r3, #0]
 8013046:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801304a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	fa22 f283 	sxtab16	r2, r2, r3
 8013054:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013058:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801305c:	601a      	str	r2, [r3, #0]
  return(result);
 801305e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013062:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801306c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013070:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8013074:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013078:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801307a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801307e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	461a      	mov	r2, r3
 801308a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801308e:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8013092:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013094:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013098:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	1d1a      	adds	r2, r3, #4
 80130a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130a6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	601a      	str	r2, [r3, #0]
    return (val);
 80130ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130b2:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 80130b6:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80130b8:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80130bc:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 80130c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130c4:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80130c8:	601a      	str	r2, [r3, #0]
 80130ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130ce:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 80130d2:	2308      	movs	r3, #8
 80130d4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80130d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130da:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 80130de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130e2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	f003 031f 	and.w	r3, r3, #31
 80130ec:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80130ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130f2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d105      	bne.n	8013108 <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 80130fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013100:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8013104:	6819      	ldr	r1, [r3, #0]
 8013106:	e00b      	b.n	8013120 <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013108:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801310c:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8013110:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013114:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8013118:	6812      	ldr	r2, [r2, #0]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	fa62 f103 	ror.w	r1, r2, r3
 8013120:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013124:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8013128:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801312c:	6013      	str	r3, [r2, #0]
 801312e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013132:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8013136:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013138:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801313c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013140:	681a      	ldr	r2, [r3, #0]
 8013142:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013146:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	fa22 f283 	sxtab16	r2, r2, r3
 8013150:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013154:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8013158:	601a      	str	r2, [r3, #0]
  return(result);
 801315a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801315e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8013168:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 801316c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013170:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8013174:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8013178:	6013      	str	r3, [r2, #0]
 801317a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801317e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8013182:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013184:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013188:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 801318c:	681a      	ldr	r2, [r3, #0]
 801318e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013192:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	fa22 f283 	sxtab16	r2, r2, r3
 801319c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80131a4:	601a      	str	r2, [r3, #0]
  return(result);
 80131a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131aa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 80131b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131b8:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80131bc:	681a      	ldr	r2, [r3, #0]
 80131be:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 80131c2:	441a      	add	r2, r3
 80131c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80131cc:	601a      	str	r2, [r3, #0]
 80131ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80131dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131e0:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 80131e4:	601a      	str	r2, [r3, #0]
    return (val);
 80131e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131ea:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 80131f4:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80131f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131fc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8013200:	601a      	str	r2, [r3, #0]
 8013202:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013206:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 801320a:	2308      	movs	r3, #8
 801320c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801320e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013212:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8013216:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801321a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f003 031f 	and.w	r3, r3, #31
 8013224:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8013226:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801322a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d105      	bne.n	8013240 <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 8013234:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013238:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801323c:	6819      	ldr	r1, [r3, #0]
 801323e:	e00b      	b.n	8013258 <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013240:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013244:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8013248:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801324c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8013250:	6812      	ldr	r2, [r2, #0]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	fa62 f103 	ror.w	r1, r2, r3
 8013258:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801325c:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 8013260:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8013264:	6013      	str	r3, [r2, #0]
 8013266:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801326a:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801326e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013270:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013274:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8013278:	681a      	ldr	r2, [r3, #0]
 801327a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801327e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	fa22 f283 	sxtab16	r2, r2, r3
 8013288:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801328c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8013290:	601a      	str	r2, [r3, #0]
  return(result);
 8013292:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013296:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 80132a0:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 80132a4:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 80132a8:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 80132ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132b0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80132b4:	601a      	str	r2, [r3, #0]
 80132b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132ba:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80132be:	6019      	str	r1, [r3, #0]
 80132c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132c4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80132c8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80132ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132ce:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80132d2:	6819      	ldr	r1, [r3, #0]
 80132d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132d8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80132dc:	681a      	ldr	r2, [r3, #0]
 80132de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132e2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	fb21 3202 	smlad	r2, r1, r2, r3
 80132ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132f0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80132f4:	601a      	str	r2, [r3, #0]
  return(result);
 80132f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132fa:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8013304:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8013308:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801330c:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8013310:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013314:	6013      	str	r3, [r2, #0]
 8013316:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801331a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801331e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013320:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013324:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8013328:	681a      	ldr	r2, [r3, #0]
 801332a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801332e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	fa22 f283 	sxtab16	r2, r2, r3
 8013338:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801333c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8013340:	601a      	str	r2, [r3, #0]
  return(result);
 8013342:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013346:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8013350:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8013354:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8013358:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 801335c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013360:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8013364:	601a      	str	r2, [r3, #0]
 8013366:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801336a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801336e:	6019      	str	r1, [r3, #0]
 8013370:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013374:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8013378:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801337a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801337e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8013382:	6819      	ldr	r1, [r3, #0]
 8013384:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013388:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801338c:	681a      	ldr	r2, [r3, #0]
 801338e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013392:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	fb21 3202 	smlad	r2, r1, r2, r3
 801339c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133a0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80133a4:	601a      	str	r2, [r3, #0]
  return(result);
 80133a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133aa:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 80133b4:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 80133b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80133c0:	601a      	str	r2, [r3, #0]
 80133c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133c6:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 80133ca:	2308      	movs	r3, #8
 80133cc:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80133ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133d2:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 80133d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133da:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	f003 031f 	and.w	r3, r3, #31
 80133e4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80133e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133ea:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d105      	bne.n	8013400 <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 80133f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80133fc:	6819      	ldr	r1, [r3, #0]
 80133fe:	e00b      	b.n	8013418 <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013400:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013404:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8013408:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801340c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8013410:	6812      	ldr	r2, [r2, #0]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	fa62 f103 	ror.w	r1, r2, r3
 8013418:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801341c:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 8013420:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013424:	6013      	str	r3, [r2, #0]
 8013426:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801342a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801342e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013430:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013434:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013438:	681a      	ldr	r2, [r3, #0]
 801343a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801343e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	fa22 f283 	sxtab16	r2, r2, r3
 8013448:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801344c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8013450:	601a      	str	r2, [r3, #0]
  return(result);
 8013452:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013456:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8013460:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013464:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8013468:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801346c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801346e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013472:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	461a      	mov	r2, r3
 801347e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013482:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 8013486:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013488:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801348c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	1d1a      	adds	r2, r3, #4
 8013496:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801349a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	601a      	str	r2, [r3, #0]
    return (val);
 80134a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134a6:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 80134aa:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80134ac:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 80134b0:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 80134b4:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 80134b8:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 80134bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134c0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80134c4:	601a      	str	r2, [r3, #0]
 80134c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134ca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80134ce:	6019      	str	r1, [r3, #0]
 80134d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134d4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80134d8:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80134da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134de:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80134e2:	6819      	ldr	r1, [r3, #0]
 80134e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134e8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80134ec:	681a      	ldr	r2, [r3, #0]
 80134ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	fb21 3202 	smlad	r2, r1, r2, r3
 80134fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013500:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8013504:	601a      	str	r2, [r3, #0]
  return(result);
 8013506:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801350a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8013514:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8013518:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801351c:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8013520:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013524:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8013528:	601a      	str	r2, [r3, #0]
 801352a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801352e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8013532:	6019      	str	r1, [r3, #0]
 8013534:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013538:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801353c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801353e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013542:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8013546:	6819      	ldr	r1, [r3, #0]
 8013548:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801354c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8013550:	681a      	ldr	r2, [r3, #0]
 8013552:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013556:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	fb21 3202 	smlad	r2, r1, r2, r3
 8013560:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013564:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8013568:	601a      	str	r2, [r3, #0]
  return(result);
 801356a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801356e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8013578:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 801357c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013580:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 8013584:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013588:	6013      	str	r3, [r2, #0]
 801358a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801358e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8013592:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013594:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013598:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 801359c:	681a      	ldr	r2, [r3, #0]
 801359e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135a2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	fa22 f283 	sxtab16	r2, r2, r3
 80135ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135b0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80135b4:	601a      	str	r2, [r3, #0]
  return(result);
 80135b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135ba:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80135c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135c8:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80135cc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80135d0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80135d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135d6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	461a      	mov	r2, r3
 80135e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135e6:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 80135ea:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80135ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135f0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	1d1a      	adds	r2, r3, #4
 80135fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135fe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	601a      	str	r2, [r3, #0]
    return (val);
 8013606:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801360a:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801360e:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013610:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8013614:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8013618:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801361c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8013620:	601a      	str	r2, [r3, #0]
 8013622:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013626:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 801362a:	2308      	movs	r3, #8
 801362c:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801362e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013632:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 8013636:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801363a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	f003 031f 	and.w	r3, r3, #31
 8013644:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8013646:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801364a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d105      	bne.n	8013660 <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 8013654:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013658:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801365c:	6819      	ldr	r1, [r3, #0]
 801365e:	e00b      	b.n	8013678 <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013660:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013664:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8013668:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801366c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8013670:	6812      	ldr	r2, [r2, #0]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	fa62 f103 	ror.w	r1, r2, r3
 8013678:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801367c:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8013680:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013684:	6013      	str	r3, [r2, #0]
 8013686:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801368a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 801368e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013690:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013694:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8013698:	681a      	ldr	r2, [r3, #0]
 801369a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801369e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	fa22 f283 	sxtab16	r2, r2, r3
 80136a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136ac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80136b0:	601a      	str	r2, [r3, #0]
  return(result);
 80136b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 80136c0:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 80136c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136c8:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 80136cc:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80136d0:	6013      	str	r3, [r2, #0]
 80136d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136d6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80136da:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80136dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136e0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80136e4:	681a      	ldr	r2, [r3, #0]
 80136e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	fa22 f283 	sxtab16	r2, r2, r3
 80136f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136f8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80136fc:	601a      	str	r2, [r3, #0]
  return(result);
 80136fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013702:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 801370c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013710:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8013714:	681a      	ldr	r2, [r3, #0]
 8013716:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 801371a:	441a      	add	r2, r3
 801371c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013720:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8013724:	601a      	str	r2, [r3, #0]
 8013726:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801372a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8013734:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013738:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 801373c:	601a      	str	r2, [r3, #0]
    return (val);
 801373e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013742:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 801374c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8013750:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013754:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8013758:	601a      	str	r2, [r3, #0]
 801375a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801375e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8013762:	2308      	movs	r3, #8
 8013764:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8013766:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801376a:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801376e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013772:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	f003 031f 	and.w	r3, r3, #31
 801377c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801377e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013782:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d105      	bne.n	8013798 <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 801378c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013790:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8013794:	6819      	ldr	r1, [r3, #0]
 8013796:	e00b      	b.n	80137b0 <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013798:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801379c:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 80137a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80137a8:	6812      	ldr	r2, [r2, #0]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	fa62 f103 	ror.w	r1, r2, r3
 80137b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137b4:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80137b8:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80137bc:	6013      	str	r3, [r2, #0]
 80137be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80137c6:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137cc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80137d0:	681a      	ldr	r2, [r3, #0]
 80137d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	fa22 f283 	sxtab16	r2, r2, r3
 80137e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137e4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80137e8:	601a      	str	r2, [r3, #0]
  return(result);
 80137ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137ee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 80137f8:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 80137fc:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8013800:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8013804:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013808:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801380c:	601a      	str	r2, [r3, #0]
 801380e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013812:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8013816:	6019      	str	r1, [r3, #0]
 8013818:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801381c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8013820:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013822:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013826:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 801382a:	6819      	ldr	r1, [r3, #0]
 801382c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013830:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8013834:	681a      	ldr	r2, [r3, #0]
 8013836:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801383a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	fb21 3202 	smlad	r2, r1, r2, r3
 8013844:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013848:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801384c:	601a      	str	r2, [r3, #0]
  return(result);
 801384e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013852:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 801385c:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8013860:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013864:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8013868:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801386c:	6013      	str	r3, [r2, #0]
 801386e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013872:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013876:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013878:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801387c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8013880:	681a      	ldr	r2, [r3, #0]
 8013882:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013886:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	fa22 f283 	sxtab16	r2, r2, r3
 8013890:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013894:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8013898:	601a      	str	r2, [r3, #0]
  return(result);
 801389a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801389e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 80138a8:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80138ac:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80138b0:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 80138b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138b8:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80138bc:	601a      	str	r2, [r3, #0]
 80138be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138c2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80138c6:	6019      	str	r1, [r3, #0]
 80138c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138cc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80138d0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80138d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80138da:	6819      	ldr	r1, [r3, #0]
 80138dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80138e4:	681a      	ldr	r2, [r3, #0]
 80138e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	fb21 3202 	smlad	r2, r1, r2, r3
 80138f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80138fc:	601a      	str	r2, [r3, #0]
  return(result);
 80138fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013902:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 801390c:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8013910:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013914:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013918:	601a      	str	r2, [r3, #0]
 801391a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801391e:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8013922:	2308      	movs	r3, #8
 8013924:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8013926:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801392a:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 801392e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013932:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	f003 031f 	and.w	r3, r3, #31
 801393c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801393e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013942:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d105      	bne.n	8013958 <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 801394c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013950:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013954:	6819      	ldr	r1, [r3, #0]
 8013956:	e00b      	b.n	8013970 <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013958:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801395c:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8013960:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013964:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8013968:	6812      	ldr	r2, [r2, #0]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	fa62 f103 	ror.w	r1, r2, r3
 8013970:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013974:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8013978:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801397c:	6013      	str	r3, [r2, #0]
 801397e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013982:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8013986:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013988:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801398c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8013990:	681a      	ldr	r2, [r3, #0]
 8013992:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013996:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	fa22 f283 	sxtab16	r2, r2, r3
 80139a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139a4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80139a8:	601a      	str	r2, [r3, #0]
  return(result);
 80139aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 80139b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139bc:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80139c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80139c4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80139c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139ca:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	461a      	mov	r2, r3
 80139d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139da:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 80139de:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80139e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	1d1a      	adds	r2, r3, #4
 80139ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139f2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	601a      	str	r2, [r3, #0]
    return (val);
 80139fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139fe:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 8013a02:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8013a04:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8013a08:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8013a0c:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8013a10:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8013a14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a18:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8013a1c:	601a      	str	r2, [r3, #0]
 8013a1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a22:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8013a26:	6019      	str	r1, [r3, #0]
 8013a28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a2c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013a30:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013a32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8013a3a:	6819      	ldr	r1, [r3, #0]
 8013a3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8013a44:	681a      	ldr	r2, [r3, #0]
 8013a46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a4a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	fb21 3202 	smlad	r2, r1, r2, r3
 8013a54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a58:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013a5c:	601a      	str	r2, [r3, #0]
  return(result);
 8013a5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8013a6c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8013a70:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8013a74:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8013a78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a7c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013a80:	601a      	str	r2, [r3, #0]
 8013a82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013a8a:	6019      	str	r1, [r3, #0]
 8013a8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013a94:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013a96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013a9e:	6819      	ldr	r1, [r3, #0]
 8013aa0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013aa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013aa8:	681a      	ldr	r2, [r3, #0]
 8013aaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	fb21 3202 	smlad	r2, r1, r2, r3
 8013ab8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013abc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8013ac0:	601a      	str	r2, [r3, #0]
  return(result);
 8013ac2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ac6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8013ad0:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8013ad4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ad8:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8013adc:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013ae0:	6013      	str	r3, [r2, #0]
 8013ae2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ae6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013aea:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013aec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013af0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013af4:	681a      	ldr	r2, [r3, #0]
 8013af6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013afa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	fa22 f283 	sxtab16	r2, r2, r3
 8013b04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b08:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013b0c:	601a      	str	r2, [r3, #0]
  return(result);
 8013b0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b12:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8013b1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b20:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8013b24:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013b28:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8013b2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b2e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	461a      	mov	r2, r3
 8013b3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b3e:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8013b42:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013b44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	1d1a      	adds	r2, r3, #4
 8013b52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b56:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	601a      	str	r2, [r3, #0]
    return (val);
 8013b5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b62:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8013b66:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013b68:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8013b6c:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8013b70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013b78:	601a      	str	r2, [r3, #0]
 8013b7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b7e:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8013b82:	2308      	movs	r3, #8
 8013b84:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8013b86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b8a:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8013b8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	f003 031f 	and.w	r3, r3, #31
 8013b9c:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8013b9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ba2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d105      	bne.n	8013bb8 <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 8013bac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bb0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013bb4:	6819      	ldr	r1, [r3, #0]
 8013bb6:	e00b      	b.n	8013bd0 <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013bb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bbc:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8013bc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bc4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013bc8:	6812      	ldr	r2, [r2, #0]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	fa62 f103 	ror.w	r1, r2, r3
 8013bd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bd4:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8013bd8:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013bdc:	6013      	str	r3, [r2, #0]
 8013bde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013be6:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013be8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013bf0:	681a      	ldr	r2, [r3, #0]
 8013bf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	fa22 f283 	sxtab16	r2, r2, r3
 8013c00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013c08:	601a      	str	r2, [r3, #0]
  return(result);
 8013c0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8013c18:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8013c1c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8013c20:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 8013c24:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013c28:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 8013c2c:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8013c30:	fa22 f283 	sxtab16	r2, r2, r3
 8013c34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013c3c:	601a      	str	r2, [r3, #0]
  return(result);
 8013c3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c42:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8013c4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c50:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8013c54:	681a      	ldr	r2, [r3, #0]
 8013c56:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8013c5a:	4413      	add	r3, r2
 8013c5c:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8013c60:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8013c68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c6c:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8013c70:	601a      	str	r2, [r3, #0]
    return (val);
 8013c72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c76:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8013c80:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 8013c84:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8013c88:	2308      	movs	r3, #8
 8013c8a:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 8013c8e:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8013c92:	f003 031f 	and.w	r3, r3, #31
 8013c96:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 8013c9a:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d102      	bne.n	8013ca8 <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 8013ca2:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8013ca6:	e004      	b.n	8013cb2 <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013ca8:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8013cac:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8013cb0:	41da      	rors	r2, r3
 8013cb2:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8013cb6:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 8013cba:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013cbe:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 8013cc2:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8013cc6:	fa22 f383 	sxtab16	r3, r2, r3
 8013cca:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 8013cce:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8013cd2:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8013cd6:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8013cda:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 8013cde:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8013ce2:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 8013ce6:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8013cea:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013cee:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8013cf2:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8013cf6:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8013cfa:	fb21 3302 	smlad	r3, r1, r2, r3
 8013cfe:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 8013d02:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8013d06:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8013d0a:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8013d0e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013d12:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8013d16:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013d1a:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8013d1e:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8013d22:	fa22 f383 	sxtab16	r3, r2, r3
 8013d26:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 8013d2a:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8013d2e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8013d32:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8013d36:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8013d3a:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8013d3e:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 8013d42:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8013d46:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013d4a:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8013d4e:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8013d52:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8013d56:	fb21 3302 	smlad	r3, r1, r2, r3
 8013d5a:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 8013d5e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8013d62:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8013d66:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8013d6a:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8013d6e:	2308      	movs	r3, #8
 8013d70:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 8013d74:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8013d78:	f003 031f 	and.w	r3, r3, #31
 8013d7c:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 8013d80:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d102      	bne.n	8013d8e <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 8013d88:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8013d8c:	e004      	b.n	8013d98 <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013d8e:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8013d92:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8013d96:	41da      	rors	r2, r3
 8013d98:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8013d9c:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 8013da0:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013da4:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 8013da8:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8013dac:	fa22 f383 	sxtab16	r3, r2, r3
 8013db0:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 8013db4:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8013db8:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 8013dbc:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8013dc0:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 8013dc4:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8013dc8:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 8013dcc:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 8013dd0:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013dd4:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8013dd8:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 8013ddc:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 8013de0:	fb21 3302 	smlad	r3, r1, r2, r3
 8013de4:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 8013de8:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8013dec:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8013df0:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8013df4:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8013df8:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8013dfc:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 8013e00:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 8013e04:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013e08:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8013e0c:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 8013e10:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8013e14:	fb21 3302 	smlad	r3, r1, r2, r3
 8013e18:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 8013e1c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8013e20:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8013e24:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8013e28:	3310      	adds	r3, #16
 8013e2a:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8013e2e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8013e32:	f1a3 020f 	sub.w	r2, r3, #15
 8013e36:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8013e3a:	4293      	cmp	r3, r2
 8013e3c:	f6fe ae1c 	blt.w	8012a78 <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8013e40:	e05a      	b.n	8013ef8 <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8013e42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e46:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	f993 3000 	ldrsb.w	r3, [r3]
 8013e50:	461a      	mov	r2, r3
 8013e52:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8013e56:	4413      	add	r3, r2
 8013e58:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 8013e5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e60:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8013e64:	681a      	ldr	r2, [r3, #0]
 8013e66:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8013e6a:	4413      	add	r3, r2
 8013e6c:	f993 3000 	ldrsb.w	r3, [r3]
 8013e70:	461a      	mov	r2, r3
 8013e72:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8013e76:	4413      	add	r3, r2
 8013e78:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8013e7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e80:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	f993 3000 	ldrsb.w	r3, [r3]
 8013e8a:	461a      	mov	r2, r3
 8013e8c:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8013e90:	4413      	add	r3, r2
 8013e92:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 8013e96:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8013e9a:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8013e9e:	fb03 f202 	mul.w	r2, r3, r2
 8013ea2:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8013ea6:	4413      	add	r3, r2
 8013ea8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 8013eac:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8013eb0:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 8013eb4:	fb03 f202 	mul.w	r2, r3, r2
 8013eb8:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8013ebc:	4413      	add	r3, r2
 8013ebe:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 8013ec2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ec6:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	1c5a      	adds	r2, r3, #1
 8013ece:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ed2:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8013ed6:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 8013ed8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013edc:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	1c5a      	adds	r2, r3, #1
 8013ee4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ee8:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8013eec:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8013eee:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8013ef2:	3301      	adds	r3, #1
 8013ef4:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8013ef8:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 8013efc:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8013f00:	429a      	cmp	r2, r3
 8013f02:	db9e      	blt.n	8013e42 <arm_nn_vec_mat_mult_t_s8+0x14f4>
 8013f04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f08:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8013f0c:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8013f10:	6013      	str	r3, [r2, #0]
 8013f12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f16:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 8013f1a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8013f1e:	6013      	str	r3, [r2, #0]
 8013f20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f24:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8013f28:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8013f2c:	6013      	str	r3, [r2, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8013f2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f32:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8013f3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f40:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	fa03 f202 	lsl.w	r2, r3, r2
 8013f4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f4e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8013f52:	601a      	str	r2, [r3, #0]
 8013f54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f58:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8013f5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f60:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013f68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f6c:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8013f70:	2300      	movs	r3, #0
 8013f72:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8013f74:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013f78:	461a      	mov	r2, r3
 8013f7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013f7e:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8013f80:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013f84:	461a      	mov	r2, r3
 8013f86:	2300      	movs	r3, #0
 8013f88:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8013f8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013f92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f96:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	17da      	asrs	r2, r3, #31
 8013f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8013fa0:	637a      	str	r2, [r7, #52]	; 0x34
 8013fa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fa6:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	17da      	asrs	r2, r3, #31
 8013fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8013fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013fb6:	fb02 f203 	mul.w	r2, r2, r3
 8013fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fbc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8013fbe:	fb04 f303 	mul.w	r3, r4, r3
 8013fc2:	4413      	add	r3, r2
 8013fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fc6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8013fc8:	fba2 5604 	umull	r5, r6, r2, r4
 8013fcc:	4433      	add	r3, r6
 8013fce:	461e      	mov	r6, r3
 8013fd0:	1943      	adds	r3, r0, r5
 8013fd2:	61bb      	str	r3, [r7, #24]
 8013fd4:	eb41 0306 	adc.w	r3, r1, r6
 8013fd8:	61fb      	str	r3, [r7, #28]
 8013fda:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013fde:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8013fe2:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8013fe6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fee:	f04f 0000 	mov.w	r0, #0
 8013ff2:	f04f 0100 	mov.w	r1, #0
 8013ff6:	0fd0      	lsrs	r0, r2, #31
 8013ff8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013ffc:	17d9      	asrs	r1, r3, #31
 8013ffe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014002:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8014006:	4603      	mov	r3, r0
 8014008:	6013      	str	r3, [r2, #0]
    return result;
 801400a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801400e:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8014012:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014014:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014018:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	2b00      	cmp	r3, #0
 8014020:	dc06      	bgt.n	8014030 <arm_nn_vec_mat_mult_t_s8+0x16e2>
 8014022:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014026:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	425a      	negs	r2, r3
 801402e:	e000      	b.n	8014032 <arm_nn_vec_mat_mult_t_s8+0x16e4>
 8014030:	2200      	movs	r2, #0
 8014032:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014036:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 801403a:	6019      	str	r1, [r3, #0]
 801403c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014040:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8014044:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8014046:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801404a:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 801404e:	2300      	movs	r3, #0
 8014050:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8014052:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014056:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801405a:	2201      	movs	r2, #1
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	fa02 f103 	lsl.w	r1, r2, r3
 8014062:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014066:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 801406a:	1e4b      	subs	r3, r1, #1
 801406c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801406e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014072:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 8014076:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801407a:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 801407e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014082:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8014086:	6812      	ldr	r2, [r2, #0]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	4013      	ands	r3, r2
 801408c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801408e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014092:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 8014096:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801409a:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 801409e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140a2:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80140a6:	6812      	ldr	r2, [r2, #0]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	fa42 f303 	asr.w	r3, r2, r3
 80140ae:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80140b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140b4:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 80140b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140bc:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	105b      	asrs	r3, r3, #1
 80140c4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80140c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140ca:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	da0a      	bge.n	80140ea <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 80140d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140d8:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 80140dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140e0:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	3301      	adds	r3, #1
 80140e8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80140ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140ee:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 80140f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140f6:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80140fa:	6812      	ldr	r2, [r2, #0]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	429a      	cmp	r2, r3
 8014100:	dd0a      	ble.n	8014118 <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 8014102:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014106:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 801410a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801410e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	3301      	adds	r3, #1
 8014116:	6013      	str	r3, [r2, #0]
    return result;
 8014118:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801411c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8014120:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014122:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 8014124:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 8014128:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801412c:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 8014130:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8014134:	6013      	str	r3, [r2, #0]
 8014136:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801413a:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801413e:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8014142:	6013      	str	r3, [r2, #0]
 8014144:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014148:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 801414c:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8014150:	6013      	str	r3, [r2, #0]
 8014152:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014156:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8014160:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014164:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	fa03 f202 	lsl.w	r2, r3, r2
 801416e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014172:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8014176:	601a      	str	r2, [r3, #0]
 8014178:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801417c:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8014180:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014184:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801418c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014190:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8014194:	2300      	movs	r3, #0
 8014196:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8014198:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801419c:	461a      	mov	r2, r3
 801419e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80141a2:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 80141a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80141aa:	461a      	mov	r2, r3
 80141ac:	2300      	movs	r3, #0
 80141ae:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80141b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80141b6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80141ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141be:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	17da      	asrs	r2, r3, #31
 80141c6:	643b      	str	r3, [r7, #64]	; 0x40
 80141c8:	647a      	str	r2, [r7, #68]	; 0x44
 80141ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141ce:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	17da      	asrs	r2, r3, #31
 80141d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80141d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80141da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141de:	fb02 f203 	mul.w	r2, r2, r3
 80141e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141e4:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80141e6:	fb04 f303 	mul.w	r3, r4, r3
 80141ea:	4413      	add	r3, r2
 80141ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80141ee:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80141f0:	fba2 ab04 	umull	sl, fp, r2, r4
 80141f4:	445b      	add	r3, fp
 80141f6:	469b      	mov	fp, r3
 80141f8:	eb10 030a 	adds.w	r3, r0, sl
 80141fc:	623b      	str	r3, [r7, #32]
 80141fe:	eb41 030b 	adc.w	r3, r1, fp
 8014202:	627b      	str	r3, [r7, #36]	; 0x24
 8014204:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8014208:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801420c:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8014210:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8014214:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014218:	f04f 0000 	mov.w	r0, #0
 801421c:	f04f 0100 	mov.w	r1, #0
 8014220:	0fd0      	lsrs	r0, r2, #31
 8014222:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014226:	17d9      	asrs	r1, r3, #31
 8014228:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801422c:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8014230:	4603      	mov	r3, r0
 8014232:	6013      	str	r3, [r2, #0]
    return result;
 8014234:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014238:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 801423c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801423e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014242:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	2b00      	cmp	r3, #0
 801424a:	dc06      	bgt.n	801425a <arm_nn_vec_mat_mult_t_s8+0x190c>
 801424c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014250:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	425a      	negs	r2, r3
 8014258:	e000      	b.n	801425c <arm_nn_vec_mat_mult_t_s8+0x190e>
 801425a:	2200      	movs	r2, #0
 801425c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014260:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8014264:	6019      	str	r1, [r3, #0]
 8014266:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801426a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801426e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8014270:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014274:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8014278:	2300      	movs	r3, #0
 801427a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801427c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014280:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8014284:	2201      	movs	r2, #1
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	fa02 f103 	lsl.w	r1, r2, r3
 801428c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014290:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 8014294:	1e4b      	subs	r3, r1, #1
 8014296:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8014298:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801429c:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 80142a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142a4:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 80142a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142ac:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80142b0:	6812      	ldr	r2, [r2, #0]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	4013      	ands	r3, r2
 80142b6:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80142b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142bc:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 80142c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142c4:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 80142c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142cc:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80142d0:	6812      	ldr	r2, [r2, #0]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	fa42 f303 	asr.w	r3, r2, r3
 80142d8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80142da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142de:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 80142e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142e6:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	105b      	asrs	r3, r3, #1
 80142ee:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80142f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142f4:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	da0a      	bge.n	8014314 <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 80142fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014302:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8014306:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801430a:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	3301      	adds	r3, #1
 8014312:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8014314:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014318:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 801431c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014320:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8014324:	6812      	ldr	r2, [r2, #0]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	429a      	cmp	r2, r3
 801432a:	dd0a      	ble.n	8014342 <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 801432c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014330:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8014334:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014338:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	3301      	adds	r3, #1
 8014340:	6013      	str	r3, [r2, #0]
    return result;
 8014342:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014346:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801434a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801434c:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 801434e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 8014352:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8014356:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 801435a:	4413      	add	r3, r2
 801435c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 8014360:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8014364:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8014368:	4413      	add	r3, r2
 801436a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 801436e:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8014372:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 8014376:	4293      	cmp	r3, r2
 8014378:	bfb8      	it	lt
 801437a:	4613      	movlt	r3, r2
 801437c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 8014380:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8014384:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8014388:	4293      	cmp	r3, r2
 801438a:	bfa8      	it	ge
 801438c:	4613      	movge	r3, r2
 801438e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 8014392:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8014396:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 801439a:	4293      	cmp	r3, r2
 801439c:	bfb8      	it	lt
 801439e:	4613      	movlt	r3, r2
 80143a0:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 80143a4:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 80143a8:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 80143ac:	4293      	cmp	r3, r2
 80143ae:	bfa8      	it	ge
 80143b0:	4613      	movge	r3, r2
 80143b2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 80143b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143ba:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 80143be:	6819      	ldr	r1, [r3, #0]
 80143c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143c4:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 80143c8:	1c4b      	adds	r3, r1, #1
 80143ca:	6013      	str	r3, [r2, #0]
 80143cc:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 80143d0:	b25b      	sxtb	r3, r3
 80143d2:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 80143d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143d8:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 80143dc:	6819      	ldr	r1, [r3, #0]
 80143de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143e2:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 80143e6:	1c4b      	adds	r3, r1, #1
 80143e8:	6013      	str	r3, [r2, #0]
 80143ea:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80143ee:	b25b      	sxtb	r3, r3
 80143f0:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 80143f2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80143f6:	005b      	lsls	r3, r3, #1
 80143f8:	4619      	mov	r1, r3
 80143fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143fe:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 8014402:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014406:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	440b      	add	r3, r1
 801440e:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 8014410:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 8014414:	3302      	adds	r3, #2
 8014416:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 801441a:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 801441e:	1e5a      	subs	r2, r3, #1
 8014420:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 8014424:	4293      	cmp	r3, r2
 8014426:	f6fe aae5 	blt.w	80129f4 <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 801442a:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 801442e:	f003 0301 	and.w	r3, r3, #1
 8014432:	2b00      	cmp	r3, #0
 8014434:	f001 806e 	beq.w	8015514 <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8014438:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801443c:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8014440:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014444:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 8014448:	6812      	ldr	r2, [r2, #0]
 801444a:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 801444c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014450:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8014454:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014458:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 801445c:	6812      	ldr	r2, [r2, #0]
 801445e:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 8014460:	2300      	movs	r3, #0
 8014462:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 8014466:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801446a:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d00d      	beq.n	8014490 <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 8014474:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014478:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014482:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 8014486:	1d19      	adds	r1, r3, #4
 8014488:	6011      	str	r1, [r2, #0]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 8014490:	2300      	movs	r3, #0
 8014492:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8014496:	f000 beb5 	b.w	8015204 <arm_nn_vec_mat_mult_t_s8+0x28b6>
 801449a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801449e:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 80144a2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80144a6:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80144a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144ac:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	461a      	mov	r2, r3
 80144b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144bc:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 80144c0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80144c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144c6:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	1d1a      	adds	r2, r3, #4
 80144d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144d4:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	601a      	str	r2, [r3, #0]
    return (val);
 80144dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144e0:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 80144e4:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80144e6:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 80144ea:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80144ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144f2:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80144f6:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80144fa:	6019      	str	r1, [r3, #0]
 80144fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014500:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8014504:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014506:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801450a:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014514:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 8014518:	6812      	ldr	r2, [r2, #0]
 801451a:	fa23 f282 	sxtab16	r2, r3, r2
 801451e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014522:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8014526:	601a      	str	r2, [r3, #0]
  return(result);
 8014528:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801452c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8014536:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801453a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801453e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014542:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014544:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014548:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	461a      	mov	r2, r3
 8014554:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014558:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 801455c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801455e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014562:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	1d1a      	adds	r2, r3, #4
 801456c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014570:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	601a      	str	r2, [r3, #0]
    return (val);
 8014578:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801457c:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8014580:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8014582:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8014586:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801458a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801458e:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8014592:	601a      	str	r2, [r3, #0]
 8014594:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014598:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801459c:	2208      	movs	r2, #8
 801459e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80145a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145a4:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80145a8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80145ac:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 80145b0:	6812      	ldr	r2, [r2, #0]
 80145b2:	f002 021f 	and.w	r2, r2, #31
 80145b6:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80145b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145bc:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d105      	bne.n	80145d2 <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 80145c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145ca:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	e00b      	b.n	80145ea <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 80145d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145d6:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 80145da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80145de:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80145e2:	6812      	ldr	r2, [r2, #0]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	fa62 f303 	ror.w	r3, r2, r3
 80145ea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80145ee:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 80145f2:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80145f6:	6011      	str	r1, [r2, #0]
 80145f8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80145fc:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8014600:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014602:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014606:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014610:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8014614:	6812      	ldr	r2, [r2, #0]
 8014616:	fa23 f282 	sxtab16	r2, r3, r2
 801461a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801461e:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8014622:	601a      	str	r2, [r3, #0]
  return(result);
 8014624:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014628:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8014632:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8014636:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801463a:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 801463e:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014642:	6019      	str	r1, [r3, #0]
 8014644:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014648:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 801464c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801464e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014652:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801465c:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 8014660:	6812      	ldr	r2, [r2, #0]
 8014662:	fa23 f282 	sxtab16	r2, r3, r2
 8014666:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801466a:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 801466e:	601a      	str	r2, [r3, #0]
  return(result);
 8014670:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014674:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 801467e:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8014682:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014686:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 801468a:	601a      	str	r2, [r3, #0]
 801468c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014690:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8014694:	2208      	movs	r2, #8
 8014696:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014698:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801469c:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 80146a0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80146a4:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 80146a8:	6812      	ldr	r2, [r2, #0]
 80146aa:	f002 021f 	and.w	r2, r2, #31
 80146ae:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80146b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146b4:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d105      	bne.n	80146ca <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 80146be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146c2:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	e00b      	b.n	80146e2 <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 80146ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146ce:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 80146d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146d6:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 80146da:	6812      	ldr	r2, [r2, #0]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	fa62 f303 	ror.w	r3, r2, r3
 80146e2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80146e6:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 80146ea:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80146ee:	6011      	str	r1, [r2, #0]
 80146f0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80146f4:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 80146f8:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80146fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80146fe:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014708:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 801470c:	6812      	ldr	r2, [r2, #0]
 801470e:	fa23 f282 	sxtab16	r2, r3, r2
 8014712:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014716:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 801471a:	601a      	str	r2, [r3, #0]
  return(result);
 801471c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014720:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 801472a:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 801472e:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8014732:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014736:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801473a:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 801473e:	6018      	str	r0, [r3, #0]
 8014740:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014744:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8014748:	6019      	str	r1, [r3, #0]
 801474a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801474e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8014752:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014754:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014758:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014762:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 8014766:	6812      	ldr	r2, [r2, #0]
 8014768:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801476c:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 8014770:	6809      	ldr	r1, [r1, #0]
 8014772:	fb23 1202 	smlad	r2, r3, r2, r1
 8014776:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801477a:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 801477e:	601a      	str	r2, [r3, #0]
  return(result);
 8014780:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014784:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 801478e:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8014792:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8014796:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801479a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801479e:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 80147a2:	6018      	str	r0, [r3, #0]
 80147a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147a8:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80147ac:	6019      	str	r1, [r3, #0]
 80147ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147b2:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 80147b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80147b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147bc:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80147c6:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 80147ca:	6812      	ldr	r2, [r2, #0]
 80147cc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80147d0:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 80147d4:	6809      	ldr	r1, [r1, #0]
 80147d6:	fb23 1202 	smlad	r2, r3, r2, r1
 80147da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147de:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80147e2:	601a      	str	r2, [r3, #0]
  return(result);
 80147e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147e8:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 80147f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80147f6:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80147fa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80147fe:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014800:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014804:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	461a      	mov	r2, r3
 8014810:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014814:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8014818:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801481a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801481e:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	1d1a      	adds	r2, r3, #4
 8014828:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801482c:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	601a      	str	r2, [r3, #0]
    return (val);
 8014834:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014838:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 801483c:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801483e:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8014842:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8014846:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801484a:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801484e:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8014852:	6019      	str	r1, [r3, #0]
 8014854:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014858:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 801485c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801485e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014862:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801486c:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 8014870:	6812      	ldr	r2, [r2, #0]
 8014872:	fa23 f282 	sxtab16	r2, r3, r2
 8014876:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801487a:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 801487e:	601a      	str	r2, [r3, #0]
  return(result);
 8014880:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014884:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 801488e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014892:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8014896:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801489a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801489c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148a0:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	461a      	mov	r2, r3
 80148ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148b0:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 80148b4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80148b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148ba:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	1d1a      	adds	r2, r3, #4
 80148c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148c8:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	601a      	str	r2, [r3, #0]
    return (val);
 80148d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148d4:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 80148d8:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80148da:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80148de:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80148e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148e6:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80148ea:	601a      	str	r2, [r3, #0]
 80148ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148f0:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80148f4:	2208      	movs	r2, #8
 80148f6:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80148f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80148fc:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8014900:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014904:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 8014908:	6812      	ldr	r2, [r2, #0]
 801490a:	f002 021f 	and.w	r2, r2, #31
 801490e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014910:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014914:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d105      	bne.n	801492a <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 801491e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014922:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	e00b      	b.n	8014942 <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 801492a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801492e:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 8014932:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014936:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 801493a:	6812      	ldr	r2, [r2, #0]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	fa62 f303 	ror.w	r3, r2, r3
 8014942:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014946:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 801494a:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801494e:	6011      	str	r1, [r2, #0]
 8014950:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014954:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 8014958:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801495a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801495e:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014968:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 801496c:	6812      	ldr	r2, [r2, #0]
 801496e:	fa23 f282 	sxtab16	r2, r3, r2
 8014972:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014976:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 801497a:	601a      	str	r2, [r3, #0]
  return(result);
 801497c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014980:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 801498a:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801498e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014992:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8014996:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801499a:	6019      	str	r1, [r3, #0]
 801499c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149a0:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 80149a4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80149a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149aa:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80149b4:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 80149b8:	6812      	ldr	r2, [r2, #0]
 80149ba:	fa23 f282 	sxtab16	r2, r3, r2
 80149be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149c2:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80149c6:	601a      	str	r2, [r3, #0]
  return(result);
 80149c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149cc:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 80149d6:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80149da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149de:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80149e2:	601a      	str	r2, [r3, #0]
 80149e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149e8:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80149ec:	2208      	movs	r2, #8
 80149ee:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80149f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80149f4:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80149f8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80149fc:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 8014a00:	6812      	ldr	r2, [r2, #0]
 8014a02:	f002 021f 	and.w	r2, r2, #31
 8014a06:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014a08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a0c:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d105      	bne.n	8014a22 <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 8014a16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a1a:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	e00b      	b.n	8014a3a <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014a22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a26:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 8014a2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a2e:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8014a32:	6812      	ldr	r2, [r2, #0]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	fa62 f303 	ror.w	r3, r2, r3
 8014a3a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014a3e:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8014a42:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014a46:	6011      	str	r1, [r2, #0]
 8014a48:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014a4c:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 8014a50:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014a52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a56:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014a60:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 8014a64:	6812      	ldr	r2, [r2, #0]
 8014a66:	fa23 f282 	sxtab16	r2, r3, r2
 8014a6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a6e:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8014a72:	601a      	str	r2, [r3, #0]
  return(result);
 8014a74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a78:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8014a82:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8014a86:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8014a8a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014a8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a92:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8014a96:	6018      	str	r0, [r3, #0]
 8014a98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014a9c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8014aa0:	6019      	str	r1, [r3, #0]
 8014aa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014aa6:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8014aaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014aac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ab0:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014aba:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 8014abe:	6812      	ldr	r2, [r2, #0]
 8014ac0:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014ac4:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 8014ac8:	6809      	ldr	r1, [r1, #0]
 8014aca:	fb23 1202 	smlad	r2, r3, r2, r1
 8014ace:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ad2:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8014ad6:	601a      	str	r2, [r3, #0]
  return(result);
 8014ad8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014adc:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8014ae6:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8014aea:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8014aee:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014af2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014af6:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8014afa:	6018      	str	r0, [r3, #0]
 8014afc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b00:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8014b04:	6019      	str	r1, [r3, #0]
 8014b06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b0a:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8014b0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014b10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b14:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014b1e:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8014b22:	6812      	ldr	r2, [r2, #0]
 8014b24:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014b28:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 8014b2c:	6809      	ldr	r1, [r1, #0]
 8014b2e:	fb23 1202 	smlad	r2, r3, r2, r1
 8014b32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b36:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8014b3a:	601a      	str	r2, [r3, #0]
  return(result);
 8014b3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b40:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8014b4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b4e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8014b52:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8014b56:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014b58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b5c:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	461a      	mov	r2, r3
 8014b68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b6c:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8014b70:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014b72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b76:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	1d1a      	adds	r2, r3, #4
 8014b80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b84:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	601a      	str	r2, [r3, #0]
    return (val);
 8014b8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014b90:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8014b94:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8014b96:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8014b9a:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8014b9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ba2:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8014ba6:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8014baa:	6019      	str	r1, [r3, #0]
 8014bac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bb0:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8014bb4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014bb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bba:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014bc4:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 8014bc8:	6812      	ldr	r2, [r2, #0]
 8014bca:	fa23 f282 	sxtab16	r2, r3, r2
 8014bce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bd2:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8014bd6:	601a      	str	r2, [r3, #0]
  return(result);
 8014bd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bdc:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8014be6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bea:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8014bee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014bf2:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014bf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014bf8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	461a      	mov	r2, r3
 8014c04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c08:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8014c0c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014c0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c12:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	1d1a      	adds	r2, r3, #4
 8014c1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c20:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	601a      	str	r2, [r3, #0]
    return (val);
 8014c28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c2c:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8014c30:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8014c32:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8014c36:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8014c3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c3e:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8014c42:	601a      	str	r2, [r3, #0]
 8014c44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c48:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8014c4c:	2208      	movs	r2, #8
 8014c4e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014c50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c54:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8014c58:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014c5c:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8014c60:	6812      	ldr	r2, [r2, #0]
 8014c62:	f002 021f 	and.w	r2, r2, #31
 8014c66:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014c68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c6c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d105      	bne.n	8014c82 <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 8014c76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c7a:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	e00b      	b.n	8014c9a <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014c82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c86:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 8014c8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014c8e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8014c92:	6812      	ldr	r2, [r2, #0]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	fa62 f303 	ror.w	r3, r2, r3
 8014c9a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014c9e:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8014ca2:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8014ca6:	6011      	str	r1, [r2, #0]
 8014ca8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014cac:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8014cb0:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014cb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cb6:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014cc0:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8014cc4:	6812      	ldr	r2, [r2, #0]
 8014cc6:	fa23 f282 	sxtab16	r2, r3, r2
 8014cca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cce:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8014cd2:	601a      	str	r2, [r3, #0]
  return(result);
 8014cd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cd8:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8014ce2:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8014ce6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cea:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8014cee:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014cf2:	6019      	str	r1, [r3, #0]
 8014cf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014cf8:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8014cfc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014cfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d02:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014d0c:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8014d10:	6812      	ldr	r2, [r2, #0]
 8014d12:	fa23 f282 	sxtab16	r2, r3, r2
 8014d16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d1a:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8014d1e:	601a      	str	r2, [r3, #0]
  return(result);
 8014d20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d24:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8014d2e:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8014d32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d36:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8014d3a:	601a      	str	r2, [r3, #0]
 8014d3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d40:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8014d44:	2208      	movs	r2, #8
 8014d46:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014d48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d4c:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8014d50:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014d54:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 8014d58:	6812      	ldr	r2, [r2, #0]
 8014d5a:	f002 021f 	and.w	r2, r2, #31
 8014d5e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014d60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d64:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d105      	bne.n	8014d7a <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 8014d6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d72:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	e00b      	b.n	8014d92 <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014d7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d7e:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 8014d82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d86:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8014d8a:	6812      	ldr	r2, [r2, #0]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	fa62 f303 	ror.w	r3, r2, r3
 8014d92:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014d96:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8014d9a:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8014d9e:	6011      	str	r1, [r2, #0]
 8014da0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014da4:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8014da8:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014daa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014dae:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014db8:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8014dbc:	6812      	ldr	r2, [r2, #0]
 8014dbe:	fa23 f282 	sxtab16	r2, r3, r2
 8014dc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014dc6:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8014dca:	601a      	str	r2, [r3, #0]
  return(result);
 8014dcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014dd0:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8014dda:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8014dde:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8014de2:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014de6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014dea:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8014dee:	6018      	str	r0, [r3, #0]
 8014df0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014df4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8014df8:	6019      	str	r1, [r3, #0]
 8014dfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014dfe:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8014e02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014e04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e08:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014e12:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8014e16:	6812      	ldr	r2, [r2, #0]
 8014e18:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014e1c:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 8014e20:	6809      	ldr	r1, [r1, #0]
 8014e22:	fb23 1202 	smlad	r2, r3, r2, r1
 8014e26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e2a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8014e2e:	601a      	str	r2, [r3, #0]
  return(result);
 8014e30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e34:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8014e3e:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8014e42:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8014e46:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014e4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e4e:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8014e52:	6018      	str	r0, [r3, #0]
 8014e54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e58:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8014e5c:	6019      	str	r1, [r3, #0]
 8014e5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e62:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8014e66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014e68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e6c:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014e76:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8014e7a:	6812      	ldr	r2, [r2, #0]
 8014e7c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014e80:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8014e84:	6809      	ldr	r1, [r1, #0]
 8014e86:	fb23 1202 	smlad	r2, r3, r2, r1
 8014e8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e8e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8014e92:	601a      	str	r2, [r3, #0]
  return(result);
 8014e94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014e98:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8014ea2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ea6:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8014eaa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8014eae:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014eb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014eb4:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	461a      	mov	r2, r3
 8014ec0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ec4:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8014ec8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014eca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ece:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	1d1a      	adds	r2, r3, #4
 8014ed8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014edc:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	601a      	str	r2, [r3, #0]
    return (val);
 8014ee4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014ee8:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8014eec:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8014eee:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8014ef2:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8014ef6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014efa:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8014efe:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8014f02:	6019      	str	r1, [r3, #0]
 8014f04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f08:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8014f0c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014f0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f12:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014f1c:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 8014f20:	6812      	ldr	r2, [r2, #0]
 8014f22:	fa23 f282 	sxtab16	r2, r3, r2
 8014f26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f2a:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8014f2e:	601a      	str	r2, [r3, #0]
  return(result);
 8014f30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f34:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8014f3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f42:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8014f46:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014f4a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014f4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f50:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	461a      	mov	r2, r3
 8014f5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f60:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8014f64:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8014f66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f6a:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	1d1a      	adds	r2, r3, #4
 8014f74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f78:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	601a      	str	r2, [r3, #0]
    return (val);
 8014f80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f84:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8014f88:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8014f8a:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8014f8e:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8014f92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014f96:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8014f9a:	601a      	str	r2, [r3, #0]
 8014f9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014fa0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8014fa4:	2208      	movs	r2, #8
 8014fa6:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014fa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014fac:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8014fb0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014fb4:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 8014fb8:	6812      	ldr	r2, [r2, #0]
 8014fba:	f002 021f 	and.w	r2, r2, #31
 8014fbe:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8014fc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014fc4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d105      	bne.n	8014fda <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 8014fce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014fd2:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	e00b      	b.n	8014ff2 <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014fda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014fde:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 8014fe2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014fe6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8014fea:	6812      	ldr	r2, [r2, #0]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	fa62 f303 	ror.w	r3, r2, r3
 8014ff2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014ff6:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8014ffa:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8014ffe:	6011      	str	r1, [r2, #0]
 8015000:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8015004:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8015008:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801500a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801500e:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8015018:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 801501c:	6812      	ldr	r2, [r2, #0]
 801501e:	fa23 f282 	sxtab16	r2, r3, r2
 8015022:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015026:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 801502a:	601a      	str	r2, [r3, #0]
  return(result);
 801502c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015030:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 801503a:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801503e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015042:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8015046:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801504a:	6019      	str	r1, [r3, #0]
 801504c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015050:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8015054:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015056:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801505a:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8015064:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 8015068:	6812      	ldr	r2, [r2, #0]
 801506a:	fa23 f282 	sxtab16	r2, r3, r2
 801506e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015072:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015076:	601a      	str	r2, [r3, #0]
  return(result);
 8015078:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801507c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8015086:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801508a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801508e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8015092:	601a      	str	r2, [r3, #0]
 8015094:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015098:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 801509c:	2208      	movs	r2, #8
 801509e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80150a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80150a4:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80150a8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80150ac:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 80150b0:	6812      	ldr	r2, [r2, #0]
 80150b2:	f002 021f 	and.w	r2, r2, #31
 80150b6:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80150b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80150bc:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d105      	bne.n	80150d2 <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 80150c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80150ca:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	e00b      	b.n	80150ea <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 80150d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80150d6:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 80150da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80150de:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80150e2:	6812      	ldr	r2, [r2, #0]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	fa62 f303 	ror.w	r3, r2, r3
 80150ea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80150ee:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 80150f2:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80150f6:	6011      	str	r1, [r2, #0]
 80150f8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80150fc:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8015100:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015102:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015106:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8015110:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 8015114:	6812      	ldr	r2, [r2, #0]
 8015116:	fa23 f282 	sxtab16	r2, r3, r2
 801511a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801511e:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8015122:	601a      	str	r2, [r3, #0]
  return(result);
 8015124:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015128:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8015132:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8015136:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 801513a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801513e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015142:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8015146:	6018      	str	r0, [r3, #0]
 8015148:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801514c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8015150:	6019      	str	r1, [r3, #0]
 8015152:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015156:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 801515a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801515c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015160:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801516a:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 801516e:	6812      	ldr	r2, [r2, #0]
 8015170:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8015174:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 8015178:	6809      	ldr	r1, [r1, #0]
 801517a:	fb23 1202 	smlad	r2, r3, r2, r1
 801517e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015182:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8015186:	601a      	str	r2, [r3, #0]
  return(result);
 8015188:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801518c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8015196:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 801519a:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 801519e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80151a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80151a6:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80151aa:	6018      	str	r0, [r3, #0]
 80151ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80151b0:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80151b4:	6019      	str	r1, [r3, #0]
 80151b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80151ba:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80151be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80151c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80151c4:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80151ce:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 80151d2:	6812      	ldr	r2, [r2, #0]
 80151d4:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80151d8:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 80151dc:	6809      	ldr	r1, [r1, #0]
 80151de:	fb23 1202 	smlad	r2, r3, r2, r1
 80151e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80151e6:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80151ea:	601a      	str	r2, [r3, #0]
  return(result);
 80151ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80151f0:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 80151fa:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 80151fe:	3310      	adds	r3, #16
 8015200:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8015204:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8015208:	3b0f      	subs	r3, #15
 801520a:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 801520e:	429a      	cmp	r2, r3
 8015210:	f6ff a943 	blt.w	801449a <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8015214:	e03f      	b.n	8015296 <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8015216:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801521a:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	f993 3000 	ldrsb.w	r3, [r3]
 8015224:	461a      	mov	r2, r3
 8015226:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 801522a:	4413      	add	r3, r2
 801522c:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8015230:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015234:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	f993 3000 	ldrsb.w	r3, [r3]
 801523e:	461a      	mov	r2, r3
 8015240:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8015244:	4413      	add	r3, r2
 8015246:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 801524a:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 801524e:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8015252:	fb02 f303 	mul.w	r3, r2, r3
 8015256:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801525a:	4413      	add	r3, r2
 801525c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 8015260:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015264:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	1c5a      	adds	r2, r3, #1
 801526c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015270:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8015274:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 8015276:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801527a:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	1c5a      	adds	r2, r3, #1
 8015282:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015286:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 801528a:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801528c:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8015290:	3301      	adds	r3, #1
 8015292:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8015296:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 801529a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801529e:	429a      	cmp	r2, r3
 80152a0:	dbb9      	blt.n	8015216 <arm_nn_vec_mat_mult_t_s8+0x28c8>
 80152a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80152a6:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 80152aa:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80152ae:	601a      	str	r2, [r3, #0]
 80152b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80152b4:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 80152b8:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 80152bc:	601a      	str	r2, [r3, #0]
 80152be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80152c2:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 80152c6:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 80152ca:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80152cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80152d0:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80152da:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80152de:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 80152e2:	6812      	ldr	r2, [r2, #0]
 80152e4:	409a      	lsls	r2, r3
 80152e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80152ea:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 80152ee:	601a      	str	r2, [r3, #0]
 80152f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80152f4:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 80152f8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80152fc:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 8015300:	6812      	ldr	r2, [r2, #0]
 8015302:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8015304:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015308:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 801530c:	2200      	movs	r2, #0
 801530e:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8015310:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015314:	461a      	mov	r2, r3
 8015316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801531a:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 801531e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015322:	461a      	mov	r2, r3
 8015324:	2300      	movs	r3, #0
 8015326:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801532a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801532e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015332:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8015336:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 801533a:	6809      	ldr	r1, [r1, #0]
 801533c:	17c8      	asrs	r0, r1, #31
 801533e:	6139      	str	r1, [r7, #16]
 8015340:	6178      	str	r0, [r7, #20]
 8015342:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8015346:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 801534a:	6809      	ldr	r1, [r1, #0]
 801534c:	17c8      	asrs	r0, r1, #31
 801534e:	60b9      	str	r1, [r7, #8]
 8015350:	60f8      	str	r0, [r7, #12]
 8015352:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8015356:	4631      	mov	r1, r6
 8015358:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 801535c:	4650      	mov	r0, sl
 801535e:	fb00 f001 	mul.w	r0, r0, r1
 8015362:	4659      	mov	r1, fp
 8015364:	462c      	mov	r4, r5
 8015366:	fb04 f101 	mul.w	r1, r4, r1
 801536a:	4401      	add	r1, r0
 801536c:	4628      	mov	r0, r5
 801536e:	4654      	mov	r4, sl
 8015370:	fba0 8904 	umull	r8, r9, r0, r4
 8015374:	4449      	add	r1, r9
 8015376:	4689      	mov	r9, r1
 8015378:	eb12 0108 	adds.w	r1, r2, r8
 801537c:	6039      	str	r1, [r7, #0]
 801537e:	eb43 0309 	adc.w	r3, r3, r9
 8015382:	607b      	str	r3, [r7, #4]
 8015384:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015388:	e9d7 1200 	ldrd	r1, r2, [r7]
 801538c:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8015390:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015394:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015398:	f04f 0200 	mov.w	r2, #0
 801539c:	f04f 0300 	mov.w	r3, #0
 80153a0:	0fc2      	lsrs	r2, r0, #31
 80153a2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80153a6:	17cb      	asrs	r3, r1, #31
 80153a8:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80153ac:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 80153b0:	4613      	mov	r3, r2
 80153b2:	600b      	str	r3, [r1, #0]
    return result;
 80153b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80153b8:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 80153bc:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80153be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80153c2:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	dc06      	bgt.n	80153da <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 80153cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80153d0:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	425b      	negs	r3, r3
 80153d8:	e000      	b.n	80153dc <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 80153da:	2300      	movs	r3, #0
 80153dc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80153e0:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 80153e4:	6011      	str	r1, [r2, #0]
 80153e6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80153ea:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 80153ee:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80153f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80153f4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80153f8:	2200      	movs	r2, #0
 80153fa:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80153fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015400:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 8015404:	2201      	movs	r2, #1
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	409a      	lsls	r2, r3
 801540a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801540e:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 8015412:	3a01      	subs	r2, #1
 8015414:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8015416:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801541a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 801541e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8015422:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 8015426:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801542a:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 801542e:	6809      	ldr	r1, [r1, #0]
 8015430:	6812      	ldr	r2, [r2, #0]
 8015432:	400a      	ands	r2, r1
 8015434:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8015436:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801543a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801543e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8015442:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 8015446:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801544a:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 801544e:	6809      	ldr	r1, [r1, #0]
 8015450:	6812      	ldr	r2, [r2, #0]
 8015452:	fa41 f202 	asr.w	r2, r1, r2
 8015456:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8015458:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801545c:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8015460:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8015464:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 8015468:	6812      	ldr	r2, [r2, #0]
 801546a:	1052      	asrs	r2, r2, #1
 801546c:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801546e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015472:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	2b00      	cmp	r3, #0
 801547a:	da0a      	bge.n	8015492 <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 801547c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015480:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8015484:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8015488:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 801548c:	6812      	ldr	r2, [r2, #0]
 801548e:	3201      	adds	r2, #1
 8015490:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8015492:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8015496:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 801549a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801549e:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80154a2:	6812      	ldr	r2, [r2, #0]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	dd0a      	ble.n	80154c0 <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 80154aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80154ae:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80154b2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80154b6:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 80154ba:	6812      	ldr	r2, [r2, #0]
 80154bc:	3201      	adds	r2, #1
 80154be:	601a      	str	r2, [r3, #0]
    return result;
 80154c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80154c4:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80154c8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80154ca:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 80154cc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 80154d0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80154d4:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 80154d8:	4413      	add	r3, r2
 80154da:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 80154de:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80154e2:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 80154e6:	4293      	cmp	r3, r2
 80154e8:	bfb8      	it	lt
 80154ea:	4613      	movlt	r3, r2
 80154ec:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 80154f0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80154f4:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 80154f8:	4293      	cmp	r3, r2
 80154fa:	bfa8      	it	ge
 80154fc:	4613      	movge	r3, r2
 80154fe:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 8015502:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8015506:	b25a      	sxtb	r2, r3
 8015508:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801550c:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 8015514:	2300      	movs	r3, #0
}
 8015516:	4618      	mov	r0, r3
 8015518:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 801551c:	46bd      	mov	sp, r7
 801551e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015522:	4770      	bx	lr
 8015524:	0000      	movs	r0, r0
	...

08015528 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 8015528:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801552c:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 8015530:	af00      	add	r7, sp, #0
 8015532:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 8015536:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 801553a:	6020      	str	r0, [r4, #0]
 801553c:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 8015540:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 8015544:	6001      	str	r1, [r0, #0]
 8015546:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 801554a:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 801554e:	600a      	str	r2, [r1, #0]
 8015550:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 8015554:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8015558:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 801555a:	2201      	movs	r2, #1
 801555c:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 8015560:	fa02 f303 	lsl.w	r3, r2, r3
 8015564:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 8015568:	2300      	movs	r3, #0
 801556a:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 801556e:	2300      	movs	r3, #0
 8015570:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8015574:	f004 b863 	b.w	801963e <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 8015578:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801557c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	781b      	ldrb	r3, [r3, #0]
 8015584:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 8015588:	2301      	movs	r3, #1
 801558a:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801558e:	e015      	b.n	80155bc <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 8015590:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8015594:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015598:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	4413      	add	r3, r2
 80155a0:	f993 2000 	ldrsb.w	r2, [r3]
 80155a4:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 80155a8:	4293      	cmp	r3, r2
 80155aa:	bfb8      	it	lt
 80155ac:	4613      	movlt	r3, r2
 80155ae:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 80155b2:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80155b6:	3301      	adds	r3, #1
 80155b8:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80155bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80155c0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80155c4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	429a      	cmp	r2, r3
 80155cc:	dbe0      	blt.n	8015590 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 80155ce:	2300      	movs	r3, #0
 80155d0:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 80155d4:	2300      	movs	r3, #0
 80155d6:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 80155da:	2300      	movs	r3, #0
 80155dc:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80155e0:	f001 ba24 	b.w	8016a2c <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 80155e4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80155e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80155ec:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	4413      	add	r3, r2
 80155f4:	f993 3000 	ldrsb.w	r3, [r3]
 80155f8:	461a      	mov	r2, r3
 80155fa:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 80155fe:	1ad3      	subs	r3, r2, r3
 8015600:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 8015604:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8015608:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 801560c:	429a      	cmp	r2, r3
 801560e:	f2c1 8208 	blt.w	8016a22 <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 8015612:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8015616:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 801561a:	fb03 f202 	mul.w	r2, r3, r2
 801561e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015622:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8015626:	601a      	str	r2, [r3, #0]
 8015628:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801562c:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8015630:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015634:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801563c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015640:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8015644:	2300      	movs	r3, #0
 8015646:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015648:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801564c:	f04f 0300 	mov.w	r3, #0
 8015650:	f607 0138 	addw	r1, r7, #2104	; 0x838
 8015654:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015658:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801565c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	0fdb      	lsrs	r3, r3, #31
 8015664:	b2da      	uxtb	r2, r3
 8015666:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801566a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	0fdb      	lsrs	r3, r3, #31
 8015672:	b2db      	uxtb	r3, r3
 8015674:	4053      	eors	r3, r2
 8015676:	b2db      	uxtb	r3, r3
 8015678:	2b00      	cmp	r3, #0
 801567a:	d012      	beq.n	80156a2 <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 801567c:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8015680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015684:	2100      	movs	r1, #0
 8015686:	f1d2 0001 	rsbs	r0, r2, #1
 801568a:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 801568e:	eb61 0303 	sbc.w	r3, r1, r3
 8015692:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8015696:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 801569a:	f607 0238 	addw	r2, r7, #2104	; 0x838
 801569e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80156a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80156a6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	17da      	asrs	r2, r3, #31
 80156ae:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80156b2:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 80156b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80156ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	17da      	asrs	r2, r3, #31
 80156c2:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 80156c6:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 80156ca:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80156ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80156d2:	460b      	mov	r3, r1
 80156d4:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 80156d8:	fb02 f203 	mul.w	r2, r2, r3
 80156dc:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80156e0:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 80156e4:	e9c4 0100 	strd	r0, r1, [r4]
 80156e8:	4601      	mov	r1, r0
 80156ea:	fb01 f303 	mul.w	r3, r1, r3
 80156ee:	4413      	add	r3, r2
 80156f0:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 80156f4:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 80156f8:	fba2 1201 	umull	r1, r2, r2, r1
 80156fc:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 8015700:	460a      	mov	r2, r1
 8015702:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 8015706:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 801570a:	4413      	add	r3, r2
 801570c:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8015710:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8015714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015718:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 801571c:	1851      	adds	r1, r2, r1
 801571e:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 8015722:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 8015726:	414b      	adcs	r3, r1
 8015728:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 801572c:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 8015730:	f607 0238 	addw	r2, r7, #2104	; 0x838
 8015734:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015738:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015740:	2b00      	cmp	r3, #0
 8015742:	da0a      	bge.n	801575a <arm_softmax_s8+0x232>
 8015744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015748:	1851      	adds	r1, r2, r1
 801574a:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 801574e:	f143 0300 	adc.w	r3, r3, #0
 8015752:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8015756:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 801575a:	f04f 0000 	mov.w	r0, #0
 801575e:	f04f 0100 	mov.w	r1, #0
 8015762:	0fd0      	lsrs	r0, r2, #31
 8015764:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015768:	17d9      	asrs	r1, r3, #31
 801576a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801576e:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8015772:	4603      	mov	r3, r0
 8015774:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015776:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801577a:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 801577e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015782:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8015786:	6812      	ldr	r2, [r2, #0]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	429a      	cmp	r2, r3
 801578c:	d10e      	bne.n	80157ac <arm_softmax_s8+0x284>
 801578e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015792:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801579c:	d106      	bne.n	80157ac <arm_softmax_s8+0x284>
        result = Q31_MAX;
 801579e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80157a2:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80157a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80157aa:	6013      	str	r3, [r2, #0]
    return result;
 80157ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80157b0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968

// @note The following functions are used only for softmax layer, scaled bits = 5 assumed

__STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
{
    int32_t mask = 0;
 80157ba:	2300      	movs	r3, #0
 80157bc:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 80157c0:	2318      	movs	r3, #24
 80157c2:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960

    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 80157c6:	2201      	movs	r2, #1
 80157c8:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 80157cc:	fa02 f303 	lsl.w	r3, r2, r3
 80157d0:	1e5a      	subs	r2, r3, #1
 80157d2:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80157d6:	ea02 0103 	and.w	r1, r2, r3
 80157da:	2201      	movs	r2, #1
 80157dc:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 80157e0:	fa02 f303 	lsl.w	r3, r2, r3
 80157e4:	1acb      	subs	r3, r1, r3
 80157e6:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 80157ea:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 80157ee:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 80157f2:	1ad3      	subs	r3, r2, r3
 80157f4:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 80157f8:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 80157fc:	015b      	lsls	r3, r3, #5
 80157fe:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8015802:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 8015806:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 801580a:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 801580e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8015812:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 8015816:	2300      	movs	r3, #0
 8015818:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 801581c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015820:	f04f 0300 	mov.w	r3, #0
 8015824:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8015828:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801582c:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 8015830:	0fdb      	lsrs	r3, r3, #31
 8015832:	b2da      	uxtb	r2, r3
 8015834:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8015838:	0fdb      	lsrs	r3, r3, #31
 801583a:	b2db      	uxtb	r3, r3
 801583c:	4053      	eors	r3, r2
 801583e:	b2db      	uxtb	r3, r3
 8015840:	2b00      	cmp	r3, #0
 8015842:	d012      	beq.n	801586a <arm_softmax_s8+0x342>
        mult = 1 - mult;
 8015844:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8015848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801584c:	2100      	movs	r1, #0
 801584e:	f1d2 0001 	rsbs	r0, r2, #1
 8015852:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 8015856:	eb61 0303 	sbc.w	r3, r1, r3
 801585a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 801585e:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 8015862:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8015866:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801586a:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 801586e:	17da      	asrs	r2, r3, #31
 8015870:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8015874:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 8015878:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 801587c:	17da      	asrs	r2, r3, #31
 801587e:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 8015882:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 8015886:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801588a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801588e:	460b      	mov	r3, r1
 8015890:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8015894:	fb02 f203 	mul.w	r2, r2, r3
 8015898:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 801589c:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 80158a0:	e9c4 0100 	strd	r0, r1, [r4]
 80158a4:	4601      	mov	r1, r0
 80158a6:	fb01 f303 	mul.w	r3, r1, r3
 80158aa:	4413      	add	r3, r2
 80158ac:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 80158b0:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 80158b4:	fba2 8901 	umull	r8, r9, r2, r1
 80158b8:	444b      	add	r3, r9
 80158ba:	4699      	mov	r9, r3
 80158bc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80158c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c4:	eb12 0108 	adds.w	r1, r2, r8
 80158c8:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 80158cc:	eb43 0309 	adc.w	r3, r3, r9
 80158d0:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 80158d4:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 80158d8:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80158dc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80158e0:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80158e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	da0a      	bge.n	8015902 <arm_softmax_s8+0x3da>
 80158ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80158f0:	1851      	adds	r1, r2, r1
 80158f2:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 80158f6:	f143 0300 	adc.w	r3, r3, #0
 80158fa:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 80158fe:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8015902:	f04f 0000 	mov.w	r0, #0
 8015906:	f04f 0100 	mov.w	r1, #0
 801590a:	0fd0      	lsrs	r0, r2, #31
 801590c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015910:	17d9      	asrs	r1, r3, #31
 8015912:	4602      	mov	r2, r0
 8015914:	460b      	mov	r3, r1
 8015916:	4613      	mov	r3, r2
 8015918:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801591c:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 8015920:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 8015924:	429a      	cmp	r2, r3
 8015926:	d108      	bne.n	801593a <arm_softmax_s8+0x412>
 8015928:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 801592c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015930:	d103      	bne.n	801593a <arm_softmax_s8+0x412>
        result = Q31_MAX;
 8015932:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015936:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 801593a:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 801593e:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 8015942:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8015946:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 801594a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 801594e:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 8015952:	2300      	movs	r3, #0
 8015954:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 8015958:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801595c:	f04f 0300 	mov.w	r3, #0
 8015960:	f607 1128 	addw	r1, r7, #2344	; 0x928
 8015964:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015968:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 801596c:	0fdb      	lsrs	r3, r3, #31
 801596e:	b2da      	uxtb	r2, r3
 8015970:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8015974:	0fdb      	lsrs	r3, r3, #31
 8015976:	b2db      	uxtb	r3, r3
 8015978:	4053      	eors	r3, r2
 801597a:	b2db      	uxtb	r3, r3
 801597c:	2b00      	cmp	r3, #0
 801597e:	d012      	beq.n	80159a6 <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 8015980:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8015984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015988:	2100      	movs	r1, #0
 801598a:	f1d2 0001 	rsbs	r0, r2, #1
 801598e:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 8015992:	eb61 0303 	sbc.w	r3, r1, r3
 8015996:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801599a:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 801599e:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80159a2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80159a6:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 80159aa:	17da      	asrs	r2, r3, #31
 80159ac:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 80159b0:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 80159b4:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 80159b8:	17da      	asrs	r2, r3, #31
 80159ba:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 80159be:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 80159c2:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80159c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80159ca:	460b      	mov	r3, r1
 80159cc:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 80159d0:	fb02 f203 	mul.w	r2, r2, r3
 80159d4:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80159d8:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 80159dc:	e9c4 0100 	strd	r0, r1, [r4]
 80159e0:	4601      	mov	r1, r0
 80159e2:	fb01 f303 	mul.w	r3, r1, r3
 80159e6:	4413      	add	r3, r2
 80159e8:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 80159ec:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 80159f0:	fba2 ab01 	umull	sl, fp, r2, r1
 80159f4:	445b      	add	r3, fp
 80159f6:	469b      	mov	fp, r3
 80159f8:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80159fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a00:	eb12 010a 	adds.w	r1, r2, sl
 8015a04:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 8015a08:	eb43 030b 	adc.w	r3, r3, fp
 8015a0c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8015a10:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 8015a14:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8015a18:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015a1c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8015a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	da0a      	bge.n	8015a3e <arm_softmax_s8+0x516>
 8015a28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015a2c:	1851      	adds	r1, r2, r1
 8015a2e:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 8015a32:	f143 0300 	adc.w	r3, r3, #0
 8015a36:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8015a3a:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8015a3e:	f04f 0000 	mov.w	r0, #0
 8015a42:	f04f 0100 	mov.w	r1, #0
 8015a46:	0fd0      	lsrs	r0, r2, #31
 8015a48:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015a4c:	17d9      	asrs	r1, r3, #31
 8015a4e:	4602      	mov	r2, r0
 8015a50:	460b      	mov	r3, r1
 8015a52:	4613      	mov	r3, r2
 8015a54:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015a58:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 8015a5c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8015a60:	429a      	cmp	r2, r3
 8015a62:	d108      	bne.n	8015a76 <arm_softmax_s8+0x54e>
 8015a64:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8015a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015a6c:	d103      	bne.n	8015a76 <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 8015a6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015a72:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 8015a76:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8015a7a:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015a84:	2304      	movs	r3, #4
 8015a86:	3b01      	subs	r3, #1
 8015a88:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 8015a8c:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8015a90:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8015a94:	4013      	ands	r3, r2
 8015a96:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 8015a9a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8015a9e:	109b      	asrs	r3, r3, #2
 8015aa0:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 8015aa4:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8015aa8:	105b      	asrs	r3, r3, #1
 8015aaa:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 8015aae:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	da04      	bge.n	8015ac0 <arm_softmax_s8+0x598>
        threshold++;
 8015ab6:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8015aba:	3301      	adds	r3, #1
 8015abc:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 8015ac0:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 8015ac4:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	dd04      	ble.n	8015ad6 <arm_softmax_s8+0x5ae>
        result++;
 8015acc:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 8015ad6:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 8015ada:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8015ade:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8015ae2:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8015ae6:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 8015aea:	2300      	movs	r3, #0
 8015aec:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 8015af0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015af4:	f04f 0300 	mov.w	r3, #0
 8015af8:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8015afc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015b00:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8015b04:	0fdb      	lsrs	r3, r3, #31
 8015b06:	b2da      	uxtb	r2, r3
 8015b08:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8015b0c:	0fdb      	lsrs	r3, r3, #31
 8015b0e:	b2db      	uxtb	r3, r3
 8015b10:	4053      	eors	r3, r2
 8015b12:	b2db      	uxtb	r3, r3
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d012      	beq.n	8015b3e <arm_softmax_s8+0x616>
        mult = 1 - mult;
 8015b18:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8015b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b20:	2100      	movs	r1, #0
 8015b22:	f1d2 0001 	rsbs	r0, r2, #1
 8015b26:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 8015b2a:	eb61 0303 	sbc.w	r3, r1, r3
 8015b2e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8015b32:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8015b36:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8015b3a:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 8015b3e:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8015b42:	17da      	asrs	r2, r3, #31
 8015b44:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8015b48:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 8015b4c:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8015b50:	17da      	asrs	r2, r3, #31
 8015b52:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 8015b56:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 8015b5a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8015b5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015b62:	460b      	mov	r3, r1
 8015b64:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 8015b68:	fb02 f203 	mul.w	r2, r2, r3
 8015b6c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8015b70:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 8015b74:	e9cc 0100 	strd	r0, r1, [ip]
 8015b78:	4601      	mov	r1, r0
 8015b7a:	fb01 f303 	mul.w	r3, r1, r3
 8015b7e:	4413      	add	r3, r2
 8015b80:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 8015b84:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 8015b88:	fba2 5601 	umull	r5, r6, r2, r1
 8015b8c:	4433      	add	r3, r6
 8015b8e:	461e      	mov	r6, r3
 8015b90:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8015b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b98:	1951      	adds	r1, r2, r5
 8015b9a:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 8015b9e:	4173      	adcs	r3, r6
 8015ba0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8015ba4:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8015ba8:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8015bac:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8015bb0:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8015bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	da0a      	bge.n	8015bd2 <arm_softmax_s8+0x6aa>
 8015bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015bc0:	1851      	adds	r1, r2, r1
 8015bc2:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 8015bc6:	f143 0300 	adc.w	r3, r3, #0
 8015bca:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8015bce:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8015bd2:	f04f 0000 	mov.w	r0, #0
 8015bd6:	f04f 0100 	mov.w	r1, #0
 8015bda:	0fd0      	lsrs	r0, r2, #31
 8015bdc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015be0:	17d9      	asrs	r1, r3, #31
 8015be2:	4602      	mov	r2, r0
 8015be4:	460b      	mov	r3, r1
 8015be6:	4613      	mov	r3, r2
 8015be8:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015bec:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8015bf0:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d108      	bne.n	8015c0a <arm_softmax_s8+0x6e2>
 8015bf8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8015bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015c00:	d103      	bne.n	8015c0a <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 8015c02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015c06:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 8015c0a:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908

    int32_t result = 1895147668 +
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8015c0e:	4423      	add	r3, r4
 8015c10:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 8015c14:	2300      	movs	r3, #0
 8015c16:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 8015c1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015c1e:	f04f 0300 	mov.w	r3, #0
 8015c22:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 8015c26:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015c2a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8015c2e:	0fdb      	lsrs	r3, r3, #31
 8015c30:	b2da      	uxtb	r2, r3
 8015c32:	2300      	movs	r3, #0
 8015c34:	4053      	eors	r3, r2
 8015c36:	b2db      	uxtb	r3, r3
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d012      	beq.n	8015c62 <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 8015c3c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8015c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c44:	2100      	movs	r1, #0
 8015c46:	f1d2 0001 	rsbs	r0, r2, #1
 8015c4a:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 8015c4e:	eb61 0303 	sbc.w	r3, r1, r3
 8015c52:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8015c56:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 8015c5a:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8015c5e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015c62:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8015c66:	17da      	asrs	r2, r3, #31
 8015c68:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8015c6c:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 8015c70:	a3f0      	add	r3, pc, #960	; (adr r3, 8016034 <arm_softmax_s8+0xb0c>)
 8015c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c76:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 8015c7a:	fb02 f001 	mul.w	r0, r2, r1
 8015c7e:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 8015c82:	fb01 f103 	mul.w	r1, r1, r3
 8015c86:	4401      	add	r1, r0
 8015c88:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 8015c8c:	fba0 2302 	umull	r2, r3, r0, r2
 8015c90:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8015c94:	4613      	mov	r3, r2
 8015c96:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 8015c9a:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8015c9e:	18cb      	adds	r3, r1, r3
 8015ca0:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8015ca4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8015ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cac:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 8015cb0:	1851      	adds	r1, r2, r1
 8015cb2:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8015cb6:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 8015cba:	414b      	adcs	r3, r1
 8015cbc:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8015cc0:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 8015cc4:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8015cc8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015ccc:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8015cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	da0a      	bge.n	8015cee <arm_softmax_s8+0x7c6>
 8015cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015cdc:	1851      	adds	r1, r2, r1
 8015cde:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8015ce2:	f143 0300 	adc.w	r3, r3, #0
 8015ce6:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8015cea:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8015cee:	f04f 0000 	mov.w	r0, #0
 8015cf2:	f04f 0100 	mov.w	r1, #0
 8015cf6:	0fd0      	lsrs	r0, r2, #31
 8015cf8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015cfc:	17d9      	asrs	r1, r3, #31
 8015cfe:	4602      	mov	r2, r0
 8015d00:	460b      	mov	r3, r1
 8015d02:	4613      	mov	r3, r2
 8015d04:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015d08:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8015d0c:	4bc6      	ldr	r3, [pc, #792]	; (8016028 <arm_softmax_s8+0xb00>)
 8015d0e:	429a      	cmp	r2, r3
 8015d10:	d108      	bne.n	8015d24 <arm_softmax_s8+0x7fc>
 8015d12:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8015d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015d1a:	d103      	bne.n	8015d24 <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 8015d1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015d20:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 8015d24:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8015d28:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8015d2c:	4413      	add	r3, r2
 8015d2e:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 8015d32:	2300      	movs	r3, #0
 8015d34:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015d38:	2302      	movs	r3, #2
 8015d3a:	3b01      	subs	r3, #1
 8015d3c:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 8015d40:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 8015d44:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8015d48:	4013      	ands	r3, r2
 8015d4a:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 8015d4e:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 8015d52:	105b      	asrs	r3, r3, #1
 8015d54:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 8015d58:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8015d5c:	105b      	asrs	r3, r3, #1
 8015d5e:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 8015d62:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	da04      	bge.n	8015d74 <arm_softmax_s8+0x84c>
        threshold++;
 8015d6a:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8015d6e:	3301      	adds	r3, #1
 8015d70:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 8015d74:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8015d78:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	dd04      	ble.n	8015d8a <arm_softmax_s8+0x862>
        result++;
 8015d80:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8015d84:	3301      	adds	r3, #1
 8015d86:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 8015d8a:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8015d8e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8015d92:	4413      	add	r3, r2
 8015d94:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 8015d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015da2:	f04f 0300 	mov.w	r3, #0
 8015da6:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8015daa:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015dae:	2200      	movs	r2, #0
 8015db0:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8015db4:	0fdb      	lsrs	r3, r3, #31
 8015db6:	b2db      	uxtb	r3, r3
 8015db8:	4053      	eors	r3, r2
 8015dba:	b2db      	uxtb	r3, r3
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d012      	beq.n	8015de6 <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 8015dc0:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8015dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dc8:	2100      	movs	r1, #0
 8015dca:	f1d2 0001 	rsbs	r0, r2, #1
 8015dce:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 8015dd2:	eb61 0303 	sbc.w	r3, r1, r3
 8015dd6:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8015dda:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 8015dde:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8015de2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015de6:	a18c      	add	r1, pc, #560	; (adr r1, 8016018 <arm_softmax_s8+0xaf0>)
 8015de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015dec:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8015df0:	17da      	asrs	r2, r3, #31
 8015df2:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8015df6:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 8015dfa:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8015dfe:	fb03 f201 	mul.w	r2, r3, r1
 8015e02:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8015e06:	fb00 f303 	mul.w	r3, r0, r3
 8015e0a:	4413      	add	r3, r2
 8015e0c:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8015e10:	fba0 1202 	umull	r1, r2, r0, r2
 8015e14:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 8015e18:	460a      	mov	r2, r1
 8015e1a:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 8015e1e:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8015e22:	4413      	add	r3, r2
 8015e24:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8015e28:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8015e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e30:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8015e34:	1851      	adds	r1, r2, r1
 8015e36:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8015e3a:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 8015e3e:	414b      	adcs	r3, r1
 8015e40:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8015e44:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 8015e48:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8015e4c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015e50:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8015e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	da0a      	bge.n	8015e72 <arm_softmax_s8+0x94a>
 8015e5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015e60:	1851      	adds	r1, r2, r1
 8015e62:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 8015e66:	f143 0300 	adc.w	r3, r3, #0
 8015e6a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8015e6e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8015e72:	f04f 0000 	mov.w	r0, #0
 8015e76:	f04f 0100 	mov.w	r1, #0
 8015e7a:	0fd0      	lsrs	r0, r2, #31
 8015e7c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015e80:	17d9      	asrs	r1, r3, #31
 8015e82:	4602      	mov	r2, r0
 8015e84:	460b      	mov	r3, r1
 8015e86:	4613      	mov	r3, r2
 8015e88:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 8015e8c:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 8015e90:	4b66      	ldr	r3, [pc, #408]	; (801602c <arm_softmax_s8+0xb04>)
 8015e92:	4413      	add	r3, r2
 8015e94:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
 8015e98:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015e9c:	1c53      	adds	r3, r2, #1
 8015e9e:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015ea2:	2301      	movs	r3, #1
 8015ea4:	fa03 f202 	lsl.w	r2, r3, r2
 8015ea8:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015eac:	4013      	ands	r3, r2
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d002      	beq.n	8015eb8 <arm_softmax_s8+0x990>
 8015eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8015eb6:	e000      	b.n	8015eba <arm_softmax_s8+0x992>
 8015eb8:	2300      	movs	r3, #0
 8015eba:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8015ebe:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015ec2:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 8015ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015ed0:	f04f 0300 	mov.w	r3, #0
 8015ed4:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8015ed8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015edc:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8015ee0:	0fdb      	lsrs	r3, r3, #31
 8015ee2:	b2da      	uxtb	r2, r3
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	4053      	eors	r3, r2
 8015ee8:	b2db      	uxtb	r3, r3
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d012      	beq.n	8015f14 <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 8015eee:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8015ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ef6:	2100      	movs	r1, #0
 8015ef8:	f1d2 0001 	rsbs	r0, r2, #1
 8015efc:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 8015f00:	eb61 0303 	sbc.w	r3, r1, r3
 8015f04:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8015f08:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 8015f0c:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8015f10:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015f14:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8015f18:	17da      	asrs	r2, r3, #31
 8015f1a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8015f1e:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 8015f22:	a33f      	add	r3, pc, #252	; (adr r3, 8016020 <arm_softmax_s8+0xaf8>)
 8015f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f28:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8015f2c:	fb02 f001 	mul.w	r0, r2, r1
 8015f30:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8015f34:	fb01 f103 	mul.w	r1, r1, r3
 8015f38:	4401      	add	r1, r0
 8015f3a:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8015f3e:	fba0 2302 	umull	r2, r3, r0, r2
 8015f42:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8015f46:	4613      	mov	r3, r2
 8015f48:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 8015f4c:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8015f50:	18cb      	adds	r3, r1, r3
 8015f52:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8015f56:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8015f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f5e:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8015f62:	1851      	adds	r1, r2, r1
 8015f64:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8015f68:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8015f6c:	414b      	adcs	r3, r1
 8015f6e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8015f72:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 8015f76:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8015f7a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015f7e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8015f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	da0a      	bge.n	8015fa0 <arm_softmax_s8+0xa78>
 8015f8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015f8e:	1851      	adds	r1, r2, r1
 8015f90:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8015f94:	f143 0300 	adc.w	r3, r3, #0
 8015f98:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8015f9c:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8015fa0:	f04f 0000 	mov.w	r0, #0
 8015fa4:	f04f 0100 	mov.w	r1, #0
 8015fa8:	0fd0      	lsrs	r0, r2, #31
 8015faa:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015fae:	17d9      	asrs	r1, r3, #31
 8015fb0:	4602      	mov	r2, r0
 8015fb2:	460b      	mov	r3, r1
 8015fb4:	4613      	mov	r3, r2
 8015fb6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015fba:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8015fbe:	4b1c      	ldr	r3, [pc, #112]	; (8016030 <arm_softmax_s8+0xb08>)
 8015fc0:	429a      	cmp	r2, r3
 8015fc2:	d108      	bne.n	8015fd6 <arm_softmax_s8+0xaae>
 8015fc4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8015fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015fcc:	d103      	bne.n	8015fd6 <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 8015fce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015fd2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 8015fd6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 8015fda:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015fde:	ea02 0103 	and.w	r1, r2, r3
 8015fe2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015fe6:	43da      	mvns	r2, r3
 8015fe8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015fec:	4013      	ands	r3, r2
 8015fee:	404b      	eors	r3, r1
 8015ff0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 8015ff4:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015ff8:	1c53      	adds	r3, r2, #1
 8015ffa:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015ffe:	2301      	movs	r3, #1
 8016000:	fa03 f202 	lsl.w	r2, r3, r2
 8016004:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8016008:	4013      	ands	r3, r2
 801600a:	2b00      	cmp	r3, #0
 801600c:	d016      	beq.n	801603c <arm_softmax_s8+0xb14>
 801600e:	f04f 33ff 	mov.w	r3, #4294967295
 8016012:	e014      	b.n	801603e <arm_softmax_s8+0xb16>
 8016014:	f3af 8000 	nop.w
 8016018:	70f5a894 	.word	0x70f5a894
 801601c:	00000000 	.word	0x00000000
 8016020:	63afbe7b 	.word	0x63afbe7b
 8016024:	00000000 	.word	0x00000000
 8016028:	2aaaaaab 	.word	0x2aaaaaab
 801602c:	70f5a894 	.word	0x70f5a894
 8016030:	63afbe7b 	.word	0x63afbe7b
 8016034:	2aaaaaab 	.word	0x2aaaaaab
 8016038:	00000000 	.word	0x00000000
 801603c:	2300      	movs	r3, #0
 801603e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8016042:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8016046:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 801604a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801604e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8016052:	2300      	movs	r3, #0
 8016054:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016056:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801605a:	f04f 0300 	mov.w	r3, #0
 801605e:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 8016062:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016066:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 801606a:	0fdb      	lsrs	r3, r3, #31
 801606c:	b2da      	uxtb	r2, r3
 801606e:	2300      	movs	r3, #0
 8016070:	4053      	eors	r3, r2
 8016072:	b2db      	uxtb	r3, r3
 8016074:	2b00      	cmp	r3, #0
 8016076:	d012      	beq.n	801609e <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 8016078:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016080:	2100      	movs	r1, #0
 8016082:	f1d2 0001 	rsbs	r0, r2, #1
 8016086:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 801608a:	eb61 0303 	sbc.w	r3, r1, r3
 801608e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8016092:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 8016096:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 801609a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801609e:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 80160a2:	17da      	asrs	r2, r3, #31
 80160a4:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 80160a8:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 80160ac:	a3a8      	add	r3, pc, #672	; (adr r3, 8016350 <arm_softmax_s8+0xe28>)
 80160ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160b2:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 80160b6:	fb02 f001 	mul.w	r0, r2, r1
 80160ba:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 80160be:	fb01 f103 	mul.w	r1, r1, r3
 80160c2:	4401      	add	r1, r0
 80160c4:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 80160c8:	fba0 2302 	umull	r2, r3, r0, r2
 80160cc:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 80160d0:	4613      	mov	r3, r2
 80160d2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 80160d6:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 80160da:	18cb      	adds	r3, r1, r3
 80160dc:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 80160e0:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80160e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160e8:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80160ec:	1851      	adds	r1, r2, r1
 80160ee:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 80160f2:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 80160f6:	414b      	adcs	r3, r1
 80160f8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80160fc:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 8016100:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8016104:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016108:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016110:	2b00      	cmp	r3, #0
 8016112:	da0a      	bge.n	801612a <arm_softmax_s8+0xc02>
 8016114:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016118:	1851      	adds	r1, r2, r1
 801611a:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 801611e:	f143 0300 	adc.w	r3, r3, #0
 8016122:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8016126:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 801612a:	f04f 0000 	mov.w	r0, #0
 801612e:	f04f 0100 	mov.w	r1, #0
 8016132:	0fd0      	lsrs	r0, r2, #31
 8016134:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016138:	17d9      	asrs	r1, r3, #31
 801613a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801613e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8016142:	4603      	mov	r3, r0
 8016144:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016146:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 801614a:	4b7f      	ldr	r3, [pc, #508]	; (8016348 <arm_softmax_s8+0xe20>)
 801614c:	429a      	cmp	r2, r3
 801614e:	d10b      	bne.n	8016168 <arm_softmax_s8+0xc40>
 8016150:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8016154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016158:	d106      	bne.n	8016168 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 801615a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801615e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8016162:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016166:	6013      	str	r3, [r2, #0]
    return result;
 8016168:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801616c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016170:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8016172:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8016176:	ea02 0103 	and.w	r1, r2, r3
 801617a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801617e:	43da      	mvns	r2, r3
 8016180:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8016184:	4013      	ands	r3, r2
 8016186:	404b      	eors	r3, r1
 8016188:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 801618c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8016190:	1c53      	adds	r3, r2, #1
 8016192:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8016196:	2301      	movs	r3, #1
 8016198:	fa03 f202 	lsl.w	r2, r3, r2
 801619c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80161a0:	4013      	ands	r3, r2
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d002      	beq.n	80161ac <arm_softmax_s8+0xc84>
 80161a6:	f04f 33ff 	mov.w	r3, #4294967295
 80161aa:	e000      	b.n	80161ae <arm_softmax_s8+0xc86>
 80161ac:	2300      	movs	r3, #0
 80161ae:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80161b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161b6:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80161ba:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80161be:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80161c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161c4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80161c8:	2300      	movs	r3, #0
 80161ca:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80161cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80161d0:	f04f 0300 	mov.w	r3, #0
 80161d4:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 80161d8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80161dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80161e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	0fdb      	lsrs	r3, r3, #31
 80161e8:	b2da      	uxtb	r2, r3
 80161ea:	2300      	movs	r3, #0
 80161ec:	4053      	eors	r3, r2
 80161ee:	b2db      	uxtb	r3, r3
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d012      	beq.n	801621a <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 80161f4:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80161f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161fc:	2100      	movs	r1, #0
 80161fe:	f1d2 0001 	rsbs	r0, r2, #1
 8016202:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 8016206:	eb61 0303 	sbc.w	r3, r1, r3
 801620a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 801620e:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 8016212:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8016216:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801621a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801621e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	17da      	asrs	r2, r3, #31
 8016226:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 801622a:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 801622e:	a344      	add	r3, pc, #272	; (adr r3, 8016340 <arm_softmax_s8+0xe18>)
 8016230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016234:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8016238:	fb02 f001 	mul.w	r0, r2, r1
 801623c:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 8016240:	fb01 f103 	mul.w	r1, r1, r3
 8016244:	4401      	add	r1, r0
 8016246:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 801624a:	fba0 2302 	umull	r2, r3, r0, r2
 801624e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8016252:	4613      	mov	r3, r2
 8016254:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8016258:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 801625c:	18cb      	adds	r3, r1, r3
 801625e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8016262:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8016266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801626a:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 801626e:	1851      	adds	r1, r2, r1
 8016270:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8016274:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8016278:	414b      	adcs	r3, r1
 801627a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 801627e:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 8016282:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8016286:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801628a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016292:	2b00      	cmp	r3, #0
 8016294:	da0a      	bge.n	80162ac <arm_softmax_s8+0xd84>
 8016296:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801629a:	1851      	adds	r1, r2, r1
 801629c:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 80162a0:	f143 0300 	adc.w	r3, r3, #0
 80162a4:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80162a8:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 80162ac:	f04f 0000 	mov.w	r0, #0
 80162b0:	f04f 0100 	mov.w	r1, #0
 80162b4:	0fd0      	lsrs	r0, r2, #31
 80162b6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80162ba:	17d9      	asrs	r1, r3, #31
 80162bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162c0:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80162c4:	4603      	mov	r3, r0
 80162c6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80162c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80162d0:	681a      	ldr	r2, [r3, #0]
 80162d2:	4b1e      	ldr	r3, [pc, #120]	; (801634c <arm_softmax_s8+0xe24>)
 80162d4:	429a      	cmp	r2, r3
 80162d6:	d10e      	bne.n	80162f6 <arm_softmax_s8+0xdce>
 80162d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80162e6:	d106      	bne.n	80162f6 <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 80162e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162ec:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80162f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80162f4:	6013      	str	r3, [r2, #0]
    return result;
 80162f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80162fe:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8016300:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8016304:	ea02 0103 	and.w	r1, r2, r3
 8016308:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801630c:	43da      	mvns	r2, r3
 801630e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8016312:	4013      	ands	r3, r2
 8016314:	404b      	eors	r3, r1
 8016316:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 801631a:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 801631e:	1c53      	adds	r3, r2, #1
 8016320:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8016324:	2301      	movs	r3, #1
 8016326:	fa03 f202 	lsl.w	r2, r3, r2
 801632a:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801632e:	4013      	ands	r3, r2
 8016330:	2b00      	cmp	r3, #0
 8016332:	d011      	beq.n	8016358 <arm_softmax_s8+0xe30>
 8016334:	f04f 33ff 	mov.w	r3, #4294967295
 8016338:	e00f      	b.n	801635a <arm_softmax_s8+0xe32>
 801633a:	bf00      	nop
 801633c:	f3af 8000 	nop.w
 8016340:	2f16ac6c 	.word	0x2f16ac6c
 8016344:	00000000 	.word	0x00000000
 8016348:	4da2cbf2 	.word	0x4da2cbf2
 801634c:	2f16ac6c 	.word	0x2f16ac6c
 8016350:	4da2cbf2 	.word	0x4da2cbf2
 8016354:	00000000 	.word	0x00000000
 8016358:	2300      	movs	r3, #0
 801635a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801635e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016362:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8016366:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801636a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801636c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016370:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8016374:	2300      	movs	r3, #0
 8016376:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801637c:	f04f 0300 	mov.w	r3, #0
 8016380:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8016384:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016388:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801638c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	0fdb      	lsrs	r3, r3, #31
 8016394:	b2da      	uxtb	r2, r3
 8016396:	2300      	movs	r3, #0
 8016398:	4053      	eors	r3, r2
 801639a:	b2db      	uxtb	r3, r3
 801639c:	2b00      	cmp	r3, #0
 801639e:	d012      	beq.n	80163c6 <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 80163a0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80163a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a8:	2100      	movs	r1, #0
 80163aa:	f1d2 0001 	rsbs	r0, r2, #1
 80163ae:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 80163b2:	eb61 0303 	sbc.w	r3, r1, r3
 80163b6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80163ba:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 80163be:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80163c2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80163c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	17da      	asrs	r2, r3, #31
 80163d2:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 80163d6:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 80163da:	a3ab      	add	r3, pc, #684	; (adr r3, 8016688 <arm_softmax_s8+0x1160>)
 80163dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e0:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 80163e4:	fb02 f001 	mul.w	r0, r2, r1
 80163e8:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 80163ec:	fb01 f103 	mul.w	r1, r1, r3
 80163f0:	4401      	add	r1, r0
 80163f2:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 80163f6:	fba0 2302 	umull	r2, r3, r0, r2
 80163fa:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80163fe:	4613      	mov	r3, r2
 8016400:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 8016404:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8016408:	18cb      	adds	r3, r1, r3
 801640a:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 801640e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8016412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016416:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 801641a:	1851      	adds	r1, r2, r1
 801641c:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 8016420:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 8016424:	414b      	adcs	r3, r1
 8016426:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 801642a:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 801642e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8016432:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016436:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801643e:	2b00      	cmp	r3, #0
 8016440:	da0a      	bge.n	8016458 <arm_softmax_s8+0xf30>
 8016442:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016446:	1851      	adds	r1, r2, r1
 8016448:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 801644c:	f143 0300 	adc.w	r3, r3, #0
 8016450:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8016454:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8016458:	f04f 0000 	mov.w	r0, #0
 801645c:	f04f 0100 	mov.w	r1, #0
 8016460:	0fd0      	lsrs	r0, r2, #31
 8016462:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016466:	17d9      	asrs	r1, r3, #31
 8016468:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801646c:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8016470:	4603      	mov	r3, r0
 8016472:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016474:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016478:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801647c:	681a      	ldr	r2, [r3, #0]
 801647e:	4b80      	ldr	r3, [pc, #512]	; (8016680 <arm_softmax_s8+0x1158>)
 8016480:	429a      	cmp	r2, r3
 8016482:	d10e      	bne.n	80164a2 <arm_softmax_s8+0xf7a>
 8016484:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016488:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016492:	d106      	bne.n	80164a2 <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 8016494:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016498:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 801649c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80164a0:	6013      	str	r3, [r2, #0]
    return result;
 80164a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80164a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80164aa:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 80164ac:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80164b0:	ea02 0103 	and.w	r1, r2, r3
 80164b4:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80164b8:	43da      	mvns	r2, r3
 80164ba:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80164be:	4013      	ands	r3, r2
 80164c0:	404b      	eors	r3, r1
 80164c2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 80164c6:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 80164ca:	1c53      	adds	r3, r2, #1
 80164cc:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80164d0:	2301      	movs	r3, #1
 80164d2:	fa03 f202 	lsl.w	r2, r3, r2
 80164d6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80164da:	4013      	ands	r3, r2
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d002      	beq.n	80164e6 <arm_softmax_s8+0xfbe>
 80164e0:	f04f 33ff 	mov.w	r3, #4294967295
 80164e4:	e000      	b.n	80164e8 <arm_softmax_s8+0xfc0>
 80164e6:	2300      	movs	r3, #0
 80164e8:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80164ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80164f0:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 80164f4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80164f8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80164fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80164fe:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8016502:	2300      	movs	r3, #0
 8016504:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016506:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801650a:	f04f 0300 	mov.w	r3, #0
 801650e:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 8016512:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016516:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801651a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	0fdb      	lsrs	r3, r3, #31
 8016522:	b2da      	uxtb	r2, r3
 8016524:	2300      	movs	r3, #0
 8016526:	4053      	eors	r3, r2
 8016528:	b2db      	uxtb	r3, r3
 801652a:	2b00      	cmp	r3, #0
 801652c:	d012      	beq.n	8016554 <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 801652e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8016532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016536:	2100      	movs	r1, #0
 8016538:	f1d2 0001 	rsbs	r0, r2, #1
 801653c:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 8016540:	eb61 0303 	sbc.w	r3, r1, r3
 8016544:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8016548:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 801654c:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8016550:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016554:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016558:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	17da      	asrs	r2, r3, #31
 8016560:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8016564:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 8016568:	a343      	add	r3, pc, #268	; (adr r3, 8016678 <arm_softmax_s8+0x1150>)
 801656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801656e:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 8016572:	fb02 f001 	mul.w	r0, r2, r1
 8016576:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 801657a:	fb01 f103 	mul.w	r1, r1, r3
 801657e:	4401      	add	r1, r0
 8016580:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 8016584:	fba0 2302 	umull	r2, r3, r0, r2
 8016588:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 801658c:	4613      	mov	r3, r2
 801658e:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8016592:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8016596:	18cb      	adds	r3, r1, r3
 8016598:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 801659c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80165a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165a4:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 80165a8:	1851      	adds	r1, r2, r1
 80165aa:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 80165ae:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 80165b2:	414b      	adcs	r3, r1
 80165b4:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80165b8:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 80165bc:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 80165c0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80165c4:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80165c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	da0a      	bge.n	80165e6 <arm_softmax_s8+0x10be>
 80165d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80165d4:	1851      	adds	r1, r2, r1
 80165d6:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 80165da:	f143 0300 	adc.w	r3, r3, #0
 80165de:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 80165e2:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80165e6:	f04f 0000 	mov.w	r0, #0
 80165ea:	f04f 0100 	mov.w	r1, #0
 80165ee:	0fd0      	lsrs	r0, r2, #31
 80165f0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80165f4:	17d9      	asrs	r1, r3, #31
 80165f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165fa:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80165fe:	4603      	mov	r3, r0
 8016600:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016602:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016606:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801660a:	681a      	ldr	r2, [r3, #0]
 801660c:	4b1d      	ldr	r3, [pc, #116]	; (8016684 <arm_softmax_s8+0x115c>)
 801660e:	429a      	cmp	r2, r3
 8016610:	d10e      	bne.n	8016630 <arm_softmax_s8+0x1108>
 8016612:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016616:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016620:	d106      	bne.n	8016630 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 8016622:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016626:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 801662a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801662e:	6013      	str	r3, [r2, #0]
    return result;
 8016630:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8016638:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 801663a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801663e:	ea02 0103 	and.w	r1, r2, r3
 8016642:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8016646:	43da      	mvns	r2, r3
 8016648:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801664c:	4013      	ands	r3, r2
 801664e:	404b      	eors	r3, r1
 8016650:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 8016654:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8016658:	1c53      	adds	r3, r2, #1
 801665a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 801665e:	2301      	movs	r3, #1
 8016660:	fa03 f202 	lsl.w	r2, r3, r2
 8016664:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8016668:	4013      	ands	r3, r2
 801666a:	2b00      	cmp	r3, #0
 801666c:	d010      	beq.n	8016690 <arm_softmax_s8+0x1168>
 801666e:	f04f 33ff 	mov.w	r3, #4294967295
 8016672:	e00e      	b.n	8016692 <arm_softmax_s8+0x116a>
 8016674:	f3af 8000 	nop.w
 8016678:	02582ab7 	.word	0x02582ab7
 801667c:	00000000 	.word	0x00000000
 8016680:	1152aaa4 	.word	0x1152aaa4
 8016684:	02582ab7 	.word	0x02582ab7
 8016688:	1152aaa4 	.word	0x1152aaa4
 801668c:	00000000 	.word	0x00000000
 8016690:	2300      	movs	r3, #0
 8016692:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8016696:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801669a:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 801669e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80166a2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80166a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166a8:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80166ac:	2300      	movs	r3, #0
 80166ae:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80166b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80166b4:	f04f 0300 	mov.w	r3, #0
 80166b8:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 80166bc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80166c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	0fdb      	lsrs	r3, r3, #31
 80166cc:	b2da      	uxtb	r2, r3
 80166ce:	2300      	movs	r3, #0
 80166d0:	4053      	eors	r3, r2
 80166d2:	b2db      	uxtb	r3, r3
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d012      	beq.n	80166fe <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 80166d8:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80166dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e0:	2100      	movs	r1, #0
 80166e2:	f1d2 0001 	rsbs	r0, r2, #1
 80166e6:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 80166ea:	eb61 0303 	sbc.w	r3, r1, r3
 80166ee:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80166f2:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 80166f6:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80166fa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80166fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016702:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	17da      	asrs	r2, r3, #31
 801670a:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 801670e:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 8016712:	4ad3      	ldr	r2, [pc, #844]	; (8016a60 <arm_softmax_s8+0x1538>)
 8016714:	f04f 0300 	mov.w	r3, #0
 8016718:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 801671c:	fb02 f001 	mul.w	r0, r2, r1
 8016720:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8016724:	fb01 f103 	mul.w	r1, r1, r3
 8016728:	4401      	add	r1, r0
 801672a:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 801672e:	fba0 2302 	umull	r2, r3, r0, r2
 8016732:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8016736:	4613      	mov	r3, r2
 8016738:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 801673c:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8016740:	18cb      	adds	r3, r1, r3
 8016742:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8016746:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801674e:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 8016752:	1851      	adds	r1, r2, r1
 8016754:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8016758:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 801675c:	414b      	adcs	r3, r1
 801675e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8016762:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 8016766:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 801676a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801676e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8016772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016776:	2b00      	cmp	r3, #0
 8016778:	da0a      	bge.n	8016790 <arm_softmax_s8+0x1268>
 801677a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801677e:	1851      	adds	r1, r2, r1
 8016780:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8016784:	f143 0300 	adc.w	r3, r3, #0
 8016788:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 801678c:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8016790:	f04f 0000 	mov.w	r0, #0
 8016794:	f04f 0100 	mov.w	r1, #0
 8016798:	0fd0      	lsrs	r0, r2, #31
 801679a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801679e:	17d9      	asrs	r1, r3, #31
 80167a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167a4:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80167a8:	4603      	mov	r3, r0
 80167aa:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80167ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80167b4:	681a      	ldr	r2, [r3, #0]
 80167b6:	4baa      	ldr	r3, [pc, #680]	; (8016a60 <arm_softmax_s8+0x1538>)
 80167b8:	429a      	cmp	r2, r3
 80167ba:	d10e      	bne.n	80167da <arm_softmax_s8+0x12b2>
 80167bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80167ca:	d106      	bne.n	80167da <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 80167cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167d0:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80167d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80167d8:	6013      	str	r3, [r2, #0]
    return result;
 80167da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80167de:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80167e2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 80167e4:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80167e8:	ea02 0103 	and.w	r1, r2, r3
 80167ec:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80167f0:	43da      	mvns	r2, r3
 80167f2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80167f6:	4013      	ands	r3, r2
 80167f8:	404b      	eors	r3, r1
 80167fa:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 80167fe:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8016802:	1c53      	adds	r3, r2, #1
 8016804:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8016808:	2301      	movs	r3, #1
 801680a:	fa03 f202 	lsl.w	r2, r3, r2
 801680e:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8016812:	4013      	ands	r3, r2
 8016814:	2b00      	cmp	r3, #0
 8016816:	d002      	beq.n	801681e <arm_softmax_s8+0x12f6>
 8016818:	f04f 33ff 	mov.w	r3, #4294967295
 801681c:	e000      	b.n	8016820 <arm_softmax_s8+0x12f8>
 801681e:	2300      	movs	r3, #0
 8016820:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8016824:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016828:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 801682c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8016830:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016832:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016836:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 801683a:	2300      	movs	r3, #0
 801683c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801683e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016842:	f04f 0300 	mov.w	r3, #0
 8016846:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 801684a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801684e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016852:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	0fdb      	lsrs	r3, r3, #31
 801685a:	b2da      	uxtb	r2, r3
 801685c:	2300      	movs	r3, #0
 801685e:	4053      	eors	r3, r2
 8016860:	b2db      	uxtb	r3, r3
 8016862:	2b00      	cmp	r3, #0
 8016864:	d012      	beq.n	801688c <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 8016866:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801686e:	2100      	movs	r1, #0
 8016870:	f1d2 0001 	rsbs	r0, r2, #1
 8016874:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 8016878:	eb61 0303 	sbc.w	r3, r1, r3
 801687c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8016880:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 8016884:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8016888:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801688c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016890:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	17da      	asrs	r2, r3, #31
 8016898:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 801689c:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 80168a0:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 80168a4:	f04f 0300 	mov.w	r3, #0
 80168a8:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 80168ac:	fb02 f001 	mul.w	r0, r2, r1
 80168b0:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 80168b4:	fb01 f103 	mul.w	r1, r1, r3
 80168b8:	4401      	add	r1, r0
 80168ba:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 80168be:	fba0 2302 	umull	r2, r3, r0, r2
 80168c2:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 80168c6:	4613      	mov	r3, r2
 80168c8:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 80168cc:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80168d0:	18cb      	adds	r3, r1, r3
 80168d2:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 80168d6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80168da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168de:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 80168e2:	1851      	adds	r1, r2, r1
 80168e4:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 80168e8:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 80168ec:	414b      	adcs	r3, r1
 80168ee:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80168f2:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 80168f6:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 80168fa:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80168fe:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8016902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016906:	2b00      	cmp	r3, #0
 8016908:	da0a      	bge.n	8016920 <arm_softmax_s8+0x13f8>
 801690a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801690e:	1851      	adds	r1, r2, r1
 8016910:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 8016914:	f143 0300 	adc.w	r3, r3, #0
 8016918:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 801691c:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8016920:	f04f 0000 	mov.w	r0, #0
 8016924:	f04f 0100 	mov.w	r1, #0
 8016928:	0fd0      	lsrs	r0, r2, #31
 801692a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801692e:	17d9      	asrs	r1, r3, #31
 8016930:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016934:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8016938:	4603      	mov	r3, r0
 801693a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801693c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016940:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	2bf2      	cmp	r3, #242	; 0xf2
 8016948:	d10e      	bne.n	8016968 <arm_softmax_s8+0x1440>
 801694a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801694e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016958:	d106      	bne.n	8016968 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 801695a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801695e:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8016962:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016966:	6013      	str	r3, [r2, #0]
    return result;
 8016968:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801696c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8016970:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8016972:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8016976:	ea02 0103 	and.w	r1, r2, r3
 801697a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801697e:	43da      	mvns	r2, r3
 8016980:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8016984:	4013      	ands	r3, r2
 8016986:	404b      	eors	r3, r1
 8016988:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 801698c:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8016990:	2b00      	cmp	r3, #0
 8016992:	d102      	bne.n	801699a <arm_softmax_s8+0x1472>
 8016994:	f04f 33ff 	mov.w	r3, #4294967295
 8016998:	e000      	b.n	801699c <arm_softmax_s8+0x1474>
 801699a:	2300      	movs	r3, #0
 801699c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80169a0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80169a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80169a8:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80169ac:	43da      	mvns	r2, r3
 80169ae:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80169b2:	4013      	ands	r3, r2
 80169b4:	404b      	eors	r3, r1
 80169b6:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 80169ba:	2300      	movs	r3, #0
 80169bc:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 80169c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80169c4:	3b01      	subs	r3, #1
 80169c6:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 80169ca:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 80169ce:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80169d2:	4013      	ands	r3, r2
 80169d4:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 80169d8:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 80169dc:	131b      	asrs	r3, r3, #12
 80169de:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 80169e2:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80169e6:	105b      	asrs	r3, r3, #1
 80169e8:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 80169ec:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	da04      	bge.n	80169fe <arm_softmax_s8+0x14d6>
        threshold++;
 80169f4:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80169f8:	3301      	adds	r3, #1
 80169fa:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 80169fe:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 8016a02:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8016a06:	429a      	cmp	r2, r3
 8016a08:	dd04      	ble.n	8016a14 <arm_softmax_s8+0x14ec>
        result++;
 8016a0a:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8016a0e:	3301      	adds	r3, #1
 8016a10:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 8016a14:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 8016a18:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 8016a1c:	4413      	add	r3, r2
 8016a1e:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 8016a22:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8016a26:	3301      	adds	r3, #1
 8016a28:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8016a2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a30:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016a34:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	429a      	cmp	r2, r3
 8016a3c:	f6fe add2 	blt.w	80155e4 <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 8016a40:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8016a44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a48:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016a4c:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 8016a4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a52:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d103      	bne.n	8016a64 <arm_softmax_s8+0x153c>
    return 32U;
 8016a5c:	2320      	movs	r3, #32
 8016a5e:	e009      	b.n	8016a74 <arm_softmax_s8+0x154c>
 8016a60:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 8016a64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a68:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	fab3 f383 	clz	r3, r3
 8016a72:	b2db      	uxtb	r3, r3
 8016a74:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8016a78:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8016a7c:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8016a80:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 8016a84:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8016a88:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8016a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8016a90:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8016a94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a98:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016a9c:	601a      	str	r2, [r3, #0]
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 8016a9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016aa2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	17da      	asrs	r2, r3, #31
 8016aaa:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8016aae:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8016ab2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016ab6:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8016aba:	4602      	mov	r2, r0
 8016abc:	18d3      	adds	r3, r2, r3
 8016abe:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8016ac2:	460b      	mov	r3, r1
 8016ac4:	f143 0300 	adc.w	r3, r3, #0
 8016ac8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8016acc:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8016ad0:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8016ad4:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8016ad8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8016adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	db04      	blt.n	8016aee <arm_softmax_s8+0x15c6>
 8016ae4:	f04f 0001 	mov.w	r0, #1
 8016ae8:	f04f 0100 	mov.w	r1, #0
 8016aec:	e003      	b.n	8016af6 <arm_softmax_s8+0x15ce>
 8016aee:	f04f 30ff 	mov.w	r0, #4294967295
 8016af2:	f04f 31ff 	mov.w	r1, #4294967295
 8016af6:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8016afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016afe:	1884      	adds	r4, r0, r2
 8016b00:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 8016b04:	eb41 0303 	adc.w	r3, r1, r3
 8016b08:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8016b0c:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8016b10:	460b      	mov	r3, r1
 8016b12:	0fdb      	lsrs	r3, r3, #31
 8016b14:	2200      	movs	r2, #0
 8016b16:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8016b1a:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 8016b1e:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8016b22:	4602      	mov	r2, r0
 8016b24:	189b      	adds	r3, r3, r2
 8016b26:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8016b2a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8016b2e:	460a      	mov	r2, r1
 8016b30:	4153      	adcs	r3, r2
 8016b32:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8016b36:	f04f 0200 	mov.w	r2, #0
 8016b3a:	f04f 0300 	mov.w	r3, #0
 8016b3e:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 8016b42:	084a      	lsrs	r2, r1, #1
 8016b44:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8016b48:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8016b4c:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8016b50:	104b      	asrs	r3, r1, #1
 8016b52:	4610      	mov	r0, r2
 8016b54:	4619      	mov	r1, r3
 8016b56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b5a:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8016b5e:	4603      	mov	r3, r0
 8016b60:	6013      	str	r3, [r2, #0]
 8016b62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b66:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8016b6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b6e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016b76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b7a:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8016b7e:	2300      	movs	r3, #0
 8016b80:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016b82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016b86:	f04f 0300 	mov.w	r3, #0
 8016b8a:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8016b8e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016b92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b96:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	0fdb      	lsrs	r3, r3, #31
 8016b9e:	b2da      	uxtb	r2, r3
 8016ba0:	2301      	movs	r3, #1
 8016ba2:	4053      	eors	r3, r2
 8016ba4:	b2db      	uxtb	r3, r3
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d012      	beq.n	8016bd0 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 8016baa:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8016bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bb2:	2100      	movs	r1, #0
 8016bb4:	f1d2 0001 	rsbs	r0, r2, #1
 8016bb8:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 8016bbc:	eb61 0303 	sbc.w	r3, r1, r3
 8016bc0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8016bc4:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8016bc8:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8016bcc:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016bd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016bd4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	17da      	asrs	r2, r3, #31
 8016bdc:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8016be0:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 8016be4:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 8016be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bec:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8016bf0:	fb02 f001 	mul.w	r0, r2, r1
 8016bf4:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8016bf8:	fb01 f103 	mul.w	r1, r1, r3
 8016bfc:	4401      	add	r1, r0
 8016bfe:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 8016c02:	fba0 2302 	umull	r2, r3, r0, r2
 8016c06:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8016c0a:	4613      	mov	r3, r2
 8016c0c:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 8016c10:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8016c14:	18cb      	adds	r3, r1, r3
 8016c16:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8016c1a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8016c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c22:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 8016c26:	1851      	adds	r1, r2, r1
 8016c28:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8016c2c:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8016c30:	414b      	adcs	r3, r1
 8016c32:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8016c36:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8016c3a:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8016c3e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016c42:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8016c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	da0a      	bge.n	8016c64 <arm_softmax_s8+0x173c>
 8016c4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016c52:	1851      	adds	r1, r2, r1
 8016c54:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8016c58:	f143 0300 	adc.w	r3, r3, #0
 8016c5c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8016c60:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8016c64:	f04f 0000 	mov.w	r0, #0
 8016c68:	f04f 0100 	mov.w	r1, #0
 8016c6c:	0fd0      	lsrs	r0, r2, #31
 8016c6e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016c72:	17d9      	asrs	r1, r3, #31
 8016c74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c78:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016c80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c84:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8016c8e:	d10e      	bne.n	8016cae <arm_softmax_s8+0x1786>
 8016c90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016c9e:	d106      	bne.n	8016cae <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 8016ca0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ca4:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8016ca8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016cac:	6013      	str	r3, [r2, #0]
    return result;
 8016cae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cb2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8016cb6:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8016cb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cbc:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8016cc0:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 8016cc4:	6013      	str	r3, [r2, #0]

    const int32_t shift = (1 << 29);
 8016cc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cca:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8016cce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8016cd2:	6013      	str	r3, [r2, #0]
 8016cd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cd8:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8016cdc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ce0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	6013      	str	r3, [r2, #0]
 8016ce8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cec:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8016cf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cf4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016cfc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d00:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8016d04:	2300      	movs	r3, #0
 8016d06:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016d08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016d0c:	f04f 0300 	mov.w	r3, #0
 8016d10:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 8016d14:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016d18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d1c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	0fdb      	lsrs	r3, r3, #31
 8016d24:	b2da      	uxtb	r2, r3
 8016d26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d2a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	0fdb      	lsrs	r3, r3, #31
 8016d32:	b2db      	uxtb	r3, r3
 8016d34:	4053      	eors	r3, r2
 8016d36:	b2db      	uxtb	r3, r3
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d012      	beq.n	8016d62 <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 8016d3c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8016d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d44:	2100      	movs	r1, #0
 8016d46:	f1d2 0001 	rsbs	r0, r2, #1
 8016d4a:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 8016d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8016d52:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8016d56:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8016d5a:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8016d5e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016d62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d66:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	17da      	asrs	r2, r3, #31
 8016d6e:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8016d72:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 8016d76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d7a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	17da      	asrs	r2, r3, #31
 8016d82:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8016d86:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 8016d8a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8016d8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016d92:	460b      	mov	r3, r1
 8016d94:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8016d98:	fb02 f203 	mul.w	r2, r2, r3
 8016d9c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8016da0:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8016da4:	e9c4 0100 	strd	r0, r1, [r4]
 8016da8:	4601      	mov	r1, r0
 8016daa:	fb01 f303 	mul.w	r3, r1, r3
 8016dae:	4413      	add	r3, r2
 8016db0:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8016db4:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8016db8:	fba2 1201 	umull	r1, r2, r2, r1
 8016dbc:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 8016dc0:	460a      	mov	r2, r1
 8016dc2:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8016dc6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8016dca:	4413      	add	r3, r2
 8016dcc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8016dd0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8016dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd8:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8016ddc:	1851      	adds	r1, r2, r1
 8016dde:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 8016de2:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8016de6:	414b      	adcs	r3, r1
 8016de8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8016dec:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8016df0:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8016df4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016df8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8016dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	da0a      	bge.n	8016e1a <arm_softmax_s8+0x18f2>
 8016e04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016e08:	1851      	adds	r1, r2, r1
 8016e0a:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8016e0e:	f143 0300 	adc.w	r3, r3, #0
 8016e12:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8016e16:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8016e1a:	f04f 0000 	mov.w	r0, #0
 8016e1e:	f04f 0100 	mov.w	r1, #0
 8016e22:	0fd0      	lsrs	r0, r2, #31
 8016e24:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016e28:	17d9      	asrs	r1, r3, #31
 8016e2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e2e:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8016e32:	4603      	mov	r3, r0
 8016e34:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016e36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e3a:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8016e3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e42:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8016e46:	6812      	ldr	r2, [r2, #0]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	429a      	cmp	r2, r3
 8016e4c:	d10e      	bne.n	8016e6c <arm_softmax_s8+0x1944>
 8016e4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e52:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016e5c:	d106      	bne.n	8016e6c <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 8016e5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e62:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8016e66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016e6a:	6013      	str	r3, [r2, #0]
    return result;
 8016e6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e70:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8016e74:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016e76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e7a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	1a99      	subs	r1, r3, r2
 8016e82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e86:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8016e8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e8e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	6013      	str	r3, [r2, #0]
 8016e96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e9a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8016e9e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8016ea0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ea4:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016eac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016eb0:	f04f 0300 	mov.w	r3, #0
 8016eb4:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8016eb8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016ebc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ec0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	0fdb      	lsrs	r3, r3, #31
 8016ec8:	b2da      	uxtb	r2, r3
 8016eca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ece:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	0fdb      	lsrs	r3, r3, #31
 8016ed6:	b2db      	uxtb	r3, r3
 8016ed8:	4053      	eors	r3, r2
 8016eda:	b2db      	uxtb	r3, r3
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d012      	beq.n	8016f06 <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 8016ee0:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8016ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee8:	2100      	movs	r1, #0
 8016eea:	f1d2 0001 	rsbs	r0, r2, #1
 8016eee:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 8016ef2:	eb61 0303 	sbc.w	r3, r1, r3
 8016ef6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8016efa:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 8016efe:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8016f02:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016f06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f0a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	17da      	asrs	r2, r3, #31
 8016f12:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8016f16:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 8016f1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f1e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	17da      	asrs	r2, r3, #31
 8016f26:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8016f2a:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 8016f2e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8016f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016f36:	460b      	mov	r3, r1
 8016f38:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8016f3c:	fb02 f203 	mul.w	r2, r2, r3
 8016f40:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8016f44:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 8016f48:	e9c4 0100 	strd	r0, r1, [r4]
 8016f4c:	4601      	mov	r1, r0
 8016f4e:	fb01 f303 	mul.w	r3, r1, r3
 8016f52:	4413      	add	r3, r2
 8016f54:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8016f58:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 8016f5c:	fba2 1201 	umull	r1, r2, r2, r1
 8016f60:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 8016f64:	460a      	mov	r2, r1
 8016f66:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 8016f6a:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8016f6e:	4413      	add	r3, r2
 8016f70:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8016f74:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8016f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f7c:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8016f80:	1851      	adds	r1, r2, r1
 8016f82:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8016f86:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8016f8a:	414b      	adcs	r3, r1
 8016f8c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8016f90:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8016f94:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8016f98:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016f9c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8016fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	da0a      	bge.n	8016fbe <arm_softmax_s8+0x1a96>
 8016fa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016fac:	1851      	adds	r1, r2, r1
 8016fae:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8016fb2:	f143 0300 	adc.w	r3, r3, #0
 8016fb6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8016fba:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8016fbe:	f04f 0000 	mov.w	r0, #0
 8016fc2:	f04f 0100 	mov.w	r1, #0
 8016fc6:	0fd0      	lsrs	r0, r2, #31
 8016fc8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016fcc:	17d9      	asrs	r1, r3, #31
 8016fce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fd2:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016fda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fde:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8016fe2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fe6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8016fea:	6812      	ldr	r2, [r2, #0]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	429a      	cmp	r2, r3
 8016ff0:	d10e      	bne.n	8017010 <arm_softmax_s8+0x1ae8>
 8016ff2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ff6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017000:	d106      	bne.n	8017010 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 8017002:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017006:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 801700a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801700e:	6013      	str	r3, [r2, #0]
    return result;
 8017010:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017014:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8017018:	681a      	ldr	r2, [r3, #0]
 801701a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801701e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8017022:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8017024:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8017028:	4619      	mov	r1, r3
 801702a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801702e:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 8017032:	1e4b      	subs	r3, r1, #1
 8017034:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8017036:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801703a:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 801703e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017042:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	009b      	lsls	r3, r3, #2
 801704a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 801704c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017050:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8017054:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017058:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801705c:	6812      	ldr	r2, [r2, #0]
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	429a      	cmp	r2, r3
 8017062:	dd02      	ble.n	801706a <arm_softmax_s8+0x1b42>
 8017064:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017068:	e000      	b.n	801706c <arm_softmax_s8+0x1b44>
 801706a:	2000      	movs	r0, #0
 801706c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017070:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8017074:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017078:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801707c:	6812      	ldr	r2, [r2, #0]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	429a      	cmp	r2, r3
 8017082:	dd01      	ble.n	8017088 <arm_softmax_s8+0x1b60>
 8017084:	2200      	movs	r2, #0
 8017086:	e001      	b.n	801708c <arm_softmax_s8+0x1b64>
 8017088:	f04f 32ff 	mov.w	r2, #4294967295
 801708c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017090:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	ea02 0103 	and.w	r1, r2, r3
 801709a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801709e:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 80170a2:	ea81 0300 	eor.w	r3, r1, r0
 80170a6:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80170a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170ac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	425a      	negs	r2, r3
 80170b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	4293      	cmp	r3, r2
 80170c0:	da02      	bge.n	80170c8 <arm_softmax_s8+0x1ba0>
 80170c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80170c6:	e000      	b.n	80170ca <arm_softmax_s8+0x1ba2>
 80170c8:	2000      	movs	r0, #0
 80170ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170ce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	425a      	negs	r2, r3
 80170d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	4293      	cmp	r3, r2
 80170e2:	da01      	bge.n	80170e8 <arm_softmax_s8+0x1bc0>
 80170e4:	2200      	movs	r2, #0
 80170e6:	e001      	b.n	80170ec <arm_softmax_s8+0x1bc4>
 80170e8:	f04f 32ff 	mov.w	r2, #4294967295
 80170ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170f0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	ea02 0103 	and.w	r1, r2, r3
 80170fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170fe:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8017102:	ea81 0300 	eor.w	r3, r1, r0
 8017106:	6013      	str	r3, [r2, #0]
    return result;
 8017108:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801710c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8017110:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8017112:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017116:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801711a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801711e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	440b      	add	r3, r1
 8017126:	6013      	str	r3, [r2, #0]
 8017128:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801712c:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8017130:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017134:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	6013      	str	r3, [r2, #0]
 801713c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017140:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 8017144:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017148:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017150:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017154:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8017158:	2300      	movs	r3, #0
 801715a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801715c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017160:	f04f 0300 	mov.w	r3, #0
 8017164:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8017168:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801716c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017170:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	0fdb      	lsrs	r3, r3, #31
 8017178:	b2da      	uxtb	r2, r3
 801717a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801717e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	0fdb      	lsrs	r3, r3, #31
 8017186:	b2db      	uxtb	r3, r3
 8017188:	4053      	eors	r3, r2
 801718a:	b2db      	uxtb	r3, r3
 801718c:	2b00      	cmp	r3, #0
 801718e:	d012      	beq.n	80171b6 <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 8017190:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8017194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017198:	2100      	movs	r1, #0
 801719a:	f1d2 0001 	rsbs	r0, r2, #1
 801719e:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 80171a2:	eb61 0303 	sbc.w	r3, r1, r3
 80171a6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80171aa:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 80171ae:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 80171b2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80171b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171ba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	17da      	asrs	r2, r3, #31
 80171c2:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80171c6:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 80171ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80171ce:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	17da      	asrs	r2, r3, #31
 80171d6:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 80171da:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 80171de:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80171e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80171e6:	460b      	mov	r3, r1
 80171e8:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80171ec:	fb02 f203 	mul.w	r2, r2, r3
 80171f0:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80171f4:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 80171f8:	e9c4 0100 	strd	r0, r1, [r4]
 80171fc:	4601      	mov	r1, r0
 80171fe:	fb01 f303 	mul.w	r3, r1, r3
 8017202:	4413      	add	r3, r2
 8017204:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8017208:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 801720c:	fba2 1201 	umull	r1, r2, r2, r1
 8017210:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 8017214:	460a      	mov	r2, r1
 8017216:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 801721a:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 801721e:	4413      	add	r3, r2
 8017220:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8017224:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8017228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801722c:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 8017230:	1851      	adds	r1, r2, r1
 8017232:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 8017236:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 801723a:	414b      	adcs	r3, r1
 801723c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8017240:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 8017244:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8017248:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801724c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8017250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017254:	2b00      	cmp	r3, #0
 8017256:	da0a      	bge.n	801726e <arm_softmax_s8+0x1d46>
 8017258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801725c:	1851      	adds	r1, r2, r1
 801725e:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8017262:	f143 0300 	adc.w	r3, r3, #0
 8017266:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 801726a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 801726e:	f04f 0000 	mov.w	r0, #0
 8017272:	f04f 0100 	mov.w	r1, #0
 8017276:	0fd0      	lsrs	r0, r2, #31
 8017278:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801727c:	17d9      	asrs	r1, r3, #31
 801727e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017282:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8017286:	4603      	mov	r3, r0
 8017288:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801728a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801728e:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8017292:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017296:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801729a:	6812      	ldr	r2, [r2, #0]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	429a      	cmp	r2, r3
 80172a0:	d10e      	bne.n	80172c0 <arm_softmax_s8+0x1d98>
 80172a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172a6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80172b0:	d106      	bne.n	80172c0 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 80172b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172b6:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 80172ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80172be:	6013      	str	r3, [r2, #0]
    return result;
 80172c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172c4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80172c8:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80172ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172ce:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	1a99      	subs	r1, r3, r2
 80172d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172da:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 80172de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172e2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	6013      	str	r3, [r2, #0]
 80172ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172ee:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80172f2:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80172f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172f8:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80172fc:	2300      	movs	r3, #0
 80172fe:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017304:	f04f 0300 	mov.w	r3, #0
 8017308:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 801730c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017310:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017314:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	0fdb      	lsrs	r3, r3, #31
 801731c:	b2da      	uxtb	r2, r3
 801731e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017322:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	0fdb      	lsrs	r3, r3, #31
 801732a:	b2db      	uxtb	r3, r3
 801732c:	4053      	eors	r3, r2
 801732e:	b2db      	uxtb	r3, r3
 8017330:	2b00      	cmp	r3, #0
 8017332:	d012      	beq.n	801735a <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 8017334:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8017338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801733c:	2100      	movs	r1, #0
 801733e:	f1d2 0001 	rsbs	r0, r2, #1
 8017342:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8017346:	eb61 0303 	sbc.w	r3, r1, r3
 801734a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 801734e:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8017352:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8017356:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801735a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801735e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	17da      	asrs	r2, r3, #31
 8017366:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 801736a:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 801736e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017372:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	17da      	asrs	r2, r3, #31
 801737a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 801737e:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 8017382:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8017386:	e9d3 0100 	ldrd	r0, r1, [r3]
 801738a:	460b      	mov	r3, r1
 801738c:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8017390:	fb02 f203 	mul.w	r2, r2, r3
 8017394:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8017398:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 801739c:	e9c4 0100 	strd	r0, r1, [r4]
 80173a0:	4601      	mov	r1, r0
 80173a2:	fb01 f303 	mul.w	r3, r1, r3
 80173a6:	4413      	add	r3, r2
 80173a8:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 80173ac:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 80173b0:	fba2 1201 	umull	r1, r2, r2, r1
 80173b4:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 80173b8:	460a      	mov	r2, r1
 80173ba:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 80173be:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 80173c2:	4413      	add	r3, r2
 80173c4:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 80173c8:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80173cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d0:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 80173d4:	1851      	adds	r1, r2, r1
 80173d6:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 80173da:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 80173de:	414b      	adcs	r3, r1
 80173e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80173e4:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 80173e8:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 80173ec:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80173f0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80173f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	da0a      	bge.n	8017412 <arm_softmax_s8+0x1eea>
 80173fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017400:	1851      	adds	r1, r2, r1
 8017402:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8017406:	f143 0300 	adc.w	r3, r3, #0
 801740a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 801740e:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8017412:	f04f 0000 	mov.w	r0, #0
 8017416:	f04f 0100 	mov.w	r1, #0
 801741a:	0fd0      	lsrs	r0, r2, #31
 801741c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017420:	17d9      	asrs	r1, r3, #31
 8017422:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017426:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 801742a:	4603      	mov	r3, r0
 801742c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801742e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017432:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8017436:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801743a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801743e:	6812      	ldr	r2, [r2, #0]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	429a      	cmp	r2, r3
 8017444:	d10e      	bne.n	8017464 <arm_softmax_s8+0x1f3c>
 8017446:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801744a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017454:	d106      	bne.n	8017464 <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 8017456:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801745a:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 801745e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017462:	6013      	str	r3, [r2, #0]
    return result;
 8017464:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017468:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801746c:	681a      	ldr	r2, [r3, #0]
 801746e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017472:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017476:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8017478:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801747c:	4619      	mov	r1, r3
 801747e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017482:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8017486:	1e4b      	subs	r3, r1, #1
 8017488:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801748a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801748e:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8017492:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017496:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	009b      	lsls	r3, r3, #2
 801749e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80174a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174a4:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 80174a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174ac:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80174b0:	6812      	ldr	r2, [r2, #0]
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	429a      	cmp	r2, r3
 80174b6:	dd02      	ble.n	80174be <arm_softmax_s8+0x1f96>
 80174b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80174bc:	e000      	b.n	80174c0 <arm_softmax_s8+0x1f98>
 80174be:	2000      	movs	r0, #0
 80174c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174c4:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 80174c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174cc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80174d0:	6812      	ldr	r2, [r2, #0]
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	429a      	cmp	r2, r3
 80174d6:	dd01      	ble.n	80174dc <arm_softmax_s8+0x1fb4>
 80174d8:	2200      	movs	r2, #0
 80174da:	e001      	b.n	80174e0 <arm_softmax_s8+0x1fb8>
 80174dc:	f04f 32ff 	mov.w	r2, #4294967295
 80174e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174e4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	ea02 0103 	and.w	r1, r2, r3
 80174ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174f2:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80174f6:	ea81 0300 	eor.w	r3, r1, r0
 80174fa:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80174fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017500:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	425a      	negs	r2, r3
 8017508:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801750c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	4293      	cmp	r3, r2
 8017514:	da02      	bge.n	801751c <arm_softmax_s8+0x1ff4>
 8017516:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801751a:	e000      	b.n	801751e <arm_softmax_s8+0x1ff6>
 801751c:	2000      	movs	r0, #0
 801751e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017522:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	425a      	negs	r2, r3
 801752a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801752e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	4293      	cmp	r3, r2
 8017536:	da01      	bge.n	801753c <arm_softmax_s8+0x2014>
 8017538:	2200      	movs	r2, #0
 801753a:	e001      	b.n	8017540 <arm_softmax_s8+0x2018>
 801753c:	f04f 32ff 	mov.w	r2, #4294967295
 8017540:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017544:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	ea02 0103 	and.w	r1, r2, r3
 801754e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017552:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8017556:	ea81 0300 	eor.w	r3, r1, r0
 801755a:	6013      	str	r3, [r2, #0]
    return result;
 801755c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017560:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8017564:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8017566:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801756a:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801756e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017572:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	440b      	add	r3, r1
 801757a:	6013      	str	r3, [r2, #0]
 801757c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017580:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8017584:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017588:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	6013      	str	r3, [r2, #0]
 8017590:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017594:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8017598:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801759c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80175a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175a8:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 80175ac:	2300      	movs	r3, #0
 80175ae:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80175b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80175b4:	f04f 0300 	mov.w	r3, #0
 80175b8:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 80175bc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80175c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175c4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	0fdb      	lsrs	r3, r3, #31
 80175cc:	b2da      	uxtb	r2, r3
 80175ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175d2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	0fdb      	lsrs	r3, r3, #31
 80175da:	b2db      	uxtb	r3, r3
 80175dc:	4053      	eors	r3, r2
 80175de:	b2db      	uxtb	r3, r3
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d012      	beq.n	801760a <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 80175e4:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80175e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ec:	2100      	movs	r1, #0
 80175ee:	f1d2 0001 	rsbs	r0, r2, #1
 80175f2:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 80175f6:	eb61 0303 	sbc.w	r3, r1, r3
 80175fa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80175fe:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8017602:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8017606:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801760a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801760e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	17da      	asrs	r2, r3, #31
 8017616:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 801761a:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 801761e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017622:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	17da      	asrs	r2, r3, #31
 801762a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 801762e:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 8017632:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8017636:	e9d3 0100 	ldrd	r0, r1, [r3]
 801763a:	460b      	mov	r3, r1
 801763c:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8017640:	fb02 f203 	mul.w	r2, r2, r3
 8017644:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8017648:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 801764c:	e9c4 0100 	strd	r0, r1, [r4]
 8017650:	4601      	mov	r1, r0
 8017652:	fb01 f303 	mul.w	r3, r1, r3
 8017656:	4413      	add	r3, r2
 8017658:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 801765c:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8017660:	fba2 1201 	umull	r1, r2, r2, r1
 8017664:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8017668:	460a      	mov	r2, r1
 801766a:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 801766e:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8017672:	4413      	add	r3, r2
 8017674:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8017678:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017680:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 8017684:	1851      	adds	r1, r2, r1
 8017686:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 801768a:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 801768e:	414b      	adcs	r3, r1
 8017690:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8017694:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8017698:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 801769c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80176a0:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80176a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	da0a      	bge.n	80176c2 <arm_softmax_s8+0x219a>
 80176ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80176b0:	1851      	adds	r1, r2, r1
 80176b2:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 80176b6:	f143 0300 	adc.w	r3, r3, #0
 80176ba:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80176be:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80176c2:	f04f 0000 	mov.w	r0, #0
 80176c6:	f04f 0100 	mov.w	r1, #0
 80176ca:	0fd0      	lsrs	r0, r2, #31
 80176cc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80176d0:	17d9      	asrs	r1, r3, #31
 80176d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176d6:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 80176da:	4603      	mov	r3, r0
 80176dc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80176de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176e2:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80176e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176ea:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80176ee:	6812      	ldr	r2, [r2, #0]
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	429a      	cmp	r2, r3
 80176f4:	d10e      	bne.n	8017714 <arm_softmax_s8+0x21ec>
 80176f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176fa:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017704:	d106      	bne.n	8017714 <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 8017706:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801770a:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 801770e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017712:	6013      	str	r3, [r2, #0]
    return result;
 8017714:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017718:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801771c:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801771e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017722:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	1a99      	subs	r1, r3, r2
 801772a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801772e:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8017732:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017736:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	6013      	str	r3, [r2, #0]
 801773e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017742:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8017746:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8017748:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801774c:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8017750:	2300      	movs	r3, #0
 8017752:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017758:	f04f 0300 	mov.w	r3, #0
 801775c:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8017760:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017764:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017768:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	0fdb      	lsrs	r3, r3, #31
 8017770:	b2da      	uxtb	r2, r3
 8017772:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017776:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	0fdb      	lsrs	r3, r3, #31
 801777e:	b2db      	uxtb	r3, r3
 8017780:	4053      	eors	r3, r2
 8017782:	b2db      	uxtb	r3, r3
 8017784:	2b00      	cmp	r3, #0
 8017786:	d012      	beq.n	80177ae <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 8017788:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017790:	2100      	movs	r1, #0
 8017792:	f1d2 0001 	rsbs	r0, r2, #1
 8017796:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 801779a:	eb61 0303 	sbc.w	r3, r1, r3
 801779e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80177a2:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 80177a6:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 80177aa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80177ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177b2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	17da      	asrs	r2, r3, #31
 80177ba:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 80177be:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 80177c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177c6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	17da      	asrs	r2, r3, #31
 80177ce:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 80177d2:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 80177d6:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 80177da:	460b      	mov	r3, r1
 80177dc:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 80177e0:	fb02 f203 	mul.w	r2, r2, r3
 80177e4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80177e8:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 80177ec:	4601      	mov	r1, r0
 80177ee:	fb01 f303 	mul.w	r3, r1, r3
 80177f2:	4413      	add	r3, r2
 80177f4:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80177f8:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 80177fc:	fba2 1201 	umull	r1, r2, r2, r1
 8017800:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 8017804:	460a      	mov	r2, r1
 8017806:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 801780a:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 801780e:	4413      	add	r3, r2
 8017810:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8017814:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8017818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801781c:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 8017820:	1851      	adds	r1, r2, r1
 8017822:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8017826:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 801782a:	414b      	adcs	r3, r1
 801782c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8017830:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8017834:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8017838:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801783c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8017840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017844:	2b00      	cmp	r3, #0
 8017846:	da0a      	bge.n	801785e <arm_softmax_s8+0x2336>
 8017848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801784c:	1851      	adds	r1, r2, r1
 801784e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8017852:	f143 0300 	adc.w	r3, r3, #0
 8017856:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801785a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 801785e:	f04f 0000 	mov.w	r0, #0
 8017862:	f04f 0100 	mov.w	r1, #0
 8017866:	0fd0      	lsrs	r0, r2, #31
 8017868:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801786c:	17d9      	asrs	r1, r3, #31
 801786e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017872:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8017876:	4603      	mov	r3, r0
 8017878:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801787a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801787e:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8017882:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017886:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801788a:	6812      	ldr	r2, [r2, #0]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	429a      	cmp	r2, r3
 8017890:	d10e      	bne.n	80178b0 <arm_softmax_s8+0x2388>
 8017892:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017896:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80178a0:	d106      	bne.n	80178b0 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 80178a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178a6:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 80178aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80178ae:	6013      	str	r3, [r2, #0]
    return result;
 80178b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178b4:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80178b8:	681a      	ldr	r2, [r3, #0]
 80178ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178be:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80178c2:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80178c4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80178c8:	4619      	mov	r1, r3
 80178ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178ce:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 80178d2:	1e4b      	subs	r3, r1, #1
 80178d4:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80178d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178da:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 80178de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178e2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	009b      	lsls	r3, r3, #2
 80178ea:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80178ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178f0:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 80178f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80178f8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80178fc:	6812      	ldr	r2, [r2, #0]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	429a      	cmp	r2, r3
 8017902:	dd02      	ble.n	801790a <arm_softmax_s8+0x23e2>
 8017904:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017908:	e000      	b.n	801790c <arm_softmax_s8+0x23e4>
 801790a:	2000      	movs	r0, #0
 801790c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017910:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8017914:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017918:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801791c:	6812      	ldr	r2, [r2, #0]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	429a      	cmp	r2, r3
 8017922:	dd01      	ble.n	8017928 <arm_softmax_s8+0x2400>
 8017924:	2200      	movs	r2, #0
 8017926:	e001      	b.n	801792c <arm_softmax_s8+0x2404>
 8017928:	f04f 32ff 	mov.w	r2, #4294967295
 801792c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017930:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	ea02 0103 	and.w	r1, r2, r3
 801793a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801793e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8017942:	ea81 0300 	eor.w	r3, r1, r0
 8017946:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8017948:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801794c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	425a      	negs	r2, r3
 8017954:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017958:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	4293      	cmp	r3, r2
 8017960:	da02      	bge.n	8017968 <arm_softmax_s8+0x2440>
 8017962:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8017966:	e000      	b.n	801796a <arm_softmax_s8+0x2442>
 8017968:	2000      	movs	r0, #0
 801796a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801796e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	425a      	negs	r2, r3
 8017976:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801797a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	4293      	cmp	r3, r2
 8017982:	da05      	bge.n	8017990 <arm_softmax_s8+0x2468>
 8017984:	2200      	movs	r2, #0
 8017986:	e005      	b.n	8017994 <arm_softmax_s8+0x246c>
 8017988:	c3c3c3c4 	.word	0xc3c3c3c4
 801798c:	ffffffff 	.word	0xffffffff
 8017990:	f04f 32ff 	mov.w	r2, #4294967295
 8017994:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017998:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	ea02 0103 	and.w	r1, r2, r3
 80179a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179a6:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 80179aa:	ea81 0300 	eor.w	r3, r1, r0
 80179ae:	6013      	str	r3, [r2, #0]
    return result;
 80179b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80179b8:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80179ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179be:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80179c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179c6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	440b      	add	r3, r1
 80179ce:	6013      	str	r3, [r2, #0]
 80179d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179d4:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80179d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179dc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80179e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80179e8:	4619      	mov	r1, r3
 80179ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179ee:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 80179f2:	1e4b      	subs	r3, r1, #1
 80179f4:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80179f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179fa:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80179fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a02:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	005b      	lsls	r3, r3, #1
 8017a0a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8017a0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a10:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8017a14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a18:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8017a1c:	6812      	ldr	r2, [r2, #0]
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	429a      	cmp	r2, r3
 8017a22:	dd02      	ble.n	8017a2a <arm_softmax_s8+0x2502>
 8017a24:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017a28:	e000      	b.n	8017a2c <arm_softmax_s8+0x2504>
 8017a2a:	2000      	movs	r0, #0
 8017a2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a30:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8017a34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a38:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8017a3c:	6812      	ldr	r2, [r2, #0]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	429a      	cmp	r2, r3
 8017a42:	dd01      	ble.n	8017a48 <arm_softmax_s8+0x2520>
 8017a44:	2200      	movs	r2, #0
 8017a46:	e001      	b.n	8017a4c <arm_softmax_s8+0x2524>
 8017a48:	f04f 32ff 	mov.w	r2, #4294967295
 8017a4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a50:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	ea02 0103 	and.w	r1, r2, r3
 8017a5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a5e:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8017a62:	ea81 0300 	eor.w	r3, r1, r0
 8017a66:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8017a68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a6c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	425a      	negs	r2, r3
 8017a74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a78:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	4293      	cmp	r3, r2
 8017a80:	da02      	bge.n	8017a88 <arm_softmax_s8+0x2560>
 8017a82:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8017a86:	e000      	b.n	8017a8a <arm_softmax_s8+0x2562>
 8017a88:	2000      	movs	r0, #0
 8017a8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a8e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	425a      	negs	r2, r3
 8017a96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a9a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	4293      	cmp	r3, r2
 8017aa2:	da01      	bge.n	8017aa8 <arm_softmax_s8+0x2580>
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	e001      	b.n	8017aac <arm_softmax_s8+0x2584>
 8017aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8017aac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ab0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	ea02 0103 	and.w	r1, r2, r3
 8017aba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017abe:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8017ac2:	ea81 0300 	eor.w	r3, r1, r0
 8017ac6:	6013      	str	r3, [r2, #0]
    return result;
 8017ac8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017acc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8017ad0:	681b      	ldr	r3, [r3, #0]

    return MUL_POW2(x, 1);
 8017ad2:	bf00      	nop
 8017ad4:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 8017ad8:	2300      	movs	r3, #0
 8017ada:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8017ade:	f001 bd85 	b.w	80195ec <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 8017ae2:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8017ae6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017aea:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	4413      	add	r3, r2
 8017af2:	f993 3000 	ldrsb.w	r3, [r3]
 8017af6:	461a      	mov	r2, r3
 8017af8:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8017afc:	1ad3      	subs	r3, r2, r3
 8017afe:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 8017b02:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8017b06:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 8017b0a:	429a      	cmp	r2, r3
 8017b0c:	f2c1 8562 	blt.w	80195d4 <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 8017b10:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8017b14:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8017b18:	fb03 f202 	mul.w	r2, r3, r2
 8017b1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b20:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8017b24:	601a      	str	r2, [r3, #0]
 8017b26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b2a:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8017b2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b32:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017b3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b3e:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8017b42:	2300      	movs	r3, #0
 8017b44:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017b46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017b4a:	f04f 0300 	mov.w	r3, #0
 8017b4e:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 8017b52:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017b56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b5a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	0fdb      	lsrs	r3, r3, #31
 8017b62:	b2da      	uxtb	r2, r3
 8017b64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b68:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	0fdb      	lsrs	r3, r3, #31
 8017b70:	b2db      	uxtb	r3, r3
 8017b72:	4053      	eors	r3, r2
 8017b74:	b2db      	uxtb	r3, r3
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d012      	beq.n	8017ba0 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 8017b7a:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8017b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b82:	2100      	movs	r1, #0
 8017b84:	f1d2 0001 	rsbs	r0, r2, #1
 8017b88:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 8017b8c:	eb61 0303 	sbc.w	r3, r1, r3
 8017b90:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8017b94:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8017b98:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8017b9c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017ba0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ba4:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	17da      	asrs	r2, r3, #31
 8017bac:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8017bb0:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 8017bb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bb8:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	17da      	asrs	r2, r3, #31
 8017bc0:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8017bc4:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 8017bc8:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 8017bcc:	460b      	mov	r3, r1
 8017bce:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8017bd2:	fb02 f203 	mul.w	r2, r2, r3
 8017bd6:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8017bda:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 8017bde:	4601      	mov	r1, r0
 8017be0:	fb01 f303 	mul.w	r3, r1, r3
 8017be4:	4413      	add	r3, r2
 8017be6:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8017bea:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8017bee:	fba2 1201 	umull	r1, r2, r2, r1
 8017bf2:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 8017bf6:	460a      	mov	r2, r1
 8017bf8:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 8017bfc:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8017c00:	4413      	add	r3, r2
 8017c02:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8017c06:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8017c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c0e:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8017c12:	1851      	adds	r1, r2, r1
 8017c14:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8017c18:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 8017c1c:	414b      	adcs	r3, r1
 8017c1e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8017c22:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8017c26:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8017c2a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017c2e:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8017c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	da0a      	bge.n	8017c50 <arm_softmax_s8+0x2728>
 8017c3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017c3e:	1851      	adds	r1, r2, r1
 8017c40:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8017c44:	f143 0300 	adc.w	r3, r3, #0
 8017c48:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8017c4c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8017c50:	f04f 0000 	mov.w	r0, #0
 8017c54:	f04f 0100 	mov.w	r1, #0
 8017c58:	0fd0      	lsrs	r0, r2, #31
 8017c5a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017c5e:	17d9      	asrs	r1, r3, #31
 8017c60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c64:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8017c68:	4603      	mov	r3, r0
 8017c6a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017c6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c70:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 8017c74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c78:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8017c7c:	6812      	ldr	r2, [r2, #0]
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	429a      	cmp	r2, r3
 8017c82:	d10e      	bne.n	8017ca2 <arm_softmax_s8+0x277a>
 8017c84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c88:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017c92:	d106      	bne.n	8017ca2 <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 8017c94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c98:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8017c9c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017ca0:	6013      	str	r3, [r2, #0]
    return result;
 8017ca2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ca6:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8017caa:	681a      	ldr	r2, [r3, #0]
 8017cac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cb0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8017cb4:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 8017cb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cba:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 8017cc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cc6:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017cca:	2318      	movs	r3, #24
 8017ccc:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8017cce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cd2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017cd6:	2201      	movs	r2, #1
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	fa02 f303 	lsl.w	r3, r2, r3
 8017cde:	1e5a      	subs	r2, r3, #1
 8017ce0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ce4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	ea02 0003 	and.w	r0, r2, r3
 8017cee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cf2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017cf6:	2201      	movs	r2, #1
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	fa02 f103 	lsl.w	r1, r2, r3
 8017cfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d02:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8017d06:	1a43      	subs	r3, r0, r1
 8017d08:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 8017d0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d0e:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 8017d12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d16:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8017d1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d1e:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8017d22:	6812      	ldr	r2, [r2, #0]
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	1ad3      	subs	r3, r2, r3
 8017d28:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8017d2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d2e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	0159      	lsls	r1, r3, #5
 8017d36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d3a:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8017d3e:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 8017d42:	6013      	str	r3, [r2, #0]
 8017d44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d48:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8017d4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d50:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	6013      	str	r3, [r2, #0]
 8017d58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d5c:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8017d60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d64:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017d6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d70:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8017d74:	2300      	movs	r3, #0
 8017d76:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017d7c:	f04f 0300 	mov.w	r3, #0
 8017d80:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8017d84:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017d88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d8c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	0fdb      	lsrs	r3, r3, #31
 8017d94:	b2da      	uxtb	r2, r3
 8017d96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d9a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	0fdb      	lsrs	r3, r3, #31
 8017da2:	b2db      	uxtb	r3, r3
 8017da4:	4053      	eors	r3, r2
 8017da6:	b2db      	uxtb	r3, r3
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d012      	beq.n	8017dd2 <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 8017dac:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8017db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017db4:	2100      	movs	r1, #0
 8017db6:	f1d2 0001 	rsbs	r0, r2, #1
 8017dba:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8017dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8017dc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8017dc6:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8017dca:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8017dce:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017dd2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dd6:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	17da      	asrs	r2, r3, #31
 8017dde:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8017de2:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 8017de6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dea:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	17da      	asrs	r2, r3, #31
 8017df2:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8017df6:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 8017dfa:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8017dfe:	460b      	mov	r3, r1
 8017e00:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8017e04:	fb02 f203 	mul.w	r2, r2, r3
 8017e08:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8017e0c:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 8017e10:	4601      	mov	r1, r0
 8017e12:	fb01 f303 	mul.w	r3, r1, r3
 8017e16:	4413      	add	r3, r2
 8017e18:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8017e1c:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8017e20:	fba2 1201 	umull	r1, r2, r2, r1
 8017e24:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 8017e28:	460a      	mov	r2, r1
 8017e2a:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 8017e2e:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8017e32:	4413      	add	r3, r2
 8017e34:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8017e38:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8017e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e40:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 8017e44:	1851      	adds	r1, r2, r1
 8017e46:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8017e4a:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 8017e4e:	414b      	adcs	r3, r1
 8017e50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8017e54:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8017e58:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8017e5c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017e60:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8017e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	da0a      	bge.n	8017e82 <arm_softmax_s8+0x295a>
 8017e6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017e70:	1851      	adds	r1, r2, r1
 8017e72:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8017e76:	f143 0300 	adc.w	r3, r3, #0
 8017e7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8017e7e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8017e82:	f04f 0000 	mov.w	r0, #0
 8017e86:	f04f 0100 	mov.w	r1, #0
 8017e8a:	0fd0      	lsrs	r0, r2, #31
 8017e8c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017e90:	17d9      	asrs	r1, r3, #31
 8017e92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e96:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017e9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ea2:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8017ea6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017eaa:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8017eae:	6812      	ldr	r2, [r2, #0]
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	429a      	cmp	r2, r3
 8017eb4:	d10e      	bne.n	8017ed4 <arm_softmax_s8+0x29ac>
 8017eb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017eba:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017ec4:	d106      	bne.n	8017ed4 <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 8017ec6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017eca:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8017ece:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017ed2:	6013      	str	r3, [r2, #0]
    return result;
 8017ed4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ed8:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8017edc:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 8017ede:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ee2:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017ee6:	601a      	str	r2, [r3, #0]
 8017ee8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017eec:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8017ef0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ef4:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	6013      	str	r3, [r2, #0]
 8017efc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f00:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8017f04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f08:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017f10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f14:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8017f18:	2300      	movs	r3, #0
 8017f1a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017f20:	f04f 0300 	mov.w	r3, #0
 8017f24:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8017f28:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017f2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f30:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	0fdb      	lsrs	r3, r3, #31
 8017f38:	b2da      	uxtb	r2, r3
 8017f3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f3e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	0fdb      	lsrs	r3, r3, #31
 8017f46:	b2db      	uxtb	r3, r3
 8017f48:	4053      	eors	r3, r2
 8017f4a:	b2db      	uxtb	r3, r3
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d012      	beq.n	8017f76 <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 8017f50:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8017f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f58:	2100      	movs	r1, #0
 8017f5a:	f1d2 0001 	rsbs	r0, r2, #1
 8017f5e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8017f62:	eb61 0303 	sbc.w	r3, r1, r3
 8017f66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8017f6a:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8017f6e:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8017f72:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017f76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f7a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	17da      	asrs	r2, r3, #31
 8017f82:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8017f86:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8017f8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f8e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	17da      	asrs	r2, r3, #31
 8017f96:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8017f9a:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8017f9e:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 8017fa2:	460b      	mov	r3, r1
 8017fa4:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8017fa8:	fb02 f203 	mul.w	r2, r2, r3
 8017fac:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8017fb0:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 8017fb4:	4601      	mov	r1, r0
 8017fb6:	fb01 f303 	mul.w	r3, r1, r3
 8017fba:	4413      	add	r3, r2
 8017fbc:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8017fc0:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 8017fc4:	fba2 1201 	umull	r1, r2, r2, r1
 8017fc8:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 8017fcc:	460a      	mov	r2, r1
 8017fce:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 8017fd2:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8017fd6:	4413      	add	r3, r2
 8017fd8:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8017fdc:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8017fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fe4:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 8017fe8:	1851      	adds	r1, r2, r1
 8017fea:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8017fee:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 8017ff2:	414b      	adcs	r3, r1
 8017ff4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8017ff8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8017ffc:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8018000:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018004:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8018008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801800c:	2b00      	cmp	r3, #0
 801800e:	da0a      	bge.n	8018026 <arm_softmax_s8+0x2afe>
 8018010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018014:	1851      	adds	r1, r2, r1
 8018016:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 801801a:	f143 0300 	adc.w	r3, r3, #0
 801801e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8018022:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8018026:	f04f 0000 	mov.w	r0, #0
 801802a:	f04f 0100 	mov.w	r1, #0
 801802e:	0fd0      	lsrs	r0, r2, #31
 8018030:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018034:	17d9      	asrs	r1, r3, #31
 8018036:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801803a:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 801803e:	4603      	mov	r3, r0
 8018040:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018042:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018046:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 801804a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801804e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8018052:	6812      	ldr	r2, [r2, #0]
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	429a      	cmp	r2, r3
 8018058:	d10e      	bne.n	8018078 <arm_softmax_s8+0x2b50>
 801805a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801805e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018068:	d106      	bne.n	8018078 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 801806a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801806e:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8018072:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018076:	6013      	str	r3, [r2, #0]
    return result;
 8018078:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801807c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8018080:	681a      	ldr	r2, [r3, #0]
 8018082:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018086:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801808a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801808c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018090:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8018094:	2300      	movs	r3, #0
 8018096:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018098:	2104      	movs	r1, #4
 801809a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801809e:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 80180a2:	1e4b      	subs	r3, r1, #1
 80180a4:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80180a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180aa:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 80180ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180b2:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 80180b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180ba:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80180be:	6812      	ldr	r2, [r2, #0]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	4013      	ands	r3, r2
 80180c4:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80180c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180ca:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80180ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180d2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	109b      	asrs	r3, r3, #2
 80180da:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 80180dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180e0:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 80180e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180e8:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	105b      	asrs	r3, r3, #1
 80180f0:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80180f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180f6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	da0a      	bge.n	8018116 <arm_softmax_s8+0x2bee>
        threshold++;
 8018100:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018104:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8018108:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801810c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	3301      	adds	r3, #1
 8018114:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8018116:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801811a:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 801811e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018122:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8018126:	6812      	ldr	r2, [r2, #0]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	429a      	cmp	r2, r3
 801812c:	dd0a      	ble.n	8018144 <arm_softmax_s8+0x2c1c>
        result++;
 801812e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018132:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8018136:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801813a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	3301      	adds	r3, #1
 8018142:	6013      	str	r3, [r2, #0]
    return result;
 8018144:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018148:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801814c:	681c      	ldr	r4, [r3, #0]
 801814e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018152:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8018156:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801815a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	6013      	str	r3, [r2, #0]
 8018162:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018166:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 801816a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801816e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018176:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801817a:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 801817e:	2300      	movs	r3, #0
 8018180:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018186:	f04f 0300 	mov.w	r3, #0
 801818a:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 801818e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018192:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018196:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	0fdb      	lsrs	r3, r3, #31
 801819e:	b2da      	uxtb	r2, r3
 80181a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181a4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	0fdb      	lsrs	r3, r3, #31
 80181ac:	b2db      	uxtb	r3, r3
 80181ae:	4053      	eors	r3, r2
 80181b0:	b2db      	uxtb	r3, r3
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d012      	beq.n	80181dc <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 80181b6:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80181ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181be:	2100      	movs	r1, #0
 80181c0:	f1d2 0001 	rsbs	r0, r2, #1
 80181c4:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 80181c8:	eb61 0303 	sbc.w	r3, r1, r3
 80181cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80181d0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80181d4:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 80181d8:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 80181dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181e0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	17da      	asrs	r2, r3, #31
 80181e8:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 80181ec:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 80181f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80181f4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	17da      	asrs	r2, r3, #31
 80181fc:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8018200:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 8018204:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8018208:	460b      	mov	r3, r1
 801820a:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 801820e:	fb02 f203 	mul.w	r2, r2, r3
 8018212:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8018216:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 801821a:	4601      	mov	r1, r0
 801821c:	fb01 f303 	mul.w	r3, r1, r3
 8018220:	4413      	add	r3, r2
 8018222:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 8018226:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 801822a:	fba2 1201 	umull	r1, r2, r2, r1
 801822e:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 8018232:	460a      	mov	r2, r1
 8018234:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 8018238:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 801823c:	4413      	add	r3, r2
 801823e:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8018242:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8018246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801824a:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 801824e:	1851      	adds	r1, r2, r1
 8018250:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8018254:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 8018258:	414b      	adcs	r3, r1
 801825a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801825e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8018262:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8018266:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 801826a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018272:	2b00      	cmp	r3, #0
 8018274:	da0a      	bge.n	801828c <arm_softmax_s8+0x2d64>
 8018276:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801827a:	1851      	adds	r1, r2, r1
 801827c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8018280:	f143 0300 	adc.w	r3, r3, #0
 8018284:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8018288:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 801828c:	f04f 0000 	mov.w	r0, #0
 8018290:	f04f 0100 	mov.w	r1, #0
 8018294:	0fd0      	lsrs	r0, r2, #31
 8018296:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801829a:	17d9      	asrs	r1, r3, #31
 801829c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182a0:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 80182a4:	4603      	mov	r3, r0
 80182a6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80182a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182ac:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80182b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182b4:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80182b8:	6812      	ldr	r2, [r2, #0]
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	429a      	cmp	r2, r3
 80182be:	d10e      	bne.n	80182de <arm_softmax_s8+0x2db6>
 80182c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182c4:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80182ce:	d106      	bne.n	80182de <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 80182d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182d4:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 80182d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80182dc:	6013      	str	r3, [r2, #0]
    return result;
 80182de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182e2:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80182e6:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80182e8:	18e2      	adds	r2, r4, r3
 80182ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182ee:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80182f2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80182f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182f8:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80182fc:	2300      	movs	r3, #0
 80182fe:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018304:	f04f 0300 	mov.w	r3, #0
 8018308:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 801830c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018310:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018314:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	0fdb      	lsrs	r3, r3, #31
 801831c:	b2da      	uxtb	r2, r3
 801831e:	2300      	movs	r3, #0
 8018320:	4053      	eors	r3, r2
 8018322:	b2db      	uxtb	r3, r3
 8018324:	2b00      	cmp	r3, #0
 8018326:	d012      	beq.n	801834e <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 8018328:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018330:	2100      	movs	r1, #0
 8018332:	f1d2 0001 	rsbs	r0, r2, #1
 8018336:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 801833a:	eb61 0303 	sbc.w	r3, r1, r3
 801833e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8018342:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8018346:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 801834a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801834e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018352:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	17da      	asrs	r2, r3, #31
 801835a:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 801835e:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8018362:	a3c9      	add	r3, pc, #804	; (adr r3, 8018688 <arm_softmax_s8+0x3160>)
 8018364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018368:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 801836c:	fb02 f001 	mul.w	r0, r2, r1
 8018370:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 8018374:	fb01 f103 	mul.w	r1, r1, r3
 8018378:	4401      	add	r1, r0
 801837a:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 801837e:	fba0 2302 	umull	r2, r3, r0, r2
 8018382:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8018386:	4613      	mov	r3, r2
 8018388:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 801838c:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8018390:	18cb      	adds	r3, r1, r3
 8018392:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8018396:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801839e:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 80183a2:	1851      	adds	r1, r2, r1
 80183a4:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80183a8:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 80183ac:	414b      	adcs	r3, r1
 80183ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80183b2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80183b6:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80183ba:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80183be:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80183c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	da0a      	bge.n	80183e0 <arm_softmax_s8+0x2eb8>
 80183ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80183ce:	1851      	adds	r1, r2, r1
 80183d0:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80183d4:	f143 0300 	adc.w	r3, r3, #0
 80183d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80183dc:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80183e0:	f04f 0000 	mov.w	r0, #0
 80183e4:	f04f 0100 	mov.w	r1, #0
 80183e8:	0fd0      	lsrs	r0, r2, #31
 80183ea:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80183ee:	17d9      	asrs	r1, r3, #31
 80183f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80183f4:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80183f8:	4603      	mov	r3, r0
 80183fa:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80183fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018400:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8018404:	681a      	ldr	r2, [r3, #0]
 8018406:	4b9e      	ldr	r3, [pc, #632]	; (8018680 <arm_softmax_s8+0x3158>)
 8018408:	429a      	cmp	r2, r3
 801840a:	d10e      	bne.n	801842a <arm_softmax_s8+0x2f02>
 801840c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018410:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801841a:	d106      	bne.n	801842a <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 801841c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018420:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8018424:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018428:	6013      	str	r3, [r2, #0]
    return result;
 801842a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801842e:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8018432:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8018434:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018438:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	441a      	add	r2, r3
 8018440:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018444:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8018448:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801844a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801844e:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8018452:	2300      	movs	r3, #0
 8018454:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018456:	2102      	movs	r1, #2
 8018458:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801845c:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8018460:	1e4b      	subs	r3, r1, #1
 8018462:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8018464:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018468:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 801846c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018470:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 8018474:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018478:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801847c:	6812      	ldr	r2, [r2, #0]
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	4013      	ands	r3, r2
 8018482:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8018484:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018488:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 801848c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018490:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	105b      	asrs	r3, r3, #1
 8018498:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 801849a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801849e:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 80184a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184a6:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	105b      	asrs	r3, r3, #1
 80184ae:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80184b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184b4:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	da0a      	bge.n	80184d4 <arm_softmax_s8+0x2fac>
        threshold++;
 80184be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184c2:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 80184c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184ca:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	3301      	adds	r3, #1
 80184d2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80184d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184d8:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 80184dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184e0:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80184e4:	6812      	ldr	r2, [r2, #0]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	429a      	cmp	r2, r3
 80184ea:	dd0a      	ble.n	8018502 <arm_softmax_s8+0x2fda>
        result++;
 80184ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184f0:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 80184f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184f8:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	3301      	adds	r3, #1
 8018500:	6013      	str	r3, [r2, #0]
    return result;
 8018502:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018506:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801850a:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 801850c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018510:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	441a      	add	r2, r3
 8018518:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801851c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8018520:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8018522:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018526:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 801852a:	2300      	movs	r3, #0
 801852c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801852e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018532:	f04f 0300 	mov.w	r3, #0
 8018536:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 801853a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801853e:	2200      	movs	r2, #0
 8018540:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018544:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	0fdb      	lsrs	r3, r3, #31
 801854c:	b2db      	uxtb	r3, r3
 801854e:	4053      	eors	r3, r2
 8018550:	b2db      	uxtb	r3, r3
 8018552:	2b00      	cmp	r3, #0
 8018554:	d012      	beq.n	801857c <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 8018556:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801855e:	2100      	movs	r1, #0
 8018560:	f1d2 0001 	rsbs	r0, r2, #1
 8018564:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8018568:	eb61 0303 	sbc.w	r3, r1, r3
 801856c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8018570:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8018574:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8018578:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801857c:	a13e      	add	r1, pc, #248	; (adr r1, 8018678 <arm_softmax_s8+0x3150>)
 801857e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018582:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018586:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	17da      	asrs	r2, r3, #31
 801858e:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8018592:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8018596:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 801859a:	fb03 f201 	mul.w	r2, r3, r1
 801859e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80185a2:	fb00 f303 	mul.w	r3, r0, r3
 80185a6:	4413      	add	r3, r2
 80185a8:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 80185ac:	fba0 1202 	umull	r1, r2, r0, r2
 80185b0:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 80185b4:	460a      	mov	r2, r1
 80185b6:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 80185ba:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80185be:	4413      	add	r3, r2
 80185c0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 80185c4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80185c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185cc:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 80185d0:	1851      	adds	r1, r2, r1
 80185d2:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80185d6:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 80185da:	414b      	adcs	r3, r1
 80185dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80185e0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80185e4:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 80185e8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80185ec:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80185f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	da0a      	bge.n	801860e <arm_softmax_s8+0x30e6>
 80185f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80185fc:	1851      	adds	r1, r2, r1
 80185fe:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8018602:	f143 0300 	adc.w	r3, r3, #0
 8018606:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801860a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 801860e:	f04f 0000 	mov.w	r0, #0
 8018612:	f04f 0100 	mov.w	r1, #0
 8018616:	0fd0      	lsrs	r0, r2, #31
 8018618:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801861c:	17d9      	asrs	r1, r3, #31
 801861e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018622:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8018626:	4603      	mov	r3, r0
 8018628:	6013      	str	r3, [r2, #0]
    return result;
 801862a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801862e:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8018632:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 8018634:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018638:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801863c:	4b11      	ldr	r3, [pc, #68]	; (8018684 <arm_softmax_s8+0x315c>)
 801863e:	440b      	add	r3, r1
 8018640:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8018642:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018646:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801864a:	6819      	ldr	r1, [r3, #0]
 801864c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018650:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018654:	1c4b      	adds	r3, r1, #1
 8018656:	6013      	str	r3, [r2, #0]
 8018658:	2301      	movs	r3, #1
 801865a:	fa03 f201 	lsl.w	r2, r3, r1
 801865e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018662:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	4013      	ands	r3, r2
 801866a:	2b00      	cmp	r3, #0
 801866c:	d010      	beq.n	8018690 <arm_softmax_s8+0x3168>
 801866e:	f04f 32ff 	mov.w	r2, #4294967295
 8018672:	e00e      	b.n	8018692 <arm_softmax_s8+0x316a>
 8018674:	f3af 8000 	nop.w
 8018678:	70f5a894 	.word	0x70f5a894
 801867c:	00000000 	.word	0x00000000
 8018680:	2aaaaaab 	.word	0x2aaaaaab
 8018684:	70f5a894 	.word	0x70f5a894
 8018688:	2aaaaaab 	.word	0x2aaaaaab
 801868c:	00000000 	.word	0x00000000
 8018690:	2200      	movs	r2, #0
 8018692:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018696:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801869a:	601a      	str	r2, [r3, #0]
 801869c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186a0:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 80186a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186a8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80186b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186b4:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80186b8:	2300      	movs	r3, #0
 80186ba:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80186bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80186c0:	f04f 0300 	mov.w	r3, #0
 80186c4:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 80186c8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80186cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80186d0:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	0fdb      	lsrs	r3, r3, #31
 80186d8:	b2da      	uxtb	r2, r3
 80186da:	2300      	movs	r3, #0
 80186dc:	4053      	eors	r3, r2
 80186de:	b2db      	uxtb	r3, r3
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d012      	beq.n	801870a <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 80186e4:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80186e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186ec:	2100      	movs	r1, #0
 80186ee:	f1d2 0001 	rsbs	r0, r2, #1
 80186f2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 80186f6:	eb61 0303 	sbc.w	r3, r1, r3
 80186fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80186fe:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8018702:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8018706:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801870a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801870e:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	17da      	asrs	r2, r3, #31
 8018716:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 801871a:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 801871e:	a3c4      	add	r3, pc, #784	; (adr r3, 8018a30 <arm_softmax_s8+0x3508>)
 8018720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018724:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8018728:	fb02 f001 	mul.w	r0, r2, r1
 801872c:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8018730:	fb01 f103 	mul.w	r1, r1, r3
 8018734:	4401      	add	r1, r0
 8018736:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 801873a:	fba0 2302 	umull	r2, r3, r0, r2
 801873e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8018742:	4613      	mov	r3, r2
 8018744:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8018748:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 801874c:	18cb      	adds	r3, r1, r3
 801874e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8018752:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8018756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801875a:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 801875e:	1851      	adds	r1, r2, r1
 8018760:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8018764:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 8018768:	414b      	adcs	r3, r1
 801876a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801876e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8018772:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8018776:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801877a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801877e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018782:	2b00      	cmp	r3, #0
 8018784:	da0a      	bge.n	801879c <arm_softmax_s8+0x3274>
 8018786:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801878a:	1851      	adds	r1, r2, r1
 801878c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8018790:	f143 0300 	adc.w	r3, r3, #0
 8018794:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8018798:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801879c:	f04f 0000 	mov.w	r0, #0
 80187a0:	f04f 0100 	mov.w	r1, #0
 80187a4:	0fd0      	lsrs	r0, r2, #31
 80187a6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80187aa:	17d9      	asrs	r1, r3, #31
 80187ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80187b0:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80187b4:	4603      	mov	r3, r0
 80187b6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80187b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80187bc:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80187c0:	681a      	ldr	r2, [r3, #0]
 80187c2:	4b99      	ldr	r3, [pc, #612]	; (8018a28 <arm_softmax_s8+0x3500>)
 80187c4:	429a      	cmp	r2, r3
 80187c6:	d10e      	bne.n	80187e6 <arm_softmax_s8+0x32be>
 80187c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80187cc:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80187d6:	d106      	bne.n	80187e6 <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 80187d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80187dc:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80187e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80187e4:	6013      	str	r3, [r2, #0]
    return result;
 80187e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80187ea:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80187ee:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 80187f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80187f4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	ea02 0003 	and.w	r0, r2, r3
 80187fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018802:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	43da      	mvns	r2, r3
 801880a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801880e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	ea02 0103 	and.w	r1, r2, r3
 8018818:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801881c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018820:	ea80 0301 	eor.w	r3, r0, r1
 8018824:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8018826:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801882a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801882e:	6819      	ldr	r1, [r3, #0]
 8018830:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018834:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018838:	1c4b      	adds	r3, r1, #1
 801883a:	6013      	str	r3, [r2, #0]
 801883c:	2301      	movs	r3, #1
 801883e:	fa03 f201 	lsl.w	r2, r3, r1
 8018842:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018846:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	4013      	ands	r3, r2
 801884e:	2b00      	cmp	r3, #0
 8018850:	d002      	beq.n	8018858 <arm_softmax_s8+0x3330>
 8018852:	f04f 32ff 	mov.w	r2, #4294967295
 8018856:	e000      	b.n	801885a <arm_softmax_s8+0x3332>
 8018858:	2200      	movs	r2, #0
 801885a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801885e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018862:	601a      	str	r2, [r3, #0]
 8018864:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018868:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 801886c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018870:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018878:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801887c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8018880:	2300      	movs	r3, #0
 8018882:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018884:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018888:	f04f 0300 	mov.w	r3, #0
 801888c:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8018890:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018894:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018898:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	0fdb      	lsrs	r3, r3, #31
 80188a0:	b2da      	uxtb	r2, r3
 80188a2:	2300      	movs	r3, #0
 80188a4:	4053      	eors	r3, r2
 80188a6:	b2db      	uxtb	r3, r3
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d012      	beq.n	80188d2 <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 80188ac:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80188b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188b4:	2100      	movs	r1, #0
 80188b6:	f1d2 0001 	rsbs	r0, r2, #1
 80188ba:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 80188be:	eb61 0303 	sbc.w	r3, r1, r3
 80188c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80188c6:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80188ca:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 80188ce:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80188d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80188d6:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	17da      	asrs	r2, r3, #31
 80188de:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 80188e2:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 80188e6:	a34e      	add	r3, pc, #312	; (adr r3, 8018a20 <arm_softmax_s8+0x34f8>)
 80188e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ec:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 80188f0:	fb02 f001 	mul.w	r0, r2, r1
 80188f4:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 80188f8:	fb01 f103 	mul.w	r1, r1, r3
 80188fc:	4401      	add	r1, r0
 80188fe:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 8018902:	fba0 2302 	umull	r2, r3, r0, r2
 8018906:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 801890a:	4613      	mov	r3, r2
 801890c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8018910:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8018914:	18cb      	adds	r3, r1, r3
 8018916:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 801891a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018922:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 8018926:	1851      	adds	r1, r2, r1
 8018928:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 801892c:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 8018930:	414b      	adcs	r3, r1
 8018932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018936:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 801893a:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 801893e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018942:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8018946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801894a:	2b00      	cmp	r3, #0
 801894c:	da0a      	bge.n	8018964 <arm_softmax_s8+0x343c>
 801894e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018952:	1851      	adds	r1, r2, r1
 8018954:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8018958:	f143 0300 	adc.w	r3, r3, #0
 801895c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8018960:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8018964:	f04f 0000 	mov.w	r0, #0
 8018968:	f04f 0100 	mov.w	r1, #0
 801896c:	0fd0      	lsrs	r0, r2, #31
 801896e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018972:	17d9      	asrs	r1, r3, #31
 8018974:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018978:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 801897c:	4603      	mov	r3, r0
 801897e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018980:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018984:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8018988:	681a      	ldr	r2, [r3, #0]
 801898a:	4b28      	ldr	r3, [pc, #160]	; (8018a2c <arm_softmax_s8+0x3504>)
 801898c:	429a      	cmp	r2, r3
 801898e:	d10e      	bne.n	80189ae <arm_softmax_s8+0x3486>
 8018990:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018994:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801899e:	d106      	bne.n	80189ae <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 80189a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80189a4:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 80189a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80189ac:	6013      	str	r3, [r2, #0]
    return result;
 80189ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80189b2:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80189b6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 80189b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80189bc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	ea02 0003 	and.w	r0, r2, r3
 80189c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80189ca:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	43da      	mvns	r2, r3
 80189d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80189d6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	ea02 0103 	and.w	r1, r2, r3
 80189e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80189e4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80189e8:	ea80 0301 	eor.w	r3, r0, r1
 80189ec:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 80189ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80189f2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80189f6:	6819      	ldr	r1, [r3, #0]
 80189f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80189fc:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018a00:	1c4b      	adds	r3, r1, #1
 8018a02:	6013      	str	r3, [r2, #0]
 8018a04:	2301      	movs	r3, #1
 8018a06:	fa03 f201 	lsl.w	r2, r3, r1
 8018a0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a0e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	4013      	ands	r3, r2
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d00e      	beq.n	8018a38 <arm_softmax_s8+0x3510>
 8018a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8018a1e:	e00c      	b.n	8018a3a <arm_softmax_s8+0x3512>
 8018a20:	4da2cbf2 	.word	0x4da2cbf2
 8018a24:	00000000 	.word	0x00000000
 8018a28:	63afbe7b 	.word	0x63afbe7b
 8018a2c:	4da2cbf2 	.word	0x4da2cbf2
 8018a30:	63afbe7b 	.word	0x63afbe7b
 8018a34:	00000000 	.word	0x00000000
 8018a38:	2200      	movs	r2, #0
 8018a3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a3e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018a42:	601a      	str	r2, [r3, #0]
 8018a44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a48:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8018a4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a50:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018a58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a5c:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8018a60:	2300      	movs	r3, #0
 8018a62:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018a64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018a68:	f04f 0300 	mov.w	r3, #0
 8018a6c:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8018a70:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018a74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018a78:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	0fdb      	lsrs	r3, r3, #31
 8018a80:	b2da      	uxtb	r2, r3
 8018a82:	2300      	movs	r3, #0
 8018a84:	4053      	eors	r3, r2
 8018a86:	b2db      	uxtb	r3, r3
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d012      	beq.n	8018ab2 <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 8018a8c:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8018a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a94:	2100      	movs	r1, #0
 8018a96:	f1d2 0001 	rsbs	r0, r2, #1
 8018a9a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8018a9e:	eb61 0303 	sbc.w	r3, r1, r3
 8018aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8018aa6:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8018aaa:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8018aae:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018ab2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ab6:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	17da      	asrs	r2, r3, #31
 8018abe:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8018ac2:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 8018ac6:	a3c0      	add	r3, pc, #768	; (adr r3, 8018dc8 <arm_softmax_s8+0x38a0>)
 8018ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018acc:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8018ad0:	fb02 f001 	mul.w	r0, r2, r1
 8018ad4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8018ad8:	fb01 f103 	mul.w	r1, r1, r3
 8018adc:	4401      	add	r1, r0
 8018ade:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 8018ae2:	fba0 2302 	umull	r2, r3, r0, r2
 8018ae6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8018aea:	4613      	mov	r3, r2
 8018aec:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8018af0:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8018af4:	18cb      	adds	r3, r1, r3
 8018af6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8018afa:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8018afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b02:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 8018b06:	1851      	adds	r1, r2, r1
 8018b08:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8018b0c:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 8018b10:	414b      	adcs	r3, r1
 8018b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018b16:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8018b1a:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8018b1e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018b22:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8018b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	da08      	bge.n	8018b40 <arm_softmax_s8+0x3618>
 8018b2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018b32:	1851      	adds	r1, r2, r1
 8018b34:	67b9      	str	r1, [r7, #120]	; 0x78
 8018b36:	f143 0300 	adc.w	r3, r3, #0
 8018b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8018b3c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8018b40:	f04f 0000 	mov.w	r0, #0
 8018b44:	f04f 0100 	mov.w	r1, #0
 8018b48:	0fd0      	lsrs	r0, r2, #31
 8018b4a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018b4e:	17d9      	asrs	r1, r3, #31
 8018b50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b54:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8018b58:	4603      	mov	r3, r0
 8018b5a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018b5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b60:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8018b64:	681a      	ldr	r2, [r3, #0]
 8018b66:	4b96      	ldr	r3, [pc, #600]	; (8018dc0 <arm_softmax_s8+0x3898>)
 8018b68:	429a      	cmp	r2, r3
 8018b6a:	d10e      	bne.n	8018b8a <arm_softmax_s8+0x3662>
 8018b6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b70:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018b7a:	d106      	bne.n	8018b8a <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 8018b7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b80:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8018b84:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018b88:	6013      	str	r3, [r2, #0]
    return result;
 8018b8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b8e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8018b92:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8018b94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018b98:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	ea02 0003 	and.w	r0, r2, r3
 8018ba2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ba6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	43da      	mvns	r2, r3
 8018bae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018bb2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	ea02 0103 	and.w	r1, r2, r3
 8018bbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018bc0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018bc4:	ea80 0301 	eor.w	r3, r0, r1
 8018bc8:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 8018bca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018bce:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018bd2:	6819      	ldr	r1, [r3, #0]
 8018bd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018bd8:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018bdc:	1c4b      	adds	r3, r1, #1
 8018bde:	6013      	str	r3, [r2, #0]
 8018be0:	2301      	movs	r3, #1
 8018be2:	fa03 f201 	lsl.w	r2, r3, r1
 8018be6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018bea:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	4013      	ands	r3, r2
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d002      	beq.n	8018bfc <arm_softmax_s8+0x36d4>
 8018bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8018bfa:	e000      	b.n	8018bfe <arm_softmax_s8+0x36d6>
 8018bfc:	2200      	movs	r2, #0
 8018bfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c02:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018c06:	601a      	str	r2, [r3, #0]
 8018c08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c0c:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8018c10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c14:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018c1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c20:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8018c24:	2300      	movs	r3, #0
 8018c26:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018c2c:	f04f 0300 	mov.w	r3, #0
 8018c30:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8018c34:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018c38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c3c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	0fdb      	lsrs	r3, r3, #31
 8018c44:	b2da      	uxtb	r2, r3
 8018c46:	2300      	movs	r3, #0
 8018c48:	4053      	eors	r3, r2
 8018c4a:	b2db      	uxtb	r3, r3
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d010      	beq.n	8018c72 <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 8018c50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8018c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c58:	2100      	movs	r1, #0
 8018c5a:	f1d2 0001 	rsbs	r0, r2, #1
 8018c5e:	6738      	str	r0, [r7, #112]	; 0x70
 8018c60:	eb61 0303 	sbc.w	r3, r1, r3
 8018c64:	677b      	str	r3, [r7, #116]	; 0x74
 8018c66:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8018c6a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8018c6e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018c72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018c76:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	17da      	asrs	r2, r3, #31
 8018c7e:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8018c82:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8018c86:	a34c      	add	r3, pc, #304	; (adr r3, 8018db8 <arm_softmax_s8+0x3890>)
 8018c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c8c:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8018c90:	fb02 f001 	mul.w	r0, r2, r1
 8018c94:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8018c98:	fb01 f103 	mul.w	r1, r1, r3
 8018c9c:	4401      	add	r1, r0
 8018c9e:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 8018ca2:	fba0 2302 	umull	r2, r3, r0, r2
 8018ca6:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8018caa:	4613      	mov	r3, r2
 8018cac:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8018cb0:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8018cb4:	18cb      	adds	r3, r1, r3
 8018cb6:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8018cba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8018cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cc2:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 8018cc6:	1851      	adds	r1, r2, r1
 8018cc8:	66b9      	str	r1, [r7, #104]	; 0x68
 8018cca:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 8018cce:	414b      	adcs	r3, r1
 8018cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018cd2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8018cd6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8018cda:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018cde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8018ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	da08      	bge.n	8018cfc <arm_softmax_s8+0x37d4>
 8018cea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018cee:	1851      	adds	r1, r2, r1
 8018cf0:	6639      	str	r1, [r7, #96]	; 0x60
 8018cf2:	f143 0300 	adc.w	r3, r3, #0
 8018cf6:	667b      	str	r3, [r7, #100]	; 0x64
 8018cf8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8018cfc:	f04f 0000 	mov.w	r0, #0
 8018d00:	f04f 0100 	mov.w	r1, #0
 8018d04:	0fd0      	lsrs	r0, r2, #31
 8018d06:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018d0a:	17d9      	asrs	r1, r3, #31
 8018d0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d10:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8018d14:	4603      	mov	r3, r0
 8018d16:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018d18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d1c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8018d20:	681a      	ldr	r2, [r3, #0]
 8018d22:	4b28      	ldr	r3, [pc, #160]	; (8018dc4 <arm_softmax_s8+0x389c>)
 8018d24:	429a      	cmp	r2, r3
 8018d26:	d10e      	bne.n	8018d46 <arm_softmax_s8+0x381e>
 8018d28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d2c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018d36:	d106      	bne.n	8018d46 <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 8018d38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d3c:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8018d40:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018d44:	6013      	str	r3, [r2, #0]
    return result;
 8018d46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d4a:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8018d4e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8018d50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d54:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	ea02 0003 	and.w	r0, r2, r3
 8018d5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d62:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	43da      	mvns	r2, r3
 8018d6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d6e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	ea02 0103 	and.w	r1, r2, r3
 8018d78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d7c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018d80:	ea80 0301 	eor.w	r3, r0, r1
 8018d84:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 8018d86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d8a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018d8e:	6819      	ldr	r1, [r3, #0]
 8018d90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018d94:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018d98:	1c4b      	adds	r3, r1, #1
 8018d9a:	6013      	str	r3, [r2, #0]
 8018d9c:	2301      	movs	r3, #1
 8018d9e:	fa03 f201 	lsl.w	r2, r3, r1
 8018da2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018da6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	4013      	ands	r3, r2
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d00e      	beq.n	8018dd0 <arm_softmax_s8+0x38a8>
 8018db2:	f04f 32ff 	mov.w	r2, #4294967295
 8018db6:	e00c      	b.n	8018dd2 <arm_softmax_s8+0x38aa>
 8018db8:	1152aaa4 	.word	0x1152aaa4
 8018dbc:	00000000 	.word	0x00000000
 8018dc0:	2f16ac6c 	.word	0x2f16ac6c
 8018dc4:	1152aaa4 	.word	0x1152aaa4
 8018dc8:	2f16ac6c 	.word	0x2f16ac6c
 8018dcc:	00000000 	.word	0x00000000
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018dd6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018dda:	601a      	str	r2, [r3, #0]
 8018ddc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018de0:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 8018de4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018de8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018df0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018df4:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8018df8:	2300      	movs	r3, #0
 8018dfa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018dfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018e00:	f04f 0300 	mov.w	r3, #0
 8018e04:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8018e08:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018e0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e10:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	0fdb      	lsrs	r3, r3, #31
 8018e18:	b2da      	uxtb	r2, r3
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	4053      	eors	r3, r2
 8018e1e:	b2db      	uxtb	r3, r3
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d010      	beq.n	8018e46 <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 8018e24:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8018e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e2c:	2100      	movs	r1, #0
 8018e2e:	f1d2 0001 	rsbs	r0, r2, #1
 8018e32:	65b8      	str	r0, [r7, #88]	; 0x58
 8018e34:	eb61 0303 	sbc.w	r3, r1, r3
 8018e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018e3a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8018e3e:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8018e42:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018e46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018e4a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	17da      	asrs	r2, r3, #31
 8018e52:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8018e56:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8018e5a:	a3bd      	add	r3, pc, #756	; (adr r3, 8019150 <arm_softmax_s8+0x3c28>)
 8018e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e60:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8018e64:	fb02 f001 	mul.w	r0, r2, r1
 8018e68:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8018e6c:	fb01 f103 	mul.w	r1, r1, r3
 8018e70:	4401      	add	r1, r0
 8018e72:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8018e76:	fba0 2302 	umull	r2, r3, r0, r2
 8018e7a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8018e7e:	4613      	mov	r3, r2
 8018e80:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8018e84:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8018e88:	18cb      	adds	r3, r1, r3
 8018e8a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8018e8e:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8018e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e96:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 8018e9a:	1851      	adds	r1, r2, r1
 8018e9c:	6539      	str	r1, [r7, #80]	; 0x50
 8018e9e:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 8018ea2:	414b      	adcs	r3, r1
 8018ea4:	657b      	str	r3, [r7, #84]	; 0x54
 8018ea6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8018eaa:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8018eae:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8018eb2:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8018eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	da08      	bge.n	8018ed0 <arm_softmax_s8+0x39a8>
 8018ebe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018ec2:	1851      	adds	r1, r2, r1
 8018ec4:	64b9      	str	r1, [r7, #72]	; 0x48
 8018ec6:	f143 0300 	adc.w	r3, r3, #0
 8018eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018ecc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8018ed0:	f04f 0000 	mov.w	r0, #0
 8018ed4:	f04f 0100 	mov.w	r1, #0
 8018ed8:	0fd0      	lsrs	r0, r2, #31
 8018eda:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018ede:	17d9      	asrs	r1, r3, #31
 8018ee0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ee4:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8018ee8:	4603      	mov	r3, r0
 8018eea:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018eec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018ef0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8018ef4:	681a      	ldr	r2, [r3, #0]
 8018ef6:	4b94      	ldr	r3, [pc, #592]	; (8019148 <arm_softmax_s8+0x3c20>)
 8018ef8:	429a      	cmp	r2, r3
 8018efa:	d10e      	bne.n	8018f1a <arm_softmax_s8+0x39f2>
 8018efc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f00:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018f0a:	d106      	bne.n	8018f1a <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 8018f0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f10:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8018f14:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018f18:	6013      	str	r3, [r2, #0]
    return result;
 8018f1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f1e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8018f22:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8018f24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f28:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	ea02 0003 	and.w	r0, r2, r3
 8018f32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f36:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	43da      	mvns	r2, r3
 8018f3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f42:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	ea02 0103 	and.w	r1, r2, r3
 8018f4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f50:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8018f54:	ea80 0301 	eor.w	r3, r0, r1
 8018f58:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 8018f5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f5e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8018f62:	6819      	ldr	r1, [r3, #0]
 8018f64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f68:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8018f6c:	1c4b      	adds	r3, r1, #1
 8018f6e:	6013      	str	r3, [r2, #0]
 8018f70:	2301      	movs	r3, #1
 8018f72:	fa03 f201 	lsl.w	r2, r3, r1
 8018f76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f7a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	4013      	ands	r3, r2
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d002      	beq.n	8018f8c <arm_softmax_s8+0x3a64>
 8018f86:	f04f 32ff 	mov.w	r2, #4294967295
 8018f8a:	e000      	b.n	8018f8e <arm_softmax_s8+0x3a66>
 8018f8c:	2200      	movs	r2, #0
 8018f8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f92:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018f96:	601a      	str	r2, [r3, #0]
 8018f98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018f9c:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8018fa0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fa4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018fac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fb0:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8018fb4:	2300      	movs	r3, #0
 8018fb6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018fb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018fbc:	f04f 0300 	mov.w	r3, #0
 8018fc0:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8018fc4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018fc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018fcc:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	0fdb      	lsrs	r3, r3, #31
 8018fd4:	b2da      	uxtb	r2, r3
 8018fd6:	2300      	movs	r3, #0
 8018fd8:	4053      	eors	r3, r2
 8018fda:	b2db      	uxtb	r3, r3
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d010      	beq.n	8019002 <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 8018fe0:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8018fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fe8:	2100      	movs	r1, #0
 8018fea:	f1d2 0001 	rsbs	r0, r2, #1
 8018fee:	6438      	str	r0, [r7, #64]	; 0x40
 8018ff0:	eb61 0303 	sbc.w	r3, r1, r3
 8018ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8018ff6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8018ffa:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8018ffe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8019002:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019006:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	17da      	asrs	r2, r3, #31
 801900e:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8019012:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 8019016:	4a4d      	ldr	r2, [pc, #308]	; (801914c <arm_softmax_s8+0x3c24>)
 8019018:	f04f 0300 	mov.w	r3, #0
 801901c:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8019020:	fb02 f001 	mul.w	r0, r2, r1
 8019024:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8019028:	fb01 f103 	mul.w	r1, r1, r3
 801902c:	4401      	add	r1, r0
 801902e:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8019032:	fba0 2302 	umull	r2, r3, r0, r2
 8019036:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 801903a:	4613      	mov	r3, r2
 801903c:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8019040:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8019044:	18cb      	adds	r3, r1, r3
 8019046:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 801904a:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019052:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 8019056:	1851      	adds	r1, r2, r1
 8019058:	63b9      	str	r1, [r7, #56]	; 0x38
 801905a:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 801905e:	414b      	adcs	r3, r1
 8019060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019062:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8019066:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 801906a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801906e:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8019072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019076:	2b00      	cmp	r3, #0
 8019078:	da08      	bge.n	801908c <arm_softmax_s8+0x3b64>
 801907a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801907e:	1851      	adds	r1, r2, r1
 8019080:	6339      	str	r1, [r7, #48]	; 0x30
 8019082:	f143 0300 	adc.w	r3, r3, #0
 8019086:	637b      	str	r3, [r7, #52]	; 0x34
 8019088:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801908c:	f04f 0000 	mov.w	r0, #0
 8019090:	f04f 0100 	mov.w	r1, #0
 8019094:	0fd0      	lsrs	r0, r2, #31
 8019096:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801909a:	17d9      	asrs	r1, r3, #31
 801909c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80190a0:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80190a4:	4603      	mov	r3, r0
 80190a6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80190a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80190ac:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80190b0:	681a      	ldr	r2, [r3, #0]
 80190b2:	4b26      	ldr	r3, [pc, #152]	; (801914c <arm_softmax_s8+0x3c24>)
 80190b4:	429a      	cmp	r2, r3
 80190b6:	d10e      	bne.n	80190d6 <arm_softmax_s8+0x3bae>
 80190b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80190bc:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80190c6:	d106      	bne.n	80190d6 <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 80190c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80190cc:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80190d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80190d4:	6013      	str	r3, [r2, #0]
    return result;
 80190d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80190da:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80190de:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 80190e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80190e4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	ea02 0003 	and.w	r0, r2, r3
 80190ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80190f2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	43da      	mvns	r2, r3
 80190fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80190fe:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	ea02 0103 	and.w	r1, r2, r3
 8019108:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801910c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8019110:	ea80 0301 	eor.w	r3, r0, r1
 8019114:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 8019116:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801911a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801911e:	6819      	ldr	r1, [r3, #0]
 8019120:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019124:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8019128:	1c4b      	adds	r3, r1, #1
 801912a:	6013      	str	r3, [r2, #0]
 801912c:	2301      	movs	r3, #1
 801912e:	fa03 f201 	lsl.w	r2, r3, r1
 8019132:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019136:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	4013      	ands	r3, r2
 801913e:	2b00      	cmp	r3, #0
 8019140:	d00a      	beq.n	8019158 <arm_softmax_s8+0x3c30>
 8019142:	f04f 32ff 	mov.w	r2, #4294967295
 8019146:	e008      	b.n	801915a <arm_softmax_s8+0x3c32>
 8019148:	02582ab7 	.word	0x02582ab7
 801914c:	000afe11 	.word	0x000afe11
 8019150:	02582ab7 	.word	0x02582ab7
 8019154:	00000000 	.word	0x00000000
 8019158:	2200      	movs	r2, #0
 801915a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801915e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8019162:	601a      	str	r2, [r3, #0]
 8019164:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019168:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 801916c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019170:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019178:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801917c:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8019180:	2300      	movs	r3, #0
 8019182:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8019184:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019188:	f04f 0300 	mov.w	r3, #0
 801918c:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8019190:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8019194:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019198:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	0fdb      	lsrs	r3, r3, #31
 80191a0:	b2da      	uxtb	r2, r3
 80191a2:	2300      	movs	r3, #0
 80191a4:	4053      	eors	r3, r2
 80191a6:	b2db      	uxtb	r3, r3
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d010      	beq.n	80191ce <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 80191ac:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80191b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191b4:	2100      	movs	r1, #0
 80191b6:	f1d2 0001 	rsbs	r0, r2, #1
 80191ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80191bc:	eb61 0303 	sbc.w	r3, r1, r3
 80191c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80191c2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80191c6:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80191ca:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80191ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80191d2:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	17da      	asrs	r2, r3, #31
 80191da:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80191de:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 80191e2:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 80191e6:	f04f 0300 	mov.w	r3, #0
 80191ea:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 80191ee:	fb02 f001 	mul.w	r0, r2, r1
 80191f2:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 80191f6:	fb01 f103 	mul.w	r1, r1, r3
 80191fa:	4401      	add	r1, r0
 80191fc:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 8019200:	fba0 2302 	umull	r2, r3, r0, r2
 8019204:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8019208:	4613      	mov	r3, r2
 801920a:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 801920e:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8019212:	18cb      	adds	r3, r1, r3
 8019214:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8019218:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 801921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019220:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 8019224:	1851      	adds	r1, r2, r1
 8019226:	6239      	str	r1, [r7, #32]
 8019228:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 801922c:	414b      	adcs	r3, r1
 801922e:	627b      	str	r3, [r7, #36]	; 0x24
 8019230:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8019234:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8019238:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801923c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8019240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019244:	2b00      	cmp	r3, #0
 8019246:	da08      	bge.n	801925a <arm_softmax_s8+0x3d32>
 8019248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801924c:	1851      	adds	r1, r2, r1
 801924e:	61b9      	str	r1, [r7, #24]
 8019250:	f143 0300 	adc.w	r3, r3, #0
 8019254:	61fb      	str	r3, [r7, #28]
 8019256:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801925a:	f04f 0000 	mov.w	r0, #0
 801925e:	f04f 0100 	mov.w	r1, #0
 8019262:	0fd0      	lsrs	r0, r2, #31
 8019264:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8019268:	17d9      	asrs	r1, r3, #31
 801926a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801926e:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8019272:	4603      	mov	r3, r0
 8019274:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8019276:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801927a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	2bf2      	cmp	r3, #242	; 0xf2
 8019282:	d10e      	bne.n	80192a2 <arm_softmax_s8+0x3d7a>
 8019284:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019288:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019292:	d106      	bne.n	80192a2 <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 8019294:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019298:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 801929c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80192a0:	6013      	str	r3, [r2, #0]
    return result;
 80192a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192a6:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80192aa:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 80192ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192b0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	ea02 0003 	and.w	r0, r2, r3
 80192ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192be:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	43da      	mvns	r2, r3
 80192c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192ca:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	ea02 0103 	and.w	r1, r2, r3
 80192d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192d8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80192dc:	ea80 0301 	eor.w	r3, r0, r1
 80192e0:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 80192e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192e6:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d102      	bne.n	80192f6 <arm_softmax_s8+0x3dce>
 80192f0:	f04f 32ff 	mov.w	r2, #4294967295
 80192f4:	e000      	b.n	80192f8 <arm_softmax_s8+0x3dd0>
 80192f6:	2200      	movs	r2, #0
 80192f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80192fc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8019300:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8019302:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019306:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019310:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019314:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	43da      	mvns	r2, r3
 801931c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019320:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	4013      	ands	r3, r2
 8019328:	4059      	eors	r1, r3
 801932a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801932e:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8019332:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8019336:	6013      	str	r3, [r2, #0]
 8019338:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801933c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8019340:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8019342:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019346:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 801934a:	2300      	movs	r3, #0
 801934c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801934e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019352:	f04f 0300 	mov.w	r3, #0
 8019356:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 801935a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801935e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019362:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	0fdb      	lsrs	r3, r3, #31
 801936a:	b2da      	uxtb	r2, r3
 801936c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019370:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	0fdb      	lsrs	r3, r3, #31
 8019378:	b2db      	uxtb	r3, r3
 801937a:	4053      	eors	r3, r2
 801937c:	b2db      	uxtb	r3, r3
 801937e:	2b00      	cmp	r3, #0
 8019380:	d010      	beq.n	80193a4 <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 8019382:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8019386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801938a:	2100      	movs	r1, #0
 801938c:	f1d2 0001 	rsbs	r0, r2, #1
 8019390:	6138      	str	r0, [r7, #16]
 8019392:	eb61 0303 	sbc.w	r3, r1, r3
 8019396:	617b      	str	r3, [r7, #20]
 8019398:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801939c:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 80193a0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80193a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80193a8:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	17da      	asrs	r2, r3, #31
 80193b0:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 80193b4:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 80193b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80193bc:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	17da      	asrs	r2, r3, #31
 80193c4:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 80193c8:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 80193cc:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 80193d0:	460b      	mov	r3, r1
 80193d2:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80193d6:	fb02 f203 	mul.w	r2, r2, r3
 80193da:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80193de:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 80193e2:	4601      	mov	r1, r0
 80193e4:	fb01 f303 	mul.w	r3, r1, r3
 80193e8:	4413      	add	r3, r2
 80193ea:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80193ee:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 80193f2:	fba2 1201 	umull	r1, r2, r2, r1
 80193f6:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 80193fa:	460a      	mov	r2, r1
 80193fc:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 8019400:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8019404:	4413      	add	r3, r2
 8019406:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 801940a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019412:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 8019416:	1851      	adds	r1, r2, r1
 8019418:	60b9      	str	r1, [r7, #8]
 801941a:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 801941e:	414b      	adcs	r3, r1
 8019420:	60fb      	str	r3, [r7, #12]
 8019422:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8019426:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801942a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801942e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8019432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019436:	2b00      	cmp	r3, #0
 8019438:	da08      	bge.n	801944c <arm_softmax_s8+0x3f24>
 801943a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801943e:	1851      	adds	r1, r2, r1
 8019440:	6039      	str	r1, [r7, #0]
 8019442:	f143 0300 	adc.w	r3, r3, #0
 8019446:	607b      	str	r3, [r7, #4]
 8019448:	e9d7 2300 	ldrd	r2, r3, [r7]
 801944c:	f04f 0000 	mov.w	r0, #0
 8019450:	f04f 0100 	mov.w	r1, #0
 8019454:	0fd0      	lsrs	r0, r2, #31
 8019456:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801945a:	17d9      	asrs	r1, r3, #31
 801945c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019460:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8019464:	4603      	mov	r3, r0
 8019466:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8019468:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801946c:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8019470:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019474:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8019478:	6812      	ldr	r2, [r2, #0]
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	429a      	cmp	r2, r3
 801947e:	d10e      	bne.n	801949e <arm_softmax_s8+0x3f76>
 8019480:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019484:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801948e:	d106      	bne.n	801949e <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 8019490:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019494:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8019498:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801949c:	6013      	str	r3, [r2, #0]
    return result;
 801949e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80194a2:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80194a6:	681a      	ldr	r2, [r3, #0]
 80194a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80194ac:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80194b0:	601a      	str	r2, [r3, #0]
 80194b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80194b6:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 80194ba:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 80194be:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80194c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80194c4:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 80194c8:	2300      	movs	r3, #0
 80194ca:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80194cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80194d0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80194d4:	2201      	movs	r2, #1
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	fa02 f103 	lsl.w	r1, r2, r3
 80194dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80194e0:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 80194e4:	1e4b      	subs	r3, r1, #1
 80194e6:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80194e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80194ec:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 80194f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80194f4:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80194f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80194fc:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8019500:	6812      	ldr	r2, [r2, #0]
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	4013      	ands	r3, r2
 8019506:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8019508:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801950c:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8019510:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019514:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8019518:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801951c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8019520:	6812      	ldr	r2, [r2, #0]
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	fa42 f303 	asr.w	r3, r2, r3
 8019528:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801952a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801952e:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8019532:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019536:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	105b      	asrs	r3, r3, #1
 801953e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8019540:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019544:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	2b00      	cmp	r3, #0
 801954c:	da0a      	bge.n	8019564 <arm_softmax_s8+0x403c>
        threshold++;
 801954e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019552:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8019556:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801955a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	3301      	adds	r3, #1
 8019562:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8019564:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019568:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 801956c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019570:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8019574:	6812      	ldr	r2, [r2, #0]
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	429a      	cmp	r2, r3
 801957a:	dd0a      	ble.n	8019592 <arm_softmax_s8+0x406a>
        result++;
 801957c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019580:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8019584:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019588:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	3301      	adds	r3, #1
 8019590:	6013      	str	r3, [r2, #0]
    return result;
 8019592:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019596:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801959a:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 801959c:	3b80      	subs	r3, #128	; 0x80
 801959e:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 80195a2:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80195a6:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80195aa:	db09      	blt.n	80195c0 <arm_softmax_s8+0x4098>
 80195ac:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80195b0:	2b7e      	cmp	r3, #126	; 0x7e
 80195b2:	dc03      	bgt.n	80195bc <arm_softmax_s8+0x4094>
 80195b4:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80195b8:	b259      	sxtb	r1, r3
 80195ba:	e003      	b.n	80195c4 <arm_softmax_s8+0x409c>
 80195bc:	217f      	movs	r1, #127	; 0x7f
 80195be:	e001      	b.n	80195c4 <arm_softmax_s8+0x409c>
 80195c0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80195c4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80195c8:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 80195cc:	441a      	add	r2, r3
 80195ce:	460b      	mov	r3, r1
 80195d0:	7013      	strb	r3, [r2, #0]
 80195d2:	e006      	b.n	80195e2 <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 80195d4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80195d8:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 80195dc:	441a      	add	r2, r3
 80195de:	2380      	movs	r3, #128	; 0x80
 80195e0:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 80195e2:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80195e6:	3301      	adds	r3, #1
 80195e8:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80195ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80195f0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80195f4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	429a      	cmp	r2, r3
 80195fc:	f6fe aa71 	blt.w	8017ae2 <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 8019600:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019604:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8019608:	6819      	ldr	r1, [r3, #0]
 801960a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801960e:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8019612:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019616:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	440b      	add	r3, r1
 801961e:	6013      	str	r3, [r2, #0]
        output += row_size;
 8019620:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019624:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8019628:	681a      	ldr	r2, [r3, #0]
 801962a:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 801962e:	4413      	add	r3, r2
 8019630:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8019634:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8019638:	3301      	adds	r3, #1
 801963a:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 801963e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8019642:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8019646:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	429a      	cmp	r2, r3
 801964e:	f6fb af93 	blt.w	8015578 <arm_softmax_s8+0x50>
    }

#endif
}
 8019652:	bf00      	nop
 8019654:	bf00      	nop
 8019656:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 801965a:	46bd      	mov	sp, r7
 801965c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8019660:	4770      	bx	lr
 8019662:	bf00      	nop

08019664 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8019664:	b480      	push	{r7}
 8019666:	b089      	sub	sp, #36	; 0x24
 8019668:	af00      	add	r7, sp, #0
 801966a:	60f8      	str	r0, [r7, #12]
 801966c:	60b9      	str	r1, [r7, #8]
 801966e:	607a      	str	r2, [r7, #4]
 8019670:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019678:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 801967a:	683b      	ldr	r3, [r7, #0]
 801967c:	00db      	lsls	r3, r3, #3
 801967e:	68fa      	ldr	r2, [r7, #12]
 8019680:	4413      	add	r3, r2
 8019682:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 8019684:	69fb      	ldr	r3, [r7, #28]
 8019686:	ed93 7a00 	vldr	s14, [r3]
 801968a:	69bb      	ldr	r3, [r7, #24]
 801968c:	edd3 7a00 	vldr	s15, [r3]
 8019690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019694:	69fb      	ldr	r3, [r7, #28]
 8019696:	edd3 6a01 	vldr	s13, [r3, #4]
 801969a:	69bb      	ldr	r3, [r7, #24]
 801969c:	edd3 7a01 	vldr	s15, [r3, #4]
 80196a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80196a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80196a8:	edc7 7a04 	vstr	s15, [r7, #16]
 80196ac:	69fb      	ldr	r3, [r7, #28]
 80196ae:	ed93 7a00 	vldr	s14, [r3]
 80196b2:	69bb      	ldr	r3, [r7, #24]
 80196b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80196b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80196bc:	69fb      	ldr	r3, [r7, #28]
 80196be:	edd3 6a01 	vldr	s13, [r3, #4]
 80196c2:	69bb      	ldr	r3, [r7, #24]
 80196c4:	edd3 7a00 	vldr	s15, [r3]
 80196c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80196cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80196d0:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 80196d4:	68bb      	ldr	r3, [r7, #8]
 80196d6:	00db      	lsls	r3, r3, #3
 80196d8:	69ba      	ldr	r2, [r7, #24]
 80196da:	4413      	add	r3, r2
 80196dc:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	ed93 7a00 	vldr	s14, [r3]
 80196e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80196e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80196ec:	69fb      	ldr	r3, [r7, #28]
 80196ee:	edc3 7a00 	vstr	s15, [r3]
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80196f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80196fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019700:	69fb      	ldr	r3, [r7, #28]
 8019702:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	ed93 7a00 	vldr	s14, [r3]
 801970c:	edd7 7a04 	vldr	s15, [r7, #16]
 8019710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	edc3 7a00 	vstr	s15, [r3]
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	ed93 7a01 	vldr	s14, [r3, #4]
 8019720:	edd7 7a05 	vldr	s15, [r7, #20]
 8019724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 801972e:	69fb      	ldr	r3, [r7, #28]
 8019730:	3308      	adds	r3, #8
 8019732:	61fb      	str	r3, [r7, #28]
        ++Fout;
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	3308      	adds	r3, #8
 8019738:	60fb      	str	r3, [r7, #12]
    }while (--m);
 801973a:	683b      	ldr	r3, [r7, #0]
 801973c:	3b01      	subs	r3, #1
 801973e:	603b      	str	r3, [r7, #0]
 8019740:	683b      	ldr	r3, [r7, #0]
 8019742:	2b00      	cmp	r3, #0
 8019744:	bf14      	ite	ne
 8019746:	2301      	movne	r3, #1
 8019748:	2300      	moveq	r3, #0
 801974a:	b2db      	uxtb	r3, r3
 801974c:	2b00      	cmp	r3, #0
 801974e:	d000      	beq.n	8019752 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 8019750:	e798      	b.n	8019684 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 8019752:	bf00      	nop
 8019754:	3724      	adds	r7, #36	; 0x24
 8019756:	46bd      	mov	sp, r7
 8019758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801975c:	4770      	bx	lr

0801975e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 801975e:	b480      	push	{r7}
 8019760:	b097      	sub	sp, #92	; 0x5c
 8019762:	af00      	add	r7, sp, #0
 8019764:	60f8      	str	r0, [r7, #12]
 8019766:	60b9      	str	r1, [r7, #8]
 8019768:	607a      	str	r2, [r7, #4]
 801976a:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 801976c:	683b      	ldr	r3, [r7, #0]
 801976e:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 8019770:	683b      	ldr	r3, [r7, #0]
 8019772:	005b      	lsls	r3, r3, #1
 8019774:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 8019776:	683a      	ldr	r2, [r7, #0]
 8019778:	4613      	mov	r3, r2
 801977a:	005b      	lsls	r3, r3, #1
 801977c:	4413      	add	r3, r2
 801977e:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019786:	657b      	str	r3, [r7, #84]	; 0x54
 8019788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801978a:	653b      	str	r3, [r7, #80]	; 0x50
 801978c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801978e:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 8019790:	683b      	ldr	r3, [r7, #0]
 8019792:	00db      	lsls	r3, r3, #3
 8019794:	68fa      	ldr	r2, [r7, #12]
 8019796:	4413      	add	r3, r2
 8019798:	ed93 7a00 	vldr	s14, [r3]
 801979c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801979e:	edd3 7a00 	vldr	s15, [r3]
 80197a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80197a6:	683b      	ldr	r3, [r7, #0]
 80197a8:	00db      	lsls	r3, r3, #3
 80197aa:	68fa      	ldr	r2, [r7, #12]
 80197ac:	4413      	add	r3, r2
 80197ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80197b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80197b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80197b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80197bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80197c0:	edc7 7a04 	vstr	s15, [r7, #16]
 80197c4:	683b      	ldr	r3, [r7, #0]
 80197c6:	00db      	lsls	r3, r3, #3
 80197c8:	68fa      	ldr	r2, [r7, #12]
 80197ca:	4413      	add	r3, r2
 80197cc:	ed93 7a00 	vldr	s14, [r3]
 80197d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80197d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80197d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80197da:	683b      	ldr	r3, [r7, #0]
 80197dc:	00db      	lsls	r3, r3, #3
 80197de:	68fa      	ldr	r2, [r7, #12]
 80197e0:	4413      	add	r3, r2
 80197e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80197e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80197e8:	edd3 7a00 	vldr	s15, [r3]
 80197ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80197f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197f4:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 80197f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197fa:	00db      	lsls	r3, r3, #3
 80197fc:	68fa      	ldr	r2, [r7, #12]
 80197fe:	4413      	add	r3, r2
 8019800:	ed93 7a00 	vldr	s14, [r3]
 8019804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019806:	edd3 7a00 	vldr	s15, [r3]
 801980a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801980e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019810:	00db      	lsls	r3, r3, #3
 8019812:	68fa      	ldr	r2, [r7, #12]
 8019814:	4413      	add	r3, r2
 8019816:	edd3 6a01 	vldr	s13, [r3, #4]
 801981a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801981c:	edd3 7a01 	vldr	s15, [r3, #4]
 8019820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019828:	edc7 7a06 	vstr	s15, [r7, #24]
 801982c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801982e:	00db      	lsls	r3, r3, #3
 8019830:	68fa      	ldr	r2, [r7, #12]
 8019832:	4413      	add	r3, r2
 8019834:	ed93 7a00 	vldr	s14, [r3]
 8019838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801983a:	edd3 7a01 	vldr	s15, [r3, #4]
 801983e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019844:	00db      	lsls	r3, r3, #3
 8019846:	68fa      	ldr	r2, [r7, #12]
 8019848:	4413      	add	r3, r2
 801984a:	edd3 6a01 	vldr	s13, [r3, #4]
 801984e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019850:	edd3 7a00 	vldr	s15, [r3]
 8019854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019858:	ee77 7a27 	vadd.f32	s15, s14, s15
 801985c:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 8019860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019862:	00db      	lsls	r3, r3, #3
 8019864:	68fa      	ldr	r2, [r7, #12]
 8019866:	4413      	add	r3, r2
 8019868:	ed93 7a00 	vldr	s14, [r3]
 801986c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801986e:	edd3 7a00 	vldr	s15, [r3]
 8019872:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019878:	00db      	lsls	r3, r3, #3
 801987a:	68fa      	ldr	r2, [r7, #12]
 801987c:	4413      	add	r3, r2
 801987e:	edd3 6a01 	vldr	s13, [r3, #4]
 8019882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019884:	edd3 7a01 	vldr	s15, [r3, #4]
 8019888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801988c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019890:	edc7 7a08 	vstr	s15, [r7, #32]
 8019894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019896:	00db      	lsls	r3, r3, #3
 8019898:	68fa      	ldr	r2, [r7, #12]
 801989a:	4413      	add	r3, r2
 801989c:	ed93 7a00 	vldr	s14, [r3]
 80198a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80198a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80198a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80198aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80198ac:	00db      	lsls	r3, r3, #3
 80198ae:	68fa      	ldr	r2, [r7, #12]
 80198b0:	4413      	add	r3, r2
 80198b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80198b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80198b8:	edd3 7a00 	vldr	s15, [r3]
 80198bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80198c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80198c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	ed93 7a00 	vldr	s14, [r3]
 80198ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80198d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80198d6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80198e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80198e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80198e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	ed93 7a00 	vldr	s14, [r3]
 80198f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80198f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80198fa:	68fb      	ldr	r3, [r7, #12]
 80198fc:	edc3 7a00 	vstr	s15, [r3]
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	ed93 7a01 	vldr	s14, [r3, #4]
 8019906:	edd7 7a07 	vldr	s15, [r7, #28]
 801990a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 8019914:	ed97 7a04 	vldr	s14, [r7, #16]
 8019918:	edd7 7a08 	vldr	s15, [r7, #32]
 801991c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019920:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8019924:	ed97 7a05 	vldr	s14, [r7, #20]
 8019928:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801992c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019930:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 8019934:	ed97 7a04 	vldr	s14, [r7, #16]
 8019938:	edd7 7a08 	vldr	s15, [r7, #32]
 801993c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019940:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8019944:	ed97 7a05 	vldr	s14, [r7, #20]
 8019948:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801994c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019950:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	ed93 7a00 	vldr	s14, [r3]
 801995a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801995e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019960:	00db      	lsls	r3, r3, #3
 8019962:	68fa      	ldr	r2, [r7, #12]
 8019964:	4413      	add	r3, r2
 8019966:	ee77 7a67 	vsub.f32	s15, s14, s15
 801996a:	edc3 7a00 	vstr	s15, [r3]
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	ed93 7a01 	vldr	s14, [r3, #4]
 8019974:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801997a:	00db      	lsls	r3, r3, #3
 801997c:	68fa      	ldr	r2, [r7, #12]
 801997e:	4413      	add	r3, r2
 8019980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019984:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 8019988:	68bb      	ldr	r3, [r7, #8]
 801998a:	00db      	lsls	r3, r3, #3
 801998c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801998e:	4413      	add	r3, r2
 8019990:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 8019992:	68bb      	ldr	r3, [r7, #8]
 8019994:	011b      	lsls	r3, r3, #4
 8019996:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019998:	4413      	add	r3, r2
 801999a:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 801999c:	68ba      	ldr	r2, [r7, #8]
 801999e:	4613      	mov	r3, r2
 80199a0:	005b      	lsls	r3, r3, #1
 80199a2:	4413      	add	r3, r2
 80199a4:	00db      	lsls	r3, r3, #3
 80199a6:	461a      	mov	r2, r3
 80199a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80199aa:	4413      	add	r3, r2
 80199ac:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	ed93 7a00 	vldr	s14, [r3]
 80199b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80199b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	edc3 7a00 	vstr	s15, [r3]
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80199c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80199cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	685b      	ldr	r3, [r3, #4]
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d030      	beq.n	8019a40 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 80199de:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80199e2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80199e6:	683b      	ldr	r3, [r7, #0]
 80199e8:	00db      	lsls	r3, r3, #3
 80199ea:	68fa      	ldr	r2, [r7, #12]
 80199ec:	4413      	add	r3, r2
 80199ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80199f2:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 80199f6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80199fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80199fe:	683b      	ldr	r3, [r7, #0]
 8019a00:	00db      	lsls	r3, r3, #3
 8019a02:	68fa      	ldr	r2, [r7, #12]
 8019a04:	4413      	add	r3, r2
 8019a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a0a:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 8019a0e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8019a12:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a18:	00db      	lsls	r3, r3, #3
 8019a1a:	68fa      	ldr	r2, [r7, #12]
 8019a1c:	4413      	add	r3, r2
 8019a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a22:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 8019a26:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8019a2a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a30:	00db      	lsls	r3, r3, #3
 8019a32:	68fa      	ldr	r2, [r7, #12]
 8019a34:	4413      	add	r3, r2
 8019a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019a3a:	edc3 7a01 	vstr	s15, [r3, #4]
 8019a3e:	e02f      	b.n	8019aa0 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 8019a40:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8019a44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019a48:	683b      	ldr	r3, [r7, #0]
 8019a4a:	00db      	lsls	r3, r3, #3
 8019a4c:	68fa      	ldr	r2, [r7, #12]
 8019a4e:	4413      	add	r3, r2
 8019a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a54:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 8019a58:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8019a5c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019a60:	683b      	ldr	r3, [r7, #0]
 8019a62:	00db      	lsls	r3, r3, #3
 8019a64:	68fa      	ldr	r2, [r7, #12]
 8019a66:	4413      	add	r3, r2
 8019a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019a6c:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 8019a70:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8019a74:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a7a:	00db      	lsls	r3, r3, #3
 8019a7c:	68fa      	ldr	r2, [r7, #12]
 8019a7e:	4413      	add	r3, r2
 8019a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019a84:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 8019a88:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8019a8c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a92:	00db      	lsls	r3, r3, #3
 8019a94:	68fa      	ldr	r2, [r7, #12]
 8019a96:	4413      	add	r3, r2
 8019a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a9c:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	3308      	adds	r3, #8
 8019aa4:	60fb      	str	r3, [r7, #12]
    }while(--k);
 8019aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019aa8:	3b01      	subs	r3, #1
 8019aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8019aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	bf14      	ite	ne
 8019ab2:	2301      	movne	r3, #1
 8019ab4:	2300      	moveq	r3, #0
 8019ab6:	b2db      	uxtb	r3, r3
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d000      	beq.n	8019abe <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 8019abc:	e668      	b.n	8019790 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 8019abe:	bf00      	nop
 8019ac0:	375c      	adds	r7, #92	; 0x5c
 8019ac2:	46bd      	mov	sp, r7
 8019ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ac8:	4770      	bx	lr
	...

08019acc <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 8019acc:	b5b0      	push	{r4, r5, r7, lr}
 8019ace:	b094      	sub	sp, #80	; 0x50
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	60f8      	str	r0, [r7, #12]
 8019ad4:	60b9      	str	r1, [r7, #8]
 8019ad6:	607a      	str	r2, [r7, #4]
 8019ad8:	603b      	str	r3, [r7, #0]
     size_t k=m;
 8019ada:	683b      	ldr	r3, [r7, #0]
 8019adc:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 8019ade:	683b      	ldr	r3, [r7, #0]
 8019ae0:	005b      	lsls	r3, r3, #1
 8019ae2:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 8019ae4:	68bb      	ldr	r3, [r7, #8]
 8019ae6:	683a      	ldr	r2, [r7, #0]
 8019ae8:	fb02 f303 	mul.w	r3, r2, r3
 8019aec:	6879      	ldr	r1, [r7, #4]
 8019aee:	3321      	adds	r3, #33	; 0x21
 8019af0:	f107 0210 	add.w	r2, r7, #16
 8019af4:	00db      	lsls	r3, r3, #3
 8019af6:	440b      	add	r3, r1
 8019af8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019afc:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019b06:	647b      	str	r3, [r7, #68]	; 0x44
 8019b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b0a:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 8019b0c:	683b      	ldr	r3, [r7, #0]
 8019b0e:	00db      	lsls	r3, r3, #3
 8019b10:	68fa      	ldr	r2, [r7, #12]
 8019b12:	4413      	add	r3, r2
 8019b14:	ed93 7a00 	vldr	s14, [r3]
 8019b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b1a:	edd3 7a00 	vldr	s15, [r3]
 8019b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019b22:	683b      	ldr	r3, [r7, #0]
 8019b24:	00db      	lsls	r3, r3, #3
 8019b26:	68fa      	ldr	r2, [r7, #12]
 8019b28:	4413      	add	r3, r2
 8019b2a:	edd3 6a01 	vldr	s13, [r3, #4]
 8019b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b30:	edd3 7a01 	vldr	s15, [r3, #4]
 8019b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019b3c:	edc7 7a08 	vstr	s15, [r7, #32]
 8019b40:	683b      	ldr	r3, [r7, #0]
 8019b42:	00db      	lsls	r3, r3, #3
 8019b44:	68fa      	ldr	r2, [r7, #12]
 8019b46:	4413      	add	r3, r2
 8019b48:	ed93 7a00 	vldr	s14, [r3]
 8019b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8019b52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019b56:	683b      	ldr	r3, [r7, #0]
 8019b58:	00db      	lsls	r3, r3, #3
 8019b5a:	68fa      	ldr	r2, [r7, #12]
 8019b5c:	4413      	add	r3, r2
 8019b5e:	edd3 6a01 	vldr	s13, [r3, #4]
 8019b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b64:	edd3 7a00 	vldr	s15, [r3]
 8019b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b70:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 8019b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b76:	00db      	lsls	r3, r3, #3
 8019b78:	68fa      	ldr	r2, [r7, #12]
 8019b7a:	4413      	add	r3, r2
 8019b7c:	ed93 7a00 	vldr	s14, [r3]
 8019b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b82:	edd3 7a00 	vldr	s15, [r3]
 8019b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019b8c:	00db      	lsls	r3, r3, #3
 8019b8e:	68fa      	ldr	r2, [r7, #12]
 8019b90:	4413      	add	r3, r2
 8019b92:	edd3 6a01 	vldr	s13, [r3, #4]
 8019b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b98:	edd3 7a01 	vldr	s15, [r3, #4]
 8019b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019ba4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8019ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019baa:	00db      	lsls	r3, r3, #3
 8019bac:	68fa      	ldr	r2, [r7, #12]
 8019bae:	4413      	add	r3, r2
 8019bb0:	ed93 7a00 	vldr	s14, [r3]
 8019bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8019bba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019bc0:	00db      	lsls	r3, r3, #3
 8019bc2:	68fa      	ldr	r2, [r7, #12]
 8019bc4:	4413      	add	r3, r2
 8019bc6:	edd3 6a01 	vldr	s13, [r3, #4]
 8019bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bcc:	edd3 7a00 	vldr	s15, [r3]
 8019bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019bd8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 8019bdc:	ed97 7a08 	vldr	s14, [r7, #32]
 8019be0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8019be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019be8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8019bec:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019bf0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019bf8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 8019bfc:	ed97 7a08 	vldr	s14, [r7, #32]
 8019c00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8019c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c08:	edc7 7a06 	vstr	s15, [r7, #24]
 8019c0c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019c10:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c18:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 8019c1c:	68bb      	ldr	r3, [r7, #8]
 8019c1e:	00db      	lsls	r3, r3, #3
 8019c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019c22:	4413      	add	r3, r2
 8019c24:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 8019c26:	68bb      	ldr	r3, [r7, #8]
 8019c28:	011b      	lsls	r3, r3, #4
 8019c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019c2c:	4413      	add	r3, r2
 8019c2e:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	4618      	mov	r0, r3
 8019c36:	f7e6 fc91 	bl	800055c <__aeabi_f2d>
 8019c3a:	4604      	mov	r4, r0
 8019c3c:	460d      	mov	r5, r1
 8019c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c40:	4618      	mov	r0, r3
 8019c42:	f7e6 fc8b 	bl	800055c <__aeabi_f2d>
 8019c46:	f04f 0200 	mov.w	r2, #0
 8019c4a:	4b57      	ldr	r3, [pc, #348]	; (8019da8 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8019c4c:	f7e6 fcde 	bl	800060c <__aeabi_dmul>
 8019c50:	4602      	mov	r2, r0
 8019c52:	460b      	mov	r3, r1
 8019c54:	4620      	mov	r0, r4
 8019c56:	4629      	mov	r1, r5
 8019c58:	f7e6 fb20 	bl	800029c <__aeabi_dsub>
 8019c5c:	4602      	mov	r2, r0
 8019c5e:	460b      	mov	r3, r1
 8019c60:	4610      	mov	r0, r2
 8019c62:	4619      	mov	r1, r3
 8019c64:	683b      	ldr	r3, [r7, #0]
 8019c66:	00db      	lsls	r3, r3, #3
 8019c68:	68fa      	ldr	r2, [r7, #12]
 8019c6a:	18d4      	adds	r4, r2, r3
 8019c6c:	f7e6 ffc6 	bl	8000bfc <__aeabi_d2f>
 8019c70:	4603      	mov	r3, r0
 8019c72:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	685b      	ldr	r3, [r3, #4]
 8019c78:	4618      	mov	r0, r3
 8019c7a:	f7e6 fc6f 	bl	800055c <__aeabi_f2d>
 8019c7e:	4604      	mov	r4, r0
 8019c80:	460d      	mov	r5, r1
 8019c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c84:	4618      	mov	r0, r3
 8019c86:	f7e6 fc69 	bl	800055c <__aeabi_f2d>
 8019c8a:	f04f 0200 	mov.w	r2, #0
 8019c8e:	4b46      	ldr	r3, [pc, #280]	; (8019da8 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8019c90:	f7e6 fcbc 	bl	800060c <__aeabi_dmul>
 8019c94:	4602      	mov	r2, r0
 8019c96:	460b      	mov	r3, r1
 8019c98:	4620      	mov	r0, r4
 8019c9a:	4629      	mov	r1, r5
 8019c9c:	f7e6 fafe 	bl	800029c <__aeabi_dsub>
 8019ca0:	4602      	mov	r2, r0
 8019ca2:	460b      	mov	r3, r1
 8019ca4:	4610      	mov	r0, r2
 8019ca6:	4619      	mov	r1, r3
 8019ca8:	683b      	ldr	r3, [r7, #0]
 8019caa:	00db      	lsls	r3, r3, #3
 8019cac:	68fa      	ldr	r2, [r7, #12]
 8019cae:	18d4      	adds	r4, r2, r3
 8019cb0:	f7e6 ffa4 	bl	8000bfc <__aeabi_d2f>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 8019cb8:	ed97 7a06 	vldr	s14, [r7, #24]
 8019cbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8019cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019cc4:	edc7 7a06 	vstr	s15, [r7, #24]
 8019cc8:	ed97 7a07 	vldr	s14, [r7, #28]
 8019ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8019cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019cd4:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	ed93 7a00 	vldr	s14, [r3]
 8019cde:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	edc3 7a00 	vstr	s15, [r3]
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	ed93 7a01 	vldr	s14, [r3, #4]
 8019cf2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8019d00:	683b      	ldr	r3, [r7, #0]
 8019d02:	00db      	lsls	r3, r3, #3
 8019d04:	68fa      	ldr	r2, [r7, #12]
 8019d06:	4413      	add	r3, r2
 8019d08:	ed93 7a00 	vldr	s14, [r3]
 8019d0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8019d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d12:	00db      	lsls	r3, r3, #3
 8019d14:	68fa      	ldr	r2, [r7, #12]
 8019d16:	4413      	add	r3, r2
 8019d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d1c:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8019d20:	683b      	ldr	r3, [r7, #0]
 8019d22:	00db      	lsls	r3, r3, #3
 8019d24:	68fa      	ldr	r2, [r7, #12]
 8019d26:	4413      	add	r3, r2
 8019d28:	ed93 7a01 	vldr	s14, [r3, #4]
 8019d2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8019d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d32:	00db      	lsls	r3, r3, #3
 8019d34:	68fa      	ldr	r2, [r7, #12]
 8019d36:	4413      	add	r3, r2
 8019d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d3c:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 8019d40:	683b      	ldr	r3, [r7, #0]
 8019d42:	00db      	lsls	r3, r3, #3
 8019d44:	68fa      	ldr	r2, [r7, #12]
 8019d46:	4413      	add	r3, r2
 8019d48:	ed93 7a00 	vldr	s14, [r3]
 8019d4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8019d50:	683b      	ldr	r3, [r7, #0]
 8019d52:	00db      	lsls	r3, r3, #3
 8019d54:	68fa      	ldr	r2, [r7, #12]
 8019d56:	4413      	add	r3, r2
 8019d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d5c:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 8019d60:	683b      	ldr	r3, [r7, #0]
 8019d62:	00db      	lsls	r3, r3, #3
 8019d64:	68fa      	ldr	r2, [r7, #12]
 8019d66:	4413      	add	r3, r2
 8019d68:	ed93 7a01 	vldr	s14, [r3, #4]
 8019d6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8019d70:	683b      	ldr	r3, [r7, #0]
 8019d72:	00db      	lsls	r3, r3, #3
 8019d74:	68fa      	ldr	r2, [r7, #12]
 8019d76:	4413      	add	r3, r2
 8019d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d7c:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	3308      	adds	r3, #8
 8019d84:	60fb      	str	r3, [r7, #12]
     }while(--k);
 8019d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019d88:	3b01      	subs	r3, #1
 8019d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	bf14      	ite	ne
 8019d92:	2301      	movne	r3, #1
 8019d94:	2300      	moveq	r3, #0
 8019d96:	b2db      	uxtb	r3, r3
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d000      	beq.n	8019d9e <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 8019d9c:	e6b6      	b.n	8019b0c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 8019d9e:	bf00      	nop
 8019da0:	3750      	adds	r7, #80	; 0x50
 8019da2:	46bd      	mov	sp, r7
 8019da4:	bdb0      	pop	{r4, r5, r7, pc}
 8019da6:	bf00      	nop
 8019da8:	3fe00000 	.word	0x3fe00000

08019dac <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8019dac:	b480      	push	{r7}
 8019dae:	b0ab      	sub	sp, #172	; 0xac
 8019db0:	af00      	add	r7, sp, #0
 8019db2:	60f8      	str	r0, [r7, #12]
 8019db4:	60b9      	str	r1, [r7, #8]
 8019db6:	607a      	str	r2, [r7, #4]
 8019db8:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019dc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 8019dc4:	683b      	ldr	r3, [r7, #0]
 8019dc6:	68ba      	ldr	r2, [r7, #8]
 8019dc8:	fb02 f303 	mul.w	r3, r2, r3
 8019dcc:	00db      	lsls	r3, r3, #3
 8019dce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019dd2:	441a      	add	r2, r3
 8019dd4:	f107 0318 	add.w	r3, r7, #24
 8019dd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019ddc:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8019de0:	683b      	ldr	r3, [r7, #0]
 8019de2:	68ba      	ldr	r2, [r7, #8]
 8019de4:	fb02 f303 	mul.w	r3, r2, r3
 8019de8:	011b      	lsls	r3, r3, #4
 8019dea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019dee:	441a      	add	r2, r3
 8019df0:	f107 0310 	add.w	r3, r7, #16
 8019df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019df8:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 8019dfc:	68fb      	ldr	r3, [r7, #12]
 8019dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 8019e02:	683b      	ldr	r3, [r7, #0]
 8019e04:	00db      	lsls	r3, r3, #3
 8019e06:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019e0a:	4413      	add	r3, r2
 8019e0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 8019e10:	683b      	ldr	r3, [r7, #0]
 8019e12:	011b      	lsls	r3, r3, #4
 8019e14:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019e18:	4413      	add	r3, r2
 8019e1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 8019e1e:	683a      	ldr	r2, [r7, #0]
 8019e20:	4613      	mov	r3, r2
 8019e22:	005b      	lsls	r3, r3, #1
 8019e24:	4413      	add	r3, r2
 8019e26:	00db      	lsls	r3, r3, #3
 8019e28:	461a      	mov	r2, r3
 8019e2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019e2e:	4413      	add	r3, r2
 8019e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 8019e34:	683b      	ldr	r3, [r7, #0]
 8019e36:	015b      	lsls	r3, r3, #5
 8019e38:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019e3c:	4413      	add	r3, r2
 8019e3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019e52:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019e56:	683b      	ldr	r3, [r7, #0]
 8019e58:	429a      	cmp	r2, r3
 8019e5a:	f280 82a9 	bge.w	801a3b0 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 8019e5e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8019e62:	f107 0320 	add.w	r3, r7, #32
 8019e66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019e6a:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 8019e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019e72:	ed93 7a00 	vldr	s14, [r3]
 8019e76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019e7a:	68ba      	ldr	r2, [r7, #8]
 8019e7c:	fb02 f303 	mul.w	r3, r2, r3
 8019e80:	00db      	lsls	r3, r3, #3
 8019e82:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019e86:	4413      	add	r3, r2
 8019e88:	edd3 7a00 	vldr	s15, [r3]
 8019e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019e90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019e94:	edd3 6a01 	vldr	s13, [r3, #4]
 8019e98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019e9c:	68ba      	ldr	r2, [r7, #8]
 8019e9e:	fb02 f303 	mul.w	r3, r2, r3
 8019ea2:	00db      	lsls	r3, r3, #3
 8019ea4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019ea8:	4413      	add	r3, r2
 8019eaa:	edd3 7a01 	vldr	s15, [r3, #4]
 8019eae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019eb6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8019eba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019ebe:	ed93 7a00 	vldr	s14, [r3]
 8019ec2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019ec6:	68ba      	ldr	r2, [r7, #8]
 8019ec8:	fb02 f303 	mul.w	r3, r2, r3
 8019ecc:	00db      	lsls	r3, r3, #3
 8019ece:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019ed2:	4413      	add	r3, r2
 8019ed4:	edd3 7a01 	vldr	s15, [r3, #4]
 8019ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019edc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019ee0:	edd3 6a01 	vldr	s13, [r3, #4]
 8019ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019ee8:	68ba      	ldr	r2, [r7, #8]
 8019eea:	fb02 f303 	mul.w	r3, r2, r3
 8019eee:	00db      	lsls	r3, r3, #3
 8019ef0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019ef4:	4413      	add	r3, r2
 8019ef6:	edd3 7a00 	vldr	s15, [r3]
 8019efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f02:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 8019f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019f0a:	ed93 7a00 	vldr	s14, [r3]
 8019f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019f12:	68ba      	ldr	r2, [r7, #8]
 8019f14:	fb02 f303 	mul.w	r3, r2, r3
 8019f18:	011b      	lsls	r3, r3, #4
 8019f1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019f1e:	4413      	add	r3, r2
 8019f20:	edd3 7a00 	vldr	s15, [r3]
 8019f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019f2c:	edd3 6a01 	vldr	s13, [r3, #4]
 8019f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019f34:	68ba      	ldr	r2, [r7, #8]
 8019f36:	fb02 f303 	mul.w	r3, r2, r3
 8019f3a:	011b      	lsls	r3, r3, #4
 8019f3c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019f40:	4413      	add	r3, r2
 8019f42:	edd3 7a01 	vldr	s15, [r3, #4]
 8019f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f4e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8019f52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019f56:	ed93 7a00 	vldr	s14, [r3]
 8019f5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019f5e:	68ba      	ldr	r2, [r7, #8]
 8019f60:	fb02 f303 	mul.w	r3, r2, r3
 8019f64:	011b      	lsls	r3, r3, #4
 8019f66:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019f6a:	4413      	add	r3, r2
 8019f6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8019f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019f78:	edd3 6a01 	vldr	s13, [r3, #4]
 8019f7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019f80:	68ba      	ldr	r2, [r7, #8]
 8019f82:	fb02 f303 	mul.w	r3, r2, r3
 8019f86:	011b      	lsls	r3, r3, #4
 8019f88:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019f8c:	4413      	add	r3, r2
 8019f8e:	edd3 7a00 	vldr	s15, [r3]
 8019f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f9a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 8019f9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019fa2:	ed93 7a00 	vldr	s14, [r3]
 8019fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019faa:	68ba      	ldr	r2, [r7, #8]
 8019fac:	fb03 f202 	mul.w	r2, r3, r2
 8019fb0:	4613      	mov	r3, r2
 8019fb2:	005b      	lsls	r3, r3, #1
 8019fb4:	4413      	add	r3, r2
 8019fb6:	00db      	lsls	r3, r3, #3
 8019fb8:	461a      	mov	r2, r3
 8019fba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019fbe:	4413      	add	r3, r2
 8019fc0:	edd3 7a00 	vldr	s15, [r3]
 8019fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019fcc:	edd3 6a01 	vldr	s13, [r3, #4]
 8019fd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019fd4:	68ba      	ldr	r2, [r7, #8]
 8019fd6:	fb03 f202 	mul.w	r2, r3, r2
 8019fda:	4613      	mov	r3, r2
 8019fdc:	005b      	lsls	r3, r3, #1
 8019fde:	4413      	add	r3, r2
 8019fe0:	00db      	lsls	r3, r3, #3
 8019fe2:	461a      	mov	r2, r3
 8019fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019fe8:	4413      	add	r3, r2
 8019fea:	edd3 7a01 	vldr	s15, [r3, #4]
 8019fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019ff6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8019ffa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019ffe:	ed93 7a00 	vldr	s14, [r3]
 801a002:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a006:	68ba      	ldr	r2, [r7, #8]
 801a008:	fb03 f202 	mul.w	r2, r3, r2
 801a00c:	4613      	mov	r3, r2
 801a00e:	005b      	lsls	r3, r3, #1
 801a010:	4413      	add	r3, r2
 801a012:	00db      	lsls	r3, r3, #3
 801a014:	461a      	mov	r2, r3
 801a016:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a01a:	4413      	add	r3, r2
 801a01c:	edd3 7a01 	vldr	s15, [r3, #4]
 801a020:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a024:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a028:	edd3 6a01 	vldr	s13, [r3, #4]
 801a02c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a030:	68ba      	ldr	r2, [r7, #8]
 801a032:	fb03 f202 	mul.w	r2, r3, r2
 801a036:	4613      	mov	r3, r2
 801a038:	005b      	lsls	r3, r3, #1
 801a03a:	4413      	add	r3, r2
 801a03c:	00db      	lsls	r3, r3, #3
 801a03e:	461a      	mov	r2, r3
 801a040:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a044:	4413      	add	r3, r2
 801a046:	edd3 7a00 	vldr	s15, [r3]
 801a04a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a04e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a052:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 801a056:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a05a:	ed93 7a00 	vldr	s14, [r3]
 801a05e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a062:	68ba      	ldr	r2, [r7, #8]
 801a064:	fb02 f303 	mul.w	r3, r2, r3
 801a068:	015b      	lsls	r3, r3, #5
 801a06a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a06e:	4413      	add	r3, r2
 801a070:	edd3 7a00 	vldr	s15, [r3]
 801a074:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a078:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a07c:	edd3 6a01 	vldr	s13, [r3, #4]
 801a080:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a084:	68ba      	ldr	r2, [r7, #8]
 801a086:	fb02 f303 	mul.w	r3, r2, r3
 801a08a:	015b      	lsls	r3, r3, #5
 801a08c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a090:	4413      	add	r3, r2
 801a092:	edd3 7a01 	vldr	s15, [r3, #4]
 801a096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a09a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a09e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 801a0a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a0a6:	ed93 7a00 	vldr	s14, [r3]
 801a0aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a0ae:	68ba      	ldr	r2, [r7, #8]
 801a0b0:	fb02 f303 	mul.w	r3, r2, r3
 801a0b4:	015b      	lsls	r3, r3, #5
 801a0b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a0ba:	4413      	add	r3, r2
 801a0bc:	edd3 7a01 	vldr	s15, [r3, #4]
 801a0c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a0c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a0c8:	edd3 6a01 	vldr	s13, [r3, #4]
 801a0cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a0d0:	68ba      	ldr	r2, [r7, #8]
 801a0d2:	fb02 f303 	mul.w	r3, r2, r3
 801a0d6:	015b      	lsls	r3, r3, #5
 801a0d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a0dc:	4413      	add	r3, r2
 801a0de:	edd3 7a00 	vldr	s15, [r3]
 801a0e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a0e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a0ea:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 801a0ee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801a0f2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801a0f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a0fa:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 801a0fe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801a102:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801a106:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a10a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 801a10e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801a112:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801a116:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a11a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 801a11e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801a122:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801a126:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a12a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 801a12e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801a132:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801a136:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a13a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 801a13e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801a142:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801a146:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a14a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 801a14e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801a152:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801a156:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a15a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 801a15e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801a162:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801a166:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a16a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 801a16e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a172:	ed93 7a00 	vldr	s14, [r3]
 801a176:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801a17a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801a17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a182:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a186:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a18a:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 801a18e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a192:	ed93 7a01 	vldr	s14, [r3, #4]
 801a196:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801a19a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801a19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a1a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a1a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a1aa:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 801a1ae:	ed97 7a08 	vldr	s14, [r7, #32]
 801a1b2:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801a1b6:	edd7 7a06 	vldr	s15, [r7, #24]
 801a1ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a1be:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a1c2:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801a1c6:	edd7 7a04 	vldr	s15, [r7, #16]
 801a1ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a1ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a1d2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 801a1d6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801a1da:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801a1de:	edd7 7a06 	vldr	s15, [r7, #24]
 801a1e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a1e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a1ea:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801a1ee:	edd7 7a04 	vldr	s15, [r7, #16]
 801a1f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a1f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a1fa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 801a1fe:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 801a202:	edd7 7a07 	vldr	s15, [r7, #28]
 801a206:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a20a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 801a20e:	edd7 7a05 	vldr	s15, [r7, #20]
 801a212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a216:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a21a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 801a21e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 801a222:	edd7 7a07 	vldr	s15, [r7, #28]
 801a226:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a22a:	eeb1 7a67 	vneg.f32	s14, s15
 801a22e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 801a232:	edd7 7a05 	vldr	s15, [r7, #20]
 801a236:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a23a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a23e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 801a242:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801a246:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801a24a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a24e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a252:	edc3 7a00 	vstr	s15, [r3]
 801a256:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801a25a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a25e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a266:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 801a26a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801a26e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801a272:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a276:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a27a:	edc3 7a00 	vstr	s15, [r3]
 801a27e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801a282:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a286:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a28a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a28e:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 801a292:	ed97 7a08 	vldr	s14, [r7, #32]
 801a296:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801a29a:	edd7 7a04 	vldr	s15, [r7, #16]
 801a29e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a2a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a2a6:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801a2aa:	edd7 7a06 	vldr	s15, [r7, #24]
 801a2ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a2b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a2b6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 801a2ba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801a2be:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801a2c2:	edd7 7a04 	vldr	s15, [r7, #16]
 801a2c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a2ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a2ce:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801a2d2:	edd7 7a06 	vldr	s15, [r7, #24]
 801a2d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a2da:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a2de:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 801a2e2:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801a2e6:	edd7 7a07 	vldr	s15, [r7, #28]
 801a2ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a2ee:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 801a2f2:	edd7 7a05 	vldr	s15, [r7, #20]
 801a2f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a2fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a2fe:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 801a302:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 801a306:	edd7 7a05 	vldr	s15, [r7, #20]
 801a30a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a30e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 801a312:	edd7 7a07 	vldr	s15, [r7, #28]
 801a316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a31a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a31e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 801a322:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801a326:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801a32a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a32e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a332:	edc3 7a00 	vstr	s15, [r3]
 801a336:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801a33a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801a33e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a342:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a346:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 801a34a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801a34e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801a352:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a356:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a35a:	edc3 7a00 	vstr	s15, [r3]
 801a35e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801a362:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801a366:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a36a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a36e:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 801a372:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a376:	3308      	adds	r3, #8
 801a378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801a37c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a380:	3308      	adds	r3, #8
 801a382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801a386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a38a:	3308      	adds	r3, #8
 801a38c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801a390:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a394:	3308      	adds	r3, #8
 801a396:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801a39a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a39e:	3308      	adds	r3, #8
 801a3a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 801a3a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a3a8:	3301      	adds	r3, #1
 801a3aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801a3ae:	e550      	b.n	8019e52 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 801a3b0:	bf00      	nop
 801a3b2:	37ac      	adds	r7, #172	; 0xac
 801a3b4:	46bd      	mov	sp, r7
 801a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ba:	4770      	bx	lr

0801a3bc <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 801a3bc:	b580      	push	{r7, lr}
 801a3be:	b08e      	sub	sp, #56	; 0x38
 801a3c0:	af00      	add	r7, sp, #0
 801a3c2:	60f8      	str	r0, [r7, #12]
 801a3c4:	60b9      	str	r1, [r7, #8]
 801a3c6:	607a      	str	r2, [r7, #4]
 801a3c8:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801a3d0:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 801a3d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3da:	00db      	lsls	r3, r3, #3
 801a3dc:	4618      	mov	r0, r3
 801a3de:	f000 fe8b 	bl	801b0f8 <_Z9ei_mallocj>
 801a3e2:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	637b      	str	r3, [r7, #52]	; 0x34
 801a3e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a3ea:	683b      	ldr	r3, [r7, #0]
 801a3ec:	429a      	cmp	r2, r3
 801a3ee:	f280 80b6 	bge.w	801a55e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a2>
        k=u;
 801a3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3f4:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801a3f6:	2300      	movs	r3, #0
 801a3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a3fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3fe:	429a      	cmp	r2, r3
 801a400:	da14      	bge.n	801a42c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x70>
            scratch[q1] = Fout[ k  ];
 801a402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a404:	00db      	lsls	r3, r3, #3
 801a406:	68fa      	ldr	r2, [r7, #12]
 801a408:	18d1      	adds	r1, r2, r3
 801a40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a40c:	00db      	lsls	r3, r3, #3
 801a40e:	69ba      	ldr	r2, [r7, #24]
 801a410:	4413      	add	r3, r2
 801a412:	460a      	mov	r2, r1
 801a414:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a418:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 801a41c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a41e:	683b      	ldr	r3, [r7, #0]
 801a420:	4413      	add	r3, r2
 801a422:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a426:	3301      	adds	r3, #1
 801a428:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a42a:	e7e6      	b.n	801a3fa <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x3e>
        }

        k=u;
 801a42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a42e:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801a430:	2300      	movs	r3, #0
 801a432:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a438:	429a      	cmp	r2, r3
 801a43a:	f280 808c 	bge.w	801a556 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19a>
            int twidx=0;
 801a43e:	2300      	movs	r3, #0
 801a440:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 801a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a444:	00db      	lsls	r3, r3, #3
 801a446:	68fa      	ldr	r2, [r7, #12]
 801a448:	4413      	add	r3, r2
 801a44a:	69ba      	ldr	r2, [r7, #24]
 801a44c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a450:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 801a454:	2301      	movs	r3, #1
 801a456:	62bb      	str	r3, [r7, #40]	; 0x28
 801a458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a45c:	429a      	cmp	r2, r3
 801a45e:	da72      	bge.n	801a546 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                twidx += fstride * k;
 801a460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a462:	68ba      	ldr	r2, [r7, #8]
 801a464:	fb03 f202 	mul.w	r2, r3, r2
 801a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a46a:	4413      	add	r3, r2
 801a46c:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 801a46e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a470:	69fb      	ldr	r3, [r7, #28]
 801a472:	429a      	cmp	r2, r3
 801a474:	db03      	blt.n	801a47e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc2>
 801a476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a478:	69fb      	ldr	r3, [r7, #28]
 801a47a:	1ad3      	subs	r3, r2, r3
 801a47c:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 801a47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a480:	00db      	lsls	r3, r3, #3
 801a482:	69ba      	ldr	r2, [r7, #24]
 801a484:	4413      	add	r3, r2
 801a486:	ed93 7a00 	vldr	s14, [r3]
 801a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a48c:	00db      	lsls	r3, r3, #3
 801a48e:	6a3a      	ldr	r2, [r7, #32]
 801a490:	4413      	add	r3, r2
 801a492:	edd3 7a00 	vldr	s15, [r3]
 801a496:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a49c:	00db      	lsls	r3, r3, #3
 801a49e:	69ba      	ldr	r2, [r7, #24]
 801a4a0:	4413      	add	r3, r2
 801a4a2:	edd3 6a01 	vldr	s13, [r3, #4]
 801a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4a8:	00db      	lsls	r3, r3, #3
 801a4aa:	6a3a      	ldr	r2, [r7, #32]
 801a4ac:	4413      	add	r3, r2
 801a4ae:	edd3 7a01 	vldr	s15, [r3, #4]
 801a4b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a4b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a4ba:	edc7 7a04 	vstr	s15, [r7, #16]
 801a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4c0:	00db      	lsls	r3, r3, #3
 801a4c2:	69ba      	ldr	r2, [r7, #24]
 801a4c4:	4413      	add	r3, r2
 801a4c6:	ed93 7a00 	vldr	s14, [r3]
 801a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4cc:	00db      	lsls	r3, r3, #3
 801a4ce:	6a3a      	ldr	r2, [r7, #32]
 801a4d0:	4413      	add	r3, r2
 801a4d2:	edd3 7a01 	vldr	s15, [r3, #4]
 801a4d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4dc:	00db      	lsls	r3, r3, #3
 801a4de:	69ba      	ldr	r2, [r7, #24]
 801a4e0:	4413      	add	r3, r2
 801a4e2:	edd3 6a01 	vldr	s13, [r3, #4]
 801a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4e8:	00db      	lsls	r3, r3, #3
 801a4ea:	6a3a      	ldr	r2, [r7, #32]
 801a4ec:	4413      	add	r3, r2
 801a4ee:	edd3 7a00 	vldr	s15, [r3]
 801a4f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a4f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a4fa:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 801a4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a500:	00db      	lsls	r3, r3, #3
 801a502:	68fa      	ldr	r2, [r7, #12]
 801a504:	4413      	add	r3, r2
 801a506:	ed93 7a00 	vldr	s14, [r3]
 801a50a:	edd7 7a04 	vldr	s15, [r7, #16]
 801a50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a510:	00db      	lsls	r3, r3, #3
 801a512:	68fa      	ldr	r2, [r7, #12]
 801a514:	4413      	add	r3, r2
 801a516:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a51a:	edc3 7a00 	vstr	s15, [r3]
 801a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a520:	00db      	lsls	r3, r3, #3
 801a522:	68fa      	ldr	r2, [r7, #12]
 801a524:	4413      	add	r3, r2
 801a526:	ed93 7a01 	vldr	s14, [r3, #4]
 801a52a:	edd7 7a05 	vldr	s15, [r7, #20]
 801a52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a530:	00db      	lsls	r3, r3, #3
 801a532:	68fa      	ldr	r2, [r7, #12]
 801a534:	4413      	add	r3, r2
 801a536:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a53a:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 801a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a540:	3301      	adds	r3, #1
 801a542:	62bb      	str	r3, [r7, #40]	; 0x28
 801a544:	e788      	b.n	801a458 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9c>
            }
            k += m;
 801a546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a548:	683b      	ldr	r3, [r7, #0]
 801a54a:	4413      	add	r3, r2
 801a54c:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a550:	3301      	adds	r3, #1
 801a552:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a554:	e76e      	b.n	801a434 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
    for ( u=0; u<m; ++u ) {
 801a556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a558:	3301      	adds	r3, #1
 801a55a:	637b      	str	r3, [r7, #52]	; 0x34
 801a55c:	e744      	b.n	801a3e8 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2c>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 801a55e:	69b8      	ldr	r0, [r7, #24]
 801a560:	f000 fde4 	bl	801b12c <_Z7ei_freePv>
}
 801a564:	bf00      	nop
 801a566:	3738      	adds	r7, #56	; 0x38
 801a568:	46bd      	mov	sp, r7
 801a56a:	bd80      	pop	{r7, pc}

0801a56c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 801a56c:	b580      	push	{r7, lr}
 801a56e:	b08a      	sub	sp, #40	; 0x28
 801a570:	af02      	add	r7, sp, #8
 801a572:	60f8      	str	r0, [r7, #12]
 801a574:	60b9      	str	r1, [r7, #8]
 801a576:	607a      	str	r2, [r7, #4]
 801a578:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 801a57a:	68fb      	ldr	r3, [r7, #12]
 801a57c:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 801a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a580:	1d1a      	adds	r2, r3, #4
 801a582:	62ba      	str	r2, [r7, #40]	; 0x28
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 801a588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a58a:	1d1a      	adds	r2, r3, #4
 801a58c:	62ba      	str	r2, [r7, #40]	; 0x28
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 801a592:	69bb      	ldr	r3, [r7, #24]
 801a594:	697a      	ldr	r2, [r7, #20]
 801a596:	fb02 f303 	mul.w	r3, r2, r3
 801a59a:	00db      	lsls	r3, r3, #3
 801a59c:	68fa      	ldr	r2, [r7, #12]
 801a59e:	4413      	add	r3, r2
 801a5a0:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 801a5a2:	697b      	ldr	r3, [r7, #20]
 801a5a4:	2b01      	cmp	r3, #1
 801a5a6:	d11a      	bne.n	801a5de <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	68ba      	ldr	r2, [r7, #8]
 801a5ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a5b0:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 801a5b4:	683b      	ldr	r3, [r7, #0]
 801a5b6:	687a      	ldr	r2, [r7, #4]
 801a5b8:	fb02 f303 	mul.w	r3, r2, r3
 801a5bc:	00db      	lsls	r3, r3, #3
 801a5be:	68ba      	ldr	r2, [r7, #8]
 801a5c0:	4413      	add	r3, r2
 801a5c2:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 801a5c4:	68fb      	ldr	r3, [r7, #12]
 801a5c6:	3308      	adds	r3, #8
 801a5c8:	60fb      	str	r3, [r7, #12]
 801a5ca:	68fa      	ldr	r2, [r7, #12]
 801a5cc:	693b      	ldr	r3, [r7, #16]
 801a5ce:	429a      	cmp	r2, r3
 801a5d0:	bf14      	ite	ne
 801a5d2:	2301      	movne	r3, #1
 801a5d4:	2300      	moveq	r3, #0
 801a5d6:	b2db      	uxtb	r3, r3
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d024      	beq.n	801a626 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 801a5dc:	e7e4      	b.n	801a5a8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 801a5de:	69bb      	ldr	r3, [r7, #24]
 801a5e0:	687a      	ldr	r2, [r7, #4]
 801a5e2:	fb03 f202 	mul.w	r2, r3, r2
 801a5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5e8:	9301      	str	r3, [sp, #4]
 801a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5ec:	9300      	str	r3, [sp, #0]
 801a5ee:	683b      	ldr	r3, [r7, #0]
 801a5f0:	68b9      	ldr	r1, [r7, #8]
 801a5f2:	68f8      	ldr	r0, [r7, #12]
 801a5f4:	f7ff ffba 	bl	801a56c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 801a5f8:	683b      	ldr	r3, [r7, #0]
 801a5fa:	687a      	ldr	r2, [r7, #4]
 801a5fc:	fb02 f303 	mul.w	r3, r2, r3
 801a600:	00db      	lsls	r3, r3, #3
 801a602:	68ba      	ldr	r2, [r7, #8]
 801a604:	4413      	add	r3, r2
 801a606:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 801a608:	697b      	ldr	r3, [r7, #20]
 801a60a:	00db      	lsls	r3, r3, #3
 801a60c:	68fa      	ldr	r2, [r7, #12]
 801a60e:	4413      	add	r3, r2
 801a610:	60fb      	str	r3, [r7, #12]
 801a612:	68fa      	ldr	r2, [r7, #12]
 801a614:	693b      	ldr	r3, [r7, #16]
 801a616:	429a      	cmp	r2, r3
 801a618:	bf14      	ite	ne
 801a61a:	2301      	movne	r3, #1
 801a61c:	2300      	moveq	r3, #0
 801a61e:	b2db      	uxtb	r3, r3
 801a620:	2b00      	cmp	r3, #0
 801a622:	d000      	beq.n	801a626 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 801a624:	e7db      	b.n	801a5de <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 801a626:	69fb      	ldr	r3, [r7, #28]
 801a628:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 801a62a:	69bb      	ldr	r3, [r7, #24]
 801a62c:	3b02      	subs	r3, #2
 801a62e:	2b03      	cmp	r3, #3
 801a630:	d826      	bhi.n	801a680 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 801a632:	a201      	add	r2, pc, #4	; (adr r2, 801a638 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 801a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a638:	0801a649 	.word	0x0801a649
 801a63c:	0801a657 	.word	0x0801a657
 801a640:	0801a665 	.word	0x0801a665
 801a644:	0801a673 	.word	0x0801a673
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 801a648:	697b      	ldr	r3, [r7, #20]
 801a64a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a64c:	6879      	ldr	r1, [r7, #4]
 801a64e:	68f8      	ldr	r0, [r7, #12]
 801a650:	f7ff f808 	bl	8019664 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 801a654:	e01d      	b.n	801a692 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 801a656:	697b      	ldr	r3, [r7, #20]
 801a658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a65a:	6879      	ldr	r1, [r7, #4]
 801a65c:	68f8      	ldr	r0, [r7, #12]
 801a65e:	f7ff fa35 	bl	8019acc <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 801a662:	e016      	b.n	801a692 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 801a664:	697b      	ldr	r3, [r7, #20]
 801a666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a668:	6879      	ldr	r1, [r7, #4]
 801a66a:	68f8      	ldr	r0, [r7, #12]
 801a66c:	f7ff f877 	bl	801975e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 801a670:	e00f      	b.n	801a692 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 801a672:	697b      	ldr	r3, [r7, #20]
 801a674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a676:	6879      	ldr	r1, [r7, #4]
 801a678:	68f8      	ldr	r0, [r7, #12]
 801a67a:	f7ff fb97 	bl	8019dac <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 801a67e:	e008      	b.n	801a692 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 801a680:	69bb      	ldr	r3, [r7, #24]
 801a682:	9300      	str	r3, [sp, #0]
 801a684:	697b      	ldr	r3, [r7, #20]
 801a686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a688:	6879      	ldr	r1, [r7, #4]
 801a68a:	68f8      	ldr	r0, [r7, #12]
 801a68c:	f7ff fe96 	bl	801a3bc <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 801a690:	bf00      	nop
    }
}
 801a692:	bf00      	nop
 801a694:	3720      	adds	r7, #32
 801a696:	46bd      	mov	sp, r7
 801a698:	bd80      	pop	{r7, pc}
 801a69a:	bf00      	nop

0801a69c <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 801a69c:	b580      	push	{r7, lr}
 801a69e:	b086      	sub	sp, #24
 801a6a0:	af00      	add	r7, sp, #0
 801a6a2:	6078      	str	r0, [r7, #4]
 801a6a4:	6039      	str	r1, [r7, #0]
    int p=4;
 801a6a6:	2304      	movs	r3, #4
 801a6a8:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 801a6aa:	6878      	ldr	r0, [r7, #4]
 801a6ac:	f7e5 ff44 	bl	8000538 <__aeabi_i2d>
 801a6b0:	4602      	mov	r2, r0
 801a6b2:	460b      	mov	r3, r1
 801a6b4:	ec43 2b10 	vmov	d0, r2, r3
 801a6b8:	f006 fe98 	bl	80213ec <sqrt>
 801a6bc:	eeb0 7a40 	vmov.f32	s14, s0
 801a6c0:	eef0 7a60 	vmov.f32	s15, s1
 801a6c4:	eeb0 0a47 	vmov.f32	s0, s14
 801a6c8:	eef0 0a67 	vmov.f32	s1, s15
 801a6cc:	f006 fc48 	bl	8020f60 <floor>
 801a6d0:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	697a      	ldr	r2, [r7, #20]
 801a6d8:	fb93 f2f2 	sdiv	r2, r3, r2
 801a6dc:	6979      	ldr	r1, [r7, #20]
 801a6de:	fb01 f202 	mul.w	r2, r1, r2
 801a6e2:	1a9b      	subs	r3, r3, r2
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d01e      	beq.n	801a726 <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 801a6e8:	697b      	ldr	r3, [r7, #20]
 801a6ea:	2b02      	cmp	r3, #2
 801a6ec:	d005      	beq.n	801a6fa <_ZL9kf_factoriPi+0x5e>
 801a6ee:	697b      	ldr	r3, [r7, #20]
 801a6f0:	2b04      	cmp	r3, #4
 801a6f2:	d105      	bne.n	801a700 <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 801a6f4:	2302      	movs	r3, #2
 801a6f6:	617b      	str	r3, [r7, #20]
 801a6f8:	e006      	b.n	801a708 <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 801a6fa:	2303      	movs	r3, #3
 801a6fc:	617b      	str	r3, [r7, #20]
 801a6fe:	e003      	b.n	801a708 <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 801a700:	697b      	ldr	r3, [r7, #20]
 801a702:	3302      	adds	r3, #2
 801a704:	617b      	str	r3, [r7, #20]
 801a706:	bf00      	nop
            }
            if (p > floor_sqrt)
 801a708:	6978      	ldr	r0, [r7, #20]
 801a70a:	f7e5 ff15 	bl	8000538 <__aeabi_i2d>
 801a70e:	4602      	mov	r2, r0
 801a710:	460b      	mov	r3, r1
 801a712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a716:	f7e6 f9eb 	bl	8000af0 <__aeabi_dcmplt>
 801a71a:	4603      	mov	r3, r0
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d001      	beq.n	801a724 <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	617b      	str	r3, [r7, #20]
        while (n % p) {
 801a724:	e7d6      	b.n	801a6d4 <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 801a726:	687a      	ldr	r2, [r7, #4]
 801a728:	697b      	ldr	r3, [r7, #20]
 801a72a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a72e:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 801a730:	683b      	ldr	r3, [r7, #0]
 801a732:	1d1a      	adds	r2, r3, #4
 801a734:	603a      	str	r2, [r7, #0]
 801a736:	697a      	ldr	r2, [r7, #20]
 801a738:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 801a73a:	683b      	ldr	r3, [r7, #0]
 801a73c:	1d1a      	adds	r2, r3, #4
 801a73e:	603a      	str	r2, [r7, #0]
 801a740:	687a      	ldr	r2, [r7, #4]
 801a742:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	2b01      	cmp	r3, #1
 801a748:	dd00      	ble.n	801a74c <_ZL9kf_factoriPi+0xb0>
    do {
 801a74a:	e7c3      	b.n	801a6d4 <_ZL9kf_factoriPi+0x38>
}
 801a74c:	bf00      	nop
 801a74e:	3718      	adds	r7, #24
 801a750:	46bd      	mov	sp, r7
 801a752:	bd80      	pop	{r7, pc}
 801a754:	0000      	movs	r0, r0
	...

0801a758 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 801a758:	b5b0      	push	{r4, r5, r7, lr}
 801a75a:	b090      	sub	sp, #64	; 0x40
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	60f8      	str	r0, [r7, #12]
 801a760:	60b9      	str	r1, [r7, #8]
 801a762:	607a      	str	r2, [r7, #4]
 801a764:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 801a766:	2300      	movs	r3, #0
 801a768:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 801a76a:	68fb      	ldr	r3, [r7, #12]
 801a76c:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 801a76e:	00db      	lsls	r3, r3, #3
 801a770:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 801a772:	683b      	ldr	r3, [r7, #0]
 801a774:	2b00      	cmp	r3, #0
 801a776:	d104      	bne.n	801a782 <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 801a778:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a77a:	f000 fcbd 	bl	801b0f8 <_Z9ei_mallocj>
 801a77e:	63f8      	str	r0, [r7, #60]	; 0x3c
 801a780:	e00c      	b.n	801a79c <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	2b00      	cmp	r3, #0
 801a786:	d006      	beq.n	801a796 <kiss_fft_alloc+0x3e>
 801a788:	683b      	ldr	r3, [r7, #0]
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a78e:	429a      	cmp	r2, r3
 801a790:	d801      	bhi.n	801a796 <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 801a796:	683b      	ldr	r3, [r7, #0]
 801a798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a79a:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 801a79c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	f000 80a0 	beq.w	801a8e4 <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 801a7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a7a6:	68fa      	ldr	r2, [r7, #12]
 801a7a8:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 801a7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a7ac:	68ba      	ldr	r2, [r7, #8]
 801a7ae:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 801a7b0:	68bb      	ldr	r3, [r7, #8]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d048      	beq.n	801a848 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	63bb      	str	r3, [r7, #56]	; 0x38
 801a7ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	429a      	cmp	r2, r3
 801a7c0:	f280 808a 	bge.w	801a8d8 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 801a7c4:	a34e      	add	r3, pc, #312	; (adr r3, 801a900 <kiss_fft_alloc+0x1a8>)
 801a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 801a7ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a7d0:	f7e5 feb2 	bl	8000538 <__aeabi_i2d>
 801a7d4:	a34c      	add	r3, pc, #304	; (adr r3, 801a908 <kiss_fft_alloc+0x1b0>)
 801a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7da:	f7e5 ff17 	bl	800060c <__aeabi_dmul>
 801a7de:	4602      	mov	r2, r0
 801a7e0:	460b      	mov	r3, r1
 801a7e2:	4614      	mov	r4, r2
 801a7e4:	461d      	mov	r5, r3
 801a7e6:	68f8      	ldr	r0, [r7, #12]
 801a7e8:	f7e5 fea6 	bl	8000538 <__aeabi_i2d>
 801a7ec:	4602      	mov	r2, r0
 801a7ee:	460b      	mov	r3, r1
 801a7f0:	4620      	mov	r0, r4
 801a7f2:	4629      	mov	r1, r5
 801a7f4:	f7e6 f834 	bl	8000860 <__aeabi_ddiv>
 801a7f8:	4602      	mov	r2, r0
 801a7fa:	460b      	mov	r3, r1
 801a7fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 801a800:	ed97 0b04 	vldr	d0, [r7, #16]
 801a804:	f006 fb58 	bl	8020eb8 <cos>
 801a808:	ec51 0b10 	vmov	r0, r1, d0
 801a80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a80e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801a812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a814:	00db      	lsls	r3, r3, #3
 801a816:	18d4      	adds	r4, r2, r3
 801a818:	f7e6 f9f0 	bl	8000bfc <__aeabi_d2f>
 801a81c:	4603      	mov	r3, r0
 801a81e:	6023      	str	r3, [r4, #0]
 801a820:	ed97 0b04 	vldr	d0, [r7, #16]
 801a824:	f006 fc9c 	bl	8021160 <sin>
 801a828:	ec51 0b10 	vmov	r0, r1, d0
 801a82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a82e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801a832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a834:	00db      	lsls	r3, r3, #3
 801a836:	18d4      	adds	r4, r2, r3
 801a838:	f7e6 f9e0 	bl	8000bfc <__aeabi_d2f>
 801a83c:	4603      	mov	r3, r0
 801a83e:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 801a840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a842:	3301      	adds	r3, #1
 801a844:	63bb      	str	r3, [r7, #56]	; 0x38
 801a846:	e7b8      	b.n	801a7ba <kiss_fft_alloc+0x62>
            }
        } else {
            for (i=0;i<nfft;++i) {
 801a848:	2300      	movs	r3, #0
 801a84a:	63bb      	str	r3, [r7, #56]	; 0x38
 801a84c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	429a      	cmp	r2, r3
 801a852:	da41      	bge.n	801a8d8 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 801a854:	a32a      	add	r3, pc, #168	; (adr r3, 801a900 <kiss_fft_alloc+0x1a8>)
 801a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a85a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 801a85e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a860:	f7e5 fe6a 	bl	8000538 <__aeabi_i2d>
 801a864:	a32a      	add	r3, pc, #168	; (adr r3, 801a910 <kiss_fft_alloc+0x1b8>)
 801a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a86a:	f7e5 fecf 	bl	800060c <__aeabi_dmul>
 801a86e:	4602      	mov	r2, r0
 801a870:	460b      	mov	r3, r1
 801a872:	4614      	mov	r4, r2
 801a874:	461d      	mov	r5, r3
 801a876:	68f8      	ldr	r0, [r7, #12]
 801a878:	f7e5 fe5e 	bl	8000538 <__aeabi_i2d>
 801a87c:	4602      	mov	r2, r0
 801a87e:	460b      	mov	r3, r1
 801a880:	4620      	mov	r0, r4
 801a882:	4629      	mov	r1, r5
 801a884:	f7e5 ffec 	bl	8000860 <__aeabi_ddiv>
 801a888:	4602      	mov	r2, r0
 801a88a:	460b      	mov	r3, r1
 801a88c:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 801a890:	ed97 0b08 	vldr	d0, [r7, #32]
 801a894:	f006 fb10 	bl	8020eb8 <cos>
 801a898:	ec51 0b10 	vmov	r0, r1, d0
 801a89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a89e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8a4:	00db      	lsls	r3, r3, #3
 801a8a6:	18d4      	adds	r4, r2, r3
 801a8a8:	f7e6 f9a8 	bl	8000bfc <__aeabi_d2f>
 801a8ac:	4603      	mov	r3, r0
 801a8ae:	6023      	str	r3, [r4, #0]
 801a8b0:	ed97 0b08 	vldr	d0, [r7, #32]
 801a8b4:	f006 fc54 	bl	8021160 <sin>
 801a8b8:	ec51 0b10 	vmov	r0, r1, d0
 801a8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a8be:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801a8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8c4:	00db      	lsls	r3, r3, #3
 801a8c6:	18d4      	adds	r4, r2, r3
 801a8c8:	f7e6 f998 	bl	8000bfc <__aeabi_d2f>
 801a8cc:	4603      	mov	r3, r0
 801a8ce:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 801a8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8d2:	3301      	adds	r3, #1
 801a8d4:	63bb      	str	r3, [r7, #56]	; 0x38
 801a8d6:	e7b9      	b.n	801a84c <kiss_fft_alloc+0xf4>
            }
        }

        kf_factor(nfft,st->factors);
 801a8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a8da:	3308      	adds	r3, #8
 801a8dc:	4619      	mov	r1, r3
 801a8de:	68f8      	ldr	r0, [r7, #12]
 801a8e0:	f7ff fedc 	bl	801a69c <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 801a8e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d002      	beq.n	801a8f0 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 801a8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a8ee:	601a      	str	r2, [r3, #0]
    }

    return st;
 801a8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801a8f2:	4618      	mov	r0, r3
 801a8f4:	3740      	adds	r7, #64	; 0x40
 801a8f6:	46bd      	mov	sp, r7
 801a8f8:	bdb0      	pop	{r4, r5, r7, pc}
 801a8fa:	bf00      	nop
 801a8fc:	f3af 8000 	nop.w
 801a900:	54442d18 	.word	0x54442d18
 801a904:	400921fb 	.word	0x400921fb
 801a908:	54442d18 	.word	0x54442d18
 801a90c:	401921fb 	.word	0x401921fb
 801a910:	54442d18 	.word	0x54442d18
 801a914:	c01921fb 	.word	0xc01921fb

0801a918 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 801a918:	b580      	push	{r7, lr}
 801a91a:	b088      	sub	sp, #32
 801a91c:	af02      	add	r7, sp, #8
 801a91e:	60f8      	str	r0, [r7, #12]
 801a920:	60b9      	str	r1, [r7, #8]
 801a922:	607a      	str	r2, [r7, #4]
 801a924:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 801a926:	68ba      	ldr	r2, [r7, #8]
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	429a      	cmp	r2, r3
 801a92c:	d11d      	bne.n	801a96a <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	00db      	lsls	r3, r3, #3
 801a934:	4618      	mov	r0, r3
 801a936:	f000 fbdf 	bl	801b0f8 <_Z9ei_mallocj>
 801a93a:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	3308      	adds	r3, #8
 801a940:	68fa      	ldr	r2, [r7, #12]
 801a942:	9201      	str	r2, [sp, #4]
 801a944:	9300      	str	r3, [sp, #0]
 801a946:	683b      	ldr	r3, [r7, #0]
 801a948:	2201      	movs	r2, #1
 801a94a:	68b9      	ldr	r1, [r7, #8]
 801a94c:	6978      	ldr	r0, [r7, #20]
 801a94e:	f7ff fe0d 	bl	801a56c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	00db      	lsls	r3, r3, #3
 801a958:	461a      	mov	r2, r3
 801a95a:	6979      	ldr	r1, [r7, #20]
 801a95c:	6878      	ldr	r0, [r7, #4]
 801a95e:	f009 f867 	bl	8023a30 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 801a962:	6978      	ldr	r0, [r7, #20]
 801a964:	f000 fbe2 	bl	801b12c <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 801a968:	e00a      	b.n	801a980 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	3308      	adds	r3, #8
 801a96e:	68fa      	ldr	r2, [r7, #12]
 801a970:	9201      	str	r2, [sp, #4]
 801a972:	9300      	str	r3, [sp, #0]
 801a974:	683b      	ldr	r3, [r7, #0]
 801a976:	2201      	movs	r2, #1
 801a978:	68b9      	ldr	r1, [r7, #8]
 801a97a:	6878      	ldr	r0, [r7, #4]
 801a97c:	f7ff fdf6 	bl	801a56c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 801a980:	bf00      	nop
 801a982:	3718      	adds	r7, #24
 801a984:	46bd      	mov	sp, r7
 801a986:	bd80      	pop	{r7, pc}

0801a988 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b084      	sub	sp, #16
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	60f8      	str	r0, [r7, #12]
 801a990:	60b9      	str	r1, [r7, #8]
 801a992:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 801a994:	2301      	movs	r3, #1
 801a996:	687a      	ldr	r2, [r7, #4]
 801a998:	68b9      	ldr	r1, [r7, #8]
 801a99a:	68f8      	ldr	r0, [r7, #12]
 801a99c:	f7ff ffbc 	bl	801a918 <kiss_fft_stride>
}
 801a9a0:	bf00      	nop
 801a9a2:	3710      	adds	r7, #16
 801a9a4:	46bd      	mov	sp, r7
 801a9a6:	bd80      	pop	{r7, pc}

0801a9a8 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 801a9a8:	b5b0      	push	{r4, r5, r7, lr}
 801a9aa:	b090      	sub	sp, #64	; 0x40
 801a9ac:	af02      	add	r7, sp, #8
 801a9ae:	60f8      	str	r0, [r7, #12]
 801a9b0:	60b9      	str	r1, [r7, #8]
 801a9b2:	607a      	str	r2, [r7, #4]
 801a9b4:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 801a9ba:	2300      	movs	r3, #0
 801a9bc:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 801a9be:	68fb      	ldr	r3, [r7, #12]
 801a9c0:	f003 0301 	and.w	r3, r3, #1
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d004      	beq.n	801a9d2 <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 801a9c8:	4885      	ldr	r0, [pc, #532]	; (801abe0 <kiss_fftr_alloc+0x238>)
 801a9ca:	f7eb faa7 	bl	8005f1c <_Z9ei_printfPKcz>
        return NULL;
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	e0f9      	b.n	801abc6 <kiss_fftr_alloc+0x21e>
    }
    nfft >>= 1;
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	105b      	asrs	r3, r3, #1
 801a9d6:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 801a9d8:	f107 0314 	add.w	r3, r7, #20
 801a9dc:	2200      	movs	r2, #0
 801a9de:	9200      	str	r2, [sp, #0]
 801a9e0:	2200      	movs	r2, #0
 801a9e2:	68b9      	ldr	r1, [r7, #8]
 801a9e4:	68f8      	ldr	r0, [r7, #12]
 801a9e6:	f7ff feb7 	bl	801a758 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 801a9ea:	68fa      	ldr	r2, [r7, #12]
 801a9ec:	4613      	mov	r3, r2
 801a9ee:	005b      	lsls	r3, r3, #1
 801a9f0:	4413      	add	r3, r2
 801a9f2:	0fda      	lsrs	r2, r3, #31
 801a9f4:	4413      	add	r3, r2
 801a9f6:	105b      	asrs	r3, r3, #1
 801a9f8:	00da      	lsls	r2, r3, #3
 801a9fa:	697b      	ldr	r3, [r7, #20]
 801a9fc:	4413      	add	r3, r2
 801a9fe:	330c      	adds	r3, #12
 801aa00:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 801aa02:	683b      	ldr	r3, [r7, #0]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d104      	bne.n	801aa12 <kiss_fftr_alloc+0x6a>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 801aa08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aa0a:	f000 fb75 	bl	801b0f8 <_Z9ei_mallocj>
 801aa0e:	6338      	str	r0, [r7, #48]	; 0x30
 801aa10:	e009      	b.n	801aa26 <kiss_fftr_alloc+0x7e>
    } else {
        if (*lenmem >= memneeded)
 801aa12:	683b      	ldr	r3, [r7, #0]
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801aa18:	429a      	cmp	r2, r3
 801aa1a:	d801      	bhi.n	801aa20 <kiss_fftr_alloc+0x78>
            st = (kiss_fftr_cfg) mem;
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 801aa20:	683b      	ldr	r3, [r7, #0]
 801aa22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801aa24:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 801aa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d101      	bne.n	801aa30 <kiss_fftr_alloc+0x88>
        return NULL;
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	e0ca      	b.n	801abc6 <kiss_fftr_alloc+0x21e>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 801aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa32:	f103 020c 	add.w	r2, r3, #12
 801aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa38:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 801aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa3c:	681a      	ldr	r2, [r3, #0]
 801aa3e:	697b      	ldr	r3, [r7, #20]
 801aa40:	441a      	add	r2, r3
 801aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa44:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 801aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa48:	685a      	ldr	r2, [r3, #4]
 801aa4a:	68fb      	ldr	r3, [r7, #12]
 801aa4c:	00db      	lsls	r3, r3, #3
 801aa4e:	441a      	add	r2, r3
 801aa50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa52:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 801aa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa56:	681a      	ldr	r2, [r3, #0]
 801aa58:	f107 0314 	add.w	r3, r7, #20
 801aa5c:	2100      	movs	r1, #0
 801aa5e:	9100      	str	r1, [sp, #0]
 801aa60:	68b9      	ldr	r1, [r7, #8]
 801aa62:	68f8      	ldr	r0, [r7, #12]
 801aa64:	f7ff fe78 	bl	801a758 <kiss_fft_alloc>

    if (inverse_fft) {
 801aa68:	68bb      	ldr	r3, [r7, #8]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d052      	beq.n	801ab14 <kiss_fftr_alloc+0x16c>
        for (i = 0; i < nfft/2; ++i) {
 801aa6e:	2300      	movs	r3, #0
 801aa70:	637b      	str	r3, [r7, #52]	; 0x34
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	0fda      	lsrs	r2, r3, #31
 801aa76:	4413      	add	r3, r2
 801aa78:	105b      	asrs	r3, r3, #1
 801aa7a:	461a      	mov	r2, r3
 801aa7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa7e:	4293      	cmp	r3, r2
 801aa80:	f280 809a 	bge.w	801abb8 <kiss_fftr_alloc+0x210>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 801aa84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa86:	3301      	adds	r3, #1
 801aa88:	4618      	mov	r0, r3
 801aa8a:	f7e5 fd55 	bl	8000538 <__aeabi_i2d>
 801aa8e:	4604      	mov	r4, r0
 801aa90:	460d      	mov	r5, r1
 801aa92:	68f8      	ldr	r0, [r7, #12]
 801aa94:	f7e5 fd50 	bl	8000538 <__aeabi_i2d>
 801aa98:	4602      	mov	r2, r0
 801aa9a:	460b      	mov	r3, r1
 801aa9c:	4620      	mov	r0, r4
 801aa9e:	4629      	mov	r1, r5
 801aaa0:	f7e5 fede 	bl	8000860 <__aeabi_ddiv>
 801aaa4:	4602      	mov	r2, r0
 801aaa6:	460b      	mov	r3, r1
 801aaa8:	4610      	mov	r0, r2
 801aaaa:	4619      	mov	r1, r3
 801aaac:	f04f 0200 	mov.w	r2, #0
 801aab0:	4b4c      	ldr	r3, [pc, #304]	; (801abe4 <kiss_fftr_alloc+0x23c>)
 801aab2:	f7e5 fbf5 	bl	80002a0 <__adddf3>
 801aab6:	4602      	mov	r2, r0
 801aab8:	460b      	mov	r3, r1
 801aaba:	4610      	mov	r0, r2
 801aabc:	4619      	mov	r1, r3
            double phase =
 801aabe:	a344      	add	r3, pc, #272	; (adr r3, 801abd0 <kiss_fftr_alloc+0x228>)
 801aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aac4:	f7e5 fda2 	bl	800060c <__aeabi_dmul>
 801aac8:	4602      	mov	r2, r0
 801aaca:	460b      	mov	r3, r1
 801aacc:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 801aad0:	ed97 0b06 	vldr	d0, [r7, #24]
 801aad4:	f006 f9f0 	bl	8020eb8 <cos>
 801aad8:	ec51 0b10 	vmov	r0, r1, d0
 801aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aade:	689a      	ldr	r2, [r3, #8]
 801aae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aae2:	00db      	lsls	r3, r3, #3
 801aae4:	18d4      	adds	r4, r2, r3
 801aae6:	f7e6 f889 	bl	8000bfc <__aeabi_d2f>
 801aaea:	4603      	mov	r3, r0
 801aaec:	6023      	str	r3, [r4, #0]
 801aaee:	ed97 0b06 	vldr	d0, [r7, #24]
 801aaf2:	f006 fb35 	bl	8021160 <sin>
 801aaf6:	ec51 0b10 	vmov	r0, r1, d0
 801aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aafc:	689a      	ldr	r2, [r3, #8]
 801aafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab00:	00db      	lsls	r3, r3, #3
 801ab02:	18d4      	adds	r4, r2, r3
 801ab04:	f7e6 f87a 	bl	8000bfc <__aeabi_d2f>
 801ab08:	4603      	mov	r3, r0
 801ab0a:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 801ab0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab0e:	3301      	adds	r3, #1
 801ab10:	637b      	str	r3, [r7, #52]	; 0x34
 801ab12:	e7ae      	b.n	801aa72 <kiss_fftr_alloc+0xca>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 801ab14:	2300      	movs	r3, #0
 801ab16:	637b      	str	r3, [r7, #52]	; 0x34
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	0fda      	lsrs	r2, r3, #31
 801ab1c:	4413      	add	r3, r2
 801ab1e:	105b      	asrs	r3, r3, #1
 801ab20:	461a      	mov	r2, r3
 801ab22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab24:	4293      	cmp	r3, r2
 801ab26:	da47      	bge.n	801abb8 <kiss_fftr_alloc+0x210>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 801ab28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab2a:	3301      	adds	r3, #1
 801ab2c:	4618      	mov	r0, r3
 801ab2e:	f7e5 fd03 	bl	8000538 <__aeabi_i2d>
 801ab32:	4604      	mov	r4, r0
 801ab34:	460d      	mov	r5, r1
 801ab36:	68f8      	ldr	r0, [r7, #12]
 801ab38:	f7e5 fcfe 	bl	8000538 <__aeabi_i2d>
 801ab3c:	4602      	mov	r2, r0
 801ab3e:	460b      	mov	r3, r1
 801ab40:	4620      	mov	r0, r4
 801ab42:	4629      	mov	r1, r5
 801ab44:	f7e5 fe8c 	bl	8000860 <__aeabi_ddiv>
 801ab48:	4602      	mov	r2, r0
 801ab4a:	460b      	mov	r3, r1
 801ab4c:	4610      	mov	r0, r2
 801ab4e:	4619      	mov	r1, r3
 801ab50:	f04f 0200 	mov.w	r2, #0
 801ab54:	4b23      	ldr	r3, [pc, #140]	; (801abe4 <kiss_fftr_alloc+0x23c>)
 801ab56:	f7e5 fba3 	bl	80002a0 <__adddf3>
 801ab5a:	4602      	mov	r2, r0
 801ab5c:	460b      	mov	r3, r1
 801ab5e:	4610      	mov	r0, r2
 801ab60:	4619      	mov	r1, r3
            double phase =
 801ab62:	a31d      	add	r3, pc, #116	; (adr r3, 801abd8 <kiss_fftr_alloc+0x230>)
 801ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab68:	f7e5 fd50 	bl	800060c <__aeabi_dmul>
 801ab6c:	4602      	mov	r2, r0
 801ab6e:	460b      	mov	r3, r1
 801ab70:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 801ab74:	ed97 0b08 	vldr	d0, [r7, #32]
 801ab78:	f006 f99e 	bl	8020eb8 <cos>
 801ab7c:	ec51 0b10 	vmov	r0, r1, d0
 801ab80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab82:	689a      	ldr	r2, [r3, #8]
 801ab84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab86:	00db      	lsls	r3, r3, #3
 801ab88:	18d4      	adds	r4, r2, r3
 801ab8a:	f7e6 f837 	bl	8000bfc <__aeabi_d2f>
 801ab8e:	4603      	mov	r3, r0
 801ab90:	6023      	str	r3, [r4, #0]
 801ab92:	ed97 0b08 	vldr	d0, [r7, #32]
 801ab96:	f006 fae3 	bl	8021160 <sin>
 801ab9a:	ec51 0b10 	vmov	r0, r1, d0
 801ab9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aba0:	689a      	ldr	r2, [r3, #8]
 801aba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aba4:	00db      	lsls	r3, r3, #3
 801aba6:	18d4      	adds	r4, r2, r3
 801aba8:	f7e6 f828 	bl	8000bfc <__aeabi_d2f>
 801abac:	4603      	mov	r3, r0
 801abae:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 801abb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801abb2:	3301      	adds	r3, #1
 801abb4:	637b      	str	r3, [r7, #52]	; 0x34
 801abb6:	e7af      	b.n	801ab18 <kiss_fftr_alloc+0x170>
        }
    }

    if (memallocated != NULL) {
 801abb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d002      	beq.n	801abc4 <kiss_fftr_alloc+0x21c>
        *memallocated = memneeded;
 801abbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801abc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801abc2:	601a      	str	r2, [r3, #0]
    }

    return st;
 801abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801abc6:	4618      	mov	r0, r3
 801abc8:	3738      	adds	r7, #56	; 0x38
 801abca:	46bd      	mov	sp, r7
 801abcc:	bdb0      	pop	{r4, r5, r7, pc}
 801abce:	bf00      	nop
 801abd0:	54442d18 	.word	0x54442d18
 801abd4:	400921fb 	.word	0x400921fb
 801abd8:	54442d18 	.word	0x54442d18
 801abdc:	c00921fb 	.word	0xc00921fb
 801abe0:	080288c0 	.word	0x080288c0
 801abe4:	3fe00000 	.word	0x3fe00000

0801abe8 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 801abe8:	b580      	push	{r7, lr}
 801abea:	b092      	sub	sp, #72	; 0x48
 801abec:	af00      	add	r7, sp, #0
 801abee:	60f8      	str	r0, [r7, #12]
 801abf0:	60b9      	str	r1, [r7, #8]
 801abf2:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	685b      	ldr	r3, [r3, #4]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d002      	beq.n	801ac04 <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 801abfe:	4887      	ldr	r0, [pc, #540]	; (801ae1c <kiss_fftr+0x234>)
 801ac00:	f7eb f98c 	bl	8005f1c <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	6818      	ldr	r0, [r3, #0]
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	685b      	ldr	r3, [r3, #4]
 801ac14:	461a      	mov	r2, r3
 801ac16:	68b9      	ldr	r1, [r7, #8]
 801ac18:	f7ff feb6 	bl	801a988 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	685b      	ldr	r3, [r3, #4]
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	685b      	ldr	r3, [r3, #4]
 801ac28:	685b      	ldr	r3, [r3, #4]
 801ac2a:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 801ac2c:	ed97 7a04 	vldr	s14, [r7, #16]
 801ac30:	edd7 7a05 	vldr	s15, [r7, #20]
 801ac34:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 801ac3e:	ed97 7a04 	vldr	s14, [r7, #16]
 801ac42:	edd7 7a05 	vldr	s15, [r7, #20]
 801ac46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ac48:	00db      	lsls	r3, r3, #3
 801ac4a:	687a      	ldr	r2, [r7, #4]
 801ac4c:	4413      	add	r3, r2
 801ac4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ac52:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	f04f 0200 	mov.w	r2, #0
 801ac5c:	605a      	str	r2, [r3, #4]
 801ac5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ac60:	00db      	lsls	r3, r3, #3
 801ac62:	687a      	ldr	r2, [r7, #4]
 801ac64:	4413      	add	r3, r2
 801ac66:	687a      	ldr	r2, [r7, #4]
 801ac68:	6852      	ldr	r2, [r2, #4]
 801ac6a:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 801ac6c:	2301      	movs	r3, #1
 801ac6e:	647b      	str	r3, [r7, #68]	; 0x44
 801ac70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ac72:	0fda      	lsrs	r2, r3, #31
 801ac74:	4413      	add	r3, r2
 801ac76:	105b      	asrs	r3, r3, #1
 801ac78:	461a      	mov	r2, r3
 801ac7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac7c:	4293      	cmp	r3, r2
 801ac7e:	f300 80c9 	bgt.w	801ae14 <kiss_fftr+0x22c>
        fpk    = st->tmpbuf[k];
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	685a      	ldr	r2, [r3, #4]
 801ac86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac88:	00db      	lsls	r3, r3, #3
 801ac8a:	441a      	add	r2, r3
 801ac8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ac90:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ac94:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	685a      	ldr	r2, [r3, #4]
 801ac9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801ac9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aca0:	1acb      	subs	r3, r1, r3
 801aca2:	00db      	lsls	r3, r3, #3
 801aca4:	4413      	add	r3, r2
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	685a      	ldr	r2, [r3, #4]
 801acae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801acb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801acb2:	1acb      	subs	r3, r1, r3
 801acb4:	00db      	lsls	r3, r3, #3
 801acb6:	4413      	add	r3, r2
 801acb8:	edd3 7a01 	vldr	s15, [r3, #4]
 801acbc:	eef1 7a67 	vneg.f32	s15, s15
 801acc0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 801acc4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801acc8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801accc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801acd0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801acd4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801acd8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801acdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ace0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 801ace4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801ace8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801acec:	ee77 7a67 	vsub.f32	s15, s14, s15
 801acf0:	edc7 7a08 	vstr	s15, [r7, #32]
 801acf4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801acf8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801acfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ad00:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 801ad04:	ed97 7a08 	vldr	s14, [r7, #32]
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	689a      	ldr	r2, [r3, #8]
 801ad0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ad0e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801ad12:	3b01      	subs	r3, #1
 801ad14:	00db      	lsls	r3, r3, #3
 801ad16:	4413      	add	r3, r2
 801ad18:	edd3 7a00 	vldr	s15, [r3]
 801ad1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ad20:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801ad24:	68fb      	ldr	r3, [r7, #12]
 801ad26:	689a      	ldr	r2, [r3, #8]
 801ad28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ad2a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801ad2e:	3b01      	subs	r3, #1
 801ad30:	00db      	lsls	r3, r3, #3
 801ad32:	4413      	add	r3, r2
 801ad34:	edd3 7a01 	vldr	s15, [r3, #4]
 801ad38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ad3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ad40:	edc7 7a06 	vstr	s15, [r7, #24]
 801ad44:	ed97 7a08 	vldr	s14, [r7, #32]
 801ad48:	68fb      	ldr	r3, [r7, #12]
 801ad4a:	689a      	ldr	r2, [r3, #8]
 801ad4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ad4e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801ad52:	3b01      	subs	r3, #1
 801ad54:	00db      	lsls	r3, r3, #3
 801ad56:	4413      	add	r3, r2
 801ad58:	edd3 7a01 	vldr	s15, [r3, #4]
 801ad5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ad60:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	689a      	ldr	r2, [r3, #8]
 801ad68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ad6a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801ad6e:	3b01      	subs	r3, #1
 801ad70:	00db      	lsls	r3, r3, #3
 801ad72:	4413      	add	r3, r2
 801ad74:	edd3 7a00 	vldr	s15, [r3]
 801ad78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ad7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ad80:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 801ad84:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801ad88:	edd7 7a06 	vldr	s15, [r7, #24]
 801ad8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ad90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ad92:	00db      	lsls	r3, r3, #3
 801ad94:	687a      	ldr	r2, [r7, #4]
 801ad96:	4413      	add	r3, r2
 801ad98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ad9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ada0:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 801ada4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801ada8:	edd7 7a07 	vldr	s15, [r7, #28]
 801adac:	ee77 7a27 	vadd.f32	s15, s14, s15
 801adb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801adb2:	00db      	lsls	r3, r3, #3
 801adb4:	687a      	ldr	r2, [r7, #4]
 801adb6:	4413      	add	r3, r2
 801adb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801adbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801adc0:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 801adc4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801adc8:	edd7 7a06 	vldr	s15, [r7, #24]
 801adcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801add0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801add2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801add4:	1ad3      	subs	r3, r2, r3
 801add6:	00db      	lsls	r3, r3, #3
 801add8:	687a      	ldr	r2, [r7, #4]
 801adda:	4413      	add	r3, r2
 801addc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ade0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ade4:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 801ade8:	ed97 7a07 	vldr	s14, [r7, #28]
 801adec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801adf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801adf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801adf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801adf8:	1ad3      	subs	r3, r2, r3
 801adfa:	00db      	lsls	r3, r3, #3
 801adfc:	687a      	ldr	r2, [r7, #4]
 801adfe:	4413      	add	r3, r2
 801ae00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ae04:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ae08:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 801ae0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ae0e:	3301      	adds	r3, #1
 801ae10:	647b      	str	r3, [r7, #68]	; 0x44
 801ae12:	e72d      	b.n	801ac70 <kiss_fftr+0x88>
    }
}
 801ae14:	bf00      	nop
 801ae16:	3748      	adds	r7, #72	; 0x48
 801ae18:	46bd      	mov	sp, r7
 801ae1a:	bd80      	pop	{r7, pc}
 801ae1c:	080288dc 	.word	0x080288dc

0801ae20 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b082      	sub	sp, #8
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	ed87 0a01 	vstr	s0, [r7, #4]
 801ae2a:	ed97 0a01 	vldr	s0, [r7, #4]
 801ae2e:	f006 fb3f 	bl	80214b0 <log10f>
 801ae32:	eef0 7a40 	vmov.f32	s15, s0
 801ae36:	eeb0 0a67 	vmov.f32	s0, s15
 801ae3a:	3708      	adds	r7, #8
 801ae3c:	46bd      	mov	sp, r7
 801ae3e:	bd80      	pop	{r7, pc}

0801ae40 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 801ae40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae42:	b083      	sub	sp, #12
 801ae44:	af00      	add	r7, sp, #0
 801ae46:	ed87 0b00 	vstr	d0, [r7]
 801ae4a:	683c      	ldr	r4, [r7, #0]
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801ae52:	2301      	movs	r3, #1
 801ae54:	461e      	mov	r6, r3
 801ae56:	f04f 32ff 	mov.w	r2, #4294967295
 801ae5a:	4b10      	ldr	r3, [pc, #64]	; (801ae9c <_ZSt5isinfd+0x5c>)
 801ae5c:	4620      	mov	r0, r4
 801ae5e:	4629      	mov	r1, r5
 801ae60:	f7e5 fe6e 	bl	8000b40 <__aeabi_dcmpun>
 801ae64:	4603      	mov	r3, r0
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d10b      	bne.n	801ae82 <_ZSt5isinfd+0x42>
 801ae6a:	f04f 32ff 	mov.w	r2, #4294967295
 801ae6e:	4b0b      	ldr	r3, [pc, #44]	; (801ae9c <_ZSt5isinfd+0x5c>)
 801ae70:	4620      	mov	r0, r4
 801ae72:	4629      	mov	r1, r5
 801ae74:	f7e5 fe46 	bl	8000b04 <__aeabi_dcmple>
 801ae78:	4603      	mov	r3, r0
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d101      	bne.n	801ae82 <_ZSt5isinfd+0x42>
 801ae7e:	2300      	movs	r3, #0
 801ae80:	461e      	mov	r6, r3
 801ae82:	b2f3      	uxtb	r3, r6
 801ae84:	f083 0301 	eor.w	r3, r3, #1
 801ae88:	b2db      	uxtb	r3, r3
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	bf14      	ite	ne
 801ae8e:	2301      	movne	r3, #1
 801ae90:	2300      	moveq	r3, #0
 801ae92:	b2db      	uxtb	r3, r3
 801ae94:	4618      	mov	r0, r3
 801ae96:	370c      	adds	r7, #12
 801ae98:	46bd      	mov	sp, r7
 801ae9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae9c:	7fefffff 	.word	0x7fefffff

0801aea0 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 801aea0:	b480      	push	{r7}
 801aea2:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 801aea4:	2300      	movs	r3, #0
}
 801aea6:	4618      	mov	r0, r3
 801aea8:	46bd      	mov	sp, r7
 801aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeae:	4770      	bx	lr

0801aeb0 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 801aeb0:	b5b0      	push	{r4, r5, r7, lr}
 801aeb2:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 801aeb4:	f7ee fa52 	bl	800935c <HAL_GetTick>
 801aeb8:	4603      	mov	r3, r0
 801aeba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aebe:	fb02 f303 	mul.w	r3, r2, r3
 801aec2:	2200      	movs	r2, #0
 801aec4:	461c      	mov	r4, r3
 801aec6:	4615      	mov	r5, r2
 801aec8:	4622      	mov	r2, r4
 801aeca:	462b      	mov	r3, r5
}
 801aecc:	4610      	mov	r0, r2
 801aece:	4619      	mov	r1, r3
 801aed0:	bdb0      	pop	{r4, r5, r7, pc}
 801aed2:	0000      	movs	r0, r0
 801aed4:	0000      	movs	r0, r0
	...

0801aed8 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 801aed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aedc:	b08c      	sub	sp, #48	; 0x30
 801aede:	af00      	add	r7, sp, #0
 801aee0:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 801aee4:	466b      	mov	r3, sp
 801aee6:	4698      	mov	r8, r3
    float n = f;
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 801aeec:	4b7e      	ldr	r3, [pc, #504]	; (801b0e8 <_Z15ei_printf_floatf+0x210>)
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	1e5e      	subs	r6, r3, #1
 801aef2:	623e      	str	r6, [r7, #32]
 801aef4:	4633      	mov	r3, r6
 801aef6:	3301      	adds	r3, #1
 801aef8:	2200      	movs	r2, #0
 801aefa:	461c      	mov	r4, r3
 801aefc:	4615      	mov	r5, r2
 801aefe:	f04f 0200 	mov.w	r2, #0
 801af02:	f04f 0300 	mov.w	r3, #0
 801af06:	00eb      	lsls	r3, r5, #3
 801af08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801af0c:	00e2      	lsls	r2, r4, #3
 801af0e:	4633      	mov	r3, r6
 801af10:	3301      	adds	r3, #1
 801af12:	2200      	movs	r2, #0
 801af14:	4618      	mov	r0, r3
 801af16:	4611      	mov	r1, r2
 801af18:	f04f 0200 	mov.w	r2, #0
 801af1c:	f04f 0300 	mov.w	r3, #0
 801af20:	00cb      	lsls	r3, r1, #3
 801af22:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801af26:	00c2      	lsls	r2, r0, #3
 801af28:	4633      	mov	r3, r6
 801af2a:	3301      	adds	r3, #1
 801af2c:	3307      	adds	r3, #7
 801af2e:	08db      	lsrs	r3, r3, #3
 801af30:	00db      	lsls	r3, r3, #3
 801af32:	ebad 0d03 	sub.w	sp, sp, r3
 801af36:	466b      	mov	r3, sp
 801af38:	3300      	adds	r3, #0
 801af3a:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 801af3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801af40:	eef5 7a40 	vcmp.f32	s15, #0.0
 801af44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af48:	d106      	bne.n	801af58 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 801af4a:	69fb      	ldr	r3, [r7, #28]
 801af4c:	4967      	ldr	r1, [pc, #412]	; (801b0ec <_Z15ei_printf_floatf+0x214>)
 801af4e:	461a      	mov	r2, r3
 801af50:	460b      	mov	r3, r1
 801af52:	881b      	ldrh	r3, [r3, #0]
 801af54:	8013      	strh	r3, [r2, #0]
 801af56:	e0b6      	b.n	801b0c6 <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 801af58:	69fb      	ldr	r3, [r7, #28]
 801af5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 801af5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801af60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801af64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af68:	bf4c      	ite	mi
 801af6a:	2301      	movmi	r3, #1
 801af6c:	2300      	movpl	r3, #0
 801af6e:	b2db      	uxtb	r3, r3
 801af70:	61bb      	str	r3, [r7, #24]
        if (neg) {
 801af72:	69bb      	ldr	r3, [r7, #24]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d005      	beq.n	801af84 <_Z15ei_printf_floatf+0xac>
            n = -n;
 801af78:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801af7c:	eef1 7a67 	vneg.f32	s15, s15
 801af80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 801af84:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 801af88:	f7ff ff4a 	bl	801ae20 <_ZSt5log10f>
 801af8c:	eef0 7a40 	vmov.f32	s15, s0
 801af90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af94:	ee17 3a90 	vmov	r3, s15
 801af98:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 801af9a:	69bb      	ldr	r3, [r7, #24]
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d004      	beq.n	801afaa <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 801afa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afa2:	1c5a      	adds	r2, r3, #1
 801afa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801afa6:	222d      	movs	r2, #45	; 0x2d
 801afa8:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 801afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afac:	2b00      	cmp	r3, #0
 801afae:	dc01      	bgt.n	801afb4 <_Z15ei_printf_floatf+0xdc>
            m = 0;
 801afb0:	2300      	movs	r3, #0
 801afb2:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 801afb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801afb6:	f7e5 fad1 	bl	800055c <__aeabi_f2d>
 801afba:	4b4d      	ldr	r3, [pc, #308]	; (801b0f0 <_Z15ei_printf_floatf+0x218>)
 801afbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afc0:	2401      	movs	r4, #1
 801afc2:	f7e5 fdb3 	bl	8000b2c <__aeabi_dcmpgt>
 801afc6:	4603      	mov	r3, r0
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d101      	bne.n	801afd0 <_Z15ei_printf_floatf+0xf8>
 801afcc:	2300      	movs	r3, #0
 801afce:	461c      	mov	r4, r3
 801afd0:	b2e3      	uxtb	r3, r4
 801afd2:	f083 0301 	eor.w	r3, r3, #1
 801afd6:	b2db      	uxtb	r3, r3
 801afd8:	2b00      	cmp	r3, #0
 801afda:	d002      	beq.n	801afe2 <_Z15ei_printf_floatf+0x10a>
 801afdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afde:	2b00      	cmp	r3, #0
 801afe0:	db6e      	blt.n	801b0c0 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 801afe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801afe4:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 801b0e0 <_Z15ei_printf_floatf+0x208>
 801afe8:	f000 f8ab 	bl	801b142 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 801afec:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 801aff0:	f04f 0200 	mov.w	r2, #0
 801aff4:	f04f 0300 	mov.w	r3, #0
 801aff8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801affc:	f7e5 fd96 	bl	8000b2c <__aeabi_dcmpgt>
 801b000:	4603      	mov	r3, r0
 801b002:	2b00      	cmp	r3, #0
 801b004:	d00b      	beq.n	801b01e <_Z15ei_printf_floatf+0x146>
 801b006:	ed97 0b04 	vldr	d0, [r7, #16]
 801b00a:	f7ff ff19 	bl	801ae40 <_ZSt5isinfd>
 801b00e:	4603      	mov	r3, r0
 801b010:	f083 0301 	eor.w	r3, r3, #1
 801b014:	b2db      	uxtb	r3, r3
 801b016:	2b00      	cmp	r3, #0
 801b018:	d001      	beq.n	801b01e <_Z15ei_printf_floatf+0x146>
 801b01a:	2301      	movs	r3, #1
 801b01c:	e000      	b.n	801b020 <_Z15ei_printf_floatf+0x148>
 801b01e:	2300      	movs	r3, #0
 801b020:	2b00      	cmp	r3, #0
 801b022:	d03a      	beq.n	801b09a <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 801b024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b026:	f7e5 fa99 	bl	800055c <__aeabi_f2d>
 801b02a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801b02e:	f7e5 fc17 	bl	8000860 <__aeabi_ddiv>
 801b032:	4602      	mov	r2, r0
 801b034:	460b      	mov	r3, r1
 801b036:	ec43 2b17 	vmov	d7, r2, r3
 801b03a:	eeb0 0a47 	vmov.f32	s0, s14
 801b03e:	eef0 0a67 	vmov.f32	s1, s15
 801b042:	f005 ff8d 	bl	8020f60 <floor>
 801b046:	ec53 2b10 	vmov	r2, r3, d0
 801b04a:	4610      	mov	r0, r2
 801b04c:	4619      	mov	r1, r3
 801b04e:	f7e5 fd8d 	bl	8000b6c <__aeabi_d2iz>
 801b052:	4603      	mov	r3, r0
 801b054:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 801b056:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b058:	f7e5 fa80 	bl	800055c <__aeabi_f2d>
 801b05c:	4604      	mov	r4, r0
 801b05e:	460d      	mov	r5, r1
 801b060:	68f8      	ldr	r0, [r7, #12]
 801b062:	f7e5 fa69 	bl	8000538 <__aeabi_i2d>
 801b066:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801b06a:	f7e5 facf 	bl	800060c <__aeabi_dmul>
 801b06e:	4602      	mov	r2, r0
 801b070:	460b      	mov	r3, r1
 801b072:	4620      	mov	r0, r4
 801b074:	4629      	mov	r1, r5
 801b076:	f7e5 f911 	bl	800029c <__aeabi_dsub>
 801b07a:	4602      	mov	r2, r0
 801b07c:	460b      	mov	r3, r1
 801b07e:	4610      	mov	r0, r2
 801b080:	4619      	mov	r1, r3
 801b082:	f7e5 fdbb 	bl	8000bfc <__aeabi_d2f>
 801b086:	4603      	mov	r3, r0
 801b088:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	b2da      	uxtb	r2, r3
 801b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b090:	1c59      	adds	r1, r3, #1
 801b092:	62f9      	str	r1, [r7, #44]	; 0x2c
 801b094:	3230      	adds	r2, #48	; 0x30
 801b096:	b2d2      	uxtb	r2, r2
 801b098:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 801b09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d10b      	bne.n	801b0b8 <_Z15ei_printf_floatf+0x1e0>
 801b0a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801b0a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0ac:	dd04      	ble.n	801b0b8 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 801b0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0b0:	1c5a      	adds	r2, r3, #1
 801b0b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b0b4:	222e      	movs	r2, #46	; 0x2e
 801b0b6:	701a      	strb	r2, [r3, #0]
            m--;
 801b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0ba:	3b01      	subs	r3, #1
 801b0bc:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 801b0be:	e779      	b.n	801afb4 <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 801b0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 801b0c6:	69f9      	ldr	r1, [r7, #28]
 801b0c8:	480a      	ldr	r0, [pc, #40]	; (801b0f4 <_Z15ei_printf_floatf+0x21c>)
 801b0ca:	f7ea ff27 	bl	8005f1c <_Z9ei_printfPKcz>
 801b0ce:	46c5      	mov	sp, r8
}
 801b0d0:	bf00      	nop
 801b0d2:	3730      	adds	r7, #48	; 0x30
 801b0d4:	46bd      	mov	sp, r7
 801b0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0da:	bf00      	nop
 801b0dc:	f3af 8000 	nop.w
 801b0e0:	00000000 	.word	0x00000000
 801b0e4:	40240000 	.word	0x40240000
 801b0e8:	20000110 	.word	0x20000110
 801b0ec:	08028904 	.word	0x08028904
 801b0f0:	20000108 	.word	0x20000108
 801b0f4:	08028908 	.word	0x08028908

0801b0f8 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 801b0f8:	b580      	push	{r7, lr}
 801b0fa:	b082      	sub	sp, #8
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	6078      	str	r0, [r7, #4]
    return malloc(size);
 801b100:	6878      	ldr	r0, [r7, #4]
 801b102:	f008 fc85 	bl	8023a10 <malloc>
 801b106:	4603      	mov	r3, r0
}
 801b108:	4618      	mov	r0, r3
 801b10a:	3708      	adds	r7, #8
 801b10c:	46bd      	mov	sp, r7
 801b10e:	bd80      	pop	{r7, pc}

0801b110 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 801b110:	b580      	push	{r7, lr}
 801b112:	b082      	sub	sp, #8
 801b114:	af00      	add	r7, sp, #0
 801b116:	6078      	str	r0, [r7, #4]
 801b118:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 801b11a:	6839      	ldr	r1, [r7, #0]
 801b11c:	6878      	ldr	r0, [r7, #4]
 801b11e:	f008 fc2f 	bl	8023980 <calloc>
 801b122:	4603      	mov	r3, r0
}
 801b124:	4618      	mov	r0, r3
 801b126:	3708      	adds	r7, #8
 801b128:	46bd      	mov	sp, r7
 801b12a:	bd80      	pop	{r7, pc}

0801b12c <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b082      	sub	sp, #8
 801b130:	af00      	add	r7, sp, #0
 801b132:	6078      	str	r0, [r7, #4]
    free(ptr);
 801b134:	6878      	ldr	r0, [r7, #4]
 801b136:	f008 fc73 	bl	8023a20 <free>
}
 801b13a:	bf00      	nop
 801b13c:	3708      	adds	r7, #8
 801b13e:	46bd      	mov	sp, r7
 801b140:	bd80      	pop	{r7, pc}

0801b142 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 801b142:	b580      	push	{r7, lr}
 801b144:	b084      	sub	sp, #16
 801b146:	af00      	add	r7, sp, #0
 801b148:	ed87 0b02 	vstr	d0, [r7, #8]
 801b14c:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 801b14e:	6878      	ldr	r0, [r7, #4]
 801b150:	f7e5 f9f2 	bl	8000538 <__aeabi_i2d>
 801b154:	4602      	mov	r2, r0
 801b156:	460b      	mov	r3, r1
 801b158:	ec43 2b11 	vmov	d1, r2, r3
 801b15c:	ed97 0b02 	vldr	d0, [r7, #8]
 801b160:	f006 f8d4 	bl	802130c <pow>
 801b164:	eeb0 7a40 	vmov.f32	s14, s0
 801b168:	eef0 7a60 	vmov.f32	s15, s1
    }
 801b16c:	eeb0 0a47 	vmov.f32	s0, s14
 801b170:	eef0 0a67 	vmov.f32	s1, s15
 801b174:	3710      	adds	r7, #16
 801b176:	46bd      	mov	sp, r7
 801b178:	bd80      	pop	{r7, pc}
	...

0801b17c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801b17c:	b480      	push	{r7}
 801b17e:	b083      	sub	sp, #12
 801b180:	af00      	add	r7, sp, #0
 801b182:	4603      	mov	r3, r0
 801b184:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 801b186:	79fb      	ldrb	r3, [r7, #7]
 801b188:	2b10      	cmp	r3, #16
 801b18a:	d847      	bhi.n	801b21c <TfLiteTypeGetName+0xa0>
 801b18c:	a201      	add	r2, pc, #4	; (adr r2, 801b194 <TfLiteTypeGetName+0x18>)
 801b18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b192:	bf00      	nop
 801b194:	0801b1d9 	.word	0x0801b1d9
 801b198:	0801b1dd 	.word	0x0801b1dd
 801b19c:	0801b1e5 	.word	0x0801b1e5
 801b1a0:	0801b1ed 	.word	0x0801b1ed
 801b1a4:	0801b1f5 	.word	0x0801b1f5
 801b1a8:	0801b209 	.word	0x0801b209
 801b1ac:	0801b1fd 	.word	0x0801b1fd
 801b1b0:	0801b1e1 	.word	0x0801b1e1
 801b1b4:	0801b201 	.word	0x0801b201
 801b1b8:	0801b1f1 	.word	0x0801b1f1
 801b1bc:	0801b20d 	.word	0x0801b20d
 801b1c0:	0801b211 	.word	0x0801b211
 801b1c4:	0801b205 	.word	0x0801b205
 801b1c8:	0801b1f9 	.word	0x0801b1f9
 801b1cc:	0801b215 	.word	0x0801b215
 801b1d0:	0801b219 	.word	0x0801b219
 801b1d4:	0801b1e9 	.word	0x0801b1e9
    case kTfLiteNoType:
      return "NOTYPE";
 801b1d8:	4b14      	ldr	r3, [pc, #80]	; (801b22c <TfLiteTypeGetName+0xb0>)
 801b1da:	e020      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 801b1dc:	4b14      	ldr	r3, [pc, #80]	; (801b230 <TfLiteTypeGetName+0xb4>)
 801b1de:	e01e      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 801b1e0:	4b14      	ldr	r3, [pc, #80]	; (801b234 <TfLiteTypeGetName+0xb8>)
 801b1e2:	e01c      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 801b1e4:	4b14      	ldr	r3, [pc, #80]	; (801b238 <TfLiteTypeGetName+0xbc>)
 801b1e6:	e01a      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 801b1e8:	4b14      	ldr	r3, [pc, #80]	; (801b23c <TfLiteTypeGetName+0xc0>)
 801b1ea:	e018      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 801b1ec:	4b14      	ldr	r3, [pc, #80]	; (801b240 <TfLiteTypeGetName+0xc4>)
 801b1ee:	e016      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 801b1f0:	4b14      	ldr	r3, [pc, #80]	; (801b244 <TfLiteTypeGetName+0xc8>)
 801b1f2:	e014      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 801b1f4:	4b14      	ldr	r3, [pc, #80]	; (801b248 <TfLiteTypeGetName+0xcc>)
 801b1f6:	e012      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 801b1f8:	4b14      	ldr	r3, [pc, #80]	; (801b24c <TfLiteTypeGetName+0xd0>)
 801b1fa:	e010      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 801b1fc:	4b14      	ldr	r3, [pc, #80]	; (801b250 <TfLiteTypeGetName+0xd4>)
 801b1fe:	e00e      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 801b200:	4b14      	ldr	r3, [pc, #80]	; (801b254 <TfLiteTypeGetName+0xd8>)
 801b202:	e00c      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 801b204:	4b14      	ldr	r3, [pc, #80]	; (801b258 <TfLiteTypeGetName+0xdc>)
 801b206:	e00a      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 801b208:	4b14      	ldr	r3, [pc, #80]	; (801b25c <TfLiteTypeGetName+0xe0>)
 801b20a:	e008      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 801b20c:	4b14      	ldr	r3, [pc, #80]	; (801b260 <TfLiteTypeGetName+0xe4>)
 801b20e:	e006      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 801b210:	4b14      	ldr	r3, [pc, #80]	; (801b264 <TfLiteTypeGetName+0xe8>)
 801b212:	e004      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 801b214:	4b14      	ldr	r3, [pc, #80]	; (801b268 <TfLiteTypeGetName+0xec>)
 801b216:	e002      	b.n	801b21e <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 801b218:	4b14      	ldr	r3, [pc, #80]	; (801b26c <TfLiteTypeGetName+0xf0>)
 801b21a:	e000      	b.n	801b21e <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 801b21c:	4b14      	ldr	r3, [pc, #80]	; (801b270 <TfLiteTypeGetName+0xf4>)
}
 801b21e:	4618      	mov	r0, r3
 801b220:	370c      	adds	r7, #12
 801b222:	46bd      	mov	sp, r7
 801b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b228:	4770      	bx	lr
 801b22a:	bf00      	nop
 801b22c:	0802890c 	.word	0x0802890c
 801b230:	08028914 	.word	0x08028914
 801b234:	0802891c 	.word	0x0802891c
 801b238:	08028924 	.word	0x08028924
 801b23c:	0802892c 	.word	0x0802892c
 801b240:	08028934 	.word	0x08028934
 801b244:	0802893c 	.word	0x0802893c
 801b248:	08028944 	.word	0x08028944
 801b24c:	0802894c 	.word	0x0802894c
 801b250:	08028954 	.word	0x08028954
 801b254:	0802895c 	.word	0x0802895c
 801b258:	08028968 	.word	0x08028968
 801b25c:	08028974 	.word	0x08028974
 801b260:	0802897c 	.word	0x0802897c
 801b264:	08028984 	.word	0x08028984
 801b268:	0802898c 	.word	0x0802898c
 801b26c:	08028998 	.word	0x08028998
 801b270:	080289a0 	.word	0x080289a0

0801b274 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 801b274:	b480      	push	{r7}
 801b276:	af00      	add	r7, sp, #0
 801b278:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b27c:	4618      	mov	r0, r3
 801b27e:	46bd      	mov	sp, r7
 801b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b284:	4770      	bx	lr
	...

0801b288 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 801b288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b28c:	b088      	sub	sp, #32
 801b28e:	af00      	add	r7, sp, #0
 801b290:	ed87 0b02 	vstr	d0, [r7, #8]
 801b294:	6078      	str	r0, [r7, #4]
 801b296:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 801b298:	f04f 0200 	mov.w	r2, #0
 801b29c:	f04f 0300 	mov.w	r3, #0
 801b2a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801b2a4:	f7e5 fc1a 	bl	8000adc <__aeabi_dcmpeq>
 801b2a8:	4603      	mov	r3, r0
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d006      	beq.n	801b2bc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	2200      	movs	r2, #0
 801b2b2:	601a      	str	r2, [r3, #0]
    *shift = 0;
 801b2b4:	683b      	ldr	r3, [r7, #0]
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	601a      	str	r2, [r3, #0]
    return;
 801b2ba:	e068      	b.n	801b38e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 801b2bc:	6838      	ldr	r0, [r7, #0]
 801b2be:	ed97 0b02 	vldr	d0, [r7, #8]
 801b2c2:	f005 fecd 	bl	8021060 <frexp>
 801b2c6:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 801b2ca:	f04f 0200 	mov.w	r2, #0
 801b2ce:	4b32      	ldr	r3, [pc, #200]	; (801b398 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 801b2d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b2d4:	f7e5 f99a 	bl	800060c <__aeabi_dmul>
 801b2d8:	4602      	mov	r2, r0
 801b2da:	460b      	mov	r3, r1
 801b2dc:	ec43 2b17 	vmov	d7, r2, r3
 801b2e0:	eeb0 0a47 	vmov.f32	s0, s14
 801b2e4:	eef0 0a67 	vmov.f32	s1, s15
 801b2e8:	f000 f962 	bl	801b5b0 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 801b2ec:	ec53 2b10 	vmov	r2, r3, d0
 801b2f0:	4610      	mov	r0, r2
 801b2f2:	4619      	mov	r1, r3
 801b2f4:	f7e5 fd3a 	bl	8000d6c <__aeabi_d2lz>
 801b2f8:	4602      	mov	r2, r0
 801b2fa:	460b      	mov	r3, r1
 801b2fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 801b300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b304:	4925      	ldr	r1, [pc, #148]	; (801b39c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 801b306:	428a      	cmp	r2, r1
 801b308:	f173 0300 	sbcs.w	r3, r3, #0
 801b30c:	db01      	blt.n	801b312 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 801b30e:	f008 fb0d 	bl	802392c <abort>
  if (q_fixed == (1ll << 31)) {
 801b312:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b316:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 801b31a:	430b      	orrs	r3, r1
 801b31c:	d118      	bne.n	801b350 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 801b31e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b322:	0fd9      	lsrs	r1, r3, #31
 801b324:	2000      	movs	r0, #0
 801b326:	468a      	mov	sl, r1
 801b328:	4683      	mov	fp, r0
 801b32a:	eb1a 0402 	adds.w	r4, sl, r2
 801b32e:	eb4b 0503 	adc.w	r5, fp, r3
 801b332:	f04f 0200 	mov.w	r2, #0
 801b336:	f04f 0300 	mov.w	r3, #0
 801b33a:	0862      	lsrs	r2, r4, #1
 801b33c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801b340:	106b      	asrs	r3, r5, #1
 801b342:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 801b346:	683b      	ldr	r3, [r7, #0]
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	1c5a      	adds	r2, r3, #1
 801b34c:	683b      	ldr	r3, [r7, #0]
 801b34e:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 801b350:	f7ff ff90 	bl	801b274 <_ZNSt14numeric_limitsIlE3maxEv>
 801b354:	4603      	mov	r3, r0
 801b356:	17da      	asrs	r2, r3, #31
 801b358:	4698      	mov	r8, r3
 801b35a:	4691      	mov	r9, r2
 801b35c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b360:	4590      	cmp	r8, r2
 801b362:	eb79 0303 	sbcs.w	r3, r9, r3
 801b366:	da01      	bge.n	801b36c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 801b368:	f008 fae0 	bl	802392c <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 801b36c:	683b      	ldr	r3, [r7, #0]
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	f113 0f1f 	cmn.w	r3, #31
 801b374:	da08      	bge.n	801b388 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 801b376:	683b      	ldr	r3, [r7, #0]
 801b378:	2200      	movs	r2, #0
 801b37a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 801b37c:	f04f 0200 	mov.w	r2, #0
 801b380:	f04f 0300 	mov.w	r3, #0
 801b384:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 801b388:	69ba      	ldr	r2, [r7, #24]
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	601a      	str	r2, [r3, #0]
}
 801b38e:	3720      	adds	r7, #32
 801b390:	46bd      	mov	sp, r7
 801b392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801b396:	bf00      	nop
 801b398:	41e00000 	.word	0x41e00000
 801b39c:	80000001 	.word	0x80000001

0801b3a0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b084      	sub	sp, #16
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	ed87 0b02 	vstr	d0, [r7, #8]
 801b3aa:	6078      	str	r0, [r7, #4]
 801b3ac:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 801b3ae:	f04f 0200 	mov.w	r2, #0
 801b3b2:	4b0d      	ldr	r3, [pc, #52]	; (801b3e8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 801b3b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801b3b8:	f7e5 fbb8 	bl	8000b2c <__aeabi_dcmpgt>
 801b3bc:	4603      	mov	r3, r0
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d101      	bne.n	801b3c6 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 801b3c2:	f008 fab3 	bl	802392c <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 801b3c6:	6839      	ldr	r1, [r7, #0]
 801b3c8:	6878      	ldr	r0, [r7, #4]
 801b3ca:	ed97 0b02 	vldr	d0, [r7, #8]
 801b3ce:	f7ff ff5b 	bl	801b288 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 801b3d2:	683b      	ldr	r3, [r7, #0]
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	da01      	bge.n	801b3de <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 801b3da:	f008 faa7 	bl	802392c <abort>
}
 801b3de:	bf00      	nop
 801b3e0:	3710      	adds	r7, #16
 801b3e2:	46bd      	mov	sp, r7
 801b3e4:	bd80      	pop	{r7, pc}
 801b3e6:	bf00      	nop
 801b3e8:	3ff00000 	.word	0x3ff00000

0801b3ec <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	b082      	sub	sp, #8
 801b3f0:	af00      	add	r7, sp, #0
 801b3f2:	6078      	str	r0, [r7, #4]
 801b3f4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801b3f6:	683b      	ldr	r3, [r7, #0]
 801b3f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b402:	f7e5 fb75 	bl	8000af0 <__aeabi_dcmplt>
 801b406:	4603      	mov	r3, r0
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d001      	beq.n	801b410 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 801b40c:	683b      	ldr	r3, [r7, #0]
 801b40e:	e000      	b.n	801b412 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 801b410:	687b      	ldr	r3, [r7, #4]
    }
 801b412:	4618      	mov	r0, r3
 801b414:	3708      	adds	r7, #8
 801b416:	46bd      	mov	sp, r7
 801b418:	bd80      	pop	{r7, pc}
 801b41a:	0000      	movs	r0, r0
 801b41c:	0000      	movs	r0, r0
	...

0801b420 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 801b420:	b5b0      	push	{r4, r5, r7, lr}
 801b422:	b08e      	sub	sp, #56	; 0x38
 801b424:	af00      	add	r7, sp, #0
 801b426:	ed87 0b06 	vstr	d0, [r7, #24]
 801b42a:	ed87 1b04 	vstr	d1, [r7, #16]
 801b42e:	60f8      	str	r0, [r7, #12]
 801b430:	60b9      	str	r1, [r7, #8]
 801b432:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 801b434:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801b438:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801b43c:	f7e5 f8e6 	bl	800060c <__aeabi_dmul>
 801b440:	4602      	mov	r2, r0
 801b442:	460b      	mov	r3, r1
 801b444:	4614      	mov	r4, r2
 801b446:	461d      	mov	r5, r3
 801b448:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b44c:	68fb      	ldr	r3, [r7, #12]
 801b44e:	fa22 f303 	lsr.w	r3, r2, r3
 801b452:	4618      	mov	r0, r3
 801b454:	f7e5 f870 	bl	8000538 <__aeabi_i2d>
 801b458:	4602      	mov	r2, r0
 801b45a:	460b      	mov	r3, r1
 801b45c:	4620      	mov	r0, r4
 801b45e:	4629      	mov	r1, r5
 801b460:	f7e5 f8d4 	bl	800060c <__aeabi_dmul>
 801b464:	4602      	mov	r2, r0
 801b466:	460b      	mov	r3, r1
 801b468:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801b46c:	a30e      	add	r3, pc, #56	; (adr r3, 801b4a8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 801b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b472:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801b476:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b47a:	f107 0320 	add.w	r3, r7, #32
 801b47e:	4611      	mov	r1, r2
 801b480:	4618      	mov	r0, r3
 801b482:	f7ff ffb3 	bl	801b3ec <_ZSt3minIdERKT_S2_S2_>
 801b486:	4603      	mov	r3, r0
 801b488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b48c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 801b490:	6879      	ldr	r1, [r7, #4]
 801b492:	68b8      	ldr	r0, [r7, #8]
 801b494:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801b498:	f7ff ff82 	bl	801b3a0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 801b49c:	bf00      	nop
 801b49e:	3738      	adds	r7, #56	; 0x38
 801b4a0:	46bd      	mov	sp, r7
 801b4a2:	bdb0      	pop	{r4, r5, r7, pc}
 801b4a4:	f3af 8000 	nop.w
 801b4a8:	ffc00000 	.word	0xffc00000
 801b4ac:	41dfffff 	.word	0x41dfffff

0801b4b0 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 801b4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4b4:	b087      	sub	sp, #28
 801b4b6:	af00      	add	r7, sp, #0
 801b4b8:	60f8      	str	r0, [r7, #12]
 801b4ba:	60b9      	str	r1, [r7, #8]
 801b4bc:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 801b4be:	2201      	movs	r2, #1
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	fa02 f303 	lsl.w	r3, r2, r3
 801b4c6:	3b01      	subs	r3, #1
 801b4c8:	4618      	mov	r0, r3
 801b4ca:	f7e5 f835 	bl	8000538 <__aeabi_i2d>
 801b4ce:	4682      	mov	sl, r0
 801b4d0:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801b4d2:	687a      	ldr	r2, [r7, #4]
 801b4d4:	68fb      	ldr	r3, [r7, #12]
 801b4d6:	1ad1      	subs	r1, r2, r3
 801b4d8:	f04f 0201 	mov.w	r2, #1
 801b4dc:	f04f 0300 	mov.w	r3, #0
 801b4e0:	f1a1 0620 	sub.w	r6, r1, #32
 801b4e4:	f1c1 0020 	rsb	r0, r1, #32
 801b4e8:	fa03 f901 	lsl.w	r9, r3, r1
 801b4ec:	fa02 f606 	lsl.w	r6, r2, r6
 801b4f0:	ea49 0906 	orr.w	r9, r9, r6
 801b4f4:	fa22 f000 	lsr.w	r0, r2, r0
 801b4f8:	ea49 0900 	orr.w	r9, r9, r0
 801b4fc:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 801b500:	4640      	mov	r0, r8
 801b502:	4649      	mov	r1, r9
 801b504:	f7e5 f854 	bl	80005b0 <__aeabi_l2d>
 801b508:	4602      	mov	r2, r0
 801b50a:	460b      	mov	r3, r1
 801b50c:	4650      	mov	r0, sl
 801b50e:	4659      	mov	r1, fp
 801b510:	f7e5 f87c 	bl	800060c <__aeabi_dmul>
 801b514:	4602      	mov	r2, r0
 801b516:	460b      	mov	r3, r1
 801b518:	4690      	mov	r8, r2
 801b51a:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 801b51c:	f04f 0201 	mov.w	r2, #1
 801b520:	f04f 0300 	mov.w	r3, #0
 801b524:	68b9      	ldr	r1, [r7, #8]
 801b526:	f1a1 0620 	sub.w	r6, r1, #32
 801b52a:	f1c1 0020 	rsb	r0, r1, #32
 801b52e:	fa03 f501 	lsl.w	r5, r3, r1
 801b532:	fa02 f606 	lsl.w	r6, r2, r6
 801b536:	4335      	orrs	r5, r6
 801b538:	fa22 f000 	lsr.w	r0, r2, r0
 801b53c:	4305      	orrs	r5, r0
 801b53e:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801b542:	4620      	mov	r0, r4
 801b544:	4629      	mov	r1, r5
 801b546:	f7e5 f833 	bl	80005b0 <__aeabi_l2d>
 801b54a:	4602      	mov	r2, r0
 801b54c:	460b      	mov	r3, r1
  const double max_input_rescaled =
 801b54e:	4640      	mov	r0, r8
 801b550:	4649      	mov	r1, r9
 801b552:	f7e5 f985 	bl	8000860 <__aeabi_ddiv>
 801b556:	4602      	mov	r2, r0
 801b558:	460b      	mov	r3, r1
 801b55a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 801b55e:	ed97 0b04 	vldr	d0, [r7, #16]
 801b562:	f005 fcfd 	bl	8020f60 <floor>
 801b566:	ec53 2b10 	vmov	r2, r3, d0
 801b56a:	4610      	mov	r0, r2
 801b56c:	4619      	mov	r1, r3
 801b56e:	f7e5 fafd 	bl	8000b6c <__aeabi_d2iz>
 801b572:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 801b574:	4618      	mov	r0, r3
 801b576:	371c      	adds	r7, #28
 801b578:	46bd      	mov	sp, r7
 801b57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b57e <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801b57e:	b480      	push	{r7}
 801b580:	b083      	sub	sp, #12
 801b582:	af00      	add	r7, sp, #0
 801b584:	6078      	str	r0, [r7, #4]
 801b586:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801b588:	683b      	ldr	r3, [r7, #0]
 801b58a:	ed93 7a00 	vldr	s14, [r3]
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	edd3 7a00 	vldr	s15, [r3]
 801b594:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b59c:	d501      	bpl.n	801b5a2 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 801b59e:	683b      	ldr	r3, [r7, #0]
 801b5a0:	e000      	b.n	801b5a4 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 801b5a2:	687b      	ldr	r3, [r7, #4]
    }
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	370c      	adds	r7, #12
 801b5a8:	46bd      	mov	sp, r7
 801b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ae:	4770      	bx	lr

0801b5b0 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	b082      	sub	sp, #8
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	ed87 0b00 	vstr	d0, [r7]
 801b5ba:	ed97 0b00 	vldr	d0, [r7]
 801b5be:	f005 fd87 	bl	80210d0 <round>
 801b5c2:	eeb0 7a40 	vmov.f32	s14, s0
 801b5c6:	eef0 7a60 	vmov.f32	s15, s1
 801b5ca:	eeb0 0a47 	vmov.f32	s0, s14
 801b5ce:	eef0 0a67 	vmov.f32	s1, s15
 801b5d2:	3708      	adds	r7, #8
 801b5d4:	46bd      	mov	sp, r7
 801b5d6:	bd80      	pop	{r7, pc}

0801b5d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 801b5d8:	b580      	push	{r7, lr}
 801b5da:	b082      	sub	sp, #8
 801b5dc:	af00      	add	r7, sp, #0
 801b5de:	ed87 0a01 	vstr	s0, [r7, #4]
 801b5e2:	ed97 0a01 	vldr	s0, [r7, #4]
 801b5e6:	f7e6 fa4a 	bl	8001a7e <_ZSt5roundf>
 801b5ea:	eef0 7a40 	vmov.f32	s15, s0
 801b5ee:	eeb0 0a67 	vmov.f32	s0, s15
 801b5f2:	3708      	adds	r7, #8
 801b5f4:	46bd      	mov	sp, r7
 801b5f6:	bd80      	pop	{r7, pc}

0801b5f8 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 801b5f8:	b480      	push	{r7}
 801b5fa:	af00      	add	r7, sp, #0
 801b5fc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 801b600:	4618      	mov	r0, r3
 801b602:	46bd      	mov	sp, r7
 801b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b608:	4770      	bx	lr

0801b60a <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 801b60a:	b480      	push	{r7}
 801b60c:	af00      	add	r7, sp, #0
 801b60e:	237f      	movs	r3, #127	; 0x7f
 801b610:	4618      	mov	r0, r3
 801b612:	46bd      	mov	sp, r7
 801b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b618:	4770      	bx	lr

0801b61a <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 801b61a:	b480      	push	{r7}
 801b61c:	af00      	add	r7, sp, #0
 801b61e:	2300      	movs	r3, #0
 801b620:	4618      	mov	r0, r3
 801b622:	46bd      	mov	sp, r7
 801b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b628:	4770      	bx	lr

0801b62a <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 801b62a:	b480      	push	{r7}
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	23ff      	movs	r3, #255	; 0xff
 801b630:	4618      	mov	r0, r3
 801b632:	46bd      	mov	sp, r7
 801b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b638:	4770      	bx	lr
	...

0801b63c <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 801b63c:	b480      	push	{r7}
 801b63e:	af00      	add	r7, sp, #0
 801b640:	4b02      	ldr	r3, [pc, #8]	; (801b64c <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 801b642:	4618      	mov	r0, r3
 801b644:	46bd      	mov	sp, r7
 801b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b64a:	4770      	bx	lr
 801b64c:	ffff8000 	.word	0xffff8000

0801b650 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 801b650:	b480      	push	{r7}
 801b652:	af00      	add	r7, sp, #0
 801b654:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b658:	4618      	mov	r0, r3
 801b65a:	46bd      	mov	sp, r7
 801b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b660:	4770      	bx	lr

0801b662 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 801b662:	b480      	push	{r7}
 801b664:	b083      	sub	sp, #12
 801b666:	af00      	add	r7, sp, #0
 801b668:	6078      	str	r0, [r7, #4]
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	689b      	ldr	r3, [r3, #8]
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	4618      	mov	r0, r3
 801b672:	370c      	adds	r7, #12
 801b674:	46bd      	mov	sp, r7
 801b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b67a:	4770      	bx	lr

0801b67c <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 801b67c:	b480      	push	{r7}
 801b67e:	b083      	sub	sp, #12
 801b680:	af00      	add	r7, sp, #0
 801b682:	ed87 0b00 	vstr	d0, [r7]
 801b686:	683a      	ldr	r2, [r7, #0]
 801b688:	6879      	ldr	r1, [r7, #4]
 801b68a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b68e:	ec43 2b17 	vmov	d7, r2, r3
 801b692:	eeb0 0a47 	vmov.f32	s0, s14
 801b696:	eef0 0a67 	vmov.f32	s1, s15
 801b69a:	370c      	adds	r7, #12
 801b69c:	46bd      	mov	sp, r7
 801b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a2:	4770      	bx	lr

0801b6a4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 801b6a4:	b580      	push	{r7, lr}
 801b6a6:	b082      	sub	sp, #8
 801b6a8:	af00      	add	r7, sp, #0
 801b6aa:	6078      	str	r0, [r7, #4]
 801b6ac:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	689b      	ldr	r3, [r3, #8]
 801b6b2:	2b00      	cmp	r3, #0
 801b6b4:	d005      	beq.n	801b6c2 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	689a      	ldr	r2, [r3, #8]
 801b6ba:	683b      	ldr	r3, [r7, #0]
 801b6bc:	019b      	lsls	r3, r3, #6
 801b6be:	4413      	add	r3, r2
 801b6c0:	e006      	b.n	801b6d0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b6c6:	6839      	ldr	r1, [r7, #0]
 801b6c8:	6878      	ldr	r0, [r7, #4]
 801b6ca:	4798      	blx	r3
 801b6cc:	4603      	mov	r3, r0
 801b6ce:	bf00      	nop
  }
}
 801b6d0:	4618      	mov	r0, r3
 801b6d2:	3708      	adds	r7, #8
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	bd80      	pop	{r7, pc}

0801b6d8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 801b6d8:	b480      	push	{r7}
 801b6da:	b087      	sub	sp, #28
 801b6dc:	af00      	add	r7, sp, #0
 801b6de:	60f8      	str	r0, [r7, #12]
 801b6e0:	60b9      	str	r1, [r7, #8]
 801b6e2:	607a      	str	r2, [r7, #4]
 801b6e4:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 801b6e6:	68bb      	ldr	r3, [r7, #8]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	db0f      	blt.n	801b70c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 801b6ec:	68ba      	ldr	r2, [r7, #8]
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	429a      	cmp	r2, r3
 801b6f2:	da0b      	bge.n	801b70c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 801b6f4:	68bb      	ldr	r3, [r7, #8]
 801b6f6:	009b      	lsls	r3, r3, #2
 801b6f8:	683a      	ldr	r2, [r7, #0]
 801b6fa:	4413      	add	r3, r2
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 801b700:	697b      	ldr	r3, [r7, #20]
 801b702:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b706:	d001      	beq.n	801b70c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 801b708:	697b      	ldr	r3, [r7, #20]
 801b70a:	e001      	b.n	801b710 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 801b70c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b710:	4618      	mov	r0, r3
 801b712:	371c      	adds	r7, #28
 801b714:	46bd      	mov	sp, r7
 801b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b71a:	4770      	bx	lr

0801b71c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 801b71c:	b580      	push	{r7, lr}
 801b71e:	b086      	sub	sp, #24
 801b720:	af00      	add	r7, sp, #0
 801b722:	60f8      	str	r0, [r7, #12]
 801b724:	60b9      	str	r1, [r7, #8]
 801b726:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 801b728:	68bb      	ldr	r3, [r7, #8]
 801b72a:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 801b72c:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 801b72e:	68bb      	ldr	r3, [r7, #8]
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801b734:	6879      	ldr	r1, [r7, #4]
 801b736:	68f8      	ldr	r0, [r7, #12]
 801b738:	f7ff ffce 	bl	801b6d8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801b73c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801b73e:	697b      	ldr	r3, [r7, #20]
 801b740:	2b00      	cmp	r3, #0
 801b742:	da01      	bge.n	801b748 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801b744:	2300      	movs	r3, #0
 801b746:	e005      	b.n	801b754 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801b748:	6979      	ldr	r1, [r7, #20]
 801b74a:	68f8      	ldr	r0, [r7, #12]
 801b74c:	f7ff ffaa 	bl	801b6a4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801b750:	4603      	mov	r3, r0
 801b752:	bf00      	nop
}
 801b754:	4618      	mov	r0, r3
 801b756:	3718      	adds	r7, #24
 801b758:	46bd      	mov	sp, r7
 801b75a:	bd80      	pop	{r7, pc}

0801b75c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 801b75c:	b580      	push	{r7, lr}
 801b75e:	b084      	sub	sp, #16
 801b760:	af00      	add	r7, sp, #0
 801b762:	60f8      	str	r0, [r7, #12]
 801b764:	60b9      	str	r1, [r7, #8]
 801b766:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 801b768:	687a      	ldr	r2, [r7, #4]
 801b76a:	68b9      	ldr	r1, [r7, #8]
 801b76c:	68f8      	ldr	r0, [r7, #12]
 801b76e:	f7ff ffd5 	bl	801b71c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 801b772:	4603      	mov	r3, r0
}
 801b774:	4618      	mov	r0, r3
 801b776:	3710      	adds	r7, #16
 801b778:	46bd      	mov	sp, r7
 801b77a:	bd80      	pop	{r7, pc}

0801b77c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 801b77c:	b580      	push	{r7, lr}
 801b77e:	b086      	sub	sp, #24
 801b780:	af00      	add	r7, sp, #0
 801b782:	60f8      	str	r0, [r7, #12]
 801b784:	60b9      	str	r1, [r7, #8]
 801b786:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 801b788:	68bb      	ldr	r3, [r7, #8]
 801b78a:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 801b78c:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 801b78e:	68bb      	ldr	r3, [r7, #8]
 801b790:	685b      	ldr	r3, [r3, #4]
 801b792:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801b794:	6879      	ldr	r1, [r7, #4]
 801b796:	68f8      	ldr	r0, [r7, #12]
 801b798:	f7ff ff9e 	bl	801b6d8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801b79c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801b79e:	697b      	ldr	r3, [r7, #20]
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	da01      	bge.n	801b7a8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801b7a4:	2300      	movs	r3, #0
 801b7a6:	e005      	b.n	801b7b4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801b7a8:	6979      	ldr	r1, [r7, #20]
 801b7aa:	68f8      	ldr	r0, [r7, #12]
 801b7ac:	f7ff ff7a 	bl	801b6a4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801b7b0:	4603      	mov	r3, r0
 801b7b2:	bf00      	nop
}
 801b7b4:	4618      	mov	r0, r3
 801b7b6:	3718      	adds	r7, #24
 801b7b8:	46bd      	mov	sp, r7
 801b7ba:	bd80      	pop	{r7, pc}

0801b7bc <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 801b7bc:	b580      	push	{r7, lr}
 801b7be:	b084      	sub	sp, #16
 801b7c0:	af00      	add	r7, sp, #0
 801b7c2:	60f8      	str	r0, [r7, #12]
 801b7c4:	60b9      	str	r1, [r7, #8]
 801b7c6:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 801b7c8:	687a      	ldr	r2, [r7, #4]
 801b7ca:	68b9      	ldr	r1, [r7, #8]
 801b7cc:	68f8      	ldr	r0, [r7, #12]
 801b7ce:	f7ff ffc5 	bl	801b75c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801b7d2:	4603      	mov	r3, r0
}
 801b7d4:	4618      	mov	r0, r3
 801b7d6:	3710      	adds	r7, #16
 801b7d8:	46bd      	mov	sp, r7
 801b7da:	bd80      	pop	{r7, pc}
 801b7dc:	0000      	movs	r0, r0
	...

0801b7e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801b7e0:	b5b0      	push	{r4, r5, r7, lr}
 801b7e2:	b08e      	sub	sp, #56	; 0x38
 801b7e4:	af02      	add	r7, sp, #8
 801b7e6:	60f8      	str	r0, [r7, #12]
 801b7e8:	60b9      	str	r1, [r7, #8]
 801b7ea:	607a      	str	r2, [r7, #4]
 801b7ec:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801b7ee:	68bb      	ldr	r3, [r7, #8]
 801b7f0:	68db      	ldr	r3, [r3, #12]
 801b7f2:	4618      	mov	r0, r3
 801b7f4:	f7e4 feb2 	bl	800055c <__aeabi_f2d>
 801b7f8:	4604      	mov	r4, r0
 801b7fa:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	68db      	ldr	r3, [r3, #12]
 801b800:	4618      	mov	r0, r3
 801b802:	f7e4 feab 	bl	800055c <__aeabi_f2d>
 801b806:	4602      	mov	r2, r0
 801b808:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801b80a:	4620      	mov	r0, r4
 801b80c:	4629      	mov	r1, r5
 801b80e:	f7e4 fefd 	bl	800060c <__aeabi_dmul>
 801b812:	4602      	mov	r2, r0
 801b814:	460b      	mov	r3, r1
 801b816:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 801b81a:	683b      	ldr	r3, [r7, #0]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d04b      	beq.n	801b8b8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 801b820:	683b      	ldr	r3, [r7, #0]
 801b822:	68db      	ldr	r3, [r3, #12]
 801b824:	4618      	mov	r0, r3
 801b826:	f7e4 fe99 	bl	800055c <__aeabi_f2d>
 801b82a:	4602      	mov	r2, r0
 801b82c:	460b      	mov	r3, r1
 801b82e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 801b832:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b836:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801b83a:	f7e4 fd2f 	bl	800029c <__aeabi_dsub>
 801b83e:	4602      	mov	r2, r0
 801b840:	460b      	mov	r3, r1
 801b842:	ec43 2b17 	vmov	d7, r2, r3
 801b846:	eeb0 0a47 	vmov.f32	s0, s14
 801b84a:	eef0 0a67 	vmov.f32	s1, s15
 801b84e:	f7ff ff15 	bl	801b67c <_ZSt3absd>
 801b852:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 801b856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b858:	68db      	ldr	r3, [r3, #12]
 801b85a:	4618      	mov	r0, r3
 801b85c:	f7e4 fe7e 	bl	800055c <__aeabi_f2d>
 801b860:	4602      	mov	r2, r0
 801b862:	460b      	mov	r3, r1
 801b864:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 801b868:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801b86c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801b870:	f7e4 fff6 	bl	8000860 <__aeabi_ddiv>
 801b874:	4602      	mov	r2, r0
 801b876:	460b      	mov	r3, r1
 801b878:	4610      	mov	r0, r2
 801b87a:	4619      	mov	r1, r3
 801b87c:	2301      	movs	r3, #1
 801b87e:	461c      	mov	r4, r3
 801b880:	a318      	add	r3, pc, #96	; (adr r3, 801b8e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 801b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b886:	f7e5 f93d 	bl	8000b04 <__aeabi_dcmple>
 801b88a:	4603      	mov	r3, r0
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d101      	bne.n	801b894 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 801b890:	2300      	movs	r3, #0
 801b892:	461c      	mov	r4, r3
 801b894:	b2e3      	uxtb	r3, r4
 801b896:	f083 0301 	eor.w	r3, r3, #1
 801b89a:	b2db      	uxtb	r3, r3
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d00b      	beq.n	801b8b8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	695c      	ldr	r4, [r3, #20]
 801b8a4:	4b0c      	ldr	r3, [pc, #48]	; (801b8d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 801b8a6:	9300      	str	r3, [sp, #0]
 801b8a8:	f44f 73a2 	mov.w	r3, #324	; 0x144
 801b8ac:	4a0b      	ldr	r2, [pc, #44]	; (801b8dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 801b8ae:	490c      	ldr	r1, [pc, #48]	; (801b8e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 801b8b0:	68f8      	ldr	r0, [r7, #12]
 801b8b2:	47a0      	blx	r4
 801b8b4:	2301      	movs	r3, #1
 801b8b6:	e009      	b.n	801b8cc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 801b8b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b8ba:	9300      	str	r3, [sp, #0]
 801b8bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b8be:	687a      	ldr	r2, [r7, #4]
 801b8c0:	68b9      	ldr	r1, [r7, #8]
 801b8c2:	68f8      	ldr	r0, [r7, #12]
 801b8c4:	f000 f812 	bl	801b8ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 801b8c8:	4603      	mov	r3, r0
                                          multiplier);
 801b8ca:	bf00      	nop
}
 801b8cc:	4618      	mov	r0, r3
 801b8ce:	3730      	adds	r7, #48	; 0x30
 801b8d0:	46bd      	mov	sp, r7
 801b8d2:	bdb0      	pop	{r4, r5, r7, pc}
 801b8d4:	f3af 8000 	nop.w
 801b8d8:	08028c1c 	.word	0x08028c1c
 801b8dc:	08028a10 	.word	0x08028a10
 801b8e0:	08028b08 	.word	0x08028b08
 801b8e4:	47ae147b 	.word	0x47ae147b
 801b8e8:	3f947ae1 	.word	0x3f947ae1

0801b8ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801b8ec:	b590      	push	{r4, r7, lr}
 801b8ee:	b089      	sub	sp, #36	; 0x24
 801b8f0:	af02      	add	r7, sp, #8
 801b8f2:	60f8      	str	r0, [r7, #12]
 801b8f4:	60b9      	str	r1, [r7, #8]
 801b8f6:	607a      	str	r2, [r7, #4]
 801b8f8:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 801b8fa:	68bb      	ldr	r3, [r7, #8]
 801b8fc:	ed93 7a03 	vldr	s14, [r3, #12]
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	edd3 7a03 	vldr	s15, [r3, #12]
 801b906:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 801b90a:	ee17 0a90 	vmov	r0, s15
 801b90e:	f7e4 fe25 	bl	800055c <__aeabi_f2d>
 801b912:	4602      	mov	r2, r0
 801b914:	460b      	mov	r3, r1
 801b916:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 801b91a:	2301      	movs	r3, #1
 801b91c:	461c      	mov	r4, r3
 801b91e:	f04f 0200 	mov.w	r2, #0
 801b922:	f04f 0300 	mov.w	r3, #0
 801b926:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b92a:	f7e5 f8f5 	bl	8000b18 <__aeabi_dcmpge>
 801b92e:	4603      	mov	r3, r0
 801b930:	2b00      	cmp	r3, #0
 801b932:	d101      	bne.n	801b938 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 801b934:	2300      	movs	r3, #0
 801b936:	461c      	mov	r4, r3
 801b938:	b2e3      	uxtb	r3, r4
 801b93a:	f083 0301 	eor.w	r3, r3, #1
 801b93e:	b2db      	uxtb	r3, r3
 801b940:	2b00      	cmp	r3, #0
 801b942:	d00b      	beq.n	801b95c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 801b944:	68fb      	ldr	r3, [r7, #12]
 801b946:	695c      	ldr	r4, [r3, #20]
 801b948:	4b0f      	ldr	r3, [pc, #60]	; (801b988 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 801b94a:	9300      	str	r3, [sp, #0]
 801b94c:	f240 1351 	movw	r3, #337	; 0x151
 801b950:	4a0e      	ldr	r2, [pc, #56]	; (801b98c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 801b952:	490f      	ldr	r1, [pc, #60]	; (801b990 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 801b954:	68f8      	ldr	r0, [r7, #12]
 801b956:	47a0      	blx	r4
 801b958:	2301      	movs	r3, #1
 801b95a:	e010      	b.n	801b97e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 801b95c:	683b      	ldr	r3, [r7, #0]
 801b95e:	68db      	ldr	r3, [r3, #12]
 801b960:	4618      	mov	r0, r3
 801b962:	f7e4 fdfb 	bl	800055c <__aeabi_f2d>
 801b966:	4602      	mov	r2, r0
 801b968:	460b      	mov	r3, r1
 801b96a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b96e:	f7e4 ff77 	bl	8000860 <__aeabi_ddiv>
 801b972:	4602      	mov	r2, r0
 801b974:	460b      	mov	r3, r1
 801b976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b978:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 801b97c:	2300      	movs	r3, #0
}
 801b97e:	4618      	mov	r0, r3
 801b980:	371c      	adds	r7, #28
 801b982:	46bd      	mov	sp, r7
 801b984:	bd90      	pop	{r4, r7, pc}
 801b986:	bf00      	nop
 801b988:	08028c40 	.word	0x08028c40
 801b98c:	08028a10 	.word	0x08028a10
 801b990:	08028b08 	.word	0x08028b08

0801b994 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 801b994:	b580      	push	{r7, lr}
 801b996:	b082      	sub	sp, #8
 801b998:	af00      	add	r7, sp, #0
 801b99a:	6078      	str	r0, [r7, #4]
 801b99c:	ed87 0a00 	vstr	s0, [r7]
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801b9a6:	ed97 7a00 	vldr	s14, [r7]
 801b9aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b9ae:	eeb0 0a66 	vmov.f32	s0, s13
 801b9b2:	f7ff fe11 	bl	801b5d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801b9b6:	eef0 7a40 	vmov.f32	s15, s0
 801b9ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b9be:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801b9c6:	4413      	add	r3, r2
  };
 801b9c8:	4618      	mov	r0, r3
 801b9ca:	3708      	adds	r7, #8
 801b9cc:	46bd      	mov	sp, r7
 801b9ce:	bd80      	pop	{r7, pc}

0801b9d0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b08e      	sub	sp, #56	; 0x38
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	60b9      	str	r1, [r7, #8]
 801b9d8:	607a      	str	r2, [r7, #4]
 801b9da:	603b      	str	r3, [r7, #0]
 801b9dc:	4603      	mov	r3, r0
 801b9de:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 801b9e0:	683b      	ldr	r3, [r7, #0]
 801b9e2:	68db      	ldr	r3, [r3, #12]
 801b9e4:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 801b9e6:	683b      	ldr	r3, [r7, #0]
 801b9e8:	691b      	ldr	r3, [r3, #16]
 801b9ea:	633b      	str	r3, [r7, #48]	; 0x30
  };
 801b9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9ee:	617b      	str	r3, [r7, #20]
 801b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9f2:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 801b9f4:	7bfb      	ldrb	r3, [r7, #15]
 801b9f6:	2b01      	cmp	r3, #1
 801b9f8:	d118      	bne.n	801ba2c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 801b9fa:	f107 0314 	add.w	r3, r7, #20
 801b9fe:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 801baf4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801ba02:	4618      	mov	r0, r3
 801ba04:	f7ff ffc6 	bl	801b994 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801ba08:	4603      	mov	r3, r0
 801ba0a:	61fb      	str	r3, [r7, #28]
 801ba0c:	f107 021c 	add.w	r2, r7, #28
 801ba10:	f107 0308 	add.w	r3, r7, #8
 801ba14:	4611      	mov	r1, r2
 801ba16:	4618      	mov	r0, r3
 801ba18:	f000 f8d6 	bl	801bbc8 <_ZSt3maxIlERKT_S2_S2_>
 801ba1c:	4603      	mov	r3, r0
 801ba1e:	681a      	ldr	r2, [r3, #0]
 801ba20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ba22:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801ba24:	687a      	ldr	r2, [r7, #4]
 801ba26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ba28:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 801ba2a:	e05f      	b.n	801baec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 801ba2c:	7bfb      	ldrb	r3, [r7, #15]
 801ba2e:	2b03      	cmp	r3, #3
 801ba30:	d129      	bne.n	801ba86 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 801ba32:	f107 0314 	add.w	r3, r7, #20
 801ba36:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 801baf4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	f7ff ffaa 	bl	801b994 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801ba40:	4603      	mov	r3, r0
 801ba42:	623b      	str	r3, [r7, #32]
 801ba44:	f107 0220 	add.w	r2, r7, #32
 801ba48:	f107 0308 	add.w	r3, r7, #8
 801ba4c:	4611      	mov	r1, r2
 801ba4e:	4618      	mov	r0, r3
 801ba50:	f000 f8ba 	bl	801bbc8 <_ZSt3maxIlERKT_S2_S2_>
 801ba54:	4603      	mov	r3, r0
 801ba56:	681a      	ldr	r2, [r3, #0]
 801ba58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ba5a:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 801ba5c:	f107 0314 	add.w	r3, r7, #20
 801ba60:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801ba64:	4618      	mov	r0, r3
 801ba66:	f7ff ff95 	bl	801b994 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801ba6a:	4603      	mov	r3, r0
 801ba6c:	627b      	str	r3, [r7, #36]	; 0x24
 801ba6e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801ba72:	1d3b      	adds	r3, r7, #4
 801ba74:	4611      	mov	r1, r2
 801ba76:	4618      	mov	r0, r3
 801ba78:	f000 f892 	bl	801bba0 <_ZSt3minIlERKT_S2_S2_>
 801ba7c:	4603      	mov	r3, r0
 801ba7e:	681a      	ldr	r2, [r3, #0]
 801ba80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ba82:	601a      	str	r2, [r3, #0]
}
 801ba84:	e032      	b.n	801baec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 801ba86:	7bfb      	ldrb	r3, [r7, #15]
 801ba88:	2b02      	cmp	r3, #2
 801ba8a:	d129      	bne.n	801bae0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 801ba8c:	f107 0314 	add.w	r3, r7, #20
 801ba90:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801ba94:	4618      	mov	r0, r3
 801ba96:	f7ff ff7d 	bl	801b994 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801ba9a:	4603      	mov	r3, r0
 801ba9c:	62bb      	str	r3, [r7, #40]	; 0x28
 801ba9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801baa2:	f107 0308 	add.w	r3, r7, #8
 801baa6:	4611      	mov	r1, r2
 801baa8:	4618      	mov	r0, r3
 801baaa:	f000 f88d 	bl	801bbc8 <_ZSt3maxIlERKT_S2_S2_>
 801baae:	4603      	mov	r3, r0
 801bab0:	681a      	ldr	r2, [r3, #0]
 801bab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bab4:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 801bab6:	f107 0314 	add.w	r3, r7, #20
 801baba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801babe:	4618      	mov	r0, r3
 801bac0:	f7ff ff68 	bl	801b994 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801bac4:	4603      	mov	r3, r0
 801bac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bac8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801bacc:	1d3b      	adds	r3, r7, #4
 801bace:	4611      	mov	r1, r2
 801bad0:	4618      	mov	r0, r3
 801bad2:	f000 f865 	bl	801bba0 <_ZSt3minIlERKT_S2_S2_>
 801bad6:	4603      	mov	r3, r0
 801bad8:	681a      	ldr	r2, [r3, #0]
 801bada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801badc:	601a      	str	r2, [r3, #0]
}
 801bade:	e005      	b.n	801baec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 801bae0:	68ba      	ldr	r2, [r7, #8]
 801bae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bae4:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801bae6:	687a      	ldr	r2, [r7, #4]
 801bae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801baea:	601a      	str	r2, [r3, #0]
}
 801baec:	bf00      	nop
 801baee:	3738      	adds	r7, #56	; 0x38
 801baf0:	46bd      	mov	sp, r7
 801baf2:	bd80      	pop	{r7, pc}
 801baf4:	00000000 	.word	0x00000000

0801baf8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 801baf8:	b590      	push	{r4, r7, lr}
 801bafa:	b089      	sub	sp, #36	; 0x24
 801bafc:	af02      	add	r7, sp, #8
 801bafe:	60f8      	str	r0, [r7, #12]
 801bb00:	607a      	str	r2, [r7, #4]
 801bb02:	603b      	str	r3, [r7, #0]
 801bb04:	460b      	mov	r3, r1
 801bb06:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 801bb08:	2300      	movs	r3, #0
 801bb0a:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 801bb0c:	2300      	movs	r3, #0
 801bb0e:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	781b      	ldrb	r3, [r3, #0]
 801bb14:	2b03      	cmp	r3, #3
 801bb16:	d108      	bne.n	801bb2a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 801bb18:	f7ff fd7f 	bl	801b61a <_ZNSt14numeric_limitsIhE3minEv>
 801bb1c:	4603      	mov	r3, r0
 801bb1e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 801bb20:	f7ff fd83 	bl	801b62a <_ZNSt14numeric_limitsIhE3maxEv>
 801bb24:	4603      	mov	r3, r0
 801bb26:	613b      	str	r3, [r7, #16]
 801bb28:	e025      	b.n	801bb76 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	781b      	ldrb	r3, [r3, #0]
 801bb2e:	2b09      	cmp	r3, #9
 801bb30:	d108      	bne.n	801bb44 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 801bb32:	f7ff fd61 	bl	801b5f8 <_ZNSt14numeric_limitsIaE3minEv>
 801bb36:	4603      	mov	r3, r0
 801bb38:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 801bb3a:	f7ff fd66 	bl	801b60a <_ZNSt14numeric_limitsIaE3maxEv>
 801bb3e:	4603      	mov	r3, r0
 801bb40:	613b      	str	r3, [r7, #16]
 801bb42:	e018      	b.n	801bb76 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	781b      	ldrb	r3, [r3, #0]
 801bb48:	2b07      	cmp	r3, #7
 801bb4a:	d108      	bne.n	801bb5e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 801bb4c:	f7ff fd76 	bl	801b63c <_ZNSt14numeric_limitsIsE3minEv>
 801bb50:	4603      	mov	r3, r0
 801bb52:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 801bb54:	f7ff fd7c 	bl	801b650 <_ZNSt14numeric_limitsIsE3maxEv>
 801bb58:	4603      	mov	r3, r0
 801bb5a:	613b      	str	r3, [r7, #16]
 801bb5c:	e00b      	b.n	801bb76 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 801bb5e:	68fb      	ldr	r3, [r7, #12]
 801bb60:	695c      	ldr	r4, [r3, #20]
 801bb62:	4b0c      	ldr	r3, [pc, #48]	; (801bb94 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 801bb64:	9300      	str	r3, [sp, #0]
 801bb66:	f44f 73c2 	mov.w	r3, #388	; 0x184
 801bb6a:	4a0b      	ldr	r2, [pc, #44]	; (801bb98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 801bb6c:	490b      	ldr	r1, [pc, #44]	; (801bb9c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 801bb6e:	68f8      	ldr	r0, [r7, #12]
 801bb70:	47a0      	blx	r4
 801bb72:	2301      	movs	r3, #1
 801bb74:	e00a      	b.n	801bb8c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 801bb76:	7af8      	ldrb	r0, [r7, #11]
 801bb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb7a:	9301      	str	r3, [sp, #4]
 801bb7c:	683b      	ldr	r3, [r7, #0]
 801bb7e:	9300      	str	r3, [sp, #0]
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	693a      	ldr	r2, [r7, #16]
 801bb84:	6979      	ldr	r1, [r7, #20]
 801bb86:	f7ff ff23 	bl	801b9d0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 801bb8a:	2300      	movs	r3, #0
}
 801bb8c:	4618      	mov	r0, r3
 801bb8e:	371c      	adds	r7, #28
 801bb90:	46bd      	mov	sp, r7
 801bb92:	bd90      	pop	{r4, r7, pc}
 801bb94:	08028c5c 	.word	0x08028c5c
 801bb98:	08028a10 	.word	0x08028a10
 801bb9c:	08028b08 	.word	0x08028b08

0801bba0 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801bba0:	b480      	push	{r7}
 801bba2:	b083      	sub	sp, #12
 801bba4:	af00      	add	r7, sp, #0
 801bba6:	6078      	str	r0, [r7, #4]
 801bba8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801bbaa:	683b      	ldr	r3, [r7, #0]
 801bbac:	681a      	ldr	r2, [r3, #0]
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	429a      	cmp	r2, r3
 801bbb4:	da01      	bge.n	801bbba <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 801bbb6:	683b      	ldr	r3, [r7, #0]
 801bbb8:	e000      	b.n	801bbbc <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 801bbba:	687b      	ldr	r3, [r7, #4]
    }
 801bbbc:	4618      	mov	r0, r3
 801bbbe:	370c      	adds	r7, #12
 801bbc0:	46bd      	mov	sp, r7
 801bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbc6:	4770      	bx	lr

0801bbc8 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801bbc8:	b480      	push	{r7}
 801bbca:	b083      	sub	sp, #12
 801bbcc:	af00      	add	r7, sp, #0
 801bbce:	6078      	str	r0, [r7, #4]
 801bbd0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	681a      	ldr	r2, [r3, #0]
 801bbd6:	683b      	ldr	r3, [r7, #0]
 801bbd8:	681b      	ldr	r3, [r3, #0]
 801bbda:	429a      	cmp	r2, r3
 801bbdc:	da01      	bge.n	801bbe2 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 801bbde:	683b      	ldr	r3, [r7, #0]
 801bbe0:	e000      	b.n	801bbe4 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 801bbe2:	687b      	ldr	r3, [r7, #4]
    }
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	370c      	adds	r7, #12
 801bbe8:	46bd      	mov	sp, r7
 801bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbee:	4770      	bx	lr

0801bbf0 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 801bbf0:	b480      	push	{r7}
 801bbf2:	b083      	sub	sp, #12
 801bbf4:	af00      	add	r7, sp, #0
 801bbf6:	6078      	str	r0, [r7, #4]
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	2200      	movs	r2, #0
 801bbfc:	601a      	str	r2, [r3, #0]
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	4618      	mov	r0, r3
 801bc02:	370c      	adds	r7, #12
 801bc04:	46bd      	mov	sp, r7
 801bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc0a:	4770      	bx	lr

0801bc0c <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 801bc0c:	b580      	push	{r7, lr}
 801bc0e:	b084      	sub	sp, #16
 801bc10:	af00      	add	r7, sp, #0
 801bc12:	60f8      	str	r0, [r7, #12]
 801bc14:	60b9      	str	r1, [r7, #8]
 801bc16:	607a      	str	r2, [r7, #4]
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	2200      	movs	r2, #0
 801bc1c:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 801bc1e:	687a      	ldr	r2, [r7, #4]
 801bc20:	68b9      	ldr	r1, [r7, #8]
 801bc22:	68f8      	ldr	r0, [r7, #12]
 801bc24:	f000 f866 	bl	801bcf4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 801bc28:	68fb      	ldr	r3, [r7, #12]
 801bc2a:	4618      	mov	r0, r3
 801bc2c:	3710      	adds	r7, #16
 801bc2e:	46bd      	mov	sp, r7
 801bc30:	bd80      	pop	{r7, pc}

0801bc32 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 801bc32:	b580      	push	{r7, lr}
 801bc34:	b082      	sub	sp, #8
 801bc36:	af00      	add	r7, sp, #0
 801bc38:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	2b05      	cmp	r3, #5
 801bc40:	dd08      	ble.n	801bc54 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	685b      	ldr	r3, [r3, #4]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d004      	beq.n	801bc54 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	685b      	ldr	r3, [r3, #4]
 801bc4e:	4618      	mov	r0, r3
 801bc50:	f005 f910 	bl	8020e74 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	4618      	mov	r0, r3
 801bc58:	3708      	adds	r7, #8
 801bc5a:	46bd      	mov	sp, r7
 801bc5c:	bd80      	pop	{r7, pc}

0801bc5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 801bc5e:	b480      	push	{r7}
 801bc60:	b083      	sub	sp, #12
 801bc62:	af00      	add	r7, sp, #0
 801bc64:	6078      	str	r0, [r7, #4]
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	370c      	adds	r7, #12
 801bc6e:	46bd      	mov	sp, r7
 801bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc74:	4770      	bx	lr

0801bc76 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 801bc76:	b480      	push	{r7}
 801bc78:	b083      	sub	sp, #12
 801bc7a:	af00      	add	r7, sp, #0
 801bc7c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	2b05      	cmp	r3, #5
 801bc84:	dd02      	ble.n	801bc8c <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	685b      	ldr	r3, [r3, #4]
 801bc8a:	e001      	b.n	801bc90 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	3304      	adds	r3, #4
  }
 801bc90:	4618      	mov	r0, r3
 801bc92:	370c      	adds	r7, #12
 801bc94:	46bd      	mov	sp, r7
 801bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc9a:	4770      	bx	lr

0801bc9c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 801bc9c:	b580      	push	{r7, lr}
 801bc9e:	b082      	sub	sp, #8
 801bca0:	af00      	add	r7, sp, #0
 801bca2:	6078      	str	r0, [r7, #4]
 801bca4:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	2b05      	cmp	r3, #5
 801bcac:	dd08      	ble.n	801bcc0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	685b      	ldr	r3, [r3, #4]
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d004      	beq.n	801bcc0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	685b      	ldr	r3, [r3, #4]
 801bcba:	4618      	mov	r0, r3
 801bcbc:	f005 f8da 	bl	8020e74 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	683a      	ldr	r2, [r7, #0]
 801bcc4:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 801bcc6:	683b      	ldr	r3, [r7, #0]
 801bcc8:	2b05      	cmp	r3, #5
 801bcca:	dd0f      	ble.n	801bcec <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 801bccc:	683b      	ldr	r3, [r7, #0]
 801bcce:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801bcd2:	4293      	cmp	r3, r2
 801bcd4:	d201      	bcs.n	801bcda <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 801bcd6:	009b      	lsls	r3, r3, #2
 801bcd8:	e001      	b.n	801bcde <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 801bcda:	f04f 33ff 	mov.w	r3, #4294967295
 801bcde:	4618      	mov	r0, r3
 801bce0:	f005 f8db 	bl	8020e9a <_Znaj>
 801bce4:	4603      	mov	r3, r0
 801bce6:	461a      	mov	r2, r3
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801bcec:	bf00      	nop
 801bcee:	3708      	adds	r7, #8
 801bcf0:	46bd      	mov	sp, r7
 801bcf2:	bd80      	pop	{r7, pc}

0801bcf4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 801bcf4:	b580      	push	{r7, lr}
 801bcf6:	b086      	sub	sp, #24
 801bcf8:	af00      	add	r7, sp, #0
 801bcfa:	60f8      	str	r0, [r7, #12]
 801bcfc:	60b9      	str	r1, [r7, #8]
 801bcfe:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 801bd00:	68b9      	ldr	r1, [r7, #8]
 801bd02:	68f8      	ldr	r0, [r7, #12]
 801bd04:	f7ff ffca 	bl	801bc9c <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 801bd08:	68f8      	ldr	r0, [r7, #12]
 801bd0a:	f7ff ffb4 	bl	801bc76 <_ZN6tflite12RuntimeShape8DimsDataEv>
 801bd0e:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 801bd10:	68bb      	ldr	r3, [r7, #8]
 801bd12:	009b      	lsls	r3, r3, #2
 801bd14:	461a      	mov	r2, r3
 801bd16:	6879      	ldr	r1, [r7, #4]
 801bd18:	6978      	ldr	r0, [r7, #20]
 801bd1a:	f007 fe89 	bl	8023a30 <memcpy>
  }
 801bd1e:	bf00      	nop
 801bd20:	3718      	adds	r7, #24
 801bd22:	46bd      	mov	sp, r7
 801bd24:	bd80      	pop	{r7, pc}

0801bd26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 801bd26:	b580      	push	{r7, lr}
 801bd28:	b086      	sub	sp, #24
 801bd2a:	af00      	add	r7, sp, #0
 801bd2c:	6078      	str	r0, [r7, #4]
 801bd2e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 801bd30:	683b      	ldr	r3, [r7, #0]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d103      	bne.n	801bd3e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 801bd36:	6878      	ldr	r0, [r7, #4]
 801bd38:	f7ff ff5a 	bl	801bbf0 <_ZN6tflite12RuntimeShapeC1Ev>
 801bd3c:	e00d      	b.n	801bd5a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 801bd3e:	683b      	ldr	r3, [r7, #0]
 801bd40:	689b      	ldr	r3, [r3, #8]
 801bd42:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801bd44:	697b      	ldr	r3, [r7, #20]
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801bd4a:	697b      	ldr	r3, [r7, #20]
 801bd4c:	3304      	adds	r3, #4
 801bd4e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801bd50:	68fa      	ldr	r2, [r7, #12]
 801bd52:	6939      	ldr	r1, [r7, #16]
 801bd54:	6878      	ldr	r0, [r7, #4]
 801bd56:	f7ff ff59 	bl	801bc0c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801bd5a:	6878      	ldr	r0, [r7, #4]
 801bd5c:	3718      	adds	r7, #24
 801bd5e:	46bd      	mov	sp, r7
 801bd60:	bd80      	pop	{r7, pc}

0801bd62 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 801bd62:	b480      	push	{r7}
 801bd64:	af00      	add	r7, sp, #0
 801bd66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	46bd      	mov	sp, r7
 801bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd72:	4770      	bx	lr

0801bd74 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 801bd74:	b480      	push	{r7}
 801bd76:	af00      	add	r7, sp, #0
 801bd78:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801bd7c:	ee07 3a90 	vmov	s15, r3
 801bd80:	eeb0 0a67 	vmov.f32	s0, s15
 801bd84:	46bd      	mov	sp, r7
 801bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd8a:	4770      	bx	lr

0801bd8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 801bd8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bd90:	b092      	sub	sp, #72	; 0x48
 801bd92:	af00      	add	r7, sp, #0
 801bd94:	61f8      	str	r0, [r7, #28]
 801bd96:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 801bd98:	69fa      	ldr	r2, [r7, #28]
 801bd9a:	69bb      	ldr	r3, [r7, #24]
 801bd9c:	429a      	cmp	r2, r3
 801bd9e:	d107      	bne.n	801bdb0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801bda0:	f7ff ffdf 	bl	801bd62 <_ZNSt14numeric_limitsIlE3minEv>
 801bda4:	4602      	mov	r2, r0
 801bda6:	69fb      	ldr	r3, [r7, #28]
 801bda8:	4293      	cmp	r3, r2
 801bdaa:	d101      	bne.n	801bdb0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801bdac:	2301      	movs	r3, #1
 801bdae:	e000      	b.n	801bdb2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 801bdb0:	2300      	movs	r3, #0
 801bdb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 801bdb6:	69fb      	ldr	r3, [r7, #28]
 801bdb8:	17da      	asrs	r2, r3, #31
 801bdba:	60bb      	str	r3, [r7, #8]
 801bdbc:	60fa      	str	r2, [r7, #12]
 801bdbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801bdc2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 801bdc6:	69bb      	ldr	r3, [r7, #24]
 801bdc8:	17da      	asrs	r2, r3, #31
 801bdca:	603b      	str	r3, [r7, #0]
 801bdcc:	607a      	str	r2, [r7, #4]
 801bdce:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bdd2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 801bdd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bdd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bdda:	fb03 f202 	mul.w	r2, r3, r2
 801bdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bde0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801bde2:	fb01 f303 	mul.w	r3, r1, r3
 801bde6:	4413      	add	r3, r2
 801bde8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801bdea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bdec:	fba1 4502 	umull	r4, r5, r1, r2
 801bdf0:	442b      	add	r3, r5
 801bdf2:	461d      	mov	r5, r3
 801bdf4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 801bdf8:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 801bdfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801be00:	2b00      	cmp	r3, #0
 801be02:	db02      	blt.n	801be0a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 801be04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801be08:	e000      	b.n	801be0c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 801be0a:	4b1a      	ldr	r3, [pc, #104]	; (801be74 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 801be0c:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 801be0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be10:	17da      	asrs	r2, r3, #31
 801be12:	4698      	mov	r8, r3
 801be14:	4691      	mov	r9, r2
 801be16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801be1a:	eb18 0102 	adds.w	r1, r8, r2
 801be1e:	6139      	str	r1, [r7, #16]
 801be20:	eb49 0303 	adc.w	r3, r9, r3
 801be24:	617b      	str	r3, [r7, #20]
 801be26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	da07      	bge.n	801be3e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 801be2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801be32:	eb12 0a01 	adds.w	sl, r2, r1
 801be36:	f143 0b00 	adc.w	fp, r3, #0
 801be3a:	4652      	mov	r2, sl
 801be3c:	465b      	mov	r3, fp
 801be3e:	f04f 0000 	mov.w	r0, #0
 801be42:	f04f 0100 	mov.w	r1, #0
 801be46:	0fd0      	lsrs	r0, r2, #31
 801be48:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801be4c:	17d9      	asrs	r1, r3, #31
 801be4e:	4602      	mov	r2, r0
 801be50:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 801be52:	4613      	mov	r3, r2
 801be54:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 801be56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d003      	beq.n	801be66 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 801be5e:	f7ff fa09 	bl	801b274 <_ZNSt14numeric_limitsIlE3maxEv>
 801be62:	4603      	mov	r3, r0
 801be64:	e000      	b.n	801be68 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 801be66:	6a3b      	ldr	r3, [r7, #32]
}
 801be68:	4618      	mov	r0, r3
 801be6a:	3748      	adds	r7, #72	; 0x48
 801be6c:	46bd      	mov	sp, r7
 801be6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801be72:	bf00      	nop
 801be74:	c0000001 	.word	0xc0000001

0801be78 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 801be78:	b580      	push	{r7, lr}
 801be7a:	b082      	sub	sp, #8
 801be7c:	af00      	add	r7, sp, #0
 801be7e:	6078      	str	r0, [r7, #4]
 801be80:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 801be82:	683b      	ldr	r3, [r7, #0]
 801be84:	2b00      	cmp	r3, #0
 801be86:	da01      	bge.n	801be8c <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 801be88:	f007 fd50 	bl	802392c <abort>
    TFLITE_DCHECK_LT(i, size_);
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	683a      	ldr	r2, [r7, #0]
 801be92:	429a      	cmp	r2, r3
 801be94:	db01      	blt.n	801be9a <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 801be96:	f007 fd49 	bl	802392c <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	2b05      	cmp	r3, #5
 801bea0:	dd06      	ble.n	801beb0 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	685a      	ldr	r2, [r3, #4]
 801bea6:	683b      	ldr	r3, [r7, #0]
 801bea8:	009b      	lsls	r3, r3, #2
 801beaa:	4413      	add	r3, r2
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	e004      	b.n	801beba <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 801beb0:	687a      	ldr	r2, [r7, #4]
 801beb2:	683b      	ldr	r3, [r7, #0]
 801beb4:	009b      	lsls	r3, r3, #2
 801beb6:	4413      	add	r3, r2
 801beb8:	685b      	ldr	r3, [r3, #4]
  }
 801beba:	4618      	mov	r0, r3
 801bebc:	3708      	adds	r7, #8
 801bebe:	46bd      	mov	sp, r7
 801bec0:	bd80      	pop	{r7, pc}

0801bec2 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 801bec2:	b480      	push	{r7}
 801bec4:	b083      	sub	sp, #12
 801bec6:	af00      	add	r7, sp, #0
 801bec8:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	2b05      	cmp	r3, #5
 801bed0:	dd02      	ble.n	801bed8 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	685b      	ldr	r3, [r3, #4]
 801bed6:	e001      	b.n	801bedc <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	3304      	adds	r3, #4
  }
 801bedc:	4618      	mov	r0, r3
 801bede:	370c      	adds	r7, #12
 801bee0:	46bd      	mov	sp, r7
 801bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bee6:	4770      	bx	lr

0801bee8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 801bee8:	b580      	push	{r7, lr}
 801beea:	b086      	sub	sp, #24
 801beec:	af00      	add	r7, sp, #0
 801beee:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 801bef0:	2301      	movs	r3, #1
 801bef2:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 801bef4:	6878      	ldr	r0, [r7, #4]
 801bef6:	f7ff ffe4 	bl	801bec2 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801befa:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 801befc:	2300      	movs	r3, #0
 801befe:	613b      	str	r3, [r7, #16]
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	681b      	ldr	r3, [r3, #0]
 801bf04:	693a      	ldr	r2, [r7, #16]
 801bf06:	429a      	cmp	r2, r3
 801bf08:	da0c      	bge.n	801bf24 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 801bf0a:	693b      	ldr	r3, [r7, #16]
 801bf0c:	009b      	lsls	r3, r3, #2
 801bf0e:	68fa      	ldr	r2, [r7, #12]
 801bf10:	4413      	add	r3, r2
 801bf12:	681a      	ldr	r2, [r3, #0]
 801bf14:	697b      	ldr	r3, [r7, #20]
 801bf16:	fb02 f303 	mul.w	r3, r2, r3
 801bf1a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 801bf1c:	693b      	ldr	r3, [r7, #16]
 801bf1e:	3301      	adds	r3, #1
 801bf20:	613b      	str	r3, [r7, #16]
 801bf22:	e7ed      	b.n	801bf00 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 801bf24:	697b      	ldr	r3, [r7, #20]
  }
 801bf26:	4618      	mov	r0, r3
 801bf28:	3718      	adds	r7, #24
 801bf2a:	46bd      	mov	sp, r7
 801bf2c:	bd80      	pop	{r7, pc}

0801bf2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 801bf2e:	b590      	push	{r4, r7, lr}
 801bf30:	b085      	sub	sp, #20
 801bf32:	af00      	add	r7, sp, #0
 801bf34:	6078      	str	r0, [r7, #4]
 801bf36:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 801bf38:	6878      	ldr	r0, [r7, #4]
 801bf3a:	f7ff fe90 	bl	801bc5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801bf3e:	4604      	mov	r4, r0
 801bf40:	6838      	ldr	r0, [r7, #0]
 801bf42:	f7ff fe8c 	bl	801bc5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801bf46:	4603      	mov	r3, r0
 801bf48:	429c      	cmp	r4, r3
 801bf4a:	d001      	beq.n	801bf50 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 801bf4c:	f007 fcee 	bl	802392c <abort>
  const int dims_count = shape.DimensionsCount();
 801bf50:	6878      	ldr	r0, [r7, #4]
 801bf52:	f7ff fe84 	bl	801bc5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801bf56:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 801bf58:	2300      	movs	r3, #0
 801bf5a:	60fb      	str	r3, [r7, #12]
 801bf5c:	68fa      	ldr	r2, [r7, #12]
 801bf5e:	68bb      	ldr	r3, [r7, #8]
 801bf60:	429a      	cmp	r2, r3
 801bf62:	da11      	bge.n	801bf88 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801bf64:	68f9      	ldr	r1, [r7, #12]
 801bf66:	6878      	ldr	r0, [r7, #4]
 801bf68:	f7ff ff86 	bl	801be78 <_ZNK6tflite12RuntimeShape4DimsEi>
 801bf6c:	4604      	mov	r4, r0
 801bf6e:	68f9      	ldr	r1, [r7, #12]
 801bf70:	6838      	ldr	r0, [r7, #0]
 801bf72:	f7ff ff81 	bl	801be78 <_ZNK6tflite12RuntimeShape4DimsEi>
 801bf76:	4603      	mov	r3, r0
 801bf78:	429c      	cmp	r4, r3
 801bf7a:	d001      	beq.n	801bf80 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 801bf7c:	f007 fcd6 	bl	802392c <abort>
  for (int i = 0; i < dims_count; ++i) {
 801bf80:	68fb      	ldr	r3, [r7, #12]
 801bf82:	3301      	adds	r3, #1
 801bf84:	60fb      	str	r3, [r7, #12]
 801bf86:	e7e9      	b.n	801bf5c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 801bf88:	6878      	ldr	r0, [r7, #4]
 801bf8a:	f7ff ffad 	bl	801bee8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801bf8e:	4603      	mov	r3, r0
}
 801bf90:	4618      	mov	r0, r3
 801bf92:	3714      	adds	r7, #20
 801bf94:	46bd      	mov	sp, r7
 801bf96:	bd90      	pop	{r4, r7, pc}

0801bf98 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 801bf98:	b580      	push	{r7, lr}
 801bf9a:	b086      	sub	sp, #24
 801bf9c:	af00      	add	r7, sp, #0
 801bf9e:	60f8      	str	r0, [r7, #12]
 801bfa0:	60b9      	str	r1, [r7, #8]
 801bfa2:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bfaa:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	dc02      	bgt.n	801bfb8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	425b      	negs	r3, r3
 801bfb6:	e000      	b.n	801bfba <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 801bfb8:	2300      	movs	r3, #0
 801bfba:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 801bfbc:	68fa      	ldr	r2, [r7, #12]
 801bfbe:	697b      	ldr	r3, [r7, #20]
 801bfc0:	fa02 f303 	lsl.w	r3, r2, r3
 801bfc4:	68b9      	ldr	r1, [r7, #8]
 801bfc6:	4618      	mov	r0, r3
 801bfc8:	f7ff fee0 	bl	801bd8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801bfcc:	4603      	mov	r3, r0
 801bfce:	6939      	ldr	r1, [r7, #16]
 801bfd0:	4618      	mov	r0, r3
 801bfd2:	f000 fb4b 	bl	801c66c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801bfd6:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 801bfd8:	4618      	mov	r0, r3
 801bfda:	3718      	adds	r7, #24
 801bfdc:	46bd      	mov	sp, r7
 801bfde:	bd80      	pop	{r7, pc}

0801bfe0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b084      	sub	sp, #16
 801bfe4:	af00      	add	r7, sp, #0
 801bfe6:	60f8      	str	r0, [r7, #12]
 801bfe8:	60b9      	str	r1, [r7, #8]
 801bfea:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801bfec:	68fb      	ldr	r3, [r7, #12]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d101      	bne.n	801bff6 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801bff2:	f007 fc9b 	bl	802392c <abort>
  TFLITE_DCHECK(node != nullptr);
 801bff6:	68bb      	ldr	r3, [r7, #8]
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d101      	bne.n	801c000 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801bffc:	f007 fc96 	bl	802392c <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c004:	68bb      	ldr	r3, [r7, #8]
 801c006:	6819      	ldr	r1, [r3, #0]
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	009b      	lsls	r3, r3, #2
 801c00c:	440b      	add	r3, r1
 801c00e:	685b      	ldr	r3, [r3, #4]
 801c010:	4619      	mov	r1, r3
 801c012:	68f8      	ldr	r0, [r7, #12]
 801c014:	4790      	blx	r2
 801c016:	4603      	mov	r3, r0
}
 801c018:	4618      	mov	r0, r3
 801c01a:	3710      	adds	r7, #16
 801c01c:	46bd      	mov	sp, r7
 801c01e:	bd80      	pop	{r7, pc}

0801c020 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 801c020:	b580      	push	{r7, lr}
 801c022:	b084      	sub	sp, #16
 801c024:	af00      	add	r7, sp, #0
 801c026:	60f8      	str	r0, [r7, #12]
 801c028:	60b9      	str	r1, [r7, #8]
 801c02a:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 801c02c:	687a      	ldr	r2, [r7, #4]
 801c02e:	68b9      	ldr	r1, [r7, #8]
 801c030:	68f8      	ldr	r0, [r7, #12]
 801c032:	f7ff ffd5 	bl	801bfe0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801c036:	4603      	mov	r3, r0
}
 801c038:	4618      	mov	r0, r3
 801c03a:	3710      	adds	r7, #16
 801c03c:	46bd      	mov	sp, r7
 801c03e:	bd80      	pop	{r7, pc}

0801c040 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 801c040:	b580      	push	{r7, lr}
 801c042:	b084      	sub	sp, #16
 801c044:	af00      	add	r7, sp, #0
 801c046:	60f8      	str	r0, [r7, #12]
 801c048:	60b9      	str	r1, [r7, #8]
 801c04a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d101      	bne.n	801c056 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801c052:	f007 fc6b 	bl	802392c <abort>
  TFLITE_DCHECK(node != nullptr);
 801c056:	68bb      	ldr	r3, [r7, #8]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d101      	bne.n	801c060 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801c05c:	f007 fc66 	bl	802392c <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 801c060:	68fb      	ldr	r3, [r7, #12]
 801c062:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c064:	68bb      	ldr	r3, [r7, #8]
 801c066:	6859      	ldr	r1, [r3, #4]
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	009b      	lsls	r3, r3, #2
 801c06c:	440b      	add	r3, r1
 801c06e:	685b      	ldr	r3, [r3, #4]
 801c070:	4619      	mov	r1, r3
 801c072:	68f8      	ldr	r0, [r7, #12]
 801c074:	4790      	blx	r2
 801c076:	4603      	mov	r3, r0
}
 801c078:	4618      	mov	r0, r3
 801c07a:	3710      	adds	r7, #16
 801c07c:	46bd      	mov	sp, r7
 801c07e:	bd80      	pop	{r7, pc}

0801c080 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 801c080:	b580      	push	{r7, lr}
 801c082:	b08a      	sub	sp, #40	; 0x28
 801c084:	af00      	add	r7, sp, #0
 801c086:	60f8      	str	r0, [r7, #12]
 801c088:	60b9      	str	r1, [r7, #8]
 801c08a:	607a      	str	r2, [r7, #4]
 801c08c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801c08e:	6879      	ldr	r1, [r7, #4]
 801c090:	68f8      	ldr	r0, [r7, #12]
 801c092:	f7ff ff4c 	bl	801bf2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801c096:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801c098:	2300      	movs	r3, #0
 801c09a:	627b      	str	r3, [r7, #36]	; 0x24
 801c09c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c09e:	6a3b      	ldr	r3, [r7, #32]
 801c0a0:	429a      	cmp	r2, r3
 801c0a2:	da1d      	bge.n	801c0e0 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 801c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0a6:	009b      	lsls	r3, r3, #2
 801c0a8:	68ba      	ldr	r2, [r7, #8]
 801c0aa:	4413      	add	r3, r2
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 801c0b0:	f04f 0300 	mov.w	r3, #0
 801c0b4:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 801c0b6:	edd7 7a07 	vldr	s15, [r7, #28]
 801c0ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0c2:	d501      	bpl.n	801c0c8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 801c0c4:	69bb      	ldr	r3, [r7, #24]
 801c0c6:	e000      	b.n	801c0ca <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 801c0c8:	69fb      	ldr	r3, [r7, #28]
 801c0ca:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 801c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0ce:	009b      	lsls	r3, r3, #2
 801c0d0:	683a      	ldr	r2, [r7, #0]
 801c0d2:	4413      	add	r3, r2
 801c0d4:	697a      	ldr	r2, [r7, #20]
 801c0d6:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0da:	3301      	adds	r3, #1
 801c0dc:	627b      	str	r3, [r7, #36]	; 0x24
 801c0de:	e7dd      	b.n	801c09c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801c0e0:	bf00      	nop
 801c0e2:	3728      	adds	r7, #40	; 0x28
 801c0e4:	46bd      	mov	sp, r7
 801c0e6:	bd80      	pop	{r7, pc}

0801c0e8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 801c0e8:	b580      	push	{r7, lr}
 801c0ea:	b08a      	sub	sp, #40	; 0x28
 801c0ec:	af00      	add	r7, sp, #0
 801c0ee:	60f8      	str	r0, [r7, #12]
 801c0f0:	60b9      	str	r1, [r7, #8]
 801c0f2:	607a      	str	r2, [r7, #4]
 801c0f4:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801c0f6:	6879      	ldr	r1, [r7, #4]
 801c0f8:	68f8      	ldr	r0, [r7, #12]
 801c0fa:	f7ff ff18 	bl	801bf2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801c0fe:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801c100:	2300      	movs	r3, #0
 801c102:	627b      	str	r3, [r7, #36]	; 0x24
 801c104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c106:	6a3b      	ldr	r3, [r7, #32]
 801c108:	429a      	cmp	r2, r3
 801c10a:	da2a      	bge.n	801c162 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 801c10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c10e:	009b      	lsls	r3, r3, #2
 801c110:	68ba      	ldr	r2, [r7, #8]
 801c112:	4413      	add	r3, r2
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 801c118:	4b14      	ldr	r3, [pc, #80]	; (801c16c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 801c11a:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 801c11c:	f04f 0300 	mov.w	r3, #0
 801c120:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 801c122:	edd7 7a07 	vldr	s15, [r7, #28]
 801c126:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801c12a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c132:	dd01      	ble.n	801c138 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 801c134:	69bb      	ldr	r3, [r7, #24]
 801c136:	e009      	b.n	801c14c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801c138:	edd7 7a07 	vldr	s15, [r7, #28]
 801c13c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c144:	d501      	bpl.n	801c14a <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 801c146:	697b      	ldr	r3, [r7, #20]
 801c148:	e000      	b.n	801c14c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801c14a:	69fb      	ldr	r3, [r7, #28]
 801c14c:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 801c14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c150:	009b      	lsls	r3, r3, #2
 801c152:	683a      	ldr	r2, [r7, #0]
 801c154:	4413      	add	r3, r2
 801c156:	693a      	ldr	r2, [r7, #16]
 801c158:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c15c:	3301      	adds	r3, #1
 801c15e:	627b      	str	r3, [r7, #36]	; 0x24
 801c160:	e7d0      	b.n	801c104 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801c162:	bf00      	nop
 801c164:	3728      	adds	r7, #40	; 0x28
 801c166:	46bd      	mov	sp, r7
 801c168:	bd80      	pop	{r7, pc}
 801c16a:	bf00      	nop
 801c16c:	40c00000 	.word	0x40c00000

0801c170 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 801c170:	b580      	push	{r7, lr}
 801c172:	b084      	sub	sp, #16
 801c174:	af00      	add	r7, sp, #0
 801c176:	60f8      	str	r0, [r7, #12]
 801c178:	60b9      	str	r1, [r7, #8]
 801c17a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801c17c:	68fb      	ldr	r3, [r7, #12]
 801c17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c180:	2b00      	cmp	r3, #0
 801c182:	d101      	bne.n	801c188 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 801c184:	f007 fbd2 	bl	802392c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 801c188:	68fb      	ldr	r3, [r7, #12]
 801c18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c18c:	211c      	movs	r1, #28
 801c18e:	68f8      	ldr	r0, [r7, #12]
 801c190:	4798      	blx	r3
 801c192:	4603      	mov	r3, r0
}
 801c194:	4618      	mov	r0, r3
 801c196:	3710      	adds	r7, #16
 801c198:	46bd      	mov	sp, r7
 801c19a:	bd80      	pop	{r7, pc}

0801c19c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 801c19c:	b590      	push	{r4, r7, lr}
 801c19e:	b089      	sub	sp, #36	; 0x24
 801c1a0:	af02      	add	r7, sp, #8
 801c1a2:	6078      	str	r0, [r7, #4]
 801c1a4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801c1a6:	683b      	ldr	r3, [r7, #0]
 801c1a8:	691b      	ldr	r3, [r3, #16]
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d101      	bne.n	801c1b2 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801c1ae:	f007 fbbd 	bl	802392c <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 801c1b2:	683b      	ldr	r3, [r7, #0]
 801c1b4:	691b      	ldr	r3, [r3, #16]
 801c1b6:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801c1b8:	2200      	movs	r2, #0
 801c1ba:	6839      	ldr	r1, [r7, #0]
 801c1bc:	6878      	ldr	r0, [r7, #4]
 801c1be:	f7ff facd 	bl	801b75c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801c1c2:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 801c1c4:	693b      	ldr	r3, [r7, #16]
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d10a      	bne.n	801c1e0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	695c      	ldr	r4, [r3, #20]
 801c1ce:	4b1a      	ldr	r3, [pc, #104]	; (801c238 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 801c1d0:	9300      	str	r3, [sp, #0]
 801c1d2:	238e      	movs	r3, #142	; 0x8e
 801c1d4:	4a19      	ldr	r2, [pc, #100]	; (801c23c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801c1d6:	491a      	ldr	r1, [pc, #104]	; (801c240 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801c1d8:	6878      	ldr	r0, [r7, #4]
 801c1da:	47a0      	blx	r4
 801c1dc:	2301      	movs	r3, #1
 801c1de:	e027      	b.n	801c230 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801c1e0:	2200      	movs	r2, #0
 801c1e2:	6839      	ldr	r1, [r7, #0]
 801c1e4:	6878      	ldr	r0, [r7, #4]
 801c1e6:	f7ff fac9 	bl	801b77c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801c1ea:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 801c1ec:	68fb      	ldr	r3, [r7, #12]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d10a      	bne.n	801c208 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	695c      	ldr	r4, [r3, #20]
 801c1f6:	4b13      	ldr	r3, [pc, #76]	; (801c244 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 801c1f8:	9300      	str	r3, [sp, #0]
 801c1fa:	2390      	movs	r3, #144	; 0x90
 801c1fc:	4a0f      	ldr	r2, [pc, #60]	; (801c23c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801c1fe:	4910      	ldr	r1, [pc, #64]	; (801c240 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801c200:	6878      	ldr	r0, [r7, #4]
 801c202:	47a0      	blx	r4
 801c204:	2301      	movs	r3, #1
 801c206:	e013      	b.n	801c230 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 801c208:	693b      	ldr	r3, [r7, #16]
 801c20a:	781b      	ldrb	r3, [r3, #0]
 801c20c:	2b09      	cmp	r3, #9
 801c20e:	d105      	bne.n	801c21c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 801c210:	697a      	ldr	r2, [r7, #20]
 801c212:	68f9      	ldr	r1, [r7, #12]
 801c214:	6938      	ldr	r0, [r7, #16]
 801c216:	f000 fa9d 	bl	801c754 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 801c21a:	e008      	b.n	801c22e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 801c21c:	693b      	ldr	r3, [r7, #16]
 801c21e:	781b      	ldrb	r3, [r3, #0]
 801c220:	2b03      	cmp	r3, #3
 801c222:	d104      	bne.n	801c22e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 801c224:	697a      	ldr	r2, [r7, #20]
 801c226:	68f9      	ldr	r1, [r7, #12]
 801c228:	6938      	ldr	r0, [r7, #16]
 801c22a:	f000 fb35 	bl	801c898 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 801c22e:	2300      	movs	r3, #0
}
 801c230:	4618      	mov	r0, r3
 801c232:	371c      	adds	r7, #28
 801c234:	46bd      	mov	sp, r7
 801c236:	bd90      	pop	{r4, r7, pc}
 801c238:	08028d7c 	.word	0x08028d7c
 801c23c:	08028cdc 	.word	0x08028cdc
 801c240:	08028d64 	.word	0x08028d64
 801c244:	08028d90 	.word	0x08028d90

0801c248 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 801c248:	b590      	push	{r4, r7, lr}
 801c24a:	b0ad      	sub	sp, #180	; 0xb4
 801c24c:	af02      	add	r7, sp, #8
 801c24e:	6078      	str	r0, [r7, #4]
 801c250:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801c252:	683b      	ldr	r3, [r7, #0]
 801c254:	691b      	ldr	r3, [r3, #16]
 801c256:	2b00      	cmp	r3, #0
 801c258:	d101      	bne.n	801c25e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801c25a:	f007 fb67 	bl	802392c <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 801c25e:	683b      	ldr	r3, [r7, #0]
 801c260:	691b      	ldr	r3, [r3, #16]
 801c262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801c266:	2200      	movs	r2, #0
 801c268:	6839      	ldr	r1, [r7, #0]
 801c26a:	6878      	ldr	r0, [r7, #4]
 801c26c:	f7ff fed8 	bl	801c020 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801c270:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801c274:	2200      	movs	r2, #0
 801c276:	6839      	ldr	r1, [r7, #0]
 801c278:	6878      	ldr	r0, [r7, #4]
 801c27a:	f7ff fee1 	bl	801c040 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801c27e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801c282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c286:	7a1b      	ldrb	r3, [r3, #8]
 801c288:	2b09      	cmp	r3, #9
 801c28a:	d032      	beq.n	801c2f2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801c28c:	2b09      	cmp	r3, #9
 801c28e:	f300 808c 	bgt.w	801c3aa <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 801c292:	2b01      	cmp	r3, #1
 801c294:	d002      	beq.n	801c29c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 801c296:	2b03      	cmp	r3, #3
 801c298:	d059      	beq.n	801c34e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 801c29a:	e086      	b.n	801c3aa <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 801c29c:	f107 030c 	add.w	r3, r7, #12
 801c2a0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c2a4:	4618      	mov	r0, r3
 801c2a6:	f001 fe2f 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801c2aa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c2ae:	f000 fb95 	bl	801c9dc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801c2b2:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 801c2b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c2b8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c2bc:	4618      	mov	r0, r3
 801c2be:	f001 fe23 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801c2c2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c2c6:	f000 fb98 	bl	801c9fa <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801c2ca:	4603      	mov	r3, r0
 801c2cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c2d0:	f107 000c 	add.w	r0, r7, #12
 801c2d4:	4621      	mov	r1, r4
 801c2d6:	f7ff fed3 	bl	801c080 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 801c2da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c2de:	4618      	mov	r0, r3
 801c2e0:	f7ff fca7 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801c2e4:	f107 030c 	add.w	r3, r7, #12
 801c2e8:	4618      	mov	r0, r3
 801c2ea:	f7ff fca2 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801c2ee:	2300      	movs	r3, #0
 801c2f0:	e069      	b.n	801c3c6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801c2f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c2f6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c2fa:	4618      	mov	r0, r3
 801c2fc:	f001 fe04 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 801c300:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c304:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c308:	4618      	mov	r0, r3
 801c30a:	f001 fdfd 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801c30e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c312:	f000 fb83 	bl	801ca1c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801c316:	4604      	mov	r4, r0
 801c318:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c31c:	f000 fb8d 	bl	801ca3a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801c320:	4603      	mov	r3, r0
 801c322:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801c326:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801c32a:	9300      	str	r3, [sp, #0]
 801c32c:	4623      	mov	r3, r4
 801c32e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801c332:	f000 fb93 	bl	801ca5c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 801c336:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c33a:	4618      	mov	r0, r3
 801c33c:	f7ff fc79 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801c340:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c344:	4618      	mov	r0, r3
 801c346:	f7ff fc74 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801c34a:	2300      	movs	r3, #0
 801c34c:	e03b      	b.n	801c3c6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801c34e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c352:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c356:	4618      	mov	r0, r3
 801c358:	f001 fdd6 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 801c35c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c360:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c364:	4618      	mov	r0, r3
 801c366:	f001 fdcf 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801c36a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c36e:	f000 fbc1 	bl	801caf4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801c372:	4604      	mov	r4, r0
 801c374:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c378:	f000 fbcb 	bl	801cb12 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801c37c:	4603      	mov	r3, r0
 801c37e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801c382:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801c386:	9300      	str	r3, [sp, #0]
 801c388:	4623      	mov	r3, r4
 801c38a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801c38e:	f000 fbd1 	bl	801cb34 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 801c392:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c396:	4618      	mov	r0, r3
 801c398:	f7ff fc4b 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801c39c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c3a0:	4618      	mov	r0, r3
 801c3a2:	f7ff fc46 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	e00d      	b.n	801c3c6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	695c      	ldr	r4, [r3, #20]
 801c3ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c3b2:	7a1b      	ldrb	r3, [r3, #8]
 801c3b4:	4618      	mov	r0, r3
 801c3b6:	f7fe fee1 	bl	801b17c <TfLiteTypeGetName>
 801c3ba:	4603      	mov	r3, r0
 801c3bc:	461a      	mov	r2, r3
 801c3be:	4904      	ldr	r1, [pc, #16]	; (801c3d0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 801c3c0:	6878      	ldr	r0, [r7, #4]
 801c3c2:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801c3c4:	2301      	movs	r3, #1
    }
  }
}
 801c3c6:	4618      	mov	r0, r3
 801c3c8:	37ac      	adds	r7, #172	; 0xac
 801c3ca:	46bd      	mov	sp, r7
 801c3cc:	bd90      	pop	{r4, r7, pc}
 801c3ce:	bf00      	nop
 801c3d0:	08028da4 	.word	0x08028da4

0801c3d4 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 801c3d4:	b580      	push	{r7, lr}
 801c3d6:	b084      	sub	sp, #16
 801c3d8:	af00      	add	r7, sp, #0
 801c3da:	60f8      	str	r0, [r7, #12]
 801c3dc:	60b9      	str	r1, [r7, #8]
 801c3de:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d101      	bne.n	801c3ec <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 801c3e8:	f007 faa0 	bl	802392c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3f0:	2104      	movs	r1, #4
 801c3f2:	68f8      	ldr	r0, [r7, #12]
 801c3f4:	4798      	blx	r3
 801c3f6:	4603      	mov	r3, r0
}
 801c3f8:	4618      	mov	r0, r3
 801c3fa:	3710      	adds	r7, #16
 801c3fc:	46bd      	mov	sp, r7
 801c3fe:	bd80      	pop	{r7, pc}

0801c400 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 801c400:	b590      	push	{r4, r7, lr}
 801c402:	b087      	sub	sp, #28
 801c404:	af02      	add	r7, sp, #8
 801c406:	6078      	str	r0, [r7, #4]
 801c408:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801c40a:	683b      	ldr	r3, [r7, #0]
 801c40c:	691b      	ldr	r3, [r3, #16]
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d101      	bne.n	801c416 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801c412:	f007 fa8b 	bl	802392c <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 801c416:	683b      	ldr	r3, [r7, #0]
 801c418:	691b      	ldr	r3, [r3, #16]
 801c41a:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801c41c:	2200      	movs	r2, #0
 801c41e:	6839      	ldr	r1, [r7, #0]
 801c420:	6878      	ldr	r0, [r7, #4]
 801c422:	f7ff f99b 	bl	801b75c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801c426:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 801c428:	68bb      	ldr	r3, [r7, #8]
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d10a      	bne.n	801c444 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	695c      	ldr	r4, [r3, #20]
 801c432:	4b20      	ldr	r3, [pc, #128]	; (801c4b4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 801c434:	9300      	str	r3, [sp, #0]
 801c436:	23cd      	movs	r3, #205	; 0xcd
 801c438:	4a1f      	ldr	r2, [pc, #124]	; (801c4b8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 801c43a:	4920      	ldr	r1, [pc, #128]	; (801c4bc <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 801c43c:	6878      	ldr	r0, [r7, #4]
 801c43e:	47a0      	blx	r4
 801c440:	2301      	movs	r3, #1
 801c442:	e033      	b.n	801c4ac <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 801c444:	68bb      	ldr	r3, [r7, #8]
 801c446:	781b      	ldrb	r3, [r3, #0]
 801c448:	2b09      	cmp	r3, #9
 801c44a:	d115      	bne.n	801c478 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801c44c:	68bb      	ldr	r3, [r7, #8]
 801c44e:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 801c452:	68bb      	ldr	r3, [r7, #8]
 801c454:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801c456:	4618      	mov	r0, r3
 801c458:	eef0 0a67 	vmov.f32	s1, s15
 801c45c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801c460:	f000 fbb3 	bl	801cbca <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 801c464:	4603      	mov	r3, r0
 801c466:	461a      	mov	r2, r3
 801c468:	68fb      	ldr	r3, [r7, #12]
 801c46a:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 801c46c:	68bb      	ldr	r3, [r7, #8]
 801c46e:	691b      	ldr	r3, [r3, #16]
 801c470:	b25a      	sxtb	r2, r3
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	705a      	strb	r2, [r3, #1]
 801c476:	e018      	b.n	801c4aa <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 801c478:	68bb      	ldr	r3, [r7, #8]
 801c47a:	781b      	ldrb	r3, [r3, #0]
 801c47c:	2b03      	cmp	r3, #3
 801c47e:	d114      	bne.n	801c4aa <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801c480:	68bb      	ldr	r3, [r7, #8]
 801c482:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 801c486:	68bb      	ldr	r3, [r7, #8]
 801c488:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801c48a:	4618      	mov	r0, r3
 801c48c:	eef0 0a67 	vmov.f32	s1, s15
 801c490:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801c494:	f000 fbe8 	bl	801cc68 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 801c498:	4603      	mov	r3, r0
 801c49a:	461a      	mov	r2, r3
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 801c4a0:	68bb      	ldr	r3, [r7, #8]
 801c4a2:	691b      	ldr	r3, [r3, #16]
 801c4a4:	b2da      	uxtb	r2, r3
 801c4a6:	68fb      	ldr	r3, [r7, #12]
 801c4a8:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 801c4aa:	2300      	movs	r3, #0
}
 801c4ac:	4618      	mov	r0, r3
 801c4ae:	3714      	adds	r7, #20
 801c4b0:	46bd      	mov	sp, r7
 801c4b2:	bd90      	pop	{r4, r7, pc}
 801c4b4:	08028d7c 	.word	0x08028d7c
 801c4b8:	08028cdc 	.word	0x08028cdc
 801c4bc:	08028d64 	.word	0x08028d64

0801c4c0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 801c4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4c2:	b0ad      	sub	sp, #180	; 0xb4
 801c4c4:	af02      	add	r7, sp, #8
 801c4c6:	6078      	str	r0, [r7, #4]
 801c4c8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801c4ca:	683b      	ldr	r3, [r7, #0]
 801c4cc:	691b      	ldr	r3, [r3, #16]
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d101      	bne.n	801c4d6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 801c4d2:	f007 fa2b 	bl	802392c <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 801c4d6:	683b      	ldr	r3, [r7, #0]
 801c4d8:	691b      	ldr	r3, [r3, #16]
 801c4da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801c4de:	2200      	movs	r2, #0
 801c4e0:	6839      	ldr	r1, [r7, #0]
 801c4e2:	6878      	ldr	r0, [r7, #4]
 801c4e4:	f7ff fd9c 	bl	801c020 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801c4e8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801c4ec:	2200      	movs	r2, #0
 801c4ee:	6839      	ldr	r1, [r7, #0]
 801c4f0:	6878      	ldr	r0, [r7, #4]
 801c4f2:	f7ff fda5 	bl	801c040 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801c4f6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801c4fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c4fe:	7a1b      	ldrb	r3, [r3, #8]
 801c500:	2b09      	cmp	r3, #9
 801c502:	d032      	beq.n	801c56a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801c504:	2b09      	cmp	r3, #9
 801c506:	f300 809c 	bgt.w	801c642 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 801c50a:	2b01      	cmp	r3, #1
 801c50c:	d002      	beq.n	801c514 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 801c50e:	2b03      	cmp	r3, #3
 801c510:	d062      	beq.n	801c5d8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 801c512:	e096      	b.n	801c642 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 801c514:	f107 030c 	add.w	r3, r7, #12
 801c518:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c51c:	4618      	mov	r0, r3
 801c51e:	f001 fcf3 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801c522:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c526:	f000 fa59 	bl	801c9dc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801c52a:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 801c52c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c530:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c534:	4618      	mov	r0, r3
 801c536:	f001 fce7 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801c53a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c53e:	f000 fa5c 	bl	801c9fa <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801c542:	4603      	mov	r3, r0
 801c544:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c548:	f107 000c 	add.w	r0, r7, #12
 801c54c:	4621      	mov	r1, r4
 801c54e:	f7ff fdcb 	bl	801c0e8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 801c552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c556:	4618      	mov	r0, r3
 801c558:	f7ff fb6b 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801c55c:	f107 030c 	add.w	r3, r7, #12
 801c560:	4618      	mov	r0, r3
 801c562:	f7ff fb66 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801c566:	2300      	movs	r3, #0
 801c568:	e079      	b.n	801c65e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801c56a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c56e:	f993 4001 	ldrsb.w	r4, [r3, #1]
 801c572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c576:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 801c57a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c57e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c582:	4618      	mov	r0, r3
 801c584:	f001 fcc0 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801c588:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c58c:	f000 fa46 	bl	801ca1c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801c590:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 801c592:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c596:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c59a:	4618      	mov	r0, r3
 801c59c:	f001 fcb4 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801c5a0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c5a4:	f000 fa49 	bl	801ca3a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801c5a8:	4603      	mov	r3, r0
 801c5aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801c5ae:	9301      	str	r3, [sp, #4]
 801c5b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c5b4:	9300      	str	r3, [sp, #0]
 801c5b6:	4633      	mov	r3, r6
 801c5b8:	4629      	mov	r1, r5
 801c5ba:	4620      	mov	r0, r4
 801c5bc:	f000 fba3 	bl	801cd06 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 801c5c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c5c4:	4618      	mov	r0, r3
 801c5c6:	f7ff fb34 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 801c5ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c5ce:	4618      	mov	r0, r3
 801c5d0:	f7ff fb2f 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	e042      	b.n	801c65e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801c5d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c5dc:	78dc      	ldrb	r4, [r3, #3]
 801c5de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c5e2:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 801c5e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c5e8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c5ec:	4618      	mov	r0, r3
 801c5ee:	f001 fc8b 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801c5f2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801c5f6:	f000 fa7d 	bl	801caf4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801c5fa:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 801c5fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c600:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801c604:	4618      	mov	r0, r3
 801c606:	f001 fc7f 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801c60a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801c60e:	f000 fa80 	bl	801cb12 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801c612:	4603      	mov	r3, r0
 801c614:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801c618:	9301      	str	r3, [sp, #4]
 801c61a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c61e:	9300      	str	r3, [sp, #0]
 801c620:	4633      	mov	r3, r6
 801c622:	4629      	mov	r1, r5
 801c624:	4620      	mov	r0, r4
 801c626:	f000 fbad 	bl	801cd84 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 801c62a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801c62e:	4618      	mov	r0, r3
 801c630:	f7ff faff 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 801c634:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c638:	4618      	mov	r0, r3
 801c63a:	f7ff fafa 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801c63e:	2300      	movs	r3, #0
 801c640:	e00d      	b.n	801c65e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	695c      	ldr	r4, [r3, #20]
 801c646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c64a:	7a1b      	ldrb	r3, [r3, #8]
 801c64c:	4618      	mov	r0, r3
 801c64e:	f7fe fd95 	bl	801b17c <TfLiteTypeGetName>
 801c652:	4603      	mov	r3, r0
 801c654:	461a      	mov	r2, r3
 801c656:	4904      	ldr	r1, [pc, #16]	; (801c668 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 801c658:	6878      	ldr	r0, [r7, #4]
 801c65a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801c65c:	2301      	movs	r3, #1
    }
  }
}
 801c65e:	4618      	mov	r0, r3
 801c660:	37ac      	adds	r7, #172	; 0xac
 801c662:	46bd      	mov	sp, r7
 801c664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c666:	bf00      	nop
 801c668:	08028da4 	.word	0x08028da4

0801c66c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 801c66c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c66e:	b089      	sub	sp, #36	; 0x24
 801c670:	af00      	add	r7, sp, #0
 801c672:	6078      	str	r0, [r7, #4]
 801c674:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 801c676:	6839      	ldr	r1, [r7, #0]
 801c678:	2900      	cmp	r1, #0
 801c67a:	da06      	bge.n	801c68a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 801c67c:	4b31      	ldr	r3, [pc, #196]	; (801c744 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 801c67e:	4a32      	ldr	r2, [pc, #200]	; (801c748 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801c680:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801c684:	4831      	ldr	r0, [pc, #196]	; (801c74c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801c686:	f007 f959 	bl	802393c <__assert_func>
  assert(exponent <= 31);
 801c68a:	6839      	ldr	r1, [r7, #0]
 801c68c:	291f      	cmp	r1, #31
 801c68e:	dd06      	ble.n	801c69e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 801c690:	4b2f      	ldr	r3, [pc, #188]	; (801c750 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 801c692:	4a2d      	ldr	r2, [pc, #180]	; (801c748 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801c694:	f240 1167 	movw	r1, #359	; 0x167
 801c698:	482c      	ldr	r0, [pc, #176]	; (801c74c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801c69a:	f007 f94f 	bl	802393c <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 801c69e:	f04f 0001 	mov.w	r0, #1
 801c6a2:	f04f 0100 	mov.w	r1, #0
 801c6a6:	683c      	ldr	r4, [r7, #0]
 801c6a8:	f1a4 0620 	sub.w	r6, r4, #32
 801c6ac:	f1c4 0520 	rsb	r5, r4, #32
 801c6b0:	fa01 f304 	lsl.w	r3, r1, r4
 801c6b4:	fa00 f606 	lsl.w	r6, r0, r6
 801c6b8:	4333      	orrs	r3, r6
 801c6ba:	fa20 f505 	lsr.w	r5, r0, r5
 801c6be:	432b      	orrs	r3, r5
 801c6c0:	fa00 f204 	lsl.w	r2, r0, r4
 801c6c4:	4613      	mov	r3, r2
 801c6c6:	3b01      	subs	r3, #1
 801c6c8:	4618      	mov	r0, r3
 801c6ca:	f000 fb93 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c6ce:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 801c6d0:	2000      	movs	r0, #0
 801c6d2:	f000 fb8f 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c6d6:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 801c6d8:	2001      	movs	r0, #1
 801c6da:	f000 fb8b 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c6de:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 801c6e0:	69f9      	ldr	r1, [r7, #28]
 801c6e2:	6878      	ldr	r0, [r7, #4]
 801c6e4:	f000 fb91 	bl	801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c6e8:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 801c6ea:	2101      	movs	r1, #1
 801c6ec:	69f8      	ldr	r0, [r7, #28]
 801c6ee:	f000 fb9a 	bl	801ce26 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801c6f2:	4604      	mov	r4, r0
 801c6f4:	69b9      	ldr	r1, [r7, #24]
 801c6f6:	6878      	ldr	r0, [r7, #4]
 801c6f8:	f000 fba4 	bl	801ce44 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801c6fc:	4603      	mov	r3, r0
 801c6fe:	6979      	ldr	r1, [r7, #20]
 801c700:	4618      	mov	r0, r3
 801c702:	f000 fb82 	bl	801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c706:	4603      	mov	r3, r0
 801c708:	4619      	mov	r1, r3
 801c70a:	4620      	mov	r0, r4
 801c70c:	f000 fbae 	bl	801ce6c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801c710:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 801c712:	6839      	ldr	r1, [r7, #0]
 801c714:	6878      	ldr	r0, [r7, #4]
 801c716:	f000 fb86 	bl	801ce26 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801c71a:	4604      	mov	r4, r0
 801c71c:	68f9      	ldr	r1, [r7, #12]
 801c71e:	6938      	ldr	r0, [r7, #16]
 801c720:	f000 fbb2 	bl	801ce88 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801c724:	4603      	mov	r3, r0
 801c726:	6979      	ldr	r1, [r7, #20]
 801c728:	4618      	mov	r0, r3
 801c72a:	f000 fb6e 	bl	801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c72e:	4603      	mov	r3, r0
 801c730:	4619      	mov	r1, r3
 801c732:	4620      	mov	r0, r4
 801c734:	f000 fb9a 	bl	801ce6c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801c738:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 801c73a:	4618      	mov	r0, r3
 801c73c:	3724      	adds	r7, #36	; 0x24
 801c73e:	46bd      	mov	sp, r7
 801c740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c742:	bf00      	nop
 801c744:	08028e10 	.word	0x08028e10
 801c748:	08028e20 	.word	0x08028e20
 801c74c:	08028e7c 	.word	0x08028e7c
 801c750:	08028f04 	.word	0x08028f04

0801c754 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801c754:	b590      	push	{r4, r7, lr}
 801c756:	b099      	sub	sp, #100	; 0x64
 801c758:	af00      	add	r7, sp, #0
 801c75a:	60f8      	str	r0, [r7, #12]
 801c75c:	60b9      	str	r1, [r7, #8]
 801c75e:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801c760:	f04f 0300 	mov.w	r3, #0
 801c764:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801c766:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801c76a:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	ed93 7a03 	vldr	s14, [r3, #12]
 801c772:	68bb      	ldr	r3, [r7, #8]
 801c774:	edd3 7a03 	vldr	s15, [r3, #12]
 801c778:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801c77c:	ee16 0a90 	vmov	r0, s13
 801c780:	f7e3 feec 	bl	800055c <__aeabi_f2d>
 801c784:	4602      	mov	r2, r0
 801c786:	460b      	mov	r3, r1
 801c788:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801c78c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c790:	68f9      	ldr	r1, [r7, #12]
 801c792:	4618      	mov	r0, r3
 801c794:	f7ff fac7 	bl	801bd26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801c798:	f107 0310 	add.w	r3, r7, #16
 801c79c:	68b9      	ldr	r1, [r7, #8]
 801c79e:	4618      	mov	r0, r3
 801c7a0:	f7ff fac1 	bl	801bd26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	f103 0214 	add.w	r2, r3, #20
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	3318      	adds	r3, #24
 801c7ae:	4619      	mov	r1, r3
 801c7b0:	4610      	mov	r0, r2
 801c7b2:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801c7b6:	f7fe fd67 	bl	801b288 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801c7ba:	f7fe ff1d 	bl	801b5f8 <_ZNSt14numeric_limitsIaE3minEv>
 801c7be:	4603      	mov	r3, r0
 801c7c0:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801c7c2:	68bb      	ldr	r3, [r7, #8]
 801c7c4:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801c7c6:	68bb      	ldr	r3, [r7, #8]
 801c7c8:	edd3 7a03 	vldr	s15, [r3, #12]
 801c7cc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801c7d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c7d4:	eeb0 0a66 	vmov.f32	s0, s13
 801c7d8:	f004 fd74 	bl	80212c4 <roundf>
 801c7dc:	eef0 7a40 	vmov.f32	s15, s0
 801c7e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c7e4:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801c7e8:	4423      	add	r3, r4
 801c7ea:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801c7ec:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801c7f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c7f4:	4611      	mov	r1, r2
 801c7f6:	4618      	mov	r0, r3
 801c7f8:	f7ff f9e6 	bl	801bbc8 <_ZSt3maxIlERKT_S2_S2_>
 801c7fc:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801c7fe:	681a      	ldr	r2, [r3, #0]
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801c804:	f7ff fab6 	bl	801bd74 <_ZNSt14numeric_limitsIfE8infinityEv>
 801c808:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801c80c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801c810:	eef4 7a47 	vcmp.f32	s15, s14
 801c814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c818:	d103      	bne.n	801c822 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801c81a:	f7fe fef6 	bl	801b60a <_ZNSt14numeric_limitsIaE3maxEv>
 801c81e:	4603      	mov	r3, r0
 801c820:	e022      	b.n	801c868 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801c822:	f7fe fef2 	bl	801b60a <_ZNSt14numeric_limitsIaE3maxEv>
 801c826:	4603      	mov	r3, r0
 801c828:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801c82a:	68bb      	ldr	r3, [r7, #8]
 801c82c:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801c82e:	68bb      	ldr	r3, [r7, #8]
 801c830:	edd3 7a03 	vldr	s15, [r3, #12]
 801c834:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801c838:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c83c:	eeb0 0a66 	vmov.f32	s0, s13
 801c840:	f004 fd40 	bl	80212c4 <roundf>
 801c844:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801c848:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c84c:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 801c850:	4423      	add	r3, r4
 801c852:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801c854:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801c858:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c85c:	4611      	mov	r1, r2
 801c85e:	4618      	mov	r0, r3
 801c860:	f7ff f99e 	bl	801bba0 <_ZSt3minIlERKT_S2_S2_>
 801c864:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801c866:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801c868:	687a      	ldr	r2, [r7, #4]
 801c86a:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	691a      	ldr	r2, [r3, #16]
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 801c874:	68bb      	ldr	r3, [r7, #8]
 801c876:	691a      	ldr	r2, [r3, #16]
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801c87c:	f107 0310 	add.w	r3, r7, #16
 801c880:	4618      	mov	r0, r3
 801c882:	f7ff f9d6 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801c886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c88a:	4618      	mov	r0, r3
 801c88c:	f7ff f9d1 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801c890:	bf00      	nop
 801c892:	3764      	adds	r7, #100	; 0x64
 801c894:	46bd      	mov	sp, r7
 801c896:	bd90      	pop	{r4, r7, pc}

0801c898 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801c898:	b590      	push	{r4, r7, lr}
 801c89a:	b099      	sub	sp, #100	; 0x64
 801c89c:	af00      	add	r7, sp, #0
 801c89e:	60f8      	str	r0, [r7, #12]
 801c8a0:	60b9      	str	r1, [r7, #8]
 801c8a2:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801c8a4:	f04f 0300 	mov.w	r3, #0
 801c8a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801c8aa:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801c8ae:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	ed93 7a03 	vldr	s14, [r3, #12]
 801c8b6:	68bb      	ldr	r3, [r7, #8]
 801c8b8:	edd3 7a03 	vldr	s15, [r3, #12]
 801c8bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801c8c0:	ee16 0a90 	vmov	r0, s13
 801c8c4:	f7e3 fe4a 	bl	800055c <__aeabi_f2d>
 801c8c8:	4602      	mov	r2, r0
 801c8ca:	460b      	mov	r3, r1
 801c8cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801c8d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c8d4:	68f9      	ldr	r1, [r7, #12]
 801c8d6:	4618      	mov	r0, r3
 801c8d8:	f7ff fa25 	bl	801bd26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801c8dc:	f107 0310 	add.w	r3, r7, #16
 801c8e0:	68b9      	ldr	r1, [r7, #8]
 801c8e2:	4618      	mov	r0, r3
 801c8e4:	f7ff fa1f 	bl	801bd26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	f103 0214 	add.w	r2, r3, #20
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	3318      	adds	r3, #24
 801c8f2:	4619      	mov	r1, r3
 801c8f4:	4610      	mov	r0, r2
 801c8f6:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801c8fa:	f7fe fcc5 	bl	801b288 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801c8fe:	f7fe fe8c 	bl	801b61a <_ZNSt14numeric_limitsIhE3minEv>
 801c902:	4603      	mov	r3, r0
 801c904:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801c906:	68bb      	ldr	r3, [r7, #8]
 801c908:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801c90a:	68bb      	ldr	r3, [r7, #8]
 801c90c:	edd3 7a03 	vldr	s15, [r3, #12]
 801c910:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801c914:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c918:	eeb0 0a66 	vmov.f32	s0, s13
 801c91c:	f004 fcd2 	bl	80212c4 <roundf>
 801c920:	eef0 7a40 	vmov.f32	s15, s0
 801c924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c928:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801c92c:	4423      	add	r3, r4
 801c92e:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801c930:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801c934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c938:	4611      	mov	r1, r2
 801c93a:	4618      	mov	r0, r3
 801c93c:	f7ff f944 	bl	801bbc8 <_ZSt3maxIlERKT_S2_S2_>
 801c940:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801c942:	681a      	ldr	r2, [r3, #0]
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801c948:	f7ff fa14 	bl	801bd74 <_ZNSt14numeric_limitsIfE8infinityEv>
 801c94c:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801c950:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801c954:	eef4 7a47 	vcmp.f32	s15, s14
 801c958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c95c:	d103      	bne.n	801c966 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801c95e:	f7fe fe64 	bl	801b62a <_ZNSt14numeric_limitsIhE3maxEv>
 801c962:	4603      	mov	r3, r0
 801c964:	e022      	b.n	801c9ac <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801c966:	f7fe fe60 	bl	801b62a <_ZNSt14numeric_limitsIhE3maxEv>
 801c96a:	4603      	mov	r3, r0
 801c96c:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801c96e:	68bb      	ldr	r3, [r7, #8]
 801c970:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801c972:	68bb      	ldr	r3, [r7, #8]
 801c974:	edd3 7a03 	vldr	s15, [r3, #12]
 801c978:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801c97c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c980:	eeb0 0a66 	vmov.f32	s0, s13
 801c984:	f004 fc9e 	bl	80212c4 <roundf>
 801c988:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801c98c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c990:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 801c994:	4423      	add	r3, r4
 801c996:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801c998:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801c99c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c9a0:	4611      	mov	r1, r2
 801c9a2:	4618      	mov	r0, r3
 801c9a4:	f7ff f8fc 	bl	801bba0 <_ZSt3minIlERKT_S2_S2_>
 801c9a8:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801c9aa:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801c9ac:	687a      	ldr	r2, [r7, #4]
 801c9ae:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	691a      	ldr	r2, [r3, #16]
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 801c9b8:	68bb      	ldr	r3, [r7, #8]
 801c9ba:	691a      	ldr	r2, [r3, #16]
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801c9c0:	f107 0310 	add.w	r3, r7, #16
 801c9c4:	4618      	mov	r0, r3
 801c9c6:	f7ff f934 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801c9ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c9ce:	4618      	mov	r0, r3
 801c9d0:	f7ff f92f 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801c9d4:	bf00      	nop
 801c9d6:	3764      	adds	r7, #100	; 0x64
 801c9d8:	46bd      	mov	sp, r7
 801c9da:	bd90      	pop	{r4, r7, pc}

0801c9dc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801c9dc:	b580      	push	{r7, lr}
 801c9de:	b082      	sub	sp, #8
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d101      	bne.n	801c9ee <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 801c9ea:	f006 ff9f 	bl	802392c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	681b      	ldr	r3, [r3, #0]
}
 801c9f2:	4618      	mov	r0, r3
 801c9f4:	3708      	adds	r7, #8
 801c9f6:	46bd      	mov	sp, r7
 801c9f8:	bd80      	pop	{r7, pc}

0801c9fa <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801c9fa:	b480      	push	{r7}
 801c9fc:	b083      	sub	sp, #12
 801c9fe:	af00      	add	r7, sp, #0
 801ca00:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d002      	beq.n	801ca0e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	e000      	b.n	801ca10 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 801ca0e:	2300      	movs	r3, #0
}
 801ca10:	4618      	mov	r0, r3
 801ca12:	370c      	adds	r7, #12
 801ca14:	46bd      	mov	sp, r7
 801ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca1a:	4770      	bx	lr

0801ca1c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801ca1c:	b580      	push	{r7, lr}
 801ca1e:	b082      	sub	sp, #8
 801ca20:	af00      	add	r7, sp, #0
 801ca22:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d101      	bne.n	801ca2e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 801ca2a:	f006 ff7f 	bl	802392c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	681b      	ldr	r3, [r3, #0]
}
 801ca32:	4618      	mov	r0, r3
 801ca34:	3708      	adds	r7, #8
 801ca36:	46bd      	mov	sp, r7
 801ca38:	bd80      	pop	{r7, pc}

0801ca3a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801ca3a:	b480      	push	{r7}
 801ca3c:	b083      	sub	sp, #12
 801ca3e:	af00      	add	r7, sp, #0
 801ca40:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d002      	beq.n	801ca4e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	681b      	ldr	r3, [r3, #0]
 801ca4c:	e000      	b.n	801ca50 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 801ca4e:	2300      	movs	r3, #0
}
 801ca50:	4618      	mov	r0, r3
 801ca52:	370c      	adds	r7, #12
 801ca54:	46bd      	mov	sp, r7
 801ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca5a:	4770      	bx	lr

0801ca5c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801ca5c:	b590      	push	{r4, r7, lr}
 801ca5e:	b089      	sub	sp, #36	; 0x24
 801ca60:	af00      	add	r7, sp, #0
 801ca62:	60f8      	str	r0, [r7, #12]
 801ca64:	60b9      	str	r1, [r7, #8]
 801ca66:	607a      	str	r2, [r7, #4]
 801ca68:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801ca6a:	6879      	ldr	r1, [r7, #4]
 801ca6c:	68b8      	ldr	r0, [r7, #8]
 801ca6e:	f7ff fa5e 	bl	801bf2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801ca72:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801ca74:	2300      	movs	r3, #0
 801ca76:	61fb      	str	r3, [r7, #28]
 801ca78:	69fa      	ldr	r2, [r7, #28]
 801ca7a:	69bb      	ldr	r3, [r7, #24]
 801ca7c:	429a      	cmp	r2, r3
 801ca7e:	da35      	bge.n	801caec <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 801ca80:	69fb      	ldr	r3, [r7, #28]
 801ca82:	683a      	ldr	r2, [r7, #0]
 801ca84:	4413      	add	r3, r2
 801ca86:	f993 3000 	ldrsb.w	r3, [r3]
 801ca8a:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801ca8c:	68fb      	ldr	r3, [r7, #12]
 801ca8e:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801ca90:	68fb      	ldr	r3, [r7, #12]
 801ca92:	68db      	ldr	r3, [r3, #12]
 801ca94:	697a      	ldr	r2, [r7, #20]
 801ca96:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 801ca98:	68fb      	ldr	r3, [r7, #12]
 801ca9a:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801caa0:	461a      	mov	r2, r3
 801caa2:	f7ff fa79 	bl	801bf98 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801caa6:	4603      	mov	r3, r0
        data.params.output_offset +
 801caa8:	4423      	add	r3, r4
    int32_t clamped =
 801caaa:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801caac:	68fb      	ldr	r3, [r7, #12]
 801caae:	3304      	adds	r3, #4
 801cab0:	f107 0210 	add.w	r2, r7, #16
 801cab4:	4611      	mov	r1, r2
 801cab6:	4618      	mov	r0, r3
 801cab8:	f7ff f886 	bl	801bbc8 <_ZSt3maxIlERKT_S2_S2_>
 801cabc:	4603      	mov	r3, r0
 801cabe:	681b      	ldr	r3, [r3, #0]
 801cac0:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801cac2:	68fb      	ldr	r3, [r7, #12]
 801cac4:	3308      	adds	r3, #8
 801cac6:	f107 0210 	add.w	r2, r7, #16
 801caca:	4611      	mov	r1, r2
 801cacc:	4618      	mov	r0, r3
 801cace:	f7ff f867 	bl	801bba0 <_ZSt3minIlERKT_S2_S2_>
 801cad2:	4603      	mov	r3, r0
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 801cad8:	6939      	ldr	r1, [r7, #16]
 801cada:	69fb      	ldr	r3, [r7, #28]
 801cadc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cade:	4413      	add	r3, r2
 801cae0:	b24a      	sxtb	r2, r1
 801cae2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801cae4:	69fb      	ldr	r3, [r7, #28]
 801cae6:	3301      	adds	r3, #1
 801cae8:	61fb      	str	r3, [r7, #28]
 801caea:	e7c5      	b.n	801ca78 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801caec:	bf00      	nop
 801caee:	3724      	adds	r7, #36	; 0x24
 801caf0:	46bd      	mov	sp, r7
 801caf2:	bd90      	pop	{r4, r7, pc}

0801caf4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801caf4:	b580      	push	{r7, lr}
 801caf6:	b082      	sub	sp, #8
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	d101      	bne.n	801cb06 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 801cb02:	f006 ff13 	bl	802392c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	681b      	ldr	r3, [r3, #0]
}
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	3708      	adds	r7, #8
 801cb0e:	46bd      	mov	sp, r7
 801cb10:	bd80      	pop	{r7, pc}

0801cb12 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801cb12:	b480      	push	{r7}
 801cb14:	b083      	sub	sp, #12
 801cb16:	af00      	add	r7, sp, #0
 801cb18:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d002      	beq.n	801cb26 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	681b      	ldr	r3, [r3, #0]
 801cb24:	e000      	b.n	801cb28 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 801cb26:	2300      	movs	r3, #0
}
 801cb28:	4618      	mov	r0, r3
 801cb2a:	370c      	adds	r7, #12
 801cb2c:	46bd      	mov	sp, r7
 801cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb32:	4770      	bx	lr

0801cb34 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801cb34:	b590      	push	{r4, r7, lr}
 801cb36:	b089      	sub	sp, #36	; 0x24
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	60f8      	str	r0, [r7, #12]
 801cb3c:	60b9      	str	r1, [r7, #8]
 801cb3e:	607a      	str	r2, [r7, #4]
 801cb40:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801cb42:	6879      	ldr	r1, [r7, #4]
 801cb44:	68b8      	ldr	r0, [r7, #8]
 801cb46:	f7ff f9f2 	bl	801bf2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801cb4a:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801cb4c:	2300      	movs	r3, #0
 801cb4e:	61fb      	str	r3, [r7, #28]
 801cb50:	69fa      	ldr	r2, [r7, #28]
 801cb52:	69bb      	ldr	r3, [r7, #24]
 801cb54:	429a      	cmp	r2, r3
 801cb56:	da34      	bge.n	801cbc2 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 801cb58:	69fb      	ldr	r3, [r7, #28]
 801cb5a:	683a      	ldr	r2, [r7, #0]
 801cb5c:	4413      	add	r3, r2
 801cb5e:	781b      	ldrb	r3, [r3, #0]
 801cb60:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801cb62:	68fb      	ldr	r3, [r7, #12]
 801cb64:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801cb66:	68fb      	ldr	r3, [r7, #12]
 801cb68:	68db      	ldr	r3, [r3, #12]
 801cb6a:	697a      	ldr	r2, [r7, #20]
 801cb6c:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 801cb6e:	68fb      	ldr	r3, [r7, #12]
 801cb70:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801cb72:	68fb      	ldr	r3, [r7, #12]
 801cb74:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801cb76:	461a      	mov	r2, r3
 801cb78:	f7ff fa0e 	bl	801bf98 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801cb7c:	4603      	mov	r3, r0
        data.params.output_offset +
 801cb7e:	4423      	add	r3, r4
    int32_t clamped =
 801cb80:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801cb82:	68fb      	ldr	r3, [r7, #12]
 801cb84:	3304      	adds	r3, #4
 801cb86:	f107 0210 	add.w	r2, r7, #16
 801cb8a:	4611      	mov	r1, r2
 801cb8c:	4618      	mov	r0, r3
 801cb8e:	f7ff f81b 	bl	801bbc8 <_ZSt3maxIlERKT_S2_S2_>
 801cb92:	4603      	mov	r3, r0
 801cb94:	681b      	ldr	r3, [r3, #0]
 801cb96:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801cb98:	68fb      	ldr	r3, [r7, #12]
 801cb9a:	3308      	adds	r3, #8
 801cb9c:	f107 0210 	add.w	r2, r7, #16
 801cba0:	4611      	mov	r1, r2
 801cba2:	4618      	mov	r0, r3
 801cba4:	f7fe fffc 	bl	801bba0 <_ZSt3minIlERKT_S2_S2_>
 801cba8:	4603      	mov	r3, r0
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 801cbae:	6939      	ldr	r1, [r7, #16]
 801cbb0:	69fb      	ldr	r3, [r7, #28]
 801cbb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cbb4:	4413      	add	r3, r2
 801cbb6:	b2ca      	uxtb	r2, r1
 801cbb8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801cbba:	69fb      	ldr	r3, [r7, #28]
 801cbbc:	3301      	adds	r3, #1
 801cbbe:	61fb      	str	r3, [r7, #28]
 801cbc0:	e7c6      	b.n	801cb50 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801cbc2:	bf00      	nop
 801cbc4:	3724      	adds	r7, #36	; 0x24
 801cbc6:	46bd      	mov	sp, r7
 801cbc8:	bd90      	pop	{r4, r7, pc}

0801cbca <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 801cbca:	b5b0      	push	{r4, r5, r7, lr}
 801cbcc:	b088      	sub	sp, #32
 801cbce:	af00      	add	r7, sp, #0
 801cbd0:	ed87 0a03 	vstr	s0, [r7, #12]
 801cbd4:	edc7 0a02 	vstr	s1, [r7, #8]
 801cbd8:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 801cbda:	ed97 7a03 	vldr	s14, [r7, #12]
 801cbde:	edd7 7a02 	vldr	s15, [r7, #8]
 801cbe2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801cbe6:	ee16 0a90 	vmov	r0, s13
 801cbea:	f7e3 fcb7 	bl	800055c <__aeabi_f2d>
 801cbee:	4602      	mov	r2, r0
 801cbf0:	460b      	mov	r3, r1
 801cbf2:	ec43 2b10 	vmov	d0, r2, r3
 801cbf6:	f004 fa6b 	bl	80210d0 <round>
 801cbfa:	ec55 4b10 	vmov	r4, r5, d0
 801cbfe:	6878      	ldr	r0, [r7, #4]
 801cc00:	f7e3 fc9a 	bl	8000538 <__aeabi_i2d>
 801cc04:	4602      	mov	r2, r0
 801cc06:	460b      	mov	r3, r1
 801cc08:	4620      	mov	r0, r4
 801cc0a:	4629      	mov	r1, r5
 801cc0c:	f7e3 fb48 	bl	80002a0 <__adddf3>
 801cc10:	4602      	mov	r2, r0
 801cc12:	460b      	mov	r3, r1
 801cc14:	4610      	mov	r0, r2
 801cc16:	4619      	mov	r1, r3
 801cc18:	f7e3 ffa8 	bl	8000b6c <__aeabi_d2iz>
 801cc1c:	4603      	mov	r3, r0
 801cc1e:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801cc20:	f7fe fcea 	bl	801b5f8 <_ZNSt14numeric_limitsIaE3minEv>
 801cc24:	4603      	mov	r3, r0
 801cc26:	61bb      	str	r3, [r7, #24]
 801cc28:	f107 0214 	add.w	r2, r7, #20
 801cc2c:	f107 0318 	add.w	r3, r7, #24
 801cc30:	4611      	mov	r1, r2
 801cc32:	4618      	mov	r0, r3
 801cc34:	f7fe ffc8 	bl	801bbc8 <_ZSt3maxIlERKT_S2_S2_>
 801cc38:	4603      	mov	r3, r0
  result =
 801cc3a:	681b      	ldr	r3, [r3, #0]
 801cc3c:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801cc3e:	f7fe fce4 	bl	801b60a <_ZNSt14numeric_limitsIaE3maxEv>
 801cc42:	4603      	mov	r3, r0
 801cc44:	61fb      	str	r3, [r7, #28]
 801cc46:	f107 0214 	add.w	r2, r7, #20
 801cc4a:	f107 031c 	add.w	r3, r7, #28
 801cc4e:	4611      	mov	r1, r2
 801cc50:	4618      	mov	r0, r3
 801cc52:	f7fe ffa5 	bl	801bba0 <_ZSt3minIlERKT_S2_S2_>
 801cc56:	4603      	mov	r3, r0
  result =
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	617b      	str	r3, [r7, #20]
  return result;
 801cc5c:	697b      	ldr	r3, [r7, #20]
 801cc5e:	b25b      	sxtb	r3, r3
}
 801cc60:	4618      	mov	r0, r3
 801cc62:	3720      	adds	r7, #32
 801cc64:	46bd      	mov	sp, r7
 801cc66:	bdb0      	pop	{r4, r5, r7, pc}

0801cc68 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 801cc68:	b5b0      	push	{r4, r5, r7, lr}
 801cc6a:	b088      	sub	sp, #32
 801cc6c:	af00      	add	r7, sp, #0
 801cc6e:	ed87 0a03 	vstr	s0, [r7, #12]
 801cc72:	edc7 0a02 	vstr	s1, [r7, #8]
 801cc76:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 801cc78:	ed97 7a03 	vldr	s14, [r7, #12]
 801cc7c:	edd7 7a02 	vldr	s15, [r7, #8]
 801cc80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801cc84:	ee16 0a90 	vmov	r0, s13
 801cc88:	f7e3 fc68 	bl	800055c <__aeabi_f2d>
 801cc8c:	4602      	mov	r2, r0
 801cc8e:	460b      	mov	r3, r1
 801cc90:	ec43 2b10 	vmov	d0, r2, r3
 801cc94:	f004 fa1c 	bl	80210d0 <round>
 801cc98:	ec55 4b10 	vmov	r4, r5, d0
 801cc9c:	6878      	ldr	r0, [r7, #4]
 801cc9e:	f7e3 fc4b 	bl	8000538 <__aeabi_i2d>
 801cca2:	4602      	mov	r2, r0
 801cca4:	460b      	mov	r3, r1
 801cca6:	4620      	mov	r0, r4
 801cca8:	4629      	mov	r1, r5
 801ccaa:	f7e3 faf9 	bl	80002a0 <__adddf3>
 801ccae:	4602      	mov	r2, r0
 801ccb0:	460b      	mov	r3, r1
 801ccb2:	4610      	mov	r0, r2
 801ccb4:	4619      	mov	r1, r3
 801ccb6:	f7e3 ff59 	bl	8000b6c <__aeabi_d2iz>
 801ccba:	4603      	mov	r3, r0
 801ccbc:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801ccbe:	f7fe fcac 	bl	801b61a <_ZNSt14numeric_limitsIhE3minEv>
 801ccc2:	4603      	mov	r3, r0
 801ccc4:	61bb      	str	r3, [r7, #24]
 801ccc6:	f107 0214 	add.w	r2, r7, #20
 801ccca:	f107 0318 	add.w	r3, r7, #24
 801ccce:	4611      	mov	r1, r2
 801ccd0:	4618      	mov	r0, r3
 801ccd2:	f7fe ff79 	bl	801bbc8 <_ZSt3maxIlERKT_S2_S2_>
 801ccd6:	4603      	mov	r3, r0
  result =
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801ccdc:	f7fe fca5 	bl	801b62a <_ZNSt14numeric_limitsIhE3maxEv>
 801cce0:	4603      	mov	r3, r0
 801cce2:	61fb      	str	r3, [r7, #28]
 801cce4:	f107 0214 	add.w	r2, r7, #20
 801cce8:	f107 031c 	add.w	r3, r7, #28
 801ccec:	4611      	mov	r1, r2
 801ccee:	4618      	mov	r0, r3
 801ccf0:	f7fe ff56 	bl	801bba0 <_ZSt3minIlERKT_S2_S2_>
 801ccf4:	4603      	mov	r3, r0
  result =
 801ccf6:	681b      	ldr	r3, [r3, #0]
 801ccf8:	617b      	str	r3, [r7, #20]
  return result;
 801ccfa:	697b      	ldr	r3, [r7, #20]
 801ccfc:	b2db      	uxtb	r3, r3
}
 801ccfe:	4618      	mov	r0, r3
 801cd00:	3720      	adds	r7, #32
 801cd02:	46bd      	mov	sp, r7
 801cd04:	bdb0      	pop	{r4, r5, r7, pc}

0801cd06 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 801cd06:	b580      	push	{r7, lr}
 801cd08:	b088      	sub	sp, #32
 801cd0a:	af00      	add	r7, sp, #0
 801cd0c:	60ba      	str	r2, [r7, #8]
 801cd0e:	607b      	str	r3, [r7, #4]
 801cd10:	4603      	mov	r3, r0
 801cd12:	73fb      	strb	r3, [r7, #15]
 801cd14:	460b      	mov	r3, r1
 801cd16:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801cd18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cd1a:	68b8      	ldr	r0, [r7, #8]
 801cd1c:	f7ff f907 	bl	801bf2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801cd20:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801cd22:	2300      	movs	r3, #0
 801cd24:	61fb      	str	r3, [r7, #28]
 801cd26:	69fa      	ldr	r2, [r7, #28]
 801cd28:	69bb      	ldr	r3, [r7, #24]
 801cd2a:	429a      	cmp	r2, r3
 801cd2c:	da26      	bge.n	801cd7c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 801cd2e:	69fb      	ldr	r3, [r7, #28]
 801cd30:	687a      	ldr	r2, [r7, #4]
 801cd32:	4413      	add	r3, r2
 801cd34:	781b      	ldrb	r3, [r3, #0]
 801cd36:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 801cd38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cd3c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801cd40:	429a      	cmp	r2, r3
 801cd42:	dd04      	ble.n	801cd4e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 801cd44:	f107 030e 	add.w	r3, r7, #14
 801cd48:	f993 3000 	ldrsb.w	r3, [r3]
 801cd4c:	e00c      	b.n	801cd68 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801cd4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cd52:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801cd56:	429a      	cmp	r2, r3
 801cd58:	da04      	bge.n	801cd64 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 801cd5a:	f107 030f 	add.w	r3, r7, #15
 801cd5e:	f993 3000 	ldrsb.w	r3, [r3]
 801cd62:	e001      	b.n	801cd68 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801cd64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cd68:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 801cd6a:	69fb      	ldr	r3, [r7, #28]
 801cd6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd6e:	4413      	add	r3, r2
 801cd70:	7dba      	ldrb	r2, [r7, #22]
 801cd72:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801cd74:	69fb      	ldr	r3, [r7, #28]
 801cd76:	3301      	adds	r3, #1
 801cd78:	61fb      	str	r3, [r7, #28]
 801cd7a:	e7d4      	b.n	801cd26 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 801cd7c:	bf00      	nop
 801cd7e:	3720      	adds	r7, #32
 801cd80:	46bd      	mov	sp, r7
 801cd82:	bd80      	pop	{r7, pc}

0801cd84 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 801cd84:	b580      	push	{r7, lr}
 801cd86:	b088      	sub	sp, #32
 801cd88:	af00      	add	r7, sp, #0
 801cd8a:	60ba      	str	r2, [r7, #8]
 801cd8c:	607b      	str	r3, [r7, #4]
 801cd8e:	4603      	mov	r3, r0
 801cd90:	73fb      	strb	r3, [r7, #15]
 801cd92:	460b      	mov	r3, r1
 801cd94:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801cd96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cd98:	68b8      	ldr	r0, [r7, #8]
 801cd9a:	f7ff f8c8 	bl	801bf2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801cd9e:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801cda0:	2300      	movs	r3, #0
 801cda2:	61fb      	str	r3, [r7, #28]
 801cda4:	69fa      	ldr	r2, [r7, #28]
 801cda6:	69bb      	ldr	r3, [r7, #24]
 801cda8:	429a      	cmp	r2, r3
 801cdaa:	da1f      	bge.n	801cdec <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 801cdac:	69fb      	ldr	r3, [r7, #28]
 801cdae:	687a      	ldr	r2, [r7, #4]
 801cdb0:	4413      	add	r3, r2
 801cdb2:	781b      	ldrb	r3, [r3, #0]
 801cdb4:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 801cdb6:	7bbb      	ldrb	r3, [r7, #14]
 801cdb8:	7dfa      	ldrb	r2, [r7, #23]
 801cdba:	429a      	cmp	r2, r3
 801cdbc:	d903      	bls.n	801cdc6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 801cdbe:	f107 030e 	add.w	r3, r7, #14
 801cdc2:	781b      	ldrb	r3, [r3, #0]
 801cdc4:	e008      	b.n	801cdd8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 801cdc6:	7bfb      	ldrb	r3, [r7, #15]
 801cdc8:	7dfa      	ldrb	r2, [r7, #23]
 801cdca:	429a      	cmp	r2, r3
 801cdcc:	d203      	bcs.n	801cdd6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 801cdce:	f107 030f 	add.w	r3, r7, #15
 801cdd2:	781b      	ldrb	r3, [r3, #0]
 801cdd4:	e000      	b.n	801cdd8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 801cdd6:	7dfb      	ldrb	r3, [r7, #23]
 801cdd8:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 801cdda:	69fb      	ldr	r3, [r7, #28]
 801cddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cdde:	4413      	add	r3, r2
 801cde0:	7dba      	ldrb	r2, [r7, #22]
 801cde2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801cde4:	69fb      	ldr	r3, [r7, #28]
 801cde6:	3301      	adds	r3, #1
 801cde8:	61fb      	str	r3, [r7, #28]
 801cdea:	e7db      	b.n	801cda4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 801cdec:	bf00      	nop
 801cdee:	3720      	adds	r7, #32
 801cdf0:	46bd      	mov	sp, r7
 801cdf2:	bd80      	pop	{r7, pc}

0801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 801cdf4:	b480      	push	{r7}
 801cdf6:	b083      	sub	sp, #12
 801cdf8:	af00      	add	r7, sp, #0
 801cdfa:	6078      	str	r0, [r7, #4]
  return x;
 801cdfc:	687b      	ldr	r3, [r7, #4]
}
 801cdfe:	4618      	mov	r0, r3
 801ce00:	370c      	adds	r7, #12
 801ce02:	46bd      	mov	sp, r7
 801ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce08:	4770      	bx	lr

0801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 801ce0a:	b480      	push	{r7}
 801ce0c:	b083      	sub	sp, #12
 801ce0e:	af00      	add	r7, sp, #0
 801ce10:	6078      	str	r0, [r7, #4]
 801ce12:	6039      	str	r1, [r7, #0]
  return a & b;
 801ce14:	687a      	ldr	r2, [r7, #4]
 801ce16:	683b      	ldr	r3, [r7, #0]
 801ce18:	4013      	ands	r3, r2
}
 801ce1a:	4618      	mov	r0, r3
 801ce1c:	370c      	adds	r7, #12
 801ce1e:	46bd      	mov	sp, r7
 801ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce24:	4770      	bx	lr

0801ce26 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 801ce26:	b480      	push	{r7}
 801ce28:	b083      	sub	sp, #12
 801ce2a:	af00      	add	r7, sp, #0
 801ce2c:	6078      	str	r0, [r7, #4]
 801ce2e:	6039      	str	r1, [r7, #0]
  return a >> offset;
 801ce30:	687a      	ldr	r2, [r7, #4]
 801ce32:	683b      	ldr	r3, [r7, #0]
 801ce34:	fa42 f303 	asr.w	r3, r2, r3
}
 801ce38:	4618      	mov	r0, r3
 801ce3a:	370c      	adds	r7, #12
 801ce3c:	46bd      	mov	sp, r7
 801ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce42:	4770      	bx	lr

0801ce44 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b082      	sub	sp, #8
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	6078      	str	r0, [r7, #4]
 801ce4c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 801ce4e:	687a      	ldr	r2, [r7, #4]
 801ce50:	683b      	ldr	r3, [r7, #0]
 801ce52:	429a      	cmp	r2, r3
 801ce54:	bfb4      	ite	lt
 801ce56:	2301      	movlt	r3, #1
 801ce58:	2300      	movge	r3, #0
 801ce5a:	b2db      	uxtb	r3, r3
 801ce5c:	4618      	mov	r0, r3
 801ce5e:	f000 f827 	bl	801ceb0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ce62:	4603      	mov	r3, r0
}
 801ce64:	4618      	mov	r0, r3
 801ce66:	3708      	adds	r7, #8
 801ce68:	46bd      	mov	sp, r7
 801ce6a:	bd80      	pop	{r7, pc}

0801ce6c <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 801ce6c:	b480      	push	{r7}
 801ce6e:	b083      	sub	sp, #12
 801ce70:	af00      	add	r7, sp, #0
 801ce72:	6078      	str	r0, [r7, #4]
 801ce74:	6039      	str	r1, [r7, #0]
  return a + b;
 801ce76:	687a      	ldr	r2, [r7, #4]
 801ce78:	683b      	ldr	r3, [r7, #0]
 801ce7a:	4413      	add	r3, r2
}
 801ce7c:	4618      	mov	r0, r3
 801ce7e:	370c      	adds	r7, #12
 801ce80:	46bd      	mov	sp, r7
 801ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce86:	4770      	bx	lr

0801ce88 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b082      	sub	sp, #8
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	6078      	str	r0, [r7, #4]
 801ce90:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 801ce92:	687a      	ldr	r2, [r7, #4]
 801ce94:	683b      	ldr	r3, [r7, #0]
 801ce96:	429a      	cmp	r2, r3
 801ce98:	bfcc      	ite	gt
 801ce9a:	2301      	movgt	r3, #1
 801ce9c:	2300      	movle	r3, #0
 801ce9e:	b2db      	uxtb	r3, r3
 801cea0:	4618      	mov	r0, r3
 801cea2:	f000 f805 	bl	801ceb0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801cea6:	4603      	mov	r3, r0
}
 801cea8:	4618      	mov	r0, r3
 801ceaa:	3708      	adds	r7, #8
 801ceac:	46bd      	mov	sp, r7
 801ceae:	bd80      	pop	{r7, pc}

0801ceb0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 801ceb0:	b580      	push	{r7, lr}
 801ceb2:	b082      	sub	sp, #8
 801ceb4:	af00      	add	r7, sp, #0
 801ceb6:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d004      	beq.n	801cec8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 801cebe:	2000      	movs	r0, #0
 801cec0:	f000 f807 	bl	801ced2 <_ZN8gemmlowp6BitNotIlEET_S1_>
 801cec4:	4603      	mov	r3, r0
 801cec6:	e000      	b.n	801ceca <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 801cec8:	2300      	movs	r3, #0
}
 801ceca:	4618      	mov	r0, r3
 801cecc:	3708      	adds	r7, #8
 801cece:	46bd      	mov	sp, r7
 801ced0:	bd80      	pop	{r7, pc}

0801ced2 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 801ced2:	b480      	push	{r7}
 801ced4:	b083      	sub	sp, #12
 801ced6:	af00      	add	r7, sp, #0
 801ced8:	6078      	str	r0, [r7, #4]
  return ~a;
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	43db      	mvns	r3, r3
}
 801cede:	4618      	mov	r0, r3
 801cee0:	370c      	adds	r7, #12
 801cee2:	46bd      	mov	sp, r7
 801cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cee8:	4770      	bx	lr

0801ceea <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 801ceea:	b480      	push	{r7}
 801ceec:	b083      	sub	sp, #12
 801ceee:	af00      	add	r7, sp, #0
 801cef0:	6078      	str	r0, [r7, #4]
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	4618      	mov	r0, r3
 801cefa:	370c      	adds	r7, #12
 801cefc:	46bd      	mov	sp, r7
 801cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf02:	4770      	bx	lr

0801cf04 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 801cf04:	b480      	push	{r7}
 801cf06:	b083      	sub	sp, #12
 801cf08:	af00      	add	r7, sp, #0
 801cf0a:	6078      	str	r0, [r7, #4]
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	685b      	ldr	r3, [r3, #4]
 801cf10:	681b      	ldr	r3, [r3, #0]
 801cf12:	4618      	mov	r0, r3
 801cf14:	370c      	adds	r7, #12
 801cf16:	46bd      	mov	sp, r7
 801cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf1c:	4770      	bx	lr

0801cf1e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801cf1e:	b580      	push	{r7, lr}
 801cf20:	b082      	sub	sp, #8
 801cf22:	af00      	add	r7, sp, #0
 801cf24:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d101      	bne.n	801cf30 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 801cf2c:	f006 fcfe 	bl	802392c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	681b      	ldr	r3, [r3, #0]
}
 801cf34:	4618      	mov	r0, r3
 801cf36:	3708      	adds	r7, #8
 801cf38:	46bd      	mov	sp, r7
 801cf3a:	bd80      	pop	{r7, pc}

0801cf3c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 801cf3c:	b590      	push	{r4, r7, lr}
 801cf3e:	b087      	sub	sp, #28
 801cf40:	af00      	add	r7, sp, #0
 801cf42:	60f8      	str	r0, [r7, #12]
 801cf44:	60b9      	str	r1, [r7, #8]
 801cf46:	607a      	str	r2, [r7, #4]
 801cf48:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 801cf4a:	68b9      	ldr	r1, [r7, #8]
 801cf4c:	68f8      	ldr	r0, [r7, #12]
 801cf4e:	f7fe ff93 	bl	801be78 <_ZNK6tflite12RuntimeShape4DimsEi>
 801cf52:	4604      	mov	r4, r0
 801cf54:	6839      	ldr	r1, [r7, #0]
 801cf56:	6878      	ldr	r0, [r7, #4]
 801cf58:	f7fe ff8e 	bl	801be78 <_ZNK6tflite12RuntimeShape4DimsEi>
 801cf5c:	4603      	mov	r3, r0
 801cf5e:	429c      	cmp	r4, r3
 801cf60:	d001      	beq.n	801cf66 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 801cf62:	f006 fce3 	bl	802392c <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 801cf66:	68b9      	ldr	r1, [r7, #8]
 801cf68:	68f8      	ldr	r0, [r7, #12]
 801cf6a:	f7fe ff85 	bl	801be78 <_ZNK6tflite12RuntimeShape4DimsEi>
 801cf6e:	4603      	mov	r3, r0
 801cf70:	613b      	str	r3, [r7, #16]
 801cf72:	6839      	ldr	r1, [r7, #0]
 801cf74:	6878      	ldr	r0, [r7, #4]
 801cf76:	f7fe ff7f 	bl	801be78 <_ZNK6tflite12RuntimeShape4DimsEi>
 801cf7a:	4603      	mov	r3, r0
 801cf7c:	617b      	str	r3, [r7, #20]
 801cf7e:	f107 0214 	add.w	r2, r7, #20
 801cf82:	f107 0310 	add.w	r3, r7, #16
 801cf86:	4611      	mov	r1, r2
 801cf88:	4618      	mov	r0, r3
 801cf8a:	f7fe fe09 	bl	801bba0 <_ZSt3minIlERKT_S2_S2_>
 801cf8e:	4603      	mov	r3, r0
 801cf90:	681b      	ldr	r3, [r3, #0]
}
 801cf92:	4618      	mov	r0, r3
 801cf94:	371c      	adds	r7, #28
 801cf96:	46bd      	mov	sp, r7
 801cf98:	bd90      	pop	{r4, r7, pc}

0801cf9a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801cf9a:	b580      	push	{r7, lr}
 801cf9c:	b082      	sub	sp, #8
 801cf9e:	af00      	add	r7, sp, #0
 801cfa0:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d101      	bne.n	801cfac <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 801cfa8:	f006 fcc0 	bl	802392c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	681b      	ldr	r3, [r3, #0]
}
 801cfb0:	4618      	mov	r0, r3
 801cfb2:	3708      	adds	r7, #8
 801cfb4:	46bd      	mov	sp, r7
 801cfb6:	bd80      	pop	{r7, pc}

0801cfb8 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 801cfb8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801cfbc:	b090      	sub	sp, #64	; 0x40
 801cfbe:	af00      	add	r7, sp, #0
 801cfc0:	61f8      	str	r0, [r7, #28]
 801cfc2:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 801cfc4:	69fb      	ldr	r3, [r7, #28]
 801cfc6:	17da      	asrs	r2, r3, #31
 801cfc8:	613b      	str	r3, [r7, #16]
 801cfca:	617a      	str	r2, [r7, #20]
 801cfcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801cfd0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 801cfd4:	69bb      	ldr	r3, [r7, #24]
 801cfd6:	17da      	asrs	r2, r3, #31
 801cfd8:	60bb      	str	r3, [r7, #8]
 801cfda:	60fa      	str	r2, [r7, #12]
 801cfdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cfe0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 801cfe4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801cfe8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801cfec:	1886      	adds	r6, r0, r2
 801cfee:	603e      	str	r6, [r7, #0]
 801cff0:	eb41 0303 	adc.w	r3, r1, r3
 801cff4:	607b      	str	r3, [r7, #4]
 801cff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cffa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 801cffe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801d002:	2b00      	cmp	r3, #0
 801d004:	db04      	blt.n	801d010 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 801d006:	f04f 0201 	mov.w	r2, #1
 801d00a:	f04f 0300 	mov.w	r3, #0
 801d00e:	e003      	b.n	801d018 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 801d010:	f04f 32ff 	mov.w	r2, #4294967295
 801d014:	f04f 33ff 	mov.w	r3, #4294967295
 801d018:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 801d01c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801d020:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d024:	eb10 0802 	adds.w	r8, r0, r2
 801d028:	eb41 0903 	adc.w	r9, r1, r3
 801d02c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 801d030:	2200      	movs	r2, #0
 801d032:	469a      	mov	sl, r3
 801d034:	4693      	mov	fp, r2
 801d036:	eb1a 0408 	adds.w	r4, sl, r8
 801d03a:	eb4b 0509 	adc.w	r5, fp, r9
 801d03e:	f04f 0200 	mov.w	r2, #0
 801d042:	f04f 0300 	mov.w	r3, #0
 801d046:	0862      	lsrs	r2, r4, #1
 801d048:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801d04c:	106b      	asrs	r3, r5, #1
 801d04e:	4613      	mov	r3, r2
}
 801d050:	4618      	mov	r0, r3
 801d052:	3740      	adds	r7, #64	; 0x40
 801d054:	46bd      	mov	sp, r7
 801d056:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801d05a:	4770      	bx	lr

0801d05c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 801d05c:	b580      	push	{r7, lr}
 801d05e:	b084      	sub	sp, #16
 801d060:	af00      	add	r7, sp, #0
 801d062:	60f8      	str	r0, [r7, #12]
 801d064:	60b9      	str	r1, [r7, #8]
 801d066:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 801d068:	68fa      	ldr	r2, [r7, #12]
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	fa02 f303 	lsl.w	r3, r2, r3
 801d070:	68b9      	ldr	r1, [r7, #8]
 801d072:	4618      	mov	r0, r3
 801d074:	f7fe fe8a 	bl	801bd8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801d078:	4603      	mov	r3, r0
}
 801d07a:	4618      	mov	r0, r3
 801d07c:	3710      	adds	r7, #16
 801d07e:	46bd      	mov	sp, r7
 801d080:	bd80      	pop	{r7, pc}

0801d082 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 801d082:	b580      	push	{r7, lr}
 801d084:	b088      	sub	sp, #32
 801d086:	af00      	add	r7, sp, #0
 801d088:	60f8      	str	r0, [r7, #12]
 801d08a:	60b9      	str	r1, [r7, #8]
 801d08c:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 801d08e:	68fb      	ldr	r3, [r7, #12]
 801d090:	4618      	mov	r0, r3
 801d092:	f000 f821 	bl	801d0d8 <_ZN6tflite17CountLeadingZerosImEEiT_>
 801d096:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 801d098:	68ba      	ldr	r2, [r7, #8]
 801d09a:	69fb      	ldr	r3, [r7, #28]
 801d09c:	1ad2      	subs	r2, r2, r3
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 801d0a2:	68fa      	ldr	r2, [r7, #12]
 801d0a4:	69fb      	ldr	r3, [r7, #28]
 801d0a6:	fa02 f303 	lsl.w	r3, r2, r3
 801d0aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 801d0ae:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 801d0b0:	69b8      	ldr	r0, [r7, #24]
 801d0b2:	f000 f823 	bl	801d0fc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d0b6:	4603      	mov	r3, r0
 801d0b8:	4618      	mov	r0, r3
 801d0ba:	f000 f831 	bl	801d120 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 801d0be:	4603      	mov	r3, r0
 801d0c0:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 801d0c2:	f107 0314 	add.w	r3, r7, #20
 801d0c6:	4618      	mov	r0, r3
 801d0c8:	f000 f88a 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d0cc:	4603      	mov	r3, r0
 801d0ce:	681b      	ldr	r3, [r3, #0]
}
 801d0d0:	4618      	mov	r0, r3
 801d0d2:	3720      	adds	r7, #32
 801d0d4:	46bd      	mov	sp, r7
 801d0d6:	bd80      	pop	{r7, pc}

0801d0d8 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 801d0d8:	b480      	push	{r7}
 801d0da:	b083      	sub	sp, #12
 801d0dc:	af00      	add	r7, sp, #0
 801d0de:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	d003      	beq.n	801d0ee <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 801d0ec:	e000      	b.n	801d0f0 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 801d0ee:	2320      	movs	r3, #32
}
 801d0f0:	4618      	mov	r0, r3
 801d0f2:	370c      	adds	r7, #12
 801d0f4:	46bd      	mov	sp, r7
 801d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0fa:	4770      	bx	lr

0801d0fc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 801d0fc:	b580      	push	{r7, lr}
 801d0fe:	b084      	sub	sp, #16
 801d100:	af00      	add	r7, sp, #0
 801d102:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 801d104:	f107 030c 	add.w	r3, r7, #12
 801d108:	4618      	mov	r0, r3
 801d10a:	f000 f869 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d10e:	4602      	mov	r2, r0
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	6013      	str	r3, [r2, #0]
    return retval;
 801d114:	68fb      	ldr	r3, [r7, #12]
  }
 801d116:	4618      	mov	r0, r3
 801d118:	3710      	adds	r7, #16
 801d11a:	46bd      	mov	sp, r7
 801d11c:	bd80      	pop	{r7, pc}
	...

0801d120 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 801d120:	b580      	push	{r7, lr}
 801d122:	b08a      	sub	sp, #40	; 0x28
 801d124:	af00      	add	r7, sp, #0
 801d126:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 801d128:	f000 f879 	bl	801d21e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801d12c:	4603      	mov	r3, r0
 801d12e:	4619      	mov	r1, r3
 801d130:	6878      	ldr	r0, [r7, #4]
 801d132:	f000 f87f 	bl	801d234 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d136:	4603      	mov	r3, r0
 801d138:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 801d13a:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 801d13e:	f000 f8ab 	bl	801d298 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801d142:	4603      	mov	r3, r0
 801d144:	4618      	mov	r0, r3
 801d146:	f000 f893 	bl	801d270 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801d14a:	4603      	mov	r3, r0
 801d14c:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 801d14e:	4823      	ldr	r0, [pc, #140]	; (801d1dc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801d150:	f000 f8a2 	bl	801d298 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801d154:	4603      	mov	r3, r0
 801d156:	4618      	mov	r0, r3
 801d158:	f000 f88a 	bl	801d270 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801d15c:	4603      	mov	r3, r0
 801d15e:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 801d160:	69b9      	ldr	r1, [r7, #24]
 801d162:	6a38      	ldr	r0, [r7, #32]
 801d164:	f000 f8a5 	bl	801d2b2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801d168:	4603      	mov	r3, r0
 801d16a:	4619      	mov	r1, r3
 801d16c:	69f8      	ldr	r0, [r7, #28]
 801d16e:	f000 f8c2 	bl	801d2f6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d172:	4603      	mov	r3, r0
 801d174:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801d176:	2300      	movs	r3, #0
 801d178:	627b      	str	r3, [r7, #36]	; 0x24
 801d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d17c:	2b02      	cmp	r3, #2
 801d17e:	dc21      	bgt.n	801d1c4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 801d180:	6979      	ldr	r1, [r7, #20]
 801d182:	6a38      	ldr	r0, [r7, #32]
 801d184:	f000 f895 	bl	801d2b2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801d188:	4603      	mov	r3, r0
 801d18a:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 801d18c:	f000 f8d1 	bl	801d332 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 801d190:	4603      	mov	r3, r0
 801d192:	6939      	ldr	r1, [r7, #16]
 801d194:	4618      	mov	r0, r3
 801d196:	f000 f8d5 	bl	801d344 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d19a:	4603      	mov	r3, r0
 801d19c:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 801d19e:	68f9      	ldr	r1, [r7, #12]
 801d1a0:	6978      	ldr	r0, [r7, #20]
 801d1a2:	f000 f8ed 	bl	801d380 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801d1a6:	4603      	mov	r3, r0
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	f000 f90b 	bl	801d3c4 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801d1ae:	4603      	mov	r3, r0
 801d1b0:	4619      	mov	r1, r3
 801d1b2:	6978      	ldr	r0, [r7, #20]
 801d1b4:	f000 f89f 	bl	801d2f6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d1b8:	4603      	mov	r3, r0
 801d1ba:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801d1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1be:	3301      	adds	r3, #1
 801d1c0:	627b      	str	r3, [r7, #36]	; 0x24
 801d1c2:	e7da      	b.n	801d17a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 801d1c4:	6978      	ldr	r0, [r7, #20]
 801d1c6:	f000 f917 	bl	801d3f8 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 801d1ca:	4603      	mov	r3, r0
 801d1cc:	4618      	mov	r0, r3
 801d1ce:	f000 f929 	bl	801d424 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801d1d2:	4603      	mov	r3, r0
}
 801d1d4:	4618      	mov	r0, r3
 801d1d6:	3728      	adds	r7, #40	; 0x28
 801d1d8:	46bd      	mov	sp, r7
 801d1da:	bd80      	pop	{r7, pc}
 801d1dc:	c3c3c3c4 	.word	0xc3c3c3c4

0801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 801d1e0:	b480      	push	{r7}
 801d1e2:	b083      	sub	sp, #12
 801d1e4:	af00      	add	r7, sp, #0
 801d1e6:	6078      	str	r0, [r7, #4]
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	4618      	mov	r0, r3
 801d1ec:	370c      	adds	r7, #12
 801d1ee:	46bd      	mov	sp, r7
 801d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1f4:	4770      	bx	lr

0801d1f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801d1f6:	b590      	push	{r4, r7, lr}
 801d1f8:	b085      	sub	sp, #20
 801d1fa:	af00      	add	r7, sp, #0
 801d1fc:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801d1fe:	f107 030c 	add.w	r3, r7, #12
 801d202:	4618      	mov	r0, r3
 801d204:	f7ff ffec 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d208:	4604      	mov	r4, r0
 801d20a:	6878      	ldr	r0, [r7, #4]
 801d20c:	f7ff fdf2 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d210:	4603      	mov	r3, r0
 801d212:	6023      	str	r3, [r4, #0]
    return retval;
 801d214:	68fb      	ldr	r3, [r7, #12]
  }
 801d216:	4618      	mov	r0, r3
 801d218:	3714      	adds	r7, #20
 801d21a:	46bd      	mov	sp, r7
 801d21c:	bd90      	pop	{r4, r7, pc}

0801d21e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 801d21e:	b580      	push	{r7, lr}
 801d220:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801d222:	f000 f927 	bl	801d474 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 801d226:	4603      	mov	r3, r0
 801d228:	4618      	mov	r0, r3
 801d22a:	f7ff ffe4 	bl	801d1f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801d22e:	4603      	mov	r3, r0
  }
 801d230:	4618      	mov	r0, r3
 801d232:	bd80      	pop	{r7, pc}

0801d234 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 801d234:	b590      	push	{r4, r7, lr}
 801d236:	b083      	sub	sp, #12
 801d238:	af00      	add	r7, sp, #0
 801d23a:	6078      	str	r0, [r7, #4]
 801d23c:	6039      	str	r1, [r7, #0]
 801d23e:	1d3b      	adds	r3, r7, #4
 801d240:	4618      	mov	r0, r3
 801d242:	f7ff ffcd 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d246:	4603      	mov	r3, r0
 801d248:	681c      	ldr	r4, [r3, #0]
 801d24a:	463b      	mov	r3, r7
 801d24c:	4618      	mov	r0, r3
 801d24e:	f7ff ffc7 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d252:	4603      	mov	r3, r0
 801d254:	681b      	ldr	r3, [r3, #0]
 801d256:	4619      	mov	r1, r3
 801d258:	4620      	mov	r0, r4
 801d25a:	f7ff fead 	bl	801cfb8 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 801d25e:	4603      	mov	r3, r0
 801d260:	4618      	mov	r0, r3
 801d262:	f7ff ff4b 	bl	801d0fc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d266:	4603      	mov	r3, r0
 801d268:	4618      	mov	r0, r3
 801d26a:	370c      	adds	r7, #12
 801d26c:	46bd      	mov	sp, r7
 801d26e:	bd90      	pop	{r4, r7, pc}

0801d270 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801d270:	b590      	push	{r4, r7, lr}
 801d272:	b085      	sub	sp, #20
 801d274:	af00      	add	r7, sp, #0
 801d276:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801d278:	f107 030c 	add.w	r3, r7, #12
 801d27c:	4618      	mov	r0, r3
 801d27e:	f000 f900 	bl	801d482 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d282:	4604      	mov	r4, r0
 801d284:	6878      	ldr	r0, [r7, #4]
 801d286:	f7ff fdb5 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d28a:	4603      	mov	r3, r0
 801d28c:	6023      	str	r3, [r4, #0]
    return retval;
 801d28e:	68fb      	ldr	r3, [r7, #12]
  }
 801d290:	4618      	mov	r0, r3
 801d292:	3714      	adds	r7, #20
 801d294:	46bd      	mov	sp, r7
 801d296:	bd90      	pop	{r4, r7, pc}

0801d298 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801d298:	b580      	push	{r7, lr}
 801d29a:	b082      	sub	sp, #8
 801d29c:	af00      	add	r7, sp, #0
 801d29e:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801d2a0:	2100      	movs	r1, #0
 801d2a2:	6878      	ldr	r0, [r7, #4]
 801d2a4:	f7ff f9e2 	bl	801c66c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801d2a8:	4603      	mov	r3, r0
}
 801d2aa:	4618      	mov	r0, r3
 801d2ac:	3708      	adds	r7, #8
 801d2ae:	46bd      	mov	sp, r7
 801d2b0:	bd80      	pop	{r7, pc}

0801d2b2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801d2b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2b4:	b085      	sub	sp, #20
 801d2b6:	af00      	add	r7, sp, #0
 801d2b8:	6078      	str	r0, [r7, #4]
 801d2ba:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801d2bc:	1d3b      	adds	r3, r7, #4
 801d2be:	4618      	mov	r0, r3
 801d2c0:	f7ff ff8e 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d2c4:	4603      	mov	r3, r0
 801d2c6:	681d      	ldr	r5, [r3, #0]
 801d2c8:	463b      	mov	r3, r7
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	f000 f8d9 	bl	801d482 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d2d0:	4603      	mov	r3, r0
 801d2d2:	681e      	ldr	r6, [r3, #0]
 801d2d4:	f107 030c 	add.w	r3, r7, #12
 801d2d8:	4618      	mov	r0, r3
 801d2da:	f000 f8d2 	bl	801d482 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d2de:	4604      	mov	r4, r0
 801d2e0:	4631      	mov	r1, r6
 801d2e2:	4628      	mov	r0, r5
 801d2e4:	f7fe fd52 	bl	801bd8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801d2e8:	4603      	mov	r3, r0
 801d2ea:	6023      	str	r3, [r4, #0]
  return c;
 801d2ec:	68fb      	ldr	r3, [r7, #12]
}
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	3714      	adds	r7, #20
 801d2f2:	46bd      	mov	sp, r7
 801d2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d2f6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801d2f6:	b590      	push	{r4, r7, lr}
 801d2f8:	b083      	sub	sp, #12
 801d2fa:	af00      	add	r7, sp, #0
 801d2fc:	6078      	str	r0, [r7, #4]
 801d2fe:	6039      	str	r1, [r7, #0]
 801d300:	1d3b      	adds	r3, r7, #4
 801d302:	4618      	mov	r0, r3
 801d304:	f000 f8bd 	bl	801d482 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d308:	4603      	mov	r3, r0
 801d30a:	681c      	ldr	r4, [r3, #0]
 801d30c:	463b      	mov	r3, r7
 801d30e:	4618      	mov	r0, r3
 801d310:	f000 f8b7 	bl	801d482 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d314:	4603      	mov	r3, r0
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	4619      	mov	r1, r3
 801d31a:	4620      	mov	r0, r4
 801d31c:	f7ff fda6 	bl	801ce6c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801d320:	4603      	mov	r3, r0
 801d322:	4618      	mov	r0, r3
 801d324:	f000 f8b8 	bl	801d498 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801d328:	4603      	mov	r3, r0
 801d32a:	4618      	mov	r0, r3
 801d32c:	370c      	adds	r7, #12
 801d32e:	46bd      	mov	sp, r7
 801d330:	bd90      	pop	{r4, r7, pc}

0801d332 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 801d332:	b580      	push	{r7, lr}
 801d334:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801d336:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801d33a:	f7ff ff99 	bl	801d270 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801d33e:	4603      	mov	r3, r0
  }
 801d340:	4618      	mov	r0, r3
 801d342:	bd80      	pop	{r7, pc}

0801d344 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801d344:	b590      	push	{r4, r7, lr}
 801d346:	b083      	sub	sp, #12
 801d348:	af00      	add	r7, sp, #0
 801d34a:	6078      	str	r0, [r7, #4]
 801d34c:	6039      	str	r1, [r7, #0]
 801d34e:	1d3b      	adds	r3, r7, #4
 801d350:	4618      	mov	r0, r3
 801d352:	f000 f896 	bl	801d482 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d356:	4603      	mov	r3, r0
 801d358:	681c      	ldr	r4, [r3, #0]
 801d35a:	463b      	mov	r3, r7
 801d35c:	4618      	mov	r0, r3
 801d35e:	f000 f890 	bl	801d482 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d362:	4603      	mov	r3, r0
 801d364:	681b      	ldr	r3, [r3, #0]
 801d366:	4619      	mov	r1, r3
 801d368:	4620      	mov	r0, r4
 801d36a:	f000 f875 	bl	801d458 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801d36e:	4603      	mov	r3, r0
 801d370:	4618      	mov	r0, r3
 801d372:	f000 f891 	bl	801d498 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801d376:	4603      	mov	r3, r0
 801d378:	4618      	mov	r0, r3
 801d37a:	370c      	adds	r7, #12
 801d37c:	46bd      	mov	sp, r7
 801d37e:	bd90      	pop	{r4, r7, pc}

0801d380 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801d380:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d382:	b085      	sub	sp, #20
 801d384:	af00      	add	r7, sp, #0
 801d386:	6078      	str	r0, [r7, #4]
 801d388:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801d38a:	1d3b      	adds	r3, r7, #4
 801d38c:	4618      	mov	r0, r3
 801d38e:	f000 f878 	bl	801d482 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d392:	4603      	mov	r3, r0
 801d394:	681d      	ldr	r5, [r3, #0]
 801d396:	463b      	mov	r3, r7
 801d398:	4618      	mov	r0, r3
 801d39a:	f000 f872 	bl	801d482 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d39e:	4603      	mov	r3, r0
 801d3a0:	681e      	ldr	r6, [r3, #0]
 801d3a2:	f107 030c 	add.w	r3, r7, #12
 801d3a6:	4618      	mov	r0, r3
 801d3a8:	f000 f887 	bl	801d4ba <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801d3ac:	4604      	mov	r4, r0
 801d3ae:	4631      	mov	r1, r6
 801d3b0:	4628      	mov	r0, r5
 801d3b2:	f7fe fceb 	bl	801bd8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801d3b6:	4603      	mov	r3, r0
 801d3b8:	6023      	str	r3, [r4, #0]
  return c;
 801d3ba:	68fb      	ldr	r3, [r7, #12]
}
 801d3bc:	4618      	mov	r0, r3
 801d3be:	3714      	adds	r7, #20
 801d3c0:	46bd      	mov	sp, r7
 801d3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d3c4 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801d3c4:	b5b0      	push	{r4, r5, r7, lr}
 801d3c6:	b084      	sub	sp, #16
 801d3c8:	af00      	add	r7, sp, #0
 801d3ca:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801d3cc:	1d3b      	adds	r3, r7, #4
 801d3ce:	4618      	mov	r0, r3
 801d3d0:	f000 f873 	bl	801d4ba <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801d3d4:	4603      	mov	r3, r0
 801d3d6:	681d      	ldr	r5, [r3, #0]
 801d3d8:	f107 030c 	add.w	r3, r7, #12
 801d3dc:	4618      	mov	r0, r3
 801d3de:	f000 f850 	bl	801d482 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d3e2:	4604      	mov	r4, r0
 801d3e4:	4628      	mov	r0, r5
 801d3e6:	f000 f873 	bl	801d4d0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 801d3ea:	4603      	mov	r3, r0
 801d3ec:	6023      	str	r3, [r4, #0]
  return result;
 801d3ee:	68fb      	ldr	r3, [r7, #12]
}
 801d3f0:	4618      	mov	r0, r3
 801d3f2:	3710      	adds	r7, #16
 801d3f4:	46bd      	mov	sp, r7
 801d3f6:	bdb0      	pop	{r4, r5, r7, pc}

0801d3f8 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 801d3f8:	b590      	push	{r4, r7, lr}
 801d3fa:	b085      	sub	sp, #20
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 801d400:	1d3b      	adds	r3, r7, #4
 801d402:	4618      	mov	r0, r3
 801d404:	f000 f83d 	bl	801d482 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d408:	4604      	mov	r4, r0
 801d40a:	f107 030c 	add.w	r3, r7, #12
 801d40e:	4618      	mov	r0, r3
 801d410:	f000 f86a 	bl	801d4e8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801d414:	4602      	mov	r2, r0
 801d416:	6823      	ldr	r3, [r4, #0]
 801d418:	6013      	str	r3, [r2, #0]
  return c;
 801d41a:	68fb      	ldr	r3, [r7, #12]
}
 801d41c:	4618      	mov	r0, r3
 801d41e:	3714      	adds	r7, #20
 801d420:	46bd      	mov	sp, r7
 801d422:	bd90      	pop	{r4, r7, pc}

0801d424 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801d424:	b5b0      	push	{r4, r5, r7, lr}
 801d426:	b084      	sub	sp, #16
 801d428:	af00      	add	r7, sp, #0
 801d42a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801d42c:	1d3b      	adds	r3, r7, #4
 801d42e:	4618      	mov	r0, r3
 801d430:	f000 f85a 	bl	801d4e8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801d434:	4603      	mov	r3, r0
 801d436:	681d      	ldr	r5, [r3, #0]
 801d438:	f107 030c 	add.w	r3, r7, #12
 801d43c:	4618      	mov	r0, r3
 801d43e:	f7ff fecf 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d442:	4604      	mov	r4, r0
 801d444:	4628      	mov	r0, r5
 801d446:	f000 f85a 	bl	801d4fe <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 801d44a:	4603      	mov	r3, r0
 801d44c:	6023      	str	r3, [r4, #0]
  return result;
 801d44e:	68fb      	ldr	r3, [r7, #12]
}
 801d450:	4618      	mov	r0, r3
 801d452:	3710      	adds	r7, #16
 801d454:	46bd      	mov	sp, r7
 801d456:	bdb0      	pop	{r4, r5, r7, pc}

0801d458 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 801d458:	b480      	push	{r7}
 801d45a:	b083      	sub	sp, #12
 801d45c:	af00      	add	r7, sp, #0
 801d45e:	6078      	str	r0, [r7, #4]
 801d460:	6039      	str	r1, [r7, #0]
  return a - b;
 801d462:	687a      	ldr	r2, [r7, #4]
 801d464:	683b      	ldr	r3, [r7, #0]
 801d466:	1ad3      	subs	r3, r2, r3
}
 801d468:	4618      	mov	r0, r3
 801d46a:	370c      	adds	r7, #12
 801d46c:	46bd      	mov	sp, r7
 801d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d472:	4770      	bx	lr

0801d474 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 801d474:	b580      	push	{r7, lr}
 801d476:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 801d478:	f7fd fefc 	bl	801b274 <_ZNSt14numeric_limitsIlE3maxEv>
 801d47c:	4603      	mov	r3, r0
  }
 801d47e:	4618      	mov	r0, r3
 801d480:	bd80      	pop	{r7, pc}

0801d482 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 801d482:	b480      	push	{r7}
 801d484:	b083      	sub	sp, #12
 801d486:	af00      	add	r7, sp, #0
 801d488:	6078      	str	r0, [r7, #4]
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	4618      	mov	r0, r3
 801d48e:	370c      	adds	r7, #12
 801d490:	46bd      	mov	sp, r7
 801d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d496:	4770      	bx	lr

0801d498 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801d498:	b580      	push	{r7, lr}
 801d49a:	b084      	sub	sp, #16
 801d49c:	af00      	add	r7, sp, #0
 801d49e:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801d4a0:	f107 030c 	add.w	r3, r7, #12
 801d4a4:	4618      	mov	r0, r3
 801d4a6:	f7ff ffec 	bl	801d482 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801d4aa:	4602      	mov	r2, r0
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	6013      	str	r3, [r2, #0]
    return retval;
 801d4b0:	68fb      	ldr	r3, [r7, #12]
  }
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	3710      	adds	r7, #16
 801d4b6:	46bd      	mov	sp, r7
 801d4b8:	bd80      	pop	{r7, pc}

0801d4ba <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 801d4ba:	b480      	push	{r7}
 801d4bc:	b083      	sub	sp, #12
 801d4be:	af00      	add	r7, sp, #0
 801d4c0:	6078      	str	r0, [r7, #4]
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	4618      	mov	r0, r3
 801d4c6:	370c      	adds	r7, #12
 801d4c8:	46bd      	mov	sp, r7
 801d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4ce:	4770      	bx	lr

0801d4d0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801d4d0:	b580      	push	{r7, lr}
 801d4d2:	b082      	sub	sp, #8
 801d4d4:	af00      	add	r7, sp, #0
 801d4d6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801d4d8:	6878      	ldr	r0, [r7, #4]
 801d4da:	f000 f81d 	bl	801d518 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 801d4de:	4603      	mov	r3, r0
}
 801d4e0:	4618      	mov	r0, r3
 801d4e2:	3708      	adds	r7, #8
 801d4e4:	46bd      	mov	sp, r7
 801d4e6:	bd80      	pop	{r7, pc}

0801d4e8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 801d4e8:	b480      	push	{r7}
 801d4ea:	b083      	sub	sp, #12
 801d4ec:	af00      	add	r7, sp, #0
 801d4ee:	6078      	str	r0, [r7, #4]
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	4618      	mov	r0, r3
 801d4f4:	370c      	adds	r7, #12
 801d4f6:	46bd      	mov	sp, r7
 801d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4fc:	4770      	bx	lr

0801d4fe <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801d4fe:	b580      	push	{r7, lr}
 801d500:	b082      	sub	sp, #8
 801d502:	af00      	add	r7, sp, #0
 801d504:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801d506:	6878      	ldr	r0, [r7, #4]
 801d508:	f000 f848 	bl	801d59c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 801d50c:	4603      	mov	r3, r0
}
 801d50e:	4618      	mov	r0, r3
 801d510:	3708      	adds	r7, #8
 801d512:	46bd      	mov	sp, r7
 801d514:	bd80      	pop	{r7, pc}
	...

0801d518 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801d518:	b580      	push	{r7, lr}
 801d51a:	b08a      	sub	sp, #40	; 0x28
 801d51c:	af00      	add	r7, sp, #0
 801d51e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801d520:	f7fe fc1f 	bl	801bd62 <_ZNSt14numeric_limitsIlE3minEv>
 801d524:	4603      	mov	r3, r0
 801d526:	4618      	mov	r0, r3
 801d528:	f7ff fc64 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d52c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801d52e:	f7fd fea1 	bl	801b274 <_ZNSt14numeric_limitsIlE3maxEv>
 801d532:	4603      	mov	r3, r0
 801d534:	4618      	mov	r0, r3
 801d536:	f7ff fc5d 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d53a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801d53c:	2320      	movs	r3, #32
 801d53e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801d540:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801d544:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801d546:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 801d54a:	f7ff fc53 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d54e:	4603      	mov	r3, r0
 801d550:	4619      	mov	r1, r3
 801d552:	6878      	ldr	r0, [r7, #4]
 801d554:	f7ff fc98 	bl	801ce88 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801d558:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801d55a:	480f      	ldr	r0, [pc, #60]	; (801d598 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 801d55c:	f7ff fc4a 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d560:	4603      	mov	r3, r0
 801d562:	4619      	mov	r1, r3
 801d564:	6878      	ldr	r0, [r7, #4]
 801d566:	f7ff fc6d 	bl	801ce44 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801d56a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801d56c:	2102      	movs	r1, #2
 801d56e:	6878      	ldr	r0, [r7, #4]
 801d570:	f000 f856 	bl	801d620 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801d574:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801d576:	68fa      	ldr	r2, [r7, #12]
 801d578:	6a39      	ldr	r1, [r7, #32]
 801d57a:	6978      	ldr	r0, [r7, #20]
 801d57c:	f000 f894 	bl	801d6a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801d580:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801d582:	68fa      	ldr	r2, [r7, #12]
 801d584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d586:	6938      	ldr	r0, [r7, #16]
 801d588:	f000 f88e 	bl	801d6a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801d58c:	60f8      	str	r0, [r7, #12]
    return result;
 801d58e:	68fb      	ldr	r3, [r7, #12]
  }
 801d590:	4618      	mov	r0, r3
 801d592:	3728      	adds	r7, #40	; 0x28
 801d594:	46bd      	mov	sp, r7
 801d596:	bd80      	pop	{r7, pc}
 801d598:	e0000001 	.word	0xe0000001

0801d59c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801d59c:	b580      	push	{r7, lr}
 801d59e:	b08a      	sub	sp, #40	; 0x28
 801d5a0:	af00      	add	r7, sp, #0
 801d5a2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801d5a4:	f7fe fbdd 	bl	801bd62 <_ZNSt14numeric_limitsIlE3minEv>
 801d5a8:	4603      	mov	r3, r0
 801d5aa:	4618      	mov	r0, r3
 801d5ac:	f7ff fc22 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d5b0:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801d5b2:	f7fd fe5f 	bl	801b274 <_ZNSt14numeric_limitsIlE3maxEv>
 801d5b6:	4603      	mov	r3, r0
 801d5b8:	4618      	mov	r0, r3
 801d5ba:	f7ff fc1b 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d5be:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801d5c0:	2320      	movs	r3, #32
 801d5c2:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801d5c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801d5c8:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801d5ca:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801d5ce:	f7ff fc11 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d5d2:	4603      	mov	r3, r0
 801d5d4:	4619      	mov	r1, r3
 801d5d6:	6878      	ldr	r0, [r7, #4]
 801d5d8:	f7ff fc56 	bl	801ce88 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801d5dc:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801d5de:	480f      	ldr	r0, [pc, #60]	; (801d61c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 801d5e0:	f7ff fc08 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801d5e4:	4603      	mov	r3, r0
 801d5e6:	4619      	mov	r1, r3
 801d5e8:	6878      	ldr	r0, [r7, #4]
 801d5ea:	f7ff fc2b 	bl	801ce44 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801d5ee:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801d5f0:	2101      	movs	r1, #1
 801d5f2:	6878      	ldr	r0, [r7, #4]
 801d5f4:	f000 f814 	bl	801d620 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801d5f8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801d5fa:	68fa      	ldr	r2, [r7, #12]
 801d5fc:	6a39      	ldr	r1, [r7, #32]
 801d5fe:	6978      	ldr	r0, [r7, #20]
 801d600:	f000 f852 	bl	801d6a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801d604:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801d606:	68fa      	ldr	r2, [r7, #12]
 801d608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d60a:	6938      	ldr	r0, [r7, #16]
 801d60c:	f000 f84c 	bl	801d6a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801d610:	60f8      	str	r0, [r7, #12]
    return result;
 801d612:	68fb      	ldr	r3, [r7, #12]
  }
 801d614:	4618      	mov	r0, r3
 801d616:	3728      	adds	r7, #40	; 0x28
 801d618:	46bd      	mov	sp, r7
 801d61a:	bd80      	pop	{r7, pc}
 801d61c:	c0000001 	.word	0xc0000001

0801d620 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 801d620:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801d624:	b089      	sub	sp, #36	; 0x24
 801d626:	af00      	add	r7, sp, #0
 801d628:	6078      	str	r0, [r7, #4]
 801d62a:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 801d62c:	6879      	ldr	r1, [r7, #4]
 801d62e:	17c8      	asrs	r0, r1, #31
 801d630:	4688      	mov	r8, r1
 801d632:	4681      	mov	r9, r0
 801d634:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 801d638:	2001      	movs	r0, #1
 801d63a:	6839      	ldr	r1, [r7, #0]
 801d63c:	fa00 f101 	lsl.w	r1, r0, r1
 801d640:	17c8      	asrs	r0, r1, #31
 801d642:	460c      	mov	r4, r1
 801d644:	4605      	mov	r5, r0
 801d646:	69f9      	ldr	r1, [r7, #28]
 801d648:	fb04 f001 	mul.w	r0, r4, r1
 801d64c:	69b9      	ldr	r1, [r7, #24]
 801d64e:	fb05 f101 	mul.w	r1, r5, r1
 801d652:	4401      	add	r1, r0
 801d654:	69b8      	ldr	r0, [r7, #24]
 801d656:	fba0 2304 	umull	r2, r3, r0, r4
 801d65a:	4419      	add	r1, r3
 801d65c:	460b      	mov	r3, r1
 801d65e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801d662:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 801d666:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801d66a:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 801d66c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801d670:	60bb      	str	r3, [r7, #8]
             ? min
 801d672:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801d676:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801d67a:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801d67e:	db0b      	blt.n	801d698 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 801d680:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801d684:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801d688:	f173 0300 	sbcs.w	r3, r3, #0
 801d68c:	da01      	bge.n	801d692 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 801d68e:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 801d690:	e004      	b.n	801d69c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 801d692:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 801d696:	e001      	b.n	801d69c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 801d698:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801d69c:	4618      	mov	r0, r3
 801d69e:	3724      	adds	r7, #36	; 0x24
 801d6a0:	46bd      	mov	sp, r7
 801d6a2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 801d6a6:	4770      	bx	lr

0801d6a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 801d6a8:	b590      	push	{r4, r7, lr}
 801d6aa:	b085      	sub	sp, #20
 801d6ac:	af00      	add	r7, sp, #0
 801d6ae:	60f8      	str	r0, [r7, #12]
 801d6b0:	60b9      	str	r1, [r7, #8]
 801d6b2:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 801d6b4:	68b9      	ldr	r1, [r7, #8]
 801d6b6:	68f8      	ldr	r0, [r7, #12]
 801d6b8:	f7ff fba7 	bl	801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801d6bc:	4604      	mov	r4, r0
 801d6be:	68f8      	ldr	r0, [r7, #12]
 801d6c0:	f7ff fc07 	bl	801ced2 <_ZN8gemmlowp6BitNotIlEET_S1_>
 801d6c4:	4603      	mov	r3, r0
 801d6c6:	6879      	ldr	r1, [r7, #4]
 801d6c8:	4618      	mov	r0, r3
 801d6ca:	f7ff fb9e 	bl	801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801d6ce:	4603      	mov	r3, r0
 801d6d0:	4619      	mov	r1, r3
 801d6d2:	4620      	mov	r0, r4
 801d6d4:	f000 f805 	bl	801d6e2 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 801d6d8:	4603      	mov	r3, r0
}
 801d6da:	4618      	mov	r0, r3
 801d6dc:	3714      	adds	r7, #20
 801d6de:	46bd      	mov	sp, r7
 801d6e0:	bd90      	pop	{r4, r7, pc}

0801d6e2 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 801d6e2:	b480      	push	{r7}
 801d6e4:	b083      	sub	sp, #12
 801d6e6:	af00      	add	r7, sp, #0
 801d6e8:	6078      	str	r0, [r7, #4]
 801d6ea:	6039      	str	r1, [r7, #0]
  return a ^ b;
 801d6ec:	687a      	ldr	r2, [r7, #4]
 801d6ee:	683b      	ldr	r3, [r7, #0]
 801d6f0:	4053      	eors	r3, r2
}
 801d6f2:	4618      	mov	r0, r3
 801d6f4:	370c      	adds	r7, #12
 801d6f6:	46bd      	mov	sp, r7
 801d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6fc:	4770      	bx	lr

0801d6fe <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801d6fe:	b580      	push	{r7, lr}
 801d700:	b084      	sub	sp, #16
 801d702:	af00      	add	r7, sp, #0
 801d704:	60f8      	str	r0, [r7, #12]
 801d706:	60b9      	str	r1, [r7, #8]
 801d708:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801d70a:	68fb      	ldr	r3, [r7, #12]
 801d70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d70e:	2b00      	cmp	r3, #0
 801d710:	d101      	bne.n	801d716 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 801d712:	f006 f90b 	bl	802392c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d71a:	2124      	movs	r1, #36	; 0x24
 801d71c:	68f8      	ldr	r0, [r7, #12]
 801d71e:	4798      	blx	r3
 801d720:	4603      	mov	r3, r0
}
 801d722:	4618      	mov	r0, r3
 801d724:	3710      	adds	r7, #16
 801d726:	46bd      	mov	sp, r7
 801d728:	bd80      	pop	{r7, pc}
	...

0801d72c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801d72c:	b5b0      	push	{r4, r5, r7, lr}
 801d72e:	b0a0      	sub	sp, #128	; 0x80
 801d730:	af04      	add	r7, sp, #16
 801d732:	6078      	str	r0, [r7, #4]
 801d734:	6039      	str	r1, [r7, #0]
 801d736:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 801d738:	683b      	ldr	r3, [r7, #0]
 801d73a:	691b      	ldr	r3, [r3, #16]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d101      	bne.n	801d744 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 801d740:	f006 f8f4 	bl	802392c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801d744:	683b      	ldr	r3, [r7, #0]
 801d746:	695b      	ldr	r3, [r3, #20]
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d101      	bne.n	801d750 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 801d74c:	f006 f8ee 	bl	802392c <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801d750:	683b      	ldr	r3, [r7, #0]
 801d752:	691b      	ldr	r3, [r3, #16]
 801d754:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 801d756:	683b      	ldr	r3, [r7, #0]
 801d758:	695b      	ldr	r3, [r3, #20]
 801d75a:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 801d75c:	4b81      	ldr	r3, [pc, #516]	; (801d964 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801d75e:	681b      	ldr	r3, [r3, #0]
 801d760:	461a      	mov	r2, r3
 801d762:	6839      	ldr	r1, [r7, #0]
 801d764:	6878      	ldr	r0, [r7, #4]
 801d766:	f7fd fff9 	bl	801b75c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801d76a:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 801d76c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d76e:	2b00      	cmp	r3, #0
 801d770:	d10a      	bne.n	801d788 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	695c      	ldr	r4, [r3, #20]
 801d776:	4b7c      	ldr	r3, [pc, #496]	; (801d968 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801d778:	9300      	str	r3, [sp, #0]
 801d77a:	2340      	movs	r3, #64	; 0x40
 801d77c:	4a7b      	ldr	r2, [pc, #492]	; (801d96c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801d77e:	497c      	ldr	r1, [pc, #496]	; (801d970 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801d780:	6878      	ldr	r0, [r7, #4]
 801d782:	47a0      	blx	r4
 801d784:	2401      	movs	r4, #1
 801d786:	e0e7      	b.n	801d958 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 801d788:	4b7a      	ldr	r3, [pc, #488]	; (801d974 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801d78a:	681b      	ldr	r3, [r3, #0]
 801d78c:	461a      	mov	r2, r3
 801d78e:	6839      	ldr	r1, [r7, #0]
 801d790:	6878      	ldr	r0, [r7, #4]
 801d792:	f7fd ffe3 	bl	801b75c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801d796:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 801d798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	d10a      	bne.n	801d7b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	695c      	ldr	r4, [r3, #20]
 801d7a2:	4b75      	ldr	r3, [pc, #468]	; (801d978 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801d7a4:	9300      	str	r3, [sp, #0]
 801d7a6:	2343      	movs	r3, #67	; 0x43
 801d7a8:	4a70      	ldr	r2, [pc, #448]	; (801d96c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801d7aa:	4971      	ldr	r1, [pc, #452]	; (801d970 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801d7ac:	6878      	ldr	r0, [r7, #4]
 801d7ae:	47a0      	blx	r4
 801d7b0:	2401      	movs	r4, #1
 801d7b2:	e0d1      	b.n	801d958 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 801d7b4:	4b71      	ldr	r3, [pc, #452]	; (801d97c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	461a      	mov	r2, r3
 801d7ba:	6839      	ldr	r1, [r7, #0]
 801d7bc:	6878      	ldr	r0, [r7, #4]
 801d7be:	f7fd fffd 	bl	801b7bc <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 801d7c2:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 801d7c4:	4b6e      	ldr	r3, [pc, #440]	; (801d980 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	461a      	mov	r2, r3
 801d7ca:	6839      	ldr	r1, [r7, #0]
 801d7cc:	6878      	ldr	r0, [r7, #4]
 801d7ce:	f7fd ffd5 	bl	801b77c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801d7d2:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 801d7d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	d10a      	bne.n	801d7f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 801d7da:	687b      	ldr	r3, [r7, #4]
 801d7dc:	695c      	ldr	r4, [r3, #20]
 801d7de:	4b69      	ldr	r3, [pc, #420]	; (801d984 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801d7e0:	9300      	str	r3, [sp, #0]
 801d7e2:	2347      	movs	r3, #71	; 0x47
 801d7e4:	4a61      	ldr	r2, [pc, #388]	; (801d96c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801d7e6:	4962      	ldr	r1, [pc, #392]	; (801d970 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801d7e8:	6878      	ldr	r0, [r7, #4]
 801d7ea:	47a0      	blx	r4
 801d7ec:	2401      	movs	r4, #1
 801d7ee:	e0b3      	b.n	801d958 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 801d7f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d7f2:	781a      	ldrb	r2, [r3, #0]
 801d7f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d7f6:	781b      	ldrb	r3, [r3, #0]
 801d7f8:	429a      	cmp	r2, r3
 801d7fa:	d01a      	beq.n	801d832 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	695c      	ldr	r4, [r3, #20]
 801d800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d802:	781b      	ldrb	r3, [r3, #0]
 801d804:	4618      	mov	r0, r3
 801d806:	f7fd fcb9 	bl	801b17c <TfLiteTypeGetName>
 801d80a:	4605      	mov	r5, r0
 801d80c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d80e:	781b      	ldrb	r3, [r3, #0]
 801d810:	4618      	mov	r0, r3
 801d812:	f7fd fcb3 	bl	801b17c <TfLiteTypeGetName>
 801d816:	4603      	mov	r3, r0
 801d818:	9303      	str	r3, [sp, #12]
 801d81a:	9502      	str	r5, [sp, #8]
 801d81c:	4b5a      	ldr	r3, [pc, #360]	; (801d988 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801d81e:	9301      	str	r3, [sp, #4]
 801d820:	4b5a      	ldr	r3, [pc, #360]	; (801d98c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801d822:	9300      	str	r3, [sp, #0]
 801d824:	2349      	movs	r3, #73	; 0x49
 801d826:	4a51      	ldr	r2, [pc, #324]	; (801d96c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801d828:	4959      	ldr	r1, [pc, #356]	; (801d990 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801d82a:	6878      	ldr	r0, [r7, #4]
 801d82c:	47a0      	blx	r4
 801d82e:	2401      	movs	r4, #1
 801d830:	e092      	b.n	801d958 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 801d832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d834:	781a      	ldrb	r2, [r3, #0]
 801d836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d838:	781b      	ldrb	r3, [r3, #0]
 801d83a:	429a      	cmp	r2, r3
 801d83c:	d006      	beq.n	801d84c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	695b      	ldr	r3, [r3, #20]
 801d842:	4954      	ldr	r1, [pc, #336]	; (801d994 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 801d844:	6878      	ldr	r0, [r7, #4]
 801d846:	4798      	blx	r3
 801d848:	2401      	movs	r4, #1
 801d84a:	e085      	b.n	801d958 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 801d84c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d84e:	f04f 32ff 	mov.w	r2, #4294967295
 801d852:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 801d854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d856:	7819      	ldrb	r1, [r3, #0]
 801d858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d85a:	781a      	ldrb	r2, [r3, #0]
 801d85c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d85e:	9303      	str	r3, [sp, #12]
 801d860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d862:	9302      	str	r3, [sp, #8]
 801d864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d866:	9301      	str	r3, [sp, #4]
 801d868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d86a:	9300      	str	r3, [sp, #0]
 801d86c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d86e:	6878      	ldr	r0, [r7, #4]
 801d870:	f000 fae4 	bl	801de3c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 801d874:	4603      	mov	r3, r0
 801d876:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801d87a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801d87e:	2b00      	cmp	r3, #0
 801d880:	d002      	beq.n	801d888 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 801d882:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 801d886:	e067      	b.n	801d958 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 801d888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d88a:	781b      	ldrb	r3, [r3, #0]
 801d88c:	2b09      	cmp	r3, #9
 801d88e:	d162      	bne.n	801d956 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 801d890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d894:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801d896:	4618      	mov	r0, r3
 801d898:	f7fe fa45 	bl	801bd26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 801d89c:	f107 0318 	add.w	r3, r7, #24
 801d8a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d8a2:	4618      	mov	r0, r3
 801d8a4:	f7fe fa3f 	bl	801bd26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 801d8a8:	f107 0318 	add.w	r3, r7, #24
 801d8ac:	4618      	mov	r0, r3
 801d8ae:	f7fe f9d6 	bl	801bc5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d8b2:	4603      	mov	r3, r0
 801d8b4:	2b02      	cmp	r3, #2
 801d8b6:	d001      	beq.n	801d8bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 801d8b8:	f006 f838 	bl	802392c <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 801d8bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d8c0:	4618      	mov	r0, r3
 801d8c2:	f7fe f9cc 	bl	801bc5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d8c6:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 801d8c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d8ca:	1e5a      	subs	r2, r3, #1
 801d8cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d8d0:	4611      	mov	r1, r2
 801d8d2:	4618      	mov	r0, r3
 801d8d4:	f7fe fad0 	bl	801be78 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d8d8:	4603      	mov	r3, r0
 801d8da:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 801d8dc:	2301      	movs	r3, #1
 801d8de:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 801d8e0:	2301      	movs	r3, #1
 801d8e2:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 801d8e4:	f107 0318 	add.w	r3, r7, #24
 801d8e8:	2101      	movs	r1, #1
 801d8ea:	4618      	mov	r0, r3
 801d8ec:	f7fe fac4 	bl	801be78 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d8f0:	4603      	mov	r3, r0
 801d8f2:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 801d8f4:	f107 0308 	add.w	r3, r7, #8
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	f7f5 f81d 	bl	8012938 <arm_fully_connected_s8_get_buffer_size>
 801d8fe:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 801d900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d902:	2b00      	cmp	r3, #0
 801d904:	dd11      	ble.n	801d92a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801d906:	687b      	ldr	r3, [r7, #4]
 801d908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d90a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d90c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d90e:	3220      	adds	r2, #32
 801d910:	6878      	ldr	r0, [r7, #4]
 801d912:	4798      	blx	r3
 801d914:	4603      	mov	r3, r0
 801d916:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801d91a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d007      	beq.n	801d932 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 801d922:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 801d926:	2500      	movs	r5, #0
 801d928:	e004      	b.n	801d934 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801d92a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d92c:	f04f 32ff 	mov.w	r2, #4294967295
 801d930:	621a      	str	r2, [r3, #32]
 801d932:	2501      	movs	r5, #1
 801d934:	f107 0318 	add.w	r3, r7, #24
 801d938:	4618      	mov	r0, r3
 801d93a:	f7fe f97a 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
 801d93e:	2d01      	cmp	r5, #1
 801d940:	d001      	beq.n	801d946 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 801d942:	2500      	movs	r5, #0
 801d944:	e000      	b.n	801d948 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 801d946:	2501      	movs	r5, #1
 801d948:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d94c:	4618      	mov	r0, r3
 801d94e:	f7fe f970 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
 801d952:	2d01      	cmp	r5, #1
 801d954:	d100      	bne.n	801d958 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 801d956:	2400      	movs	r4, #0
}
 801d958:	4623      	mov	r3, r4
 801d95a:	4618      	mov	r0, r3
 801d95c:	3770      	adds	r7, #112	; 0x70
 801d95e:	46bd      	mov	sp, r7
 801d960:	bdb0      	pop	{r4, r5, r7, pc}
 801d962:	bf00      	nop
 801d964:	08029970 	.word	0x08029970
 801d968:	08028fb8 	.word	0x08028fb8
 801d96c:	08028f14 	.word	0x08028f14
 801d970:	08028fa0 	.word	0x08028fa0
 801d974:	08029974 	.word	0x08029974
 801d978:	08028fcc 	.word	0x08028fcc
 801d97c:	08029978 	.word	0x08029978
 801d980:	0802997c 	.word	0x0802997c
 801d984:	08028fe0 	.word	0x08028fe0
 801d988:	08029010 	.word	0x08029010
 801d98c:	08029020 	.word	0x08029020
 801d990:	08028ff4 	.word	0x08028ff4
 801d994:	0802902c 	.word	0x0802902c

0801d998 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 801d998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d99a:	b0bf      	sub	sp, #252	; 0xfc
 801d99c:	af08      	add	r7, sp, #32
 801d99e:	6178      	str	r0, [r7, #20]
 801d9a0:	6139      	str	r1, [r7, #16]
 801d9a2:	60fa      	str	r2, [r7, #12]
 801d9a4:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801d9a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d9aa:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801d9ae:	4618      	mov	r0, r3
 801d9b0:	f000 faaa 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 801d9b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d9b8:	4618      	mov	r0, r3
 801d9ba:	f7fe f950 	bl	801bc5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d9be:	4603      	mov	r3, r0
 801d9c0:	2b02      	cmp	r3, #2
 801d9c2:	d001      	beq.n	801d9c8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 801d9c4:	f005 ffb2 	bl	802392c <abort>
  const int batches = output_shape.Dims(0);
 801d9c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d9cc:	2100      	movs	r1, #0
 801d9ce:	4618      	mov	r0, r3
 801d9d0:	f7fe fa52 	bl	801be78 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d9d4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 801d9d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d9dc:	2101      	movs	r1, #1
 801d9de:	4618      	mov	r0, r3
 801d9e0:	f7fe fa4a 	bl	801be78 <_ZNK6tflite12RuntimeShape4DimsEi>
 801d9e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801d9e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d9ec:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801d9f0:	4618      	mov	r0, r3
 801d9f2:	f000 fa89 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 801d9f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d9fa:	4618      	mov	r0, r3
 801d9fc:	f7fe f92f 	bl	801bc5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801da00:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801da04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801da08:	1e5a      	subs	r2, r3, #1
 801da0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801da0e:	4611      	mov	r1, r2
 801da10:	4618      	mov	r0, r3
 801da12:	f7fe fa31 	bl	801be78 <_ZNK6tflite12RuntimeShape4DimsEi>
 801da16:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801da1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801da1e:	68b9      	ldr	r1, [r7, #8]
 801da20:	4618      	mov	r0, r3
 801da22:	f000 fa71 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 801da26:	68fb      	ldr	r3, [r7, #12]
 801da28:	695b      	ldr	r3, [r3, #20]
 801da2a:	425b      	negs	r3, r3
 801da2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 801da2e:	68fb      	ldr	r3, [r7, #12]
 801da30:	69db      	ldr	r3, [r3, #28]
 801da32:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	699b      	ldr	r3, [r3, #24]
 801da38:	425b      	negs	r3, r3
 801da3a:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 801da3c:	68fb      	ldr	r3, [r7, #12]
 801da3e:	689b      	ldr	r3, [r3, #8]
 801da40:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 801da42:	68fb      	ldr	r3, [r7, #12]
 801da44:	68db      	ldr	r3, [r3, #12]
 801da46:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 801da48:	68fb      	ldr	r3, [r7, #12]
 801da4a:	681b      	ldr	r3, [r3, #0]
 801da4c:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 801da4e:	68fb      	ldr	r3, [r7, #12]
 801da50:	685b      	ldr	r3, [r3, #4]
 801da52:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 801da54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801da58:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 801da5a:	2301      	movs	r3, #1
 801da5c:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 801da5e:	2301      	movs	r3, #1
 801da60:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 801da62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801da66:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 801da68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801da6c:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 801da6e:	2301      	movs	r3, #1
 801da70:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 801da72:	2301      	movs	r3, #1
 801da74:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 801da76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801da7a:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 801da7c:	2301      	movs	r3, #1
 801da7e:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 801da80:	2301      	movs	r3, #1
 801da82:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 801da84:	2301      	movs	r3, #1
 801da86:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 801da88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801da8c:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 801da8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801da92:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 801da94:	2301      	movs	r3, #1
 801da96:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 801da98:	2301      	movs	r3, #1
 801da9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 801da9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801daa0:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 801daa2:	2300      	movs	r3, #0
 801daa4:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 801daa6:	2300      	movs	r3, #0
 801daa8:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	6a1b      	ldr	r3, [r3, #32]
 801daae:	2b00      	cmp	r3, #0
 801dab0:	db08      	blt.n	801dac4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801dab2:	697b      	ldr	r3, [r7, #20]
 801dab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dab6:	68fa      	ldr	r2, [r7, #12]
 801dab8:	6a12      	ldr	r2, [r2, #32]
 801daba:	4611      	mov	r1, r2
 801dabc:	6978      	ldr	r0, [r7, #20]
 801dabe:	4798      	blx	r3
 801dac0:	4603      	mov	r3, r0
 801dac2:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 801dac4:	68b8      	ldr	r0, [r7, #8]
 801dac6:	f7fe ffa9 	bl	801ca1c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801daca:	4605      	mov	r5, r0
 801dacc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801dad0:	f7fe ffa4 	bl	801ca1c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801dad4:	4606      	mov	r6, r0
 801dad6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801dada:	f7ff fa20 	bl	801cf1e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801dade:	6078      	str	r0, [r7, #4]
 801dae0:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801dae4:	f7fe ffa9 	bl	801ca3a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801dae8:	4603      	mov	r3, r0
 801daea:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801daee:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801daf2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801daf6:	f107 001c 	add.w	r0, r7, #28
 801dafa:	9306      	str	r3, [sp, #24]
 801dafc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801db00:	9305      	str	r3, [sp, #20]
 801db02:	687b      	ldr	r3, [r7, #4]
 801db04:	9304      	str	r3, [sp, #16]
 801db06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801db0a:	9303      	str	r3, [sp, #12]
 801db0c:	9602      	str	r6, [sp, #8]
 801db0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801db12:	9301      	str	r3, [sp, #4]
 801db14:	9500      	str	r5, [sp, #0]
 801db16:	4623      	mov	r3, r4
 801db18:	f7f4 fec7 	bl	80128aa <arm_fully_connected_s8>
 801db1c:	4603      	mov	r3, r0
 801db1e:	2b00      	cmp	r3, #0
 801db20:	bf14      	ite	ne
 801db22:	2301      	movne	r3, #1
 801db24:	2300      	moveq	r3, #0
 801db26:	b2db      	uxtb	r3, r3
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d03e      	beq.n	801dbaa <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 801db2c:	697b      	ldr	r3, [r7, #20]
 801db2e:	695c      	ldr	r4, [r3, #20]
 801db30:	68b8      	ldr	r0, [r7, #8]
 801db32:	f7fe ff73 	bl	801ca1c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801db36:	4606      	mov	r6, r0
 801db38:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801db3c:	f7fe ff6e 	bl	801ca1c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801db40:	6078      	str	r0, [r7, #4]
 801db42:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801db46:	f7ff f9ea 	bl	801cf1e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801db4a:	6038      	str	r0, [r7, #0]
 801db4c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801db50:	f7fe ff73 	bl	801ca3a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801db54:	4603      	mov	r3, r0
 801db56:	f107 0554 	add.w	r5, r7, #84	; 0x54
 801db5a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801db5e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801db62:	f107 001c 	add.w	r0, r7, #28
 801db66:	9306      	str	r3, [sp, #24]
 801db68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801db6c:	9305      	str	r3, [sp, #20]
 801db6e:	683b      	ldr	r3, [r7, #0]
 801db70:	9304      	str	r3, [sp, #16]
 801db72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801db76:	9303      	str	r3, [sp, #12]
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	9302      	str	r3, [sp, #8]
 801db7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801db80:	9301      	str	r3, [sp, #4]
 801db82:	9600      	str	r6, [sp, #0]
 801db84:	462b      	mov	r3, r5
 801db86:	f7f4 fe90 	bl	80128aa <arm_fully_connected_s8>
 801db8a:	4603      	mov	r3, r0
 801db8c:	461a      	mov	r2, r3
 801db8e:	2300      	movs	r3, #0
 801db90:	9303      	str	r3, [sp, #12]
 801db92:	9202      	str	r2, [sp, #8]
 801db94:	4b0f      	ldr	r3, [pc, #60]	; (801dbd4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 801db96:	9301      	str	r3, [sp, #4]
 801db98:	4b0f      	ldr	r3, [pc, #60]	; (801dbd8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 801db9a:	9300      	str	r3, [sp, #0]
 801db9c:	23a6      	movs	r3, #166	; 0xa6
 801db9e:	4a0f      	ldr	r2, [pc, #60]	; (801dbdc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 801dba0:	490f      	ldr	r1, [pc, #60]	; (801dbe0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 801dba2:	6978      	ldr	r0, [r7, #20]
 801dba4:	47a0      	blx	r4
 801dba6:	2401      	movs	r4, #1
 801dba8:	e000      	b.n	801dbac <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 801dbaa:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801dbac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801dbb0:	4618      	mov	r0, r3
 801dbb2:	f7fe f83e 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801dbb6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801dbba:	4618      	mov	r0, r3
 801dbbc:	f7fe f839 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801dbc0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801dbc4:	4618      	mov	r0, r3
 801dbc6:	f7fe f834 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801dbca:	4623      	mov	r3, r4
 801dbcc:	4618      	mov	r0, r3
 801dbce:	37dc      	adds	r7, #220	; 0xdc
 801dbd0:	46bd      	mov	sp, r7
 801dbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dbd4:	08029104 	.word	0x08029104
 801dbd8:	08029118 	.word	0x08029118
 801dbdc:	08028f14 	.word	0x08028f14
 801dbe0:	080290e8 	.word	0x080290e8

0801dbe4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 801dbe4:	b590      	push	{r4, r7, lr}
 801dbe6:	b0d1      	sub	sp, #324	; 0x144
 801dbe8:	af04      	add	r7, sp, #16
 801dbea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dbee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801dbf2:	6018      	str	r0, [r3, #0]
 801dbf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dbf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801dbfc:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801dbfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dc02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801dc06:	681b      	ldr	r3, [r3, #0]
 801dc08:	695b      	ldr	r3, [r3, #20]
 801dc0a:	2b00      	cmp	r3, #0
 801dc0c:	d101      	bne.n	801dc12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801dc0e:	f005 fe8d 	bl	802392c <abort>
  const auto* params =
 801dc12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dc16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801dc1a:	681b      	ldr	r3, [r3, #0]
 801dc1c:	695b      	ldr	r3, [r3, #20]
 801dc1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 801dc22:	4b67      	ldr	r3, [pc, #412]	; (801ddc0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
 801dc24:	681a      	ldr	r2, [r3, #0]
 801dc26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dc2a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801dc2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dc32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801dc36:	6809      	ldr	r1, [r1, #0]
 801dc38:	6818      	ldr	r0, [r3, #0]
 801dc3a:	f7fe f9f1 	bl	801c020 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801dc3e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 801dc42:	4b60      	ldr	r3, [pc, #384]	; (801ddc4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
 801dc44:	681a      	ldr	r2, [r3, #0]
 801dc46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dc4a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801dc4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dc52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801dc56:	6809      	ldr	r1, [r1, #0]
 801dc58:	6818      	ldr	r0, [r3, #0]
 801dc5a:	f7fe f9e1 	bl	801c020 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801dc5e:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 801dc62:	4b59      	ldr	r3, [pc, #356]	; (801ddc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e4>)
 801dc64:	681a      	ldr	r2, [r3, #0]
 801dc66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dc6a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801dc6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dc72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801dc76:	6809      	ldr	r1, [r1, #0]
 801dc78:	6818      	ldr	r0, [r3, #0]
 801dc7a:	f7fe f9d1 	bl	801c020 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801dc7e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 801dc82:	4b52      	ldr	r3, [pc, #328]	; (801ddcc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
 801dc84:	681a      	ldr	r2, [r3, #0]
 801dc86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dc8a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801dc8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dc92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801dc96:	6809      	ldr	r1, [r1, #0]
 801dc98:	6818      	ldr	r0, [r3, #0]
 801dc9a:	f7fe f9d1 	bl	801c040 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801dc9e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 801dca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801dcaa:	681b      	ldr	r3, [r3, #0]
 801dcac:	691b      	ldr	r3, [r3, #16]
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d101      	bne.n	801dcb6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 801dcb2:	f005 fe3b 	bl	802392c <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801dcb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dcba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801dcbe:	681b      	ldr	r3, [r3, #0]
 801dcc0:	691b      	ldr	r3, [r3, #16]
 801dcc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 801dcc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dcca:	7a1b      	ldrb	r3, [r3, #8]
 801dccc:	2b09      	cmp	r3, #9
 801dcce:	d021      	beq.n	801dd14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
 801dcd0:	2b09      	cmp	r3, #9
 801dcd2:	dc55      	bgt.n	801dd80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
 801dcd4:	2b01      	cmp	r3, #1
 801dcd6:	d002      	beq.n	801dcde <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 801dcd8:	2b03      	cmp	r3, #3
 801dcda:	d036      	beq.n	801dd4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
 801dcdc:	e050      	b.n	801dd80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801dcde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801dce6:	681b      	ldr	r3, [r3, #0]
 801dce8:	695c      	ldr	r4, [r3, #20]
 801dcea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dcee:	7a1b      	ldrb	r3, [r3, #8]
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	f7fd fa43 	bl	801b17c <TfLiteTypeGetName>
 801dcf6:	4602      	mov	r2, r0
 801dcf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dcfc:	7a1b      	ldrb	r3, [r3, #8]
 801dcfe:	4619      	mov	r1, r3
 801dd00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dd04:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801dd08:	460b      	mov	r3, r1
 801dd0a:	4931      	ldr	r1, [pc, #196]	; (801ddd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801dd0c:	6800      	ldr	r0, [r0, #0]
 801dd0e:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801dd10:	2301      	movs	r3, #1
 801dd12:	e04f      	b.n	801ddb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 801dd14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dd18:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801dd1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dd20:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801dd24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801dd28:	9302      	str	r3, [sp, #8]
 801dd2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801dd2e:	9301      	str	r3, [sp, #4]
 801dd30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801dd34:	9300      	str	r3, [sp, #0]
 801dd36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dd3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801dd3e:	6809      	ldr	r1, [r1, #0]
 801dd40:	6800      	ldr	r0, [r0, #0]
 801dd42:	f7ff fe29 	bl	801d998 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 801dd46:	4603      	mov	r3, r0
                               output);
 801dd48:	e034      	b.n	801ddb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801dd4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dd4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	695c      	ldr	r4, [r3, #20]
 801dd56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dd5a:	7a1b      	ldrb	r3, [r3, #8]
 801dd5c:	4618      	mov	r0, r3
 801dd5e:	f7fd fa0d 	bl	801b17c <TfLiteTypeGetName>
 801dd62:	4602      	mov	r2, r0
 801dd64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dd68:	7a1b      	ldrb	r3, [r3, #8]
 801dd6a:	4619      	mov	r1, r3
 801dd6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dd70:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801dd74:	460b      	mov	r3, r1
 801dd76:	4916      	ldr	r1, [pc, #88]	; (801ddd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801dd78:	6800      	ldr	r0, [r0, #0]
 801dd7a:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801dd7c:	2301      	movs	r3, #1
 801dd7e:	e019      	b.n	801ddb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801dd80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dd84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801dd88:	681b      	ldr	r3, [r3, #0]
 801dd8a:	695c      	ldr	r4, [r3, #20]
 801dd8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dd90:	7a1b      	ldrb	r3, [r3, #8]
 801dd92:	4618      	mov	r0, r3
 801dd94:	f7fd f9f2 	bl	801b17c <TfLiteTypeGetName>
 801dd98:	4602      	mov	r2, r0
 801dd9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801dd9e:	7a1b      	ldrb	r3, [r3, #8]
 801dda0:	4619      	mov	r1, r3
 801dda2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801dda6:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801ddaa:	460b      	mov	r3, r1
 801ddac:	4908      	ldr	r1, [pc, #32]	; (801ddd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801ddae:	6800      	ldr	r0, [r0, #0]
 801ddb0:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801ddb2:	2301      	movs	r3, #1
    }
  }
  return kTfLiteOk;
}
 801ddb4:	4618      	mov	r0, r3
 801ddb6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801ddba:	46bd      	mov	sp, r7
 801ddbc:	bd90      	pop	{r4, r7, pc}
 801ddbe:	bf00      	nop
 801ddc0:	08029970 	.word	0x08029970
 801ddc4:	08029974 	.word	0x08029974
 801ddc8:	08029978 	.word	0x08029978
 801ddcc:	0802997c 	.word	0x0802997c
 801ddd0:	0802923c 	.word	0x0802923c

0801ddd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 801ddd4:	b4b0      	push	{r4, r5, r7}
 801ddd6:	b083      	sub	sp, #12
 801ddd8:	af00      	add	r7, sp, #0
 801ddda:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 801dddc:	4b13      	ldr	r3, [pc, #76]	; (801de2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801ddde:	4a14      	ldr	r2, [pc, #80]	; (801de30 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 801dde0:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 801dde2:	4b12      	ldr	r3, [pc, #72]	; (801de2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801dde4:	2200      	movs	r2, #0
 801dde6:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 801dde8:	4b10      	ldr	r3, [pc, #64]	; (801de2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801ddea:	4a12      	ldr	r2, [pc, #72]	; (801de34 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 801ddec:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 801ddee:	4b0f      	ldr	r3, [pc, #60]	; (801de2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801ddf0:	4a11      	ldr	r2, [pc, #68]	; (801de38 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 801ddf2:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 801ddf4:	4b0d      	ldr	r3, [pc, #52]	; (801de2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801ddf6:	2200      	movs	r2, #0
 801ddf8:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 801ddfa:	4b0c      	ldr	r3, [pc, #48]	; (801de2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801ddfc:	2200      	movs	r2, #0
 801ddfe:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 801de00:	4b0a      	ldr	r3, [pc, #40]	; (801de2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801de02:	2200      	movs	r2, #0
 801de04:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 801de06:	4b09      	ldr	r3, [pc, #36]	; (801de2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801de08:	2200      	movs	r2, #0
 801de0a:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	4a07      	ldr	r2, [pc, #28]	; (801de2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801de10:	461c      	mov	r4, r3
 801de12:	4615      	mov	r5, r2
 801de14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801de16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801de18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801de1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801de20:	6878      	ldr	r0, [r7, #4]
 801de22:	370c      	adds	r7, #12
 801de24:	46bd      	mov	sp, r7
 801de26:	bcb0      	pop	{r4, r5, r7}
 801de28:	4770      	bx	lr
 801de2a:	bf00      	nop
 801de2c:	20002bf4 	.word	0x20002bf4
 801de30:	0801d6ff 	.word	0x0801d6ff
 801de34:	0801d72d 	.word	0x0801d72d
 801de38:	0801dbe5 	.word	0x0801dbe5

0801de3c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 801de3c:	b580      	push	{r7, lr}
 801de3e:	b08a      	sub	sp, #40	; 0x28
 801de40:	af02      	add	r7, sp, #8
 801de42:	60f8      	str	r0, [r7, #12]
 801de44:	607b      	str	r3, [r7, #4]
 801de46:	460b      	mov	r3, r1
 801de48:	72fb      	strb	r3, [r7, #11]
 801de4a:	4613      	mov	r3, r2
 801de4c:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 801de4e:	7abb      	ldrb	r3, [r7, #10]
 801de50:	2b01      	cmp	r3, #1
 801de52:	d03e      	beq.n	801ded2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 801de54:	f04f 0200 	mov.w	r2, #0
 801de58:	f04f 0300 	mov.w	r3, #0
 801de5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 801de60:	f107 0310 	add.w	r3, r7, #16
 801de64:	9301      	str	r3, [sp, #4]
 801de66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de68:	9300      	str	r3, [sp, #0]
 801de6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de6e:	6879      	ldr	r1, [r7, #4]
 801de70:	68f8      	ldr	r0, [r7, #12]
 801de72:	f7fd fcb5 	bl	801b7e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 801de76:	4603      	mov	r3, r0
 801de78:	77fb      	strb	r3, [r7, #31]
 801de7a:	7ffb      	ldrb	r3, [r7, #31]
 801de7c:	2b00      	cmp	r3, #0
 801de7e:	d001      	beq.n	801de84 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 801de80:	7ffb      	ldrb	r3, [r7, #31]
 801de82:	e027      	b.n	801ded4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 801de84:	ed97 7b04 	vldr	d7, [r7, #16]
 801de88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801de8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de8c:	3304      	adds	r3, #4
 801de8e:	4619      	mov	r1, r3
 801de90:	4610      	mov	r0, r2
 801de92:	eeb0 0a47 	vmov.f32	s0, s14
 801de96:	eef0 0a67 	vmov.f32	s1, s15
 801de9a:	f7fd f9f5 	bl	801b288 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	691a      	ldr	r2, [r3, #16]
 801dea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dea4:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 801dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dea8:	691a      	ldr	r2, [r3, #16]
 801deaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801deac:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 801deae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801deb0:	691a      	ldr	r2, [r3, #16]
 801deb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801deb4:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 801deb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801deb8:	f103 0208 	add.w	r2, r3, #8
 801debc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801debe:	330c      	adds	r3, #12
 801dec0:	7af9      	ldrb	r1, [r7, #11]
 801dec2:	9300      	str	r3, [sp, #0]
 801dec4:	4613      	mov	r3, r2
 801dec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dec8:	68f8      	ldr	r0, [r7, #12]
 801deca:	f7fd fe15 	bl	801baf8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 801dece:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 801ded0:	e000      	b.n	801ded4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 801ded2:	2300      	movs	r3, #0
}
 801ded4:	4618      	mov	r0, r3
 801ded6:	3720      	adds	r7, #32
 801ded8:	46bd      	mov	sp, r7
 801deda:	bd80      	pop	{r7, pc}

0801dedc <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801dedc:	b480      	push	{r7}
 801dede:	b083      	sub	sp, #12
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	6078      	str	r0, [r7, #4]
 801dee4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801deec:	683b      	ldr	r3, [r7, #0]
 801deee:	f9b3 3000 	ldrsh.w	r3, [r3]
 801def2:	429a      	cmp	r2, r3
 801def4:	da01      	bge.n	801defa <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 801def6:	683b      	ldr	r3, [r7, #0]
 801def8:	e000      	b.n	801defc <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 801defa:	687b      	ldr	r3, [r7, #4]
    }
 801defc:	4618      	mov	r0, r3
 801defe:	370c      	adds	r7, #12
 801df00:	46bd      	mov	sp, r7
 801df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df06:	4770      	bx	lr

0801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 801df08:	b580      	push	{r7, lr}
 801df0a:	b086      	sub	sp, #24
 801df0c:	af00      	add	r7, sp, #0
 801df0e:	6078      	str	r0, [r7, #4]
 801df10:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 801df12:	683b      	ldr	r3, [r7, #0]
 801df14:	2b00      	cmp	r3, #0
 801df16:	d003      	beq.n	801df20 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 801df18:	683b      	ldr	r3, [r7, #0]
 801df1a:	685b      	ldr	r3, [r3, #4]
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	d103      	bne.n	801df28 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 801df20:	6878      	ldr	r0, [r7, #4]
 801df22:	f7fd fe65 	bl	801bbf0 <_ZN6tflite12RuntimeShapeC1Ev>
 801df26:	e00d      	b.n	801df44 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 801df28:	683b      	ldr	r3, [r7, #0]
 801df2a:	685b      	ldr	r3, [r3, #4]
 801df2c:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801df2e:	697b      	ldr	r3, [r7, #20]
 801df30:	681b      	ldr	r3, [r3, #0]
 801df32:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801df34:	697b      	ldr	r3, [r7, #20]
 801df36:	3304      	adds	r3, #4
 801df38:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801df3a:	68fa      	ldr	r2, [r7, #12]
 801df3c:	6939      	ldr	r1, [r7, #16]
 801df3e:	6878      	ldr	r0, [r7, #4]
 801df40:	f7fd fe64 	bl	801bc0c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801df44:	6878      	ldr	r0, [r7, #4]
 801df46:	3718      	adds	r7, #24
 801df48:	46bd      	mov	sp, r7
 801df4a:	bd80      	pop	{r7, pc}

0801df4c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 801df4c:	b580      	push	{r7, lr}
 801df4e:	b086      	sub	sp, #24
 801df50:	af00      	add	r7, sp, #0
 801df52:	6078      	str	r0, [r7, #4]
 801df54:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 801df56:	6878      	ldr	r0, [r7, #4]
 801df58:	f7fd fe81 	bl	801bc5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801df5c:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 801df5e:	683b      	ldr	r3, [r7, #0]
 801df60:	2b00      	cmp	r3, #0
 801df62:	db03      	blt.n	801df6c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 801df64:	683a      	ldr	r2, [r7, #0]
 801df66:	68fb      	ldr	r3, [r7, #12]
 801df68:	429a      	cmp	r2, r3
 801df6a:	db01      	blt.n	801df70 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 801df6c:	f005 fcde 	bl	802392c <abort>
  const auto* dims_data = shape.DimsData();
 801df70:	6878      	ldr	r0, [r7, #4]
 801df72:	f7fd ffa6 	bl	801bec2 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801df76:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 801df78:	2301      	movs	r3, #1
 801df7a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801df7c:	2300      	movs	r3, #0
 801df7e:	613b      	str	r3, [r7, #16]
 801df80:	693a      	ldr	r2, [r7, #16]
 801df82:	68fb      	ldr	r3, [r7, #12]
 801df84:	429a      	cmp	r2, r3
 801df86:	da12      	bge.n	801dfae <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 801df88:	693a      	ldr	r2, [r7, #16]
 801df8a:	683b      	ldr	r3, [r7, #0]
 801df8c:	429a      	cmp	r2, r3
 801df8e:	d005      	beq.n	801df9c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 801df90:	693b      	ldr	r3, [r7, #16]
 801df92:	009b      	lsls	r3, r3, #2
 801df94:	68ba      	ldr	r2, [r7, #8]
 801df96:	4413      	add	r3, r2
 801df98:	681b      	ldr	r3, [r3, #0]
 801df9a:	e000      	b.n	801df9e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 801df9c:	2301      	movs	r3, #1
 801df9e:	697a      	ldr	r2, [r7, #20]
 801dfa0:	fb02 f303 	mul.w	r3, r2, r3
 801dfa4:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801dfa6:	693b      	ldr	r3, [r7, #16]
 801dfa8:	3301      	adds	r3, #1
 801dfaa:	613b      	str	r3, [r7, #16]
 801dfac:	e7e8      	b.n	801df80 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 801dfae:	697b      	ldr	r3, [r7, #20]
}
 801dfb0:	4618      	mov	r0, r3
 801dfb2:	3718      	adds	r7, #24
 801dfb4:	46bd      	mov	sp, r7
 801dfb6:	bd80      	pop	{r7, pc}

0801dfb8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 801dfb8:	b590      	push	{r4, r7, lr}
 801dfba:	b087      	sub	sp, #28
 801dfbc:	af00      	add	r7, sp, #0
 801dfbe:	60f8      	str	r0, [r7, #12]
 801dfc0:	60b9      	str	r1, [r7, #8]
 801dfc2:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 801dfc4:	68f8      	ldr	r0, [r7, #12]
 801dfc6:	f7fd fe4a 	bl	801bc5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801dfca:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 801dfcc:	2300      	movs	r3, #0
 801dfce:	617b      	str	r3, [r7, #20]
 801dfd0:	697a      	ldr	r2, [r7, #20]
 801dfd2:	693b      	ldr	r3, [r7, #16]
 801dfd4:	429a      	cmp	r2, r3
 801dfd6:	da15      	bge.n	801e004 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 801dfd8:	697a      	ldr	r2, [r7, #20]
 801dfda:	68bb      	ldr	r3, [r7, #8]
 801dfdc:	429a      	cmp	r2, r3
 801dfde:	d00d      	beq.n	801dffc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801dfe0:	6979      	ldr	r1, [r7, #20]
 801dfe2:	68f8      	ldr	r0, [r7, #12]
 801dfe4:	f7fd ff48 	bl	801be78 <_ZNK6tflite12RuntimeShape4DimsEi>
 801dfe8:	4604      	mov	r4, r0
 801dfea:	6979      	ldr	r1, [r7, #20]
 801dfec:	6878      	ldr	r0, [r7, #4]
 801dfee:	f7fd ff43 	bl	801be78 <_ZNK6tflite12RuntimeShape4DimsEi>
 801dff2:	4603      	mov	r3, r0
 801dff4:	429c      	cmp	r4, r3
 801dff6:	d001      	beq.n	801dffc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 801dff8:	f005 fc98 	bl	802392c <abort>
  for (int i = 0; i < dims_count; ++i) {
 801dffc:	697b      	ldr	r3, [r7, #20]
 801dffe:	3301      	adds	r3, #1
 801e000:	617b      	str	r3, [r7, #20]
 801e002:	e7e5      	b.n	801dfd0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 801e004:	68b9      	ldr	r1, [r7, #8]
 801e006:	68f8      	ldr	r0, [r7, #12]
 801e008:	f7ff ffa0 	bl	801df4c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801e00c:	4603      	mov	r3, r0
}
 801e00e:	4618      	mov	r0, r3
 801e010:	371c      	adds	r7, #28
 801e012:	46bd      	mov	sp, r7
 801e014:	bd90      	pop	{r4, r7, pc}

0801e016 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801e016:	b580      	push	{r7, lr}
 801e018:	b082      	sub	sp, #8
 801e01a:	af00      	add	r7, sp, #0
 801e01c:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801e01e:	2100      	movs	r1, #0
 801e020:	6878      	ldr	r0, [r7, #4]
 801e022:	f7fe fb23 	bl	801c66c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801e026:	4603      	mov	r3, r0
}
 801e028:	4618      	mov	r0, r3
 801e02a:	3708      	adds	r7, #8
 801e02c:	46bd      	mov	sp, r7
 801e02e:	bd80      	pop	{r7, pc}

0801e030 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801e030:	b580      	push	{r7, lr}
 801e032:	b082      	sub	sp, #8
 801e034:	af00      	add	r7, sp, #0
 801e036:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801e038:	6878      	ldr	r0, [r7, #4]
 801e03a:	f000 f805 	bl	801e048 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 801e03e:	4603      	mov	r3, r0
}
 801e040:	4618      	mov	r0, r3
 801e042:	3708      	adds	r7, #8
 801e044:	46bd      	mov	sp, r7
 801e046:	bd80      	pop	{r7, pc}

0801e048 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801e048:	b580      	push	{r7, lr}
 801e04a:	b082      	sub	sp, #8
 801e04c:	af00      	add	r7, sp, #0
 801e04e:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801e050:	2101      	movs	r1, #1
 801e052:	6878      	ldr	r0, [r7, #4]
 801e054:	f7fe fb0a 	bl	801c66c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801e058:	4603      	mov	r3, r0
  }
 801e05a:	4618      	mov	r0, r3
 801e05c:	3708      	adds	r7, #8
 801e05e:	46bd      	mov	sp, r7
 801e060:	bd80      	pop	{r7, pc}

0801e062 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 801e062:	b590      	push	{r4, r7, lr}
 801e064:	b085      	sub	sp, #20
 801e066:	af00      	add	r7, sp, #0
 801e068:	60f8      	str	r0, [r7, #12]
 801e06a:	60b9      	str	r1, [r7, #8]
 801e06c:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801e06e:	f107 0308 	add.w	r3, r7, #8
 801e072:	4618      	mov	r0, r3
 801e074:	f7ff f8b4 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e078:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801e07a:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801e07c:	1d3b      	adds	r3, r7, #4
 801e07e:	4618      	mov	r0, r3
 801e080:	f7ff f8ae 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e084:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801e086:	681b      	ldr	r3, [r3, #0]
 801e088:	461a      	mov	r2, r3
 801e08a:	4621      	mov	r1, r4
 801e08c:	68f8      	ldr	r0, [r7, #12]
 801e08e:	f7ff fb0b 	bl	801d6a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801e092:	4603      	mov	r3, r0
 801e094:	4618      	mov	r0, r3
 801e096:	f7ff f831 	bl	801d0fc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801e09a:	4603      	mov	r3, r0
}
 801e09c:	4618      	mov	r0, r3
 801e09e:	3714      	adds	r7, #20
 801e0a0:	46bd      	mov	sp, r7
 801e0a2:	bd90      	pop	{r4, r7, pc}

0801e0a4 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 801e0a4:	b580      	push	{r7, lr}
 801e0a6:	b082      	sub	sp, #8
 801e0a8:	af00      	add	r7, sp, #0
 801e0aa:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	bf0c      	ite	eq
 801e0b2:	2301      	moveq	r3, #1
 801e0b4:	2300      	movne	r3, #0
 801e0b6:	b2db      	uxtb	r3, r3
 801e0b8:	4618      	mov	r0, r3
 801e0ba:	f7fe fef9 	bl	801ceb0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801e0be:	4603      	mov	r3, r0
}
 801e0c0:	4618      	mov	r0, r3
 801e0c2:	3708      	adds	r7, #8
 801e0c4:	46bd      	mov	sp, r7
 801e0c6:	bd80      	pop	{r7, pc}

0801e0c8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 801e0c8:	b580      	push	{r7, lr}
 801e0ca:	b08a      	sub	sp, #40	; 0x28
 801e0cc:	af00      	add	r7, sp, #0
 801e0ce:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 801e0d0:	482c      	ldr	r0, [pc, #176]	; (801e184 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801e0d2:	f7ff ffa0 	bl	801e016 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801e0d6:	4603      	mov	r3, r0
 801e0d8:	4618      	mov	r0, r3
 801e0da:	f7ff f88c 	bl	801d1f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801e0de:	4603      	mov	r3, r0
 801e0e0:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 801e0e2:	4829      	ldr	r0, [pc, #164]	; (801e188 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 801e0e4:	f7ff ff97 	bl	801e016 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801e0e8:	4603      	mov	r3, r0
 801e0ea:	4618      	mov	r0, r3
 801e0ec:	f7ff f883 	bl	801d1f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801e0f0:	4603      	mov	r3, r0
 801e0f2:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 801e0f4:	f000 f86c 	bl	801e1d0 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 801e0f8:	4603      	mov	r3, r0
 801e0fa:	4619      	mov	r1, r3
 801e0fc:	6878      	ldr	r0, [r7, #4]
 801e0fe:	f000 f870 	bl	801e1e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801e102:	4603      	mov	r3, r0
 801e104:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 801e106:	69f9      	ldr	r1, [r7, #28]
 801e108:	69f8      	ldr	r0, [r7, #28]
 801e10a:	f000 f83f 	bl	801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801e10e:	4603      	mov	r3, r0
 801e110:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 801e112:	69f9      	ldr	r1, [r7, #28]
 801e114:	69b8      	ldr	r0, [r7, #24]
 801e116:	f000 f839 	bl	801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801e11a:	4603      	mov	r3, r0
 801e11c:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 801e11e:	69b9      	ldr	r1, [r7, #24]
 801e120:	69b8      	ldr	r0, [r7, #24]
 801e122:	f000 f833 	bl	801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801e126:	4603      	mov	r3, r0
 801e128:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 801e12a:	6938      	ldr	r0, [r7, #16]
 801e12c:	f000 f877 	bl	801e21e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801e130:	4603      	mov	r3, r0
 801e132:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 801e134:	6979      	ldr	r1, [r7, #20]
 801e136:	68f8      	ldr	r0, [r7, #12]
 801e138:	f000 f853 	bl	801e1e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801e13c:	4603      	mov	r3, r0
 801e13e:	6a39      	ldr	r1, [r7, #32]
 801e140:	4618      	mov	r0, r3
 801e142:	f000 f823 	bl	801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801e146:	4603      	mov	r3, r0
 801e148:	69b9      	ldr	r1, [r7, #24]
 801e14a:	4618      	mov	r0, r3
 801e14c:	f000 f849 	bl	801e1e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801e150:	4603      	mov	r3, r0
 801e152:	4618      	mov	r0, r3
 801e154:	f000 f879 	bl	801e24a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801e158:	4603      	mov	r3, r0
 801e15a:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 801e15c:	68b9      	ldr	r1, [r7, #8]
 801e15e:	69f8      	ldr	r0, [r7, #28]
 801e160:	f000 f83f 	bl	801e1e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801e164:	4603      	mov	r3, r0
 801e166:	4619      	mov	r1, r3
 801e168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e16a:	f000 f80f 	bl	801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801e16e:	4603      	mov	r3, r0
 801e170:	4619      	mov	r1, r3
 801e172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e174:	f000 f87f 	bl	801e276 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801e178:	4603      	mov	r3, r0
}
 801e17a:	4618      	mov	r0, r3
 801e17c:	3728      	adds	r7, #40	; 0x28
 801e17e:	46bd      	mov	sp, r7
 801e180:	bd80      	pop	{r7, pc}
 801e182:	bf00      	nop
 801e184:	70f5a894 	.word	0x70f5a894
 801e188:	2aaaaaab 	.word	0x2aaaaaab

0801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801e18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e18e:	b085      	sub	sp, #20
 801e190:	af00      	add	r7, sp, #0
 801e192:	6078      	str	r0, [r7, #4]
 801e194:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801e196:	1d3b      	adds	r3, r7, #4
 801e198:	4618      	mov	r0, r3
 801e19a:	f7ff f821 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e19e:	4603      	mov	r3, r0
 801e1a0:	681d      	ldr	r5, [r3, #0]
 801e1a2:	463b      	mov	r3, r7
 801e1a4:	4618      	mov	r0, r3
 801e1a6:	f7ff f81b 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e1aa:	4603      	mov	r3, r0
 801e1ac:	681e      	ldr	r6, [r3, #0]
 801e1ae:	f107 030c 	add.w	r3, r7, #12
 801e1b2:	4618      	mov	r0, r3
 801e1b4:	f7ff f814 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e1b8:	4604      	mov	r4, r0
 801e1ba:	4631      	mov	r1, r6
 801e1bc:	4628      	mov	r0, r5
 801e1be:	f7fd fde5 	bl	801bd8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801e1c2:	4603      	mov	r3, r0
 801e1c4:	6023      	str	r3, [r4, #0]
  return c;
 801e1c6:	68fb      	ldr	r3, [r7, #12]
}
 801e1c8:	4618      	mov	r0, r3
 801e1ca:	3714      	adds	r7, #20
 801e1cc:	46bd      	mov	sp, r7
 801e1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e1d0 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 801e1d0:	b580      	push	{r7, lr}
 801e1d2:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801e1d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801e1d8:	f7ff f80d 	bl	801d1f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801e1dc:	4603      	mov	r3, r0
  }
 801e1de:	4618      	mov	r0, r3
 801e1e0:	bd80      	pop	{r7, pc}

0801e1e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801e1e2:	b590      	push	{r4, r7, lr}
 801e1e4:	b083      	sub	sp, #12
 801e1e6:	af00      	add	r7, sp, #0
 801e1e8:	6078      	str	r0, [r7, #4]
 801e1ea:	6039      	str	r1, [r7, #0]
 801e1ec:	1d3b      	adds	r3, r7, #4
 801e1ee:	4618      	mov	r0, r3
 801e1f0:	f7fe fff6 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e1f4:	4603      	mov	r3, r0
 801e1f6:	681c      	ldr	r4, [r3, #0]
 801e1f8:	463b      	mov	r3, r7
 801e1fa:	4618      	mov	r0, r3
 801e1fc:	f7fe fff0 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e200:	4603      	mov	r3, r0
 801e202:	681b      	ldr	r3, [r3, #0]
 801e204:	4619      	mov	r1, r3
 801e206:	4620      	mov	r0, r4
 801e208:	f7fe fe30 	bl	801ce6c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801e20c:	4603      	mov	r3, r0
 801e20e:	4618      	mov	r0, r3
 801e210:	f7fe ff74 	bl	801d0fc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801e214:	4603      	mov	r3, r0
 801e216:	4618      	mov	r0, r3
 801e218:	370c      	adds	r7, #12
 801e21a:	46bd      	mov	sp, r7
 801e21c:	bd90      	pop	{r4, r7, pc}

0801e21e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801e21e:	b580      	push	{r7, lr}
 801e220:	b082      	sub	sp, #8
 801e222:	af00      	add	r7, sp, #0
 801e224:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801e226:	1d3b      	adds	r3, r7, #4
 801e228:	4618      	mov	r0, r3
 801e22a:	f7fe ffd9 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e22e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	4618      	mov	r0, r3
 801e234:	f000 f83d 	bl	801e2b2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 801e238:	4603      	mov	r3, r0
 801e23a:	4618      	mov	r0, r3
 801e23c:	f7fe ff5e 	bl	801d0fc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801e240:	4603      	mov	r3, r0
}
 801e242:	4618      	mov	r0, r3
 801e244:	3708      	adds	r7, #8
 801e246:	46bd      	mov	sp, r7
 801e248:	bd80      	pop	{r7, pc}

0801e24a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801e24a:	b580      	push	{r7, lr}
 801e24c:	b082      	sub	sp, #8
 801e24e:	af00      	add	r7, sp, #0
 801e250:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801e252:	1d3b      	adds	r3, r7, #4
 801e254:	4618      	mov	r0, r3
 801e256:	f7fe ffc3 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e25a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	4618      	mov	r0, r3
 801e260:	f7ff fee6 	bl	801e030 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 801e264:	4603      	mov	r3, r0
 801e266:	4618      	mov	r0, r3
 801e268:	f7fe ff48 	bl	801d0fc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801e26c:	4603      	mov	r3, r0
}
 801e26e:	4618      	mov	r0, r3
 801e270:	3708      	adds	r7, #8
 801e272:	46bd      	mov	sp, r7
 801e274:	bd80      	pop	{r7, pc}

0801e276 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 801e276:	b590      	push	{r4, r7, lr}
 801e278:	b083      	sub	sp, #12
 801e27a:	af00      	add	r7, sp, #0
 801e27c:	6078      	str	r0, [r7, #4]
 801e27e:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801e280:	1d3b      	adds	r3, r7, #4
 801e282:	4618      	mov	r0, r3
 801e284:	f7fe ffac 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e288:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801e28a:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801e28c:	463b      	mov	r3, r7
 801e28e:	4618      	mov	r0, r3
 801e290:	f7fe ffa6 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e294:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	4619      	mov	r1, r3
 801e29a:	4620      	mov	r0, r4
 801e29c:	f000 f815 	bl	801e2ca <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 801e2a0:	4603      	mov	r3, r0
 801e2a2:	4618      	mov	r0, r3
 801e2a4:	f7fe ff2a 	bl	801d0fc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801e2a8:	4603      	mov	r3, r0
}
 801e2aa:	4618      	mov	r0, r3
 801e2ac:	370c      	adds	r7, #12
 801e2ae:	46bd      	mov	sp, r7
 801e2b0:	bd90      	pop	{r4, r7, pc}

0801e2b2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801e2b2:	b580      	push	{r7, lr}
 801e2b4:	b082      	sub	sp, #8
 801e2b6:	af00      	add	r7, sp, #0
 801e2b8:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801e2ba:	6878      	ldr	r0, [r7, #4]
 801e2bc:	f000 f813 	bl	801e2e6 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 801e2c0:	4603      	mov	r3, r0
}
 801e2c2:	4618      	mov	r0, r3
 801e2c4:	3708      	adds	r7, #8
 801e2c6:	46bd      	mov	sp, r7
 801e2c8:	bd80      	pop	{r7, pc}

0801e2ca <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 801e2ca:	b580      	push	{r7, lr}
 801e2cc:	b082      	sub	sp, #8
 801e2ce:	af00      	add	r7, sp, #0
 801e2d0:	6078      	str	r0, [r7, #4]
 801e2d2:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 801e2d4:	6839      	ldr	r1, [r7, #0]
 801e2d6:	6878      	ldr	r0, [r7, #4]
 801e2d8:	f000 f812 	bl	801e300 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 801e2dc:	4603      	mov	r3, r0
}
 801e2de:	4618      	mov	r0, r3
 801e2e0:	3708      	adds	r7, #8
 801e2e2:	46bd      	mov	sp, r7
 801e2e4:	bd80      	pop	{r7, pc}

0801e2e6 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801e2e6:	b580      	push	{r7, lr}
 801e2e8:	b082      	sub	sp, #8
 801e2ea:	af00      	add	r7, sp, #0
 801e2ec:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801e2ee:	2102      	movs	r1, #2
 801e2f0:	6878      	ldr	r0, [r7, #4]
 801e2f2:	f7fe f9bb 	bl	801c66c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801e2f6:	4603      	mov	r3, r0
  }
 801e2f8:	4618      	mov	r0, r3
 801e2fa:	3708      	adds	r7, #8
 801e2fc:	46bd      	mov	sp, r7
 801e2fe:	bd80      	pop	{r7, pc}

0801e300 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 801e300:	b580      	push	{r7, lr}
 801e302:	b082      	sub	sp, #8
 801e304:	af00      	add	r7, sp, #0
 801e306:	6078      	str	r0, [r7, #4]
 801e308:	6039      	str	r1, [r7, #0]
 801e30a:	6839      	ldr	r1, [r7, #0]
 801e30c:	6878      	ldr	r0, [r7, #4]
 801e30e:	f7fe fdad 	bl	801ce6c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801e312:	4603      	mov	r3, r0
 801e314:	4618      	mov	r0, r3
 801e316:	3708      	adds	r7, #8
 801e318:	46bd      	mov	sp, r7
 801e31a:	bd80      	pop	{r7, pc}

0801e31c <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801e31c:	b480      	push	{r7}
 801e31e:	b083      	sub	sp, #12
 801e320:	af00      	add	r7, sp, #0
 801e322:	6078      	str	r0, [r7, #4]
 801e324:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	781a      	ldrb	r2, [r3, #0]
 801e32a:	683b      	ldr	r3, [r7, #0]
 801e32c:	781b      	ldrb	r3, [r3, #0]
 801e32e:	429a      	cmp	r2, r3
 801e330:	d201      	bcs.n	801e336 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 801e332:	683b      	ldr	r3, [r7, #0]
 801e334:	e000      	b.n	801e338 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 801e336:	687b      	ldr	r3, [r7, #4]
    }
 801e338:	4618      	mov	r0, r3
 801e33a:	370c      	adds	r7, #12
 801e33c:	46bd      	mov	sp, r7
 801e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e342:	4770      	bx	lr

0801e344 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801e344:	b480      	push	{r7}
 801e346:	b083      	sub	sp, #12
 801e348:	af00      	add	r7, sp, #0
 801e34a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	2b00      	cmp	r3, #0
 801e350:	d002      	beq.n	801e358 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	681b      	ldr	r3, [r3, #0]
 801e356:	e000      	b.n	801e35a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 801e358:	2300      	movs	r3, #0
}
 801e35a:	4618      	mov	r0, r3
 801e35c:	370c      	adds	r7, #12
 801e35e:	46bd      	mov	sp, r7
 801e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e364:	4770      	bx	lr
	...

0801e368 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 801e368:	b580      	push	{r7, lr}
 801e36a:	b086      	sub	sp, #24
 801e36c:	af00      	add	r7, sp, #0
 801e36e:	4603      	mov	r3, r0
 801e370:	6039      	str	r1, [r7, #0]
 801e372:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 801e374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801e378:	11db      	asrs	r3, r3, #7
 801e37a:	b21b      	sxth	r3, r3
 801e37c:	b29b      	uxth	r3, r3
 801e37e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801e382:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 801e384:	8afb      	ldrh	r3, [r7, #22]
 801e386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e38a:	d306      	bcc.n	801e39a <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 801e38c:	4b1a      	ldr	r3, [pc, #104]	; (801e3f8 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 801e38e:	4a1b      	ldr	r2, [pc, #108]	; (801e3fc <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 801e390:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801e394:	481a      	ldr	r0, [pc, #104]	; (801e400 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 801e396:	f005 fad1 	bl	802393c <__assert_func>
  int16_t offset = value & 0x7f;
 801e39a:	88fb      	ldrh	r3, [r7, #6]
 801e39c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e3a0:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 801e3a2:	8afb      	ldrh	r3, [r7, #22]
 801e3a4:	005b      	lsls	r3, r3, #1
 801e3a6:	683a      	ldr	r2, [r7, #0]
 801e3a8:	4413      	add	r3, r2
 801e3aa:	881b      	ldrh	r3, [r3, #0]
 801e3ac:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 801e3ae:	8afb      	ldrh	r3, [r7, #22]
 801e3b0:	3301      	adds	r3, #1
 801e3b2:	005b      	lsls	r3, r3, #1
 801e3b4:	683a      	ldr	r2, [r7, #0]
 801e3b6:	4413      	add	r3, r2
 801e3b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e3bc:	b29a      	uxth	r2, r3
 801e3be:	8afb      	ldrh	r3, [r7, #22]
 801e3c0:	005b      	lsls	r3, r3, #1
 801e3c2:	6839      	ldr	r1, [r7, #0]
 801e3c4:	440b      	add	r3, r1
 801e3c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e3ca:	b29b      	uxth	r3, r3
 801e3cc:	1ad3      	subs	r3, r2, r3
 801e3ce:	b29b      	uxth	r3, r3
 801e3d0:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 801e3d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801e3d6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801e3da:	fb02 f303 	mul.w	r3, r2, r3
 801e3de:	3340      	adds	r3, #64	; 0x40
 801e3e0:	11db      	asrs	r3, r3, #7
 801e3e2:	60fb      	str	r3, [r7, #12]
  return base + delta;
 801e3e4:	68fb      	ldr	r3, [r7, #12]
 801e3e6:	b29a      	uxth	r2, r3
 801e3e8:	8a7b      	ldrh	r3, [r7, #18]
 801e3ea:	4413      	add	r3, r2
 801e3ec:	b29b      	uxth	r3, r3
 801e3ee:	b21b      	sxth	r3, r3
}
 801e3f0:	4618      	mov	r0, r3
 801e3f2:	3718      	adds	r7, #24
 801e3f4:	46bd      	mov	sp, r7
 801e3f6:	bd80      	pop	{r7, pc}
 801e3f8:	08029258 	.word	0x08029258
 801e3fc:	08029284 	.word	0x08029284
 801e400:	080292c8 	.word	0x080292c8

0801e404 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 801e404:	b580      	push	{r7, lr}
 801e406:	b08a      	sub	sp, #40	; 0x28
 801e408:	af00      	add	r7, sp, #0
 801e40a:	60f8      	str	r0, [r7, #12]
 801e40c:	60b9      	str	r1, [r7, #8]
 801e40e:	607a      	str	r2, [r7, #4]
 801e410:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 801e412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e414:	687a      	ldr	r2, [r7, #4]
 801e416:	fb03 f202 	mul.w	r2, r3, r2
 801e41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e41c:	4413      	add	r3, r2
 801e41e:	005b      	lsls	r3, r3, #1
 801e420:	68ba      	ldr	r2, [r7, #8]
 801e422:	4413      	add	r3, r2
 801e424:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e428:	461a      	mov	r2, r3
 801e42a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e42e:	1ad3      	subs	r3, r2, r3
 801e430:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 801e432:	68fb      	ldr	r3, [r7, #12]
 801e434:	6899      	ldr	r1, [r3, #8]
 801e436:	68fb      	ldr	r3, [r7, #12]
 801e438:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 801e43a:	461a      	mov	r2, r3
 801e43c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e43e:	f7fd fdab 	bl	801bf98 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801e442:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 801e444:	6a3b      	ldr	r3, [r7, #32]
 801e446:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 801e44a:	337f      	adds	r3, #127	; 0x7f
 801e44c:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801e44e:	4b12      	ldr	r3, [pc, #72]	; (801e498 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 801e450:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 801e452:	f107 0214 	add.w	r2, r7, #20
 801e456:	f107 0310 	add.w	r3, r7, #16
 801e45a:	4611      	mov	r1, r2
 801e45c:	4618      	mov	r0, r3
 801e45e:	f7fd fbb3 	bl	801bbc8 <_ZSt3maxIlERKT_S2_S2_>
 801e462:	4602      	mov	r2, r0
 801e464:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e468:	61bb      	str	r3, [r7, #24]
 801e46a:	f107 0318 	add.w	r3, r7, #24
 801e46e:	4619      	mov	r1, r3
 801e470:	4610      	mov	r0, r2
 801e472:	f7fd fb95 	bl	801bba0 <_ZSt3minIlERKT_S2_S2_>
 801e476:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801e478:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 801e47a:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 801e47c:	68fb      	ldr	r3, [r7, #12]
 801e47e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e480:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801e484:	4611      	mov	r1, r2
 801e486:	4618      	mov	r0, r3
 801e488:	f7ff ff6e 	bl	801e368 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801e48c:	4603      	mov	r3, r0
}
 801e48e:	4618      	mov	r0, r3
 801e490:	3728      	adds	r7, #40	; 0x28
 801e492:	46bd      	mov	sp, r7
 801e494:	bd80      	pop	{r7, pc}
 801e496:	bf00      	nop
 801e498:	ffff8000 	.word	0xffff8000

0801e49c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 801e49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4a0:	b0ab      	sub	sp, #172	; 0xac
 801e4a2:	af02      	add	r7, sp, #8
 801e4a4:	63f8      	str	r0, [r7, #60]	; 0x3c
 801e4a6:	63b9      	str	r1, [r7, #56]	; 0x38
 801e4a8:	637a      	str	r2, [r7, #52]	; 0x34
 801e4aa:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801e4ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801e4ae:	f7fd fbd6 	bl	801bc5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801e4b2:	4603      	mov	r3, r0
 801e4b4:	3b01      	subs	r3, #1
 801e4b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801e4ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e4bc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801e4c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801e4c2:	f7ff fd79 	bl	801dfb8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801e4c6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801e4ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801e4ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e4d0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801e4d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801e4d6:	f7fe fd31 	bl	801cf3c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801e4da:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 801e4de:	2300      	movs	r3, #0
 801e4e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801e4e4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801e4e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801e4ec:	429a      	cmp	r2, r3
 801e4ee:	f280 8157 	bge.w	801e7a0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 801e4f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e4f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801e4fa:	2300      	movs	r3, #0
 801e4fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801e500:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e504:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e508:	429a      	cmp	r2, r3
 801e50a:	da1c      	bge.n	801e546 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801e50c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801e510:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e514:	fb03 f202 	mul.w	r2, r3, r2
 801e518:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e51c:	4413      	add	r3, r2
 801e51e:	005a      	lsls	r2, r3, #1
 801e520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e522:	441a      	add	r2, r3
 801e524:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 801e528:	4611      	mov	r1, r2
 801e52a:	4618      	mov	r0, r3
 801e52c:	f7ff fcd6 	bl	801dedc <_ZSt3maxIsERKT_S2_S2_>
 801e530:	4603      	mov	r3, r0
 801e532:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e536:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801e53a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e53e:	3301      	adds	r3, #1
 801e540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801e544:	e7dc      	b.n	801e500 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 801e546:	2300      	movs	r3, #0
 801e548:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 801e54c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801e550:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e554:	fb02 f303 	mul.w	r3, r2, r3
 801e558:	005a      	lsls	r2, r3, #1
 801e55a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e55e:	4413      	add	r3, r2
 801e560:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 801e562:	2300      	movs	r3, #0
 801e564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e568:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801e56c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e570:	429a      	cmp	r2, r3
 801e572:	da28      	bge.n	801e5c6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801e574:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 801e578:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e57c:	005a      	lsls	r2, r3, #1
 801e57e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801e580:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801e582:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e586:	9301      	str	r3, [sp, #4]
 801e588:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e58c:	9300      	str	r3, [sp, #0]
 801e58e:	460b      	mov	r3, r1
 801e590:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801e594:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e596:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e598:	f7ff ff34 	bl	801e404 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 801e59c:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 801e59e:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 801e5a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e5a4:	005a      	lsls	r2, r3, #1
 801e5a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801e5a8:	4413      	add	r3, r2
 801e5aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e5ae:	461a      	mov	r2, r3
 801e5b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801e5b4:	4413      	add	r3, r2
 801e5b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 801e5ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e5be:	3301      	adds	r3, #1
 801e5c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e5c4:	e7d0      	b.n	801e568 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 801e5c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801e5ca:	4618      	mov	r0, r3
 801e5cc:	f7fe fd84 	bl	801d0d8 <_ZN6tflite17CountLeadingZerosImEEiT_>
 801e5d0:	4603      	mov	r3, r0
 801e5d2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 801e5d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801e5da:	17da      	asrs	r2, r3, #31
 801e5dc:	623b      	str	r3, [r7, #32]
 801e5de:	627a      	str	r2, [r7, #36]	; 0x24
 801e5e0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801e5e4:	1e59      	subs	r1, r3, #1
 801e5e6:	f1a1 0320 	sub.w	r3, r1, #32
 801e5ea:	f1c1 0220 	rsb	r2, r1, #32
 801e5ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e5f0:	fa00 f901 	lsl.w	r9, r0, r1
 801e5f4:	6a38      	ldr	r0, [r7, #32]
 801e5f6:	fa00 f303 	lsl.w	r3, r0, r3
 801e5fa:	ea49 0903 	orr.w	r9, r9, r3
 801e5fe:	6a3b      	ldr	r3, [r7, #32]
 801e600:	fa23 f202 	lsr.w	r2, r3, r2
 801e604:	ea49 0902 	orr.w	r9, r9, r2
 801e608:	6a3b      	ldr	r3, [r7, #32]
 801e60a:	fa03 f801 	lsl.w	r8, r3, r1
 801e60e:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 801e612:	61bb      	str	r3, [r7, #24]
 801e614:	f149 0300 	adc.w	r3, r9, #0
 801e618:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 801e61a:	f04f 0200 	mov.w	r2, #0
 801e61e:	f04f 0300 	mov.w	r3, #0
 801e622:	69b9      	ldr	r1, [r7, #24]
 801e624:	0b8a      	lsrs	r2, r1, #14
 801e626:	69f9      	ldr	r1, [r7, #28]
 801e628:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 801e62c:	69f9      	ldr	r1, [r7, #28]
 801e62e:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 801e630:	4613      	mov	r3, r2
 801e632:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 801e634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e636:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 801e63a:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801e63c:	4b5b      	ldr	r3, [pc, #364]	; (801e7ac <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 801e63e:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 801e640:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801e644:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e648:	4611      	mov	r1, r2
 801e64a:	4618      	mov	r0, r3
 801e64c:	f7fd fabc 	bl	801bbc8 <_ZSt3maxIlERKT_S2_S2_>
 801e650:	4602      	mov	r2, r0
 801e652:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e656:	657b      	str	r3, [r7, #84]	; 0x54
 801e658:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801e65c:	4619      	mov	r1, r3
 801e65e:	4610      	mov	r0, r2
 801e660:	f7fd fa9e 	bl	801bba0 <_ZSt3minIlERKT_S2_S2_>
 801e664:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801e666:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 801e668:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 801e66c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 801e670:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e674:	4611      	mov	r1, r2
 801e676:	4618      	mov	r0, r3
 801e678:	f7ff fe76 	bl	801e368 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801e67c:	4603      	mov	r3, r0
 801e67e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 801e682:	2300      	movs	r3, #0
 801e684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801e688:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801e68c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e690:	429a      	cmp	r2, r3
 801e692:	da7f      	bge.n	801e794 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 801e694:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801e698:	f1c3 031f 	rsb	r3, r3, #31
 801e69c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 801e6a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801e6a4:	1e5a      	subs	r2, r3, #1
 801e6a6:	2301      	movs	r3, #1
 801e6a8:	4093      	lsls	r3, r2
 801e6aa:	17da      	asrs	r2, r3, #31
 801e6ac:	603b      	str	r3, [r7, #0]
 801e6ae:	607a      	str	r2, [r7, #4]
 801e6b0:	e9d7 3400 	ldrd	r3, r4, [r7]
 801e6b4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801e6b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801e6bc:	005a      	lsls	r2, r3, #1
 801e6be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801e6c0:	4413      	add	r3, r2
 801e6c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e6c6:	b21b      	sxth	r3, r3
 801e6c8:	17da      	asrs	r2, r3, #31
 801e6ca:	613b      	str	r3, [r7, #16]
 801e6cc:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801e6ce:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801e6d2:	17da      	asrs	r2, r3, #31
 801e6d4:	60bb      	str	r3, [r7, #8]
 801e6d6:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801e6d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e6dc:	460b      	mov	r3, r1
 801e6de:	68ba      	ldr	r2, [r7, #8]
 801e6e0:	fb02 f203 	mul.w	r2, r2, r3
 801e6e4:	68fb      	ldr	r3, [r7, #12]
 801e6e6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 801e6ea:	4601      	mov	r1, r0
 801e6ec:	fb01 f303 	mul.w	r3, r1, r3
 801e6f0:	4413      	add	r3, r2
 801e6f2:	693a      	ldr	r2, [r7, #16]
 801e6f4:	68b9      	ldr	r1, [r7, #8]
 801e6f6:	fba2 ab01 	umull	sl, fp, r2, r1
 801e6fa:	445b      	add	r3, fp
 801e6fc:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801e6fe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801e702:	eb1a 0502 	adds.w	r5, sl, r2
 801e706:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 801e70a:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 801e70e:	f1c1 0320 	rsb	r3, r1, #32
 801e712:	f1b1 0220 	subs.w	r2, r1, #32
 801e716:	fa25 f001 	lsr.w	r0, r5, r1
 801e71a:	62b8      	str	r0, [r7, #40]	; 0x28
 801e71c:	fa06 f303 	lsl.w	r3, r6, r3
 801e720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e722:	ea40 0003 	orr.w	r0, r0, r3
 801e726:	62b8      	str	r0, [r7, #40]	; 0x28
 801e728:	d404      	bmi.n	801e734 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 801e72a:	fa46 f202 	asr.w	r2, r6, r2
 801e72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e730:	4313      	orrs	r3, r2
 801e732:	62bb      	str	r3, [r7, #40]	; 0x28
 801e734:	fa46 f301 	asr.w	r3, r6, r1
 801e738:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801e73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e73c:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 801e73e:	2300      	movs	r3, #0
 801e740:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 801e742:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e746:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801e74a:	4611      	mov	r1, r2
 801e74c:	4618      	mov	r0, r3
 801e74e:	f7fd fa3b 	bl	801bbc8 <_ZSt3maxIlERKT_S2_S2_>
 801e752:	4602      	mov	r2, r0
 801e754:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e758:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e75a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801e75e:	4619      	mov	r1, r3
 801e760:	4610      	mov	r0, r2
 801e762:	f7fd fa1d 	bl	801bba0 <_ZSt3minIlERKT_S2_S2_>
 801e766:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 801e768:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 801e76a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801e76e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e772:	fb03 f202 	mul.w	r2, r3, r2
 801e776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801e77a:	4413      	add	r3, r2
 801e77c:	005a      	lsls	r2, r3, #1
 801e77e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e782:	441a      	add	r2, r3
 801e784:	b20b      	sxth	r3, r1
 801e786:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 801e788:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801e78c:	3301      	adds	r3, #1
 801e78e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801e792:	e779      	b.n	801e688 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 801e794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e798:	3301      	adds	r3, #1
 801e79a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801e79e:	e6a1      	b.n	801e4e4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 801e7a0:	bf00      	nop
 801e7a2:	37a4      	adds	r7, #164	; 0xa4
 801e7a4:	46bd      	mov	sp, r7
 801e7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7aa:	bf00      	nop
 801e7ac:	ffff8000 	.word	0xffff8000

0801e7b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 801e7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7b4:	b0bc      	sub	sp, #240	; 0xf0
 801e7b6:	af04      	add	r7, sp, #16
 801e7b8:	60f8      	str	r0, [r7, #12]
 801e7ba:	60b9      	str	r1, [r7, #8]
 801e7bc:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 801e7be:	68fb      	ldr	r3, [r7, #12]
 801e7c0:	7a1b      	ldrb	r3, [r3, #8]
 801e7c2:	2b03      	cmp	r3, #3
 801e7c4:	d127      	bne.n	801e816 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 801e7c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801e7ca:	68f9      	ldr	r1, [r7, #12]
 801e7cc:	4618      	mov	r0, r3
 801e7ce:	f7ff fb9b 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801e7d2:	68f8      	ldr	r0, [r7, #12]
 801e7d4:	f7fe f98e 	bl	801caf4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801e7d8:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 801e7da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801e7de:	68b9      	ldr	r1, [r7, #8]
 801e7e0:	4618      	mov	r0, r3
 801e7e2:	f7ff fb91 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801e7e6:	68b8      	ldr	r0, [r7, #8]
 801e7e8:	f7fe f993 	bl	801cb12 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801e7ec:	4602      	mov	r2, r0
 801e7ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801e7f2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801e7f6:	9200      	str	r2, [sp, #0]
 801e7f8:	4622      	mov	r2, r4
 801e7fa:	6878      	ldr	r0, [r7, #4]
 801e7fc:	f000 f930 	bl	801ea60 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 801e800:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801e804:	4618      	mov	r0, r3
 801e806:	f7fd fa14 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801e80a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801e80e:	4618      	mov	r0, r3
 801e810:	f7fd fa0f 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
 801e814:	e080      	b.n	801e918 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
        tflite::micro::GetTensorData<uint8_t>(output));
  } else if (input->type == kTfLiteInt8) {
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	7a1b      	ldrb	r3, [r3, #8]
 801e81a:	2b09      	cmp	r3, #9
 801e81c:	d153      	bne.n	801e8c6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x116>
    if (output->type == kTfLiteInt16) {
 801e81e:	68bb      	ldr	r3, [r7, #8]
 801e820:	7a1b      	ldrb	r3, [r3, #8]
 801e822:	2b07      	cmp	r3, #7
 801e824:	d077      	beq.n	801e916 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
          op_data, tflite::micro::GetTensorShape(input),
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int16_t>(output));
    } else {
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801e826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e82a:	68f9      	ldr	r1, [r7, #12]
 801e82c:	4618      	mov	r0, r3
 801e82e:	f7ff fb6b 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801e832:	f107 0314 	add.w	r3, r7, #20
 801e836:	68b9      	ldr	r1, [r7, #8]
 801e838:	4618      	mov	r0, r3
 801e83a:	f7ff fb65 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 801e83e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e842:	4618      	mov	r0, r3
 801e844:	f7fd fa0b 	bl	801bc5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801e848:	4603      	mov	r3, r0
 801e84a:	3b01      	subs	r3, #1
 801e84c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801e850:	f107 0214 	add.w	r2, r7, #20
 801e854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e858:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801e85c:	4618      	mov	r0, r3
 801e85e:	f7ff fbab 	bl	801dfb8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801e862:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801e866:	f107 0214 	add.w	r2, r7, #20
 801e86a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801e86e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e872:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801e876:	f7fe fb61 	bl	801cf3c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801e87a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801e87e:	68f8      	ldr	r0, [r7, #12]
 801e880:	f7fe f8cc 	bl	801ca1c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801e884:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 801e886:	687b      	ldr	r3, [r7, #4]
 801e888:	689e      	ldr	r6, [r3, #8]
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 801e88e:	687b      	ldr	r3, [r7, #4]
 801e890:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801e892:	68b8      	ldr	r0, [r7, #8]
 801e894:	f7fe f8d1 	bl	801ca3a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801e898:	4603      	mov	r3, r0
 801e89a:	9302      	str	r3, [sp, #8]
 801e89c:	9501      	str	r5, [sp, #4]
 801e89e:	9400      	str	r4, [sp, #0]
 801e8a0:	4633      	mov	r3, r6
 801e8a2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801e8a6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801e8aa:	4640      	mov	r0, r8
 801e8ac:	f7f6 fe3c 	bl	8015528 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801e8b0:	f107 0314 	add.w	r3, r7, #20
 801e8b4:	4618      	mov	r0, r3
 801e8b6:	f7fd f9bc 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801e8ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e8be:	4618      	mov	r0, r3
 801e8c0:	f7fd f9b7 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
 801e8c4:	e028      	b.n	801e918 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
                     tflite::micro::GetTensorData<int8_t>(output));
    }
  } else {
    tflite::reference_ops::SoftmaxInt16(
        op_data, tflite::micro::GetTensorShape(input),
 801e8c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801e8ca:	68f9      	ldr	r1, [r7, #12]
 801e8cc:	4618      	mov	r0, r3
 801e8ce:	f7ff fb1b 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801e8d2:	68f8      	ldr	r0, [r7, #12]
 801e8d4:	f7fe fb61 	bl	801cf9a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 801e8d8:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
 801e8da:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e8de:	68b9      	ldr	r1, [r7, #8]
 801e8e0:	4618      	mov	r0, r3
 801e8e2:	f7ff fb11 	bl	801df08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801e8e6:	68b8      	ldr	r0, [r7, #8]
 801e8e8:	f7ff fd2c 	bl	801e344 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 801e8ec:	4602      	mov	r2, r0
 801e8ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e8f2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 801e8f6:	9200      	str	r2, [sp, #0]
 801e8f8:	4622      	mov	r2, r4
 801e8fa:	6878      	ldr	r0, [r7, #4]
 801e8fc:	f7ff fdce 	bl	801e49c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 801e900:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801e904:	4618      	mov	r0, r3
 801e906:	f7fd f994 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801e90a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801e90e:	4618      	mov	r0, r3
 801e910:	f7fd f98f 	bl	801bc32 <_ZN6tflite12RuntimeShapeD1Ev>
 801e914:	e000      	b.n	801e918 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
      return;
 801e916:	bf00      	nop
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 801e918:	37e0      	adds	r7, #224	; 0xe0
 801e91a:	46bd      	mov	sp, r7
 801e91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e920 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 801e920:	b5b0      	push	{r4, r5, r7, lr}
 801e922:	b09e      	sub	sp, #120	; 0x78
 801e924:	af00      	add	r7, sp, #0
 801e926:	6078      	str	r0, [r7, #4]
 801e928:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801e92a:	2200      	movs	r2, #0
 801e92c:	6839      	ldr	r1, [r7, #0]
 801e92e:	6878      	ldr	r0, [r7, #4]
 801e930:	f7fd fb76 	bl	801c020 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801e934:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 801e936:	2200      	movs	r2, #0
 801e938:	6839      	ldr	r1, [r7, #0]
 801e93a:	6878      	ldr	r0, [r7, #4]
 801e93c:	f7fd fb80 	bl	801c040 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801e940:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 801e942:	683b      	ldr	r3, [r7, #0]
 801e944:	691b      	ldr	r3, [r3, #16]
 801e946:	2b00      	cmp	r3, #0
 801e948:	d101      	bne.n	801e94e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801e94a:	f004 ffef 	bl	802392c <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 801e94e:	683b      	ldr	r3, [r7, #0]
 801e950:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 801e952:	f107 0408 	add.w	r4, r7, #8
 801e956:	461d      	mov	r5, r3
 801e958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e95a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e95c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e95e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e964:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e968:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 801e96c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e96e:	7a1b      	ldrb	r3, [r3, #8]
 801e970:	3b01      	subs	r3, #1
 801e972:	2b08      	cmp	r3, #8
 801e974:	d84a      	bhi.n	801ea0c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
 801e976:	a201      	add	r2, pc, #4	; (adr r2, 801e97c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 801e978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e97c:	0801e9a1 	.word	0x0801e9a1
 801e980:	0801ea0d 	.word	0x0801ea0d
 801e984:	0801e9d1 	.word	0x0801e9d1
 801e988:	0801ea0d 	.word	0x0801ea0d
 801e98c:	0801ea0d 	.word	0x0801ea0d
 801e990:	0801ea0d 	.word	0x0801ea0d
 801e994:	0801e9ef 	.word	0x0801e9ef
 801e998:	0801ea0d 	.word	0x0801ea0d
 801e99c:	0801e9bf 	.word	0x0801e9bf
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	695c      	ldr	r4, [r3, #20]
 801e9a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e9a6:	7a1b      	ldrb	r3, [r3, #8]
 801e9a8:	4618      	mov	r0, r3
 801e9aa:	f7fc fbe7 	bl	801b17c <TfLiteTypeGetName>
 801e9ae:	4602      	mov	r2, r0
 801e9b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e9b2:	7a1b      	ldrb	r3, [r3, #8]
 801e9b4:	491e      	ldr	r1, [pc, #120]	; (801ea30 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801e9b6:	6878      	ldr	r0, [r7, #4]
 801e9b8:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801e9ba:	2301      	movs	r3, #1
 801e9bc:	e034      	b.n	801ea28 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      SoftmaxQuantized(input, output, data);
 801e9be:	f107 0308 	add.w	r3, r7, #8
 801e9c2:	461a      	mov	r2, r3
 801e9c4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801e9c6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801e9c8:	f7ff fef2 	bl	801e7b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801e9cc:	2300      	movs	r3, #0
 801e9ce:	e02b      	b.n	801ea28 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801e9d0:	687b      	ldr	r3, [r7, #4]
 801e9d2:	695c      	ldr	r4, [r3, #20]
 801e9d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e9d6:	7a1b      	ldrb	r3, [r3, #8]
 801e9d8:	4618      	mov	r0, r3
 801e9da:	f7fc fbcf 	bl	801b17c <TfLiteTypeGetName>
 801e9de:	4602      	mov	r2, r0
 801e9e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e9e2:	7a1b      	ldrb	r3, [r3, #8]
 801e9e4:	4912      	ldr	r1, [pc, #72]	; (801ea30 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801e9e6:	6878      	ldr	r0, [r7, #4]
 801e9e8:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801e9ea:	2301      	movs	r3, #1
 801e9ec:	e01c      	b.n	801ea28 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	695c      	ldr	r4, [r3, #20]
 801e9f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e9f4:	7a1b      	ldrb	r3, [r3, #8]
 801e9f6:	4618      	mov	r0, r3
 801e9f8:	f7fc fbc0 	bl	801b17c <TfLiteTypeGetName>
 801e9fc:	4602      	mov	r2, r0
 801e9fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ea00:	7a1b      	ldrb	r3, [r3, #8]
 801ea02:	490b      	ldr	r1, [pc, #44]	; (801ea30 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801ea04:	6878      	ldr	r0, [r7, #4]
 801ea06:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801ea08:	2301      	movs	r3, #1
 801ea0a:	e00d      	b.n	801ea28 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>

      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801ea0c:	687b      	ldr	r3, [r7, #4]
 801ea0e:	695c      	ldr	r4, [r3, #20]
 801ea10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ea12:	7a1b      	ldrb	r3, [r3, #8]
 801ea14:	4618      	mov	r0, r3
 801ea16:	f7fc fbb1 	bl	801b17c <TfLiteTypeGetName>
 801ea1a:	4602      	mov	r2, r0
 801ea1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ea1e:	7a1b      	ldrb	r3, [r3, #8]
 801ea20:	4903      	ldr	r1, [pc, #12]	; (801ea30 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801ea22:	6878      	ldr	r0, [r7, #4]
 801ea24:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801ea26:	2301      	movs	r3, #1
  }
}
 801ea28:	4618      	mov	r0, r3
 801ea2a:	3778      	adds	r7, #120	; 0x78
 801ea2c:	46bd      	mov	sp, r7
 801ea2e:	bdb0      	pop	{r4, r5, r7, pc}
 801ea30:	0802934c 	.word	0x0802934c

0801ea34 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801ea34:	b4b0      	push	{r4, r5, r7}
 801ea36:	b083      	sub	sp, #12
 801ea38:	af00      	add	r7, sp, #0
 801ea3a:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	4a07      	ldr	r2, [pc, #28]	; (801ea5c <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 801ea40:	461c      	mov	r4, r3
 801ea42:	4615      	mov	r5, r2
 801ea44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ea46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ea48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801ea4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801ea50:	6878      	ldr	r0, [r7, #4]
 801ea52:	370c      	adds	r7, #12
 801ea54:	46bd      	mov	sp, r7
 801ea56:	bcb0      	pop	{r4, r5, r7}
 801ea58:	4770      	bx	lr
 801ea5a:	bf00      	nop
 801ea5c:	08029368 	.word	0x08029368

0801ea60 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801ea60:	b590      	push	{r4, r7, lr}
 801ea62:	b09f      	sub	sp, #124	; 0x7c
 801ea64:	af00      	add	r7, sp, #0
 801ea66:	60f8      	str	r0, [r7, #12]
 801ea68:	60b9      	str	r1, [r7, #8]
 801ea6a:	607a      	str	r2, [r7, #4]
 801ea6c:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 801ea6e:	68fb      	ldr	r3, [r7, #12]
 801ea70:	689b      	ldr	r3, [r3, #8]
 801ea72:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 801ea74:	68fb      	ldr	r3, [r7, #12]
 801ea76:	68db      	ldr	r3, [r3, #12]
 801ea78:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801ea7a:	68fb      	ldr	r3, [r7, #12]
 801ea7c:	699b      	ldr	r3, [r3, #24]
 801ea7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801ea80:	68b8      	ldr	r0, [r7, #8]
 801ea82:	f7fd f8ec 	bl	801bc5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801ea86:	4603      	mov	r3, r0
 801ea88:	3b01      	subs	r3, #1
 801ea8a:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801ea8c:	683a      	ldr	r2, [r7, #0]
 801ea8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ea90:	68b8      	ldr	r0, [r7, #8]
 801ea92:	f7ff fa91 	bl	801dfb8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801ea96:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801ea98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ea9a:	683a      	ldr	r2, [r7, #0]
 801ea9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ea9e:	68b8      	ldr	r0, [r7, #8]
 801eaa0:	f7fe fa4c 	bl	801cf3c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801eaa4:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801eaa6:	2300      	movs	r3, #0
 801eaa8:	677b      	str	r3, [r7, #116]	; 0x74
 801eaaa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801eaac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eaae:	429a      	cmp	r2, r3
 801eab0:	f280 80ed 	bge.w	801ec8e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801eab4:	2300      	movs	r3, #0
 801eab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801eaba:	2300      	movs	r3, #0
 801eabc:	673b      	str	r3, [r7, #112]	; 0x70
 801eabe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801eac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eac2:	429a      	cmp	r2, r3
 801eac4:	da16      	bge.n	801eaf4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801eac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801eac8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801eaca:	fb03 f202 	mul.w	r2, r3, r2
 801eace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ead0:	4413      	add	r3, r2
 801ead2:	461a      	mov	r2, r3
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	441a      	add	r2, r3
 801ead8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801eadc:	4611      	mov	r1, r2
 801eade:	4618      	mov	r0, r3
 801eae0:	f7ff fc1c 	bl	801e31c <_ZSt3maxIhERKT_S2_S2_>
 801eae4:	4603      	mov	r3, r0
 801eae6:	781b      	ldrb	r3, [r3, #0]
 801eae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801eaec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801eaee:	3301      	adds	r3, #1
 801eaf0:	673b      	str	r3, [r7, #112]	; 0x70
 801eaf2:	e7e4      	b.n	801eabe <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801eaf4:	f000 f8cf 	bl	801ec96 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801eaf8:	4603      	mov	r3, r0
 801eafa:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801eafc:	2300      	movs	r3, #0
 801eafe:	66fb      	str	r3, [r7, #108]	; 0x6c
 801eb00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801eb02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eb04:	429a      	cmp	r2, r3
 801eb06:	da2f      	bge.n	801eb68 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801eb08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801eb0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801eb0c:	fb03 f202 	mul.w	r2, r3, r2
 801eb10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb12:	4413      	add	r3, r2
 801eb14:	461a      	mov	r2, r3
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	4413      	add	r3, r2
 801eb1a:	781b      	ldrb	r3, [r3, #0]
 801eb1c:	461a      	mov	r2, r3
 801eb1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801eb22:	1ad3      	subs	r3, r2, r3
 801eb24:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801eb26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801eb28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801eb2a:	429a      	cmp	r2, r3
 801eb2c:	db18      	blt.n	801eb60 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801eb2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801eb30:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801eb32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801eb34:	f7fe fa92 	bl	801d05c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801eb38:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801eb3a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801eb3c:	f000 f8b3 	bl	801eca6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801eb40:	4603      	mov	r3, r0
 801eb42:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801eb44:	69f8      	ldr	r0, [r7, #28]
 801eb46:	f000 f8dd 	bl	801ed04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801eb4a:	4603      	mov	r3, r0
 801eb4c:	4618      	mov	r0, r3
 801eb4e:	f000 fa21 	bl	801ef94 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801eb52:	4603      	mov	r3, r0
 801eb54:	4619      	mov	r1, r3
 801eb56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801eb58:	f000 f8b6 	bl	801ecc8 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801eb5c:	4603      	mov	r3, r0
 801eb5e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801eb60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb62:	3301      	adds	r3, #1
 801eb64:	66fb      	str	r3, [r7, #108]	; 0x6c
 801eb66:	e7cb      	b.n	801eb00 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801eb68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801eb6c:	4618      	mov	r0, r3
 801eb6e:	f000 fa2b 	bl	801efc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801eb72:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801eb74:	681b      	ldr	r3, [r3, #0]
 801eb76:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801eb7a:	210c      	movs	r1, #12
 801eb7c:	4618      	mov	r0, r3
 801eb7e:	f7fe fa80 	bl	801d082 <_ZN6tflite13GetReciprocalEliPi>
 801eb82:	4603      	mov	r3, r0
 801eb84:	4618      	mov	r0, r3
 801eb86:	f7fe fab9 	bl	801d0fc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801eb8a:	4603      	mov	r3, r0
 801eb8c:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 801eb8e:	2300      	movs	r3, #0
 801eb90:	66bb      	str	r3, [r7, #104]	; 0x68
 801eb92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801eb94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eb96:	429a      	cmp	r2, r3
 801eb98:	da75      	bge.n	801ec86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801eb9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801eb9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801eb9e:	fb03 f202 	mul.w	r2, r3, r2
 801eba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801eba4:	4413      	add	r3, r2
 801eba6:	461a      	mov	r2, r3
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	4413      	add	r3, r2
 801ebac:	781b      	ldrb	r3, [r3, #0]
 801ebae:	461a      	mov	r2, r3
 801ebb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801ebb4:	1ad3      	subs	r3, r2, r3
 801ebb6:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 801ebb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ebba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ebbc:	429a      	cmp	r2, r3
 801ebbe:	db50      	blt.n	801ec62 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801ebc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ebc2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801ebc4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ebc6:	f7fe fa49 	bl	801d05c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801ebca:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801ebcc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801ebce:	f000 f86a 	bl	801eca6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801ebd2:	4603      	mov	r3, r0
 801ebd4:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801ebd6:	69b8      	ldr	r0, [r7, #24]
 801ebd8:	f000 f894 	bl	801ed04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801ebdc:	4603      	mov	r3, r0
 801ebde:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801ebe0:	6979      	ldr	r1, [r7, #20]
 801ebe2:	6a38      	ldr	r0, [r7, #32]
 801ebe4:	f7ff fad2 	bl	801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ebe8:	4603      	mov	r3, r0
 801ebea:	633b      	str	r3, [r7, #48]	; 0x30
 801ebec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ebf0:	4618      	mov	r0, r3
 801ebf2:	f7fe faf5 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801ebf6:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801ebf8:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801ebfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ebfc:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801ebfe:	4611      	mov	r1, r2
 801ec00:	4618      	mov	r0, r3
 801ec02:	f7fd fd33 	bl	801c66c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801ec06:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 801ec08:	f7fc fd07 	bl	801b61a <_ZNSt14numeric_limitsIhE3minEv>
 801ec0c:	4603      	mov	r3, r0
 801ec0e:	461a      	mov	r2, r3
            unsat_output +
 801ec10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec12:	4413      	add	r3, r2
        const int32_t shifted_output =
 801ec14:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 801ec16:	f7fc fd08 	bl	801b62a <_ZNSt14numeric_limitsIhE3maxEv>
 801ec1a:	4603      	mov	r3, r0
 801ec1c:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 801ec1e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801ec22:	f107 0310 	add.w	r3, r7, #16
 801ec26:	4611      	mov	r1, r2
 801ec28:	4618      	mov	r0, r3
 801ec2a:	f7fc ffb9 	bl	801bba0 <_ZSt3minIlERKT_S2_S2_>
 801ec2e:	4604      	mov	r4, r0
 801ec30:	f7fc fcf3 	bl	801b61a <_ZNSt14numeric_limitsIhE3minEv>
 801ec34:	4603      	mov	r3, r0
 801ec36:	63bb      	str	r3, [r7, #56]	; 0x38
 801ec38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ec3c:	4619      	mov	r1, r3
 801ec3e:	4620      	mov	r0, r4
 801ec40:	f7fc ffc2 	bl	801bbc8 <_ZSt3maxIlERKT_S2_S2_>
 801ec44:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801ec46:	6819      	ldr	r1, [r3, #0]
 801ec48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ec4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ec4c:	fb03 f202 	mul.w	r2, r3, r2
 801ec50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ec52:	4413      	add	r3, r2
 801ec54:	461a      	mov	r2, r3
 801ec56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ec5a:	4413      	add	r3, r2
 801ec5c:	b2ca      	uxtb	r2, r1
 801ec5e:	701a      	strb	r2, [r3, #0]
 801ec60:	e00d      	b.n	801ec7e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801ec62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ec64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ec66:	fb03 f202 	mul.w	r2, r3, r2
 801ec6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ec6c:	4413      	add	r3, r2
 801ec6e:	461a      	mov	r2, r3
 801ec70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ec74:	189c      	adds	r4, r3, r2
 801ec76:	f7fc fcd0 	bl	801b61a <_ZNSt14numeric_limitsIhE3minEv>
 801ec7a:	4603      	mov	r3, r0
 801ec7c:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801ec7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ec80:	3301      	adds	r3, #1
 801ec82:	66bb      	str	r3, [r7, #104]	; 0x68
 801ec84:	e785      	b.n	801eb92 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 801ec86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ec88:	3301      	adds	r3, #1
 801ec8a:	677b      	str	r3, [r7, #116]	; 0x74
 801ec8c:	e70d      	b.n	801eaaa <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 801ec8e:	bf00      	nop
 801ec90:	377c      	adds	r7, #124	; 0x7c
 801ec92:	46bd      	mov	sp, r7
 801ec94:	bd90      	pop	{r4, r7, pc}

0801ec96 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 801ec96:	b580      	push	{r7, lr}
 801ec98:	af00      	add	r7, sp, #0
 801ec9a:	2000      	movs	r0, #0
 801ec9c:	f000 f99f 	bl	801efde <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 801eca0:	4603      	mov	r3, r0
 801eca2:	4618      	mov	r0, r3
 801eca4:	bd80      	pop	{r7, pc}

0801eca6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801eca6:	b580      	push	{r7, lr}
 801eca8:	b084      	sub	sp, #16
 801ecaa:	af00      	add	r7, sp, #0
 801ecac:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801ecae:	f107 030c 	add.w	r3, r7, #12
 801ecb2:	4618      	mov	r0, r3
 801ecb4:	f000 f9a7 	bl	801f006 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801ecb8:	4602      	mov	r2, r0
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	6013      	str	r3, [r2, #0]
    return retval;
 801ecbe:	68fb      	ldr	r3, [r7, #12]
  }
 801ecc0:	4618      	mov	r0, r3
 801ecc2:	3710      	adds	r7, #16
 801ecc4:	46bd      	mov	sp, r7
 801ecc6:	bd80      	pop	{r7, pc}

0801ecc8 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801ecc8:	b590      	push	{r4, r7, lr}
 801ecca:	b083      	sub	sp, #12
 801eccc:	af00      	add	r7, sp, #0
 801ecce:	6078      	str	r0, [r7, #4]
 801ecd0:	6039      	str	r1, [r7, #0]
 801ecd2:	1d3b      	adds	r3, r7, #4
 801ecd4:	4618      	mov	r0, r3
 801ecd6:	f000 f977 	bl	801efc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801ecda:	4603      	mov	r3, r0
 801ecdc:	681c      	ldr	r4, [r3, #0]
 801ecde:	463b      	mov	r3, r7
 801ece0:	4618      	mov	r0, r3
 801ece2:	f000 f971 	bl	801efc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801ece6:	4603      	mov	r3, r0
 801ece8:	681b      	ldr	r3, [r3, #0]
 801ecea:	4619      	mov	r1, r3
 801ecec:	4620      	mov	r0, r4
 801ecee:	f7fe f8bd 	bl	801ce6c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801ecf2:	4603      	mov	r3, r0
 801ecf4:	4618      	mov	r0, r3
 801ecf6:	f000 f991 	bl	801f01c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 801ecfa:	4603      	mov	r3, r0
 801ecfc:	4618      	mov	r0, r3
 801ecfe:	370c      	adds	r7, #12
 801ed00:	46bd      	mov	sp, r7
 801ed02:	bd90      	pop	{r4, r7, pc}

0801ed04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 801ed04:	b590      	push	{r4, r7, lr}
 801ed06:	b091      	sub	sp, #68	; 0x44
 801ed08:	af00      	add	r7, sp, #0
 801ed0a:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 801ed0c:	f000 f997 	bl	801f03e <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 801ed10:	4603      	mov	r3, r0
 801ed12:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 801ed14:	2001      	movs	r0, #1
 801ed16:	f000 f99b 	bl	801f050 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801ed1a:	4603      	mov	r3, r0
 801ed1c:	4619      	mov	r1, r3
 801ed1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ed20:	f000 f9aa 	bl	801f078 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ed24:	4603      	mov	r3, r0
 801ed26:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 801ed28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ed2a:	6878      	ldr	r0, [r7, #4]
 801ed2c:	f000 f9c2 	bl	801f0b4 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ed30:	4603      	mov	r3, r0
 801ed32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ed34:	4618      	mov	r0, r3
 801ed36:	f000 f99f 	bl	801f078 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ed3a:	4603      	mov	r3, r0
 801ed3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 801ed3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ed40:	f000 f9d6 	bl	801f0f0 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801ed44:	4603      	mov	r3, r0
 801ed46:	4618      	mov	r0, r3
 801ed48:	f7ff f9be 	bl	801e0c8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 801ed4c:	4603      	mov	r3, r0
 801ed4e:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 801ed50:	6879      	ldr	r1, [r7, #4]
 801ed52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ed54:	f000 f990 	bl	801f078 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801ed58:	4603      	mov	r3, r0
 801ed5a:	63bb      	str	r3, [r7, #56]	; 0x38
 801ed5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ed60:	4618      	mov	r0, r3
 801ed62:	f000 f950 	bl	801f006 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801ed66:	4603      	mov	r3, r0
 801ed68:	681b      	ldr	r3, [r3, #0]
 801ed6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 801ed6c:	4883      	ldr	r0, [pc, #524]	; (801ef7c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 801ed6e:	f7ff f952 	bl	801e016 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801ed72:	4603      	mov	r3, r0
 801ed74:	4618      	mov	r0, r3
 801ed76:	f7fe fa3e 	bl	801d1f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ed7a:	4603      	mov	r3, r0
 801ed7c:	627b      	str	r3, [r7, #36]	; 0x24
 801ed7e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801ed82:	f7fe f837 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ed86:	4603      	mov	r3, r0
 801ed88:	4619      	mov	r1, r3
 801ed8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ed8c:	f7fe f83d 	bl	801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ed90:	4603      	mov	r3, r0
 801ed92:	4618      	mov	r0, r3
 801ed94:	f7fe f88c 	bl	801ceb0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ed98:	4604      	mov	r4, r0
 801ed9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ed9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ed9e:	f7ff f9f5 	bl	801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801eda2:	4603      	mov	r3, r0
 801eda4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eda6:	4619      	mov	r1, r3
 801eda8:	4620      	mov	r0, r4
 801edaa:	f7ff f95a 	bl	801e062 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801edae:	4603      	mov	r3, r0
 801edb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 801edb2:	4873      	ldr	r0, [pc, #460]	; (801ef80 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 801edb4:	f7ff f92f 	bl	801e016 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801edb8:	4603      	mov	r3, r0
 801edba:	4618      	mov	r0, r3
 801edbc:	f7fe fa1b 	bl	801d1f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801edc0:	4603      	mov	r3, r0
 801edc2:	623b      	str	r3, [r7, #32]
 801edc4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 801edc8:	f7fe f814 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801edcc:	4603      	mov	r3, r0
 801edce:	4619      	mov	r1, r3
 801edd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801edd2:	f7fe f81a 	bl	801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801edd6:	4603      	mov	r3, r0
 801edd8:	4618      	mov	r0, r3
 801edda:	f7fe f869 	bl	801ceb0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801edde:	4604      	mov	r4, r0
 801ede0:	6a39      	ldr	r1, [r7, #32]
 801ede2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ede4:	f7ff f9d2 	bl	801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ede8:	4603      	mov	r3, r0
 801edea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801edec:	4619      	mov	r1, r3
 801edee:	4620      	mov	r0, r4
 801edf0:	f7ff f937 	bl	801e062 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801edf4:	4603      	mov	r3, r0
 801edf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 801edf8:	4862      	ldr	r0, [pc, #392]	; (801ef84 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 801edfa:	f7ff f90c 	bl	801e016 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801edfe:	4603      	mov	r3, r0
 801ee00:	4618      	mov	r0, r3
 801ee02:	f7fe f9f8 	bl	801d1f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ee06:	4603      	mov	r3, r0
 801ee08:	61fb      	str	r3, [r7, #28]
 801ee0a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801ee0e:	f7fd fff1 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ee12:	4603      	mov	r3, r0
 801ee14:	4619      	mov	r1, r3
 801ee16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ee18:	f7fd fff7 	bl	801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ee1c:	4603      	mov	r3, r0
 801ee1e:	4618      	mov	r0, r3
 801ee20:	f7fe f846 	bl	801ceb0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ee24:	4604      	mov	r4, r0
 801ee26:	69f9      	ldr	r1, [r7, #28]
 801ee28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ee2a:	f7ff f9af 	bl	801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ee2e:	4603      	mov	r3, r0
 801ee30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ee32:	4619      	mov	r1, r3
 801ee34:	4620      	mov	r0, r4
 801ee36:	f7ff f914 	bl	801e062 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ee3a:	4603      	mov	r3, r0
 801ee3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 801ee3e:	4852      	ldr	r0, [pc, #328]	; (801ef88 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 801ee40:	f7ff f8e9 	bl	801e016 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801ee44:	4603      	mov	r3, r0
 801ee46:	4618      	mov	r0, r3
 801ee48:	f7fe f9d5 	bl	801d1f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ee4c:	4603      	mov	r3, r0
 801ee4e:	61bb      	str	r3, [r7, #24]
 801ee50:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 801ee54:	f7fd ffce 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ee58:	4603      	mov	r3, r0
 801ee5a:	4619      	mov	r1, r3
 801ee5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ee5e:	f7fd ffd4 	bl	801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ee62:	4603      	mov	r3, r0
 801ee64:	4618      	mov	r0, r3
 801ee66:	f7fe f823 	bl	801ceb0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ee6a:	4604      	mov	r4, r0
 801ee6c:	69b9      	ldr	r1, [r7, #24]
 801ee6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ee70:	f7ff f98c 	bl	801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ee74:	4603      	mov	r3, r0
 801ee76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ee78:	4619      	mov	r1, r3
 801ee7a:	4620      	mov	r0, r4
 801ee7c:	f7ff f8f1 	bl	801e062 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ee80:	4603      	mov	r3, r0
 801ee82:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 801ee84:	4841      	ldr	r0, [pc, #260]	; (801ef8c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 801ee86:	f7ff f8c6 	bl	801e016 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801ee8a:	4603      	mov	r3, r0
 801ee8c:	4618      	mov	r0, r3
 801ee8e:	f7fe f9b2 	bl	801d1f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ee92:	4603      	mov	r3, r0
 801ee94:	617b      	str	r3, [r7, #20]
 801ee96:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801ee9a:	f7fd ffab 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ee9e:	4603      	mov	r3, r0
 801eea0:	4619      	mov	r1, r3
 801eea2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801eea4:	f7fd ffb1 	bl	801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801eea8:	4603      	mov	r3, r0
 801eeaa:	4618      	mov	r0, r3
 801eeac:	f7fe f800 	bl	801ceb0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801eeb0:	4604      	mov	r4, r0
 801eeb2:	6979      	ldr	r1, [r7, #20]
 801eeb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801eeb6:	f7ff f969 	bl	801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801eeba:	4603      	mov	r3, r0
 801eebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eebe:	4619      	mov	r1, r3
 801eec0:	4620      	mov	r0, r4
 801eec2:	f7ff f8ce 	bl	801e062 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801eec6:	4603      	mov	r3, r0
 801eec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 801eeca:	4831      	ldr	r0, [pc, #196]	; (801ef90 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 801eecc:	f7ff f8a3 	bl	801e016 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801eed0:	4603      	mov	r3, r0
 801eed2:	4618      	mov	r0, r3
 801eed4:	f7fe f98f 	bl	801d1f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801eed8:	4603      	mov	r3, r0
 801eeda:	613b      	str	r3, [r7, #16]
 801eedc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801eee0:	f7fd ff88 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801eee4:	4603      	mov	r3, r0
 801eee6:	4619      	mov	r1, r3
 801eee8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801eeea:	f7fd ff8e 	bl	801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801eeee:	4603      	mov	r3, r0
 801eef0:	4618      	mov	r0, r3
 801eef2:	f7fd ffdd 	bl	801ceb0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801eef6:	4604      	mov	r4, r0
 801eef8:	6939      	ldr	r1, [r7, #16]
 801eefa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801eefc:	f7ff f946 	bl	801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ef00:	4603      	mov	r3, r0
 801ef02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ef04:	4619      	mov	r1, r3
 801ef06:	4620      	mov	r0, r4
 801ef08:	f7ff f8ab 	bl	801e062 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ef0c:	4603      	mov	r3, r0
 801ef0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 801ef10:	20f2      	movs	r0, #242	; 0xf2
 801ef12:	f7ff f880 	bl	801e016 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801ef16:	4603      	mov	r3, r0
 801ef18:	4618      	mov	r0, r3
 801ef1a:	f7fe f96c 	bl	801d1f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ef1e:	4603      	mov	r3, r0
 801ef20:	60fb      	str	r3, [r7, #12]
 801ef22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801ef26:	f7fd ff65 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ef2a:	4603      	mov	r3, r0
 801ef2c:	4619      	mov	r1, r3
 801ef2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ef30:	f7fd ff6b 	bl	801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ef34:	4603      	mov	r3, r0
 801ef36:	4618      	mov	r0, r3
 801ef38:	f7fd ffba 	bl	801ceb0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ef3c:	4604      	mov	r4, r0
 801ef3e:	68f9      	ldr	r1, [r7, #12]
 801ef40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ef42:	f7ff f923 	bl	801e18c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ef46:	4603      	mov	r3, r0
 801ef48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ef4a:	4619      	mov	r1, r3
 801ef4c:	4620      	mov	r0, r4
 801ef4e:	f7ff f888 	bl	801e062 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ef52:	4603      	mov	r3, r0
 801ef54:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 801ef56:	6878      	ldr	r0, [r7, #4]
 801ef58:	f000 f8e4 	bl	801f124 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 801ef5c:	4604      	mov	r4, r0
 801ef5e:	f7fe f95e 	bl	801d21e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801ef62:	4603      	mov	r3, r0
 801ef64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ef66:	4619      	mov	r1, r3
 801ef68:	4620      	mov	r0, r4
 801ef6a:	f7ff f87a 	bl	801e062 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ef6e:	4603      	mov	r3, r0
 801ef70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801ef72:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801ef74:	4618      	mov	r0, r3
 801ef76:	3744      	adds	r7, #68	; 0x44
 801ef78:	46bd      	mov	sp, r7
 801ef7a:	bd90      	pop	{r4, r7, pc}
 801ef7c:	63afbe7b 	.word	0x63afbe7b
 801ef80:	4da2cbf2 	.word	0x4da2cbf2
 801ef84:	2f16ac6c 	.word	0x2f16ac6c
 801ef88:	1152aaa4 	.word	0x1152aaa4
 801ef8c:	02582ab7 	.word	0x02582ab7
 801ef90:	000afe11 	.word	0x000afe11

0801ef94 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801ef94:	b5b0      	push	{r4, r5, r7, lr}
 801ef96:	b084      	sub	sp, #16
 801ef98:	af00      	add	r7, sp, #0
 801ef9a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801ef9c:	1d3b      	adds	r3, r7, #4
 801ef9e:	4618      	mov	r0, r3
 801efa0:	f7fe f91e 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801efa4:	4603      	mov	r3, r0
 801efa6:	681d      	ldr	r5, [r3, #0]
 801efa8:	f107 030c 	add.w	r3, r7, #12
 801efac:	4618      	mov	r0, r3
 801efae:	f000 f80b 	bl	801efc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801efb2:	4604      	mov	r4, r0
 801efb4:	4628      	mov	r0, r5
 801efb6:	f000 f8c7 	bl	801f148 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 801efba:	4603      	mov	r3, r0
 801efbc:	6023      	str	r3, [r4, #0]
  return result;
 801efbe:	68fb      	ldr	r3, [r7, #12]
}
 801efc0:	4618      	mov	r0, r3
 801efc2:	3710      	adds	r7, #16
 801efc4:	46bd      	mov	sp, r7
 801efc6:	bdb0      	pop	{r4, r5, r7, pc}

0801efc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 801efc8:	b480      	push	{r7}
 801efca:	b083      	sub	sp, #12
 801efcc:	af00      	add	r7, sp, #0
 801efce:	6078      	str	r0, [r7, #4]
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	4618      	mov	r0, r3
 801efd4:	370c      	adds	r7, #12
 801efd6:	46bd      	mov	sp, r7
 801efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efdc:	4770      	bx	lr

0801efde <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801efde:	b590      	push	{r4, r7, lr}
 801efe0:	b085      	sub	sp, #20
 801efe2:	af00      	add	r7, sp, #0
 801efe4:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801efe6:	f107 030c 	add.w	r3, r7, #12
 801efea:	4618      	mov	r0, r3
 801efec:	f7ff ffec 	bl	801efc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801eff0:	4604      	mov	r4, r0
 801eff2:	6878      	ldr	r0, [r7, #4]
 801eff4:	f7fd fefe 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801eff8:	4603      	mov	r3, r0
 801effa:	6023      	str	r3, [r4, #0]
    return retval;
 801effc:	68fb      	ldr	r3, [r7, #12]
  }
 801effe:	4618      	mov	r0, r3
 801f000:	3714      	adds	r7, #20
 801f002:	46bd      	mov	sp, r7
 801f004:	bd90      	pop	{r4, r7, pc}

0801f006 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 801f006:	b480      	push	{r7}
 801f008:	b083      	sub	sp, #12
 801f00a:	af00      	add	r7, sp, #0
 801f00c:	6078      	str	r0, [r7, #4]
 801f00e:	687b      	ldr	r3, [r7, #4]
 801f010:	4618      	mov	r0, r3
 801f012:	370c      	adds	r7, #12
 801f014:	46bd      	mov	sp, r7
 801f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f01a:	4770      	bx	lr

0801f01c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801f01c:	b580      	push	{r7, lr}
 801f01e:	b084      	sub	sp, #16
 801f020:	af00      	add	r7, sp, #0
 801f022:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801f024:	f107 030c 	add.w	r3, r7, #12
 801f028:	4618      	mov	r0, r3
 801f02a:	f7ff ffcd 	bl	801efc8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801f02e:	4602      	mov	r2, r0
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	6013      	str	r3, [r2, #0]
    return retval;
 801f034:	68fb      	ldr	r3, [r7, #12]
  }
 801f036:	4618      	mov	r0, r3
 801f038:	3710      	adds	r7, #16
 801f03a:	46bd      	mov	sp, r7
 801f03c:	bd80      	pop	{r7, pc}

0801f03e <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 801f03e:	b580      	push	{r7, lr}
 801f040:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801f042:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801f046:	f000 f803 	bl	801f050 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801f04a:	4603      	mov	r3, r0
  }
 801f04c:	4618      	mov	r0, r3
 801f04e:	bd80      	pop	{r7, pc}

0801f050 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801f050:	b590      	push	{r4, r7, lr}
 801f052:	b085      	sub	sp, #20
 801f054:	af00      	add	r7, sp, #0
 801f056:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801f058:	f107 030c 	add.w	r3, r7, #12
 801f05c:	4618      	mov	r0, r3
 801f05e:	f7ff ffd2 	bl	801f006 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801f062:	4604      	mov	r4, r0
 801f064:	6878      	ldr	r0, [r7, #4]
 801f066:	f7fd fec5 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801f06a:	4603      	mov	r3, r0
 801f06c:	6023      	str	r3, [r4, #0]
    return retval;
 801f06e:	68fb      	ldr	r3, [r7, #12]
  }
 801f070:	4618      	mov	r0, r3
 801f072:	3714      	adds	r7, #20
 801f074:	46bd      	mov	sp, r7
 801f076:	bd90      	pop	{r4, r7, pc}

0801f078 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801f078:	b590      	push	{r4, r7, lr}
 801f07a:	b083      	sub	sp, #12
 801f07c:	af00      	add	r7, sp, #0
 801f07e:	6078      	str	r0, [r7, #4]
 801f080:	6039      	str	r1, [r7, #0]
 801f082:	1d3b      	adds	r3, r7, #4
 801f084:	4618      	mov	r0, r3
 801f086:	f7ff ffbe 	bl	801f006 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801f08a:	4603      	mov	r3, r0
 801f08c:	681c      	ldr	r4, [r3, #0]
 801f08e:	463b      	mov	r3, r7
 801f090:	4618      	mov	r0, r3
 801f092:	f7ff ffb8 	bl	801f006 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801f096:	4603      	mov	r3, r0
 801f098:	681b      	ldr	r3, [r3, #0]
 801f09a:	4619      	mov	r1, r3
 801f09c:	4620      	mov	r0, r4
 801f09e:	f7fe f9db 	bl	801d458 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801f0a2:	4603      	mov	r3, r0
 801f0a4:	4618      	mov	r0, r3
 801f0a6:	f7ff fdfe 	bl	801eca6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801f0aa:	4603      	mov	r3, r0
 801f0ac:	4618      	mov	r0, r3
 801f0ae:	370c      	adds	r7, #12
 801f0b0:	46bd      	mov	sp, r7
 801f0b2:	bd90      	pop	{r4, r7, pc}

0801f0b4 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801f0b4:	b590      	push	{r4, r7, lr}
 801f0b6:	b083      	sub	sp, #12
 801f0b8:	af00      	add	r7, sp, #0
 801f0ba:	6078      	str	r0, [r7, #4]
 801f0bc:	6039      	str	r1, [r7, #0]
 801f0be:	1d3b      	adds	r3, r7, #4
 801f0c0:	4618      	mov	r0, r3
 801f0c2:	f7ff ffa0 	bl	801f006 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801f0c6:	4603      	mov	r3, r0
 801f0c8:	681c      	ldr	r4, [r3, #0]
 801f0ca:	463b      	mov	r3, r7
 801f0cc:	4618      	mov	r0, r3
 801f0ce:	f7ff ff9a 	bl	801f006 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801f0d2:	4603      	mov	r3, r0
 801f0d4:	681b      	ldr	r3, [r3, #0]
 801f0d6:	4619      	mov	r1, r3
 801f0d8:	4620      	mov	r0, r4
 801f0da:	f7fd fe96 	bl	801ce0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801f0de:	4603      	mov	r3, r0
 801f0e0:	4618      	mov	r0, r3
 801f0e2:	f7ff fde0 	bl	801eca6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801f0e6:	4603      	mov	r3, r0
 801f0e8:	4618      	mov	r0, r3
 801f0ea:	370c      	adds	r7, #12
 801f0ec:	46bd      	mov	sp, r7
 801f0ee:	bd90      	pop	{r4, r7, pc}

0801f0f0 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801f0f0:	b5b0      	push	{r4, r5, r7, lr}
 801f0f2:	b084      	sub	sp, #16
 801f0f4:	af00      	add	r7, sp, #0
 801f0f6:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801f0f8:	1d3b      	adds	r3, r7, #4
 801f0fa:	4618      	mov	r0, r3
 801f0fc:	f7ff ff83 	bl	801f006 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801f100:	4603      	mov	r3, r0
 801f102:	681d      	ldr	r5, [r3, #0]
 801f104:	f107 030c 	add.w	r3, r7, #12
 801f108:	4618      	mov	r0, r3
 801f10a:	f7fe f869 	bl	801d1e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801f10e:	4604      	mov	r4, r0
 801f110:	4628      	mov	r0, r5
 801f112:	f000 f825 	bl	801f160 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 801f116:	4603      	mov	r3, r0
 801f118:	6023      	str	r3, [r4, #0]
  return result;
 801f11a:	68fb      	ldr	r3, [r7, #12]
}
 801f11c:	4618      	mov	r0, r3
 801f11e:	3710      	adds	r7, #16
 801f120:	46bd      	mov	sp, r7
 801f122:	bdb0      	pop	{r4, r5, r7, pc}

0801f124 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 801f124:	b580      	push	{r7, lr}
 801f126:	b082      	sub	sp, #8
 801f128:	af00      	add	r7, sp, #0
 801f12a:	6078      	str	r0, [r7, #4]
 801f12c:	1d3b      	adds	r3, r7, #4
 801f12e:	4618      	mov	r0, r3
 801f130:	f7ff ff69 	bl	801f006 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801f134:	4603      	mov	r3, r0
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	4618      	mov	r0, r3
 801f13a:	f7fe ffb3 	bl	801e0a4 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 801f13e:	4603      	mov	r3, r0
 801f140:	4618      	mov	r0, r3
 801f142:	3708      	adds	r7, #8
 801f144:	46bd      	mov	sp, r7
 801f146:	bd80      	pop	{r7, pc}

0801f148 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801f148:	b580      	push	{r7, lr}
 801f14a:	b082      	sub	sp, #8
 801f14c:	af00      	add	r7, sp, #0
 801f14e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801f150:	6878      	ldr	r0, [r7, #4]
 801f152:	f000 f811 	bl	801f178 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801f156:	4603      	mov	r3, r0
}
 801f158:	4618      	mov	r0, r3
 801f15a:	3708      	adds	r7, #8
 801f15c:	46bd      	mov	sp, r7
 801f15e:	bd80      	pop	{r7, pc}

0801f160 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801f160:	b580      	push	{r7, lr}
 801f162:	b082      	sub	sp, #8
 801f164:	af00      	add	r7, sp, #0
 801f166:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801f168:	6878      	ldr	r0, [r7, #4]
 801f16a:	f000 f813 	bl	801f194 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 801f16e:	4603      	mov	r3, r0
}
 801f170:	4618      	mov	r0, r3
 801f172:	3708      	adds	r7, #8
 801f174:	46bd      	mov	sp, r7
 801f176:	bd80      	pop	{r7, pc}

0801f178 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801f178:	b580      	push	{r7, lr}
 801f17a:	b082      	sub	sp, #8
 801f17c:	af00      	add	r7, sp, #0
 801f17e:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801f180:	210c      	movs	r1, #12
 801f182:	6878      	ldr	r0, [r7, #4]
 801f184:	f7fd fa72 	bl	801c66c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801f188:	4603      	mov	r3, r0
  }
 801f18a:	4618      	mov	r0, r3
 801f18c:	3708      	adds	r7, #8
 801f18e:	46bd      	mov	sp, r7
 801f190:	bd80      	pop	{r7, pc}
	...

0801f194 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801f194:	b580      	push	{r7, lr}
 801f196:	b08a      	sub	sp, #40	; 0x28
 801f198:	af00      	add	r7, sp, #0
 801f19a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801f19c:	f7fc fde1 	bl	801bd62 <_ZNSt14numeric_limitsIlE3minEv>
 801f1a0:	4603      	mov	r3, r0
 801f1a2:	4618      	mov	r0, r3
 801f1a4:	f7fd fe26 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801f1a8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801f1aa:	f7fc f863 	bl	801b274 <_ZNSt14numeric_limitsIlE3maxEv>
 801f1ae:	4603      	mov	r3, r0
 801f1b0:	4618      	mov	r0, r3
 801f1b2:	f7fd fe1f 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801f1b6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801f1b8:	2320      	movs	r3, #32
 801f1ba:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801f1bc:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 801f1c0:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801f1c2:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 801f1c6:	f7fd fe15 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801f1ca:	4603      	mov	r3, r0
 801f1cc:	4619      	mov	r1, r3
 801f1ce:	6878      	ldr	r0, [r7, #4]
 801f1d0:	f7fd fe5a 	bl	801ce88 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801f1d4:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801f1d6:	480f      	ldr	r0, [pc, #60]	; (801f214 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 801f1d8:	f7fd fe0c 	bl	801cdf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801f1dc:	4603      	mov	r3, r0
 801f1de:	4619      	mov	r1, r3
 801f1e0:	6878      	ldr	r0, [r7, #4]
 801f1e2:	f7fd fe2f 	bl	801ce44 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801f1e6:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801f1e8:	2105      	movs	r1, #5
 801f1ea:	6878      	ldr	r0, [r7, #4]
 801f1ec:	f7fe fa18 	bl	801d620 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801f1f0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801f1f2:	68fa      	ldr	r2, [r7, #12]
 801f1f4:	6a39      	ldr	r1, [r7, #32]
 801f1f6:	6978      	ldr	r0, [r7, #20]
 801f1f8:	f7fe fa56 	bl	801d6a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801f1fc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801f1fe:	68fa      	ldr	r2, [r7, #12]
 801f200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f202:	6938      	ldr	r0, [r7, #16]
 801f204:	f7fe fa50 	bl	801d6a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801f208:	60f8      	str	r0, [r7, #12]
    return result;
 801f20a:	68fb      	ldr	r3, [r7, #12]
  }
 801f20c:	4618      	mov	r0, r3
 801f20e:	3728      	adds	r7, #40	; 0x28
 801f210:	46bd      	mov	sp, r7
 801f212:	bd80      	pop	{r7, pc}
 801f214:	fc000001 	.word	0xfc000001

0801f218 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 801f218:	b580      	push	{r7, lr}
 801f21a:	ed2d 8b02 	vpush	{d8}
 801f21e:	b094      	sub	sp, #80	; 0x50
 801f220:	af00      	add	r7, sp, #0
 801f222:	6178      	str	r0, [r7, #20]
 801f224:	ed87 0a04 	vstr	s0, [r7, #16]
 801f228:	edc7 0a03 	vstr	s1, [r7, #12]
 801f22c:	60b9      	str	r1, [r7, #8]
 801f22e:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 801f230:	ed97 7a03 	vldr	s14, [r7, #12]
 801f234:	edd7 7a04 	vldr	s15, [r7, #16]
 801f238:	ee77 6a67 	vsub.f32	s13, s14, s15
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	3b01      	subs	r3, #1
 801f240:	ee07 3a90 	vmov	s15, r3
 801f244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f24c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 801f250:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801f254:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f258:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801f25c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 801f260:	2300      	movs	r3, #0
 801f262:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	3b01      	subs	r3, #1
 801f268:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f26a:	429a      	cmp	r2, r3
 801f26c:	f280 80c0 	bge.w	801f3f0 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 801f270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f272:	ee07 3a90 	vmov	s15, r3
 801f276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f27a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801f27e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f282:	edd7 7a04 	vldr	s15, [r7, #16]
 801f286:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f28a:	697b      	ldr	r3, [r7, #20]
 801f28c:	eeb0 0a67 	vmov.f32	s0, s15
 801f290:	4798      	blx	r3
 801f292:	eef0 7a40 	vmov.f32	s15, s0
 801f296:	ed9f 7a74 	vldr	s14, [pc, #464]	; 801f468 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801f29a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f29e:	eeb0 0a67 	vmov.f32	s0, s15
 801f2a2:	f7fc f999 	bl	801b5d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801f2a6:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801f2aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f2ac:	3301      	adds	r3, #1
 801f2ae:	ee07 3a90 	vmov	s15, r3
 801f2b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f2b6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801f2ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f2be:	edd7 7a04 	vldr	s15, [r7, #16]
 801f2c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f2c6:	697b      	ldr	r3, [r7, #20]
 801f2c8:	eeb0 0a67 	vmov.f32	s0, s15
 801f2cc:	4798      	blx	r3
 801f2ce:	eef0 7a40 	vmov.f32	s15, s0
 801f2d2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801f468 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801f2d6:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 801f2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f2dc:	ee07 3a90 	vmov	s15, r3
 801f2e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f2e4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801f2e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f2ec:	edd7 7a04 	vldr	s15, [r7, #16]
 801f2f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f2f4:	697b      	ldr	r3, [r7, #20]
 801f2f6:	eeb0 0a67 	vmov.f32	s0, s15
 801f2fa:	4798      	blx	r3
 801f2fc:	eef0 7a40 	vmov.f32	s15, s0
 801f300:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801f468 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801f304:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f308:	eeb0 0a67 	vmov.f32	s0, s15
 801f30c:	f7fc f964 	bl	801b5d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801f310:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801f314:	ee78 7a27 	vadd.f32	s15, s16, s15
 801f318:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f31c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801f320:	eeb0 0a47 	vmov.f32	s0, s14
 801f324:	f7fc f958 	bl	801b5d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801f328:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 801f32c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f32e:	ee07 3a90 	vmov	s15, r3
 801f332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f336:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801f33a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f33e:	edd7 7a04 	vldr	s15, [r7, #16]
 801f342:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f346:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801f34a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f34e:	697b      	ldr	r3, [r7, #20]
 801f350:	eeb0 0a67 	vmov.f32	s0, s15
 801f354:	4798      	blx	r3
 801f356:	eef0 7a40 	vmov.f32	s15, s0
 801f35a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801f468 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801f35e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f362:	eeb0 0a67 	vmov.f32	s0, s15
 801f366:	f7fc f937 	bl	801b5d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801f36a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 801f36e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801f372:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801f376:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f37a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 801f37e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f382:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f386:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801f38a:	eeb0 0a47 	vmov.f32	s0, s14
 801f38e:	f7fc f923 	bl	801b5d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801f392:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801f396:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801f39a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801f39e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f3a2:	edc7 7a06 	vstr	s15, [r7, #24]
 801f3a6:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801f3aa:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 801f3ac:	f107 021c 	add.w	r2, r7, #28
 801f3b0:	f107 0318 	add.w	r3, r7, #24
 801f3b4:	4611      	mov	r1, r2
 801f3b6:	4618      	mov	r0, r3
 801f3b8:	f7e7 f99f 	bl	80066fa <_ZSt3maxIfERKT_S2_S2_>
 801f3bc:	4602      	mov	r2, r0
 801f3be:	4b2b      	ldr	r3, [pc, #172]	; (801f46c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801f3c0:	623b      	str	r3, [r7, #32]
 801f3c2:	f107 0320 	add.w	r3, r7, #32
 801f3c6:	4619      	mov	r1, r3
 801f3c8:	4610      	mov	r0, r2
 801f3ca:	f7fc f8d8 	bl	801b57e <_ZSt3minIfERKT_S2_S2_>
 801f3ce:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801f3d0:	edd3 7a00 	vldr	s15, [r3]
 801f3d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f3d6:	005b      	lsls	r3, r3, #1
 801f3d8:	68ba      	ldr	r2, [r7, #8]
 801f3da:	4413      	add	r3, r2
 801f3dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f3e0:	ee17 2a90 	vmov	r2, s15
 801f3e4:	b212      	sxth	r2, r2
 801f3e6:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 801f3e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f3ea:	3301      	adds	r3, #1
 801f3ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f3ee:	e739      	b.n	801f264 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 801f3f0:	697b      	ldr	r3, [r7, #20]
 801f3f2:	ed97 0a03 	vldr	s0, [r7, #12]
 801f3f6:	4798      	blx	r3
 801f3f8:	eef0 7a40 	vmov.f32	s15, s0
 801f3fc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 801f468 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801f400:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f404:	eeb0 0a67 	vmov.f32	s0, s15
 801f408:	f7fc f8e6 	bl	801b5d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801f40c:	eef0 7a40 	vmov.f32	s15, s0
 801f410:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801f414:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801f418:	62bb      	str	r3, [r7, #40]	; 0x28
 801f41a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f41e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f422:	4611      	mov	r1, r2
 801f424:	4618      	mov	r0, r3
 801f426:	f7e7 f968 	bl	80066fa <_ZSt3maxIfERKT_S2_S2_>
 801f42a:	4602      	mov	r2, r0
 801f42c:	4b0f      	ldr	r3, [pc, #60]	; (801f46c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801f42e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f430:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801f434:	4619      	mov	r1, r3
 801f436:	4610      	mov	r0, r2
 801f438:	f7fc f8a1 	bl	801b57e <_ZSt3minIfERKT_S2_S2_>
 801f43c:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 801f43e:	edd3 7a00 	vldr	s15, [r3]
 801f442:	687b      	ldr	r3, [r7, #4]
 801f444:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f448:	3b01      	subs	r3, #1
 801f44a:	005b      	lsls	r3, r3, #1
 801f44c:	68ba      	ldr	r2, [r7, #8]
 801f44e:	4413      	add	r3, r2
 801f450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f454:	ee17 2a90 	vmov	r2, s15
 801f458:	b212      	sxth	r2, r2
 801f45a:	801a      	strh	r2, [r3, #0]
}
 801f45c:	bf00      	nop
 801f45e:	3750      	adds	r7, #80	; 0x50
 801f460:	46bd      	mov	sp, r7
 801f462:	ecbd 8b02 	vpop	{d8}
 801f466:	bd80      	pop	{r7, pc}
 801f468:	47000000 	.word	0x47000000
 801f46c:	46fffe00 	.word	0x46fffe00

0801f470 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 801f470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f474:	b090      	sub	sp, #64	; 0x40
 801f476:	af06      	add	r7, sp, #24
 801f478:	60f8      	str	r0, [r7, #12]
 801f47a:	60b9      	str	r1, [r7, #8]
 801f47c:	607a      	str	r2, [r7, #4]
 801f47e:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 801f480:	68bb      	ldr	r3, [r7, #8]
 801f482:	781b      	ldrb	r3, [r3, #0]
 801f484:	2b09      	cmp	r3, #9
 801f486:	d004      	beq.n	801f492 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 801f488:	68bb      	ldr	r3, [r7, #8]
 801f48a:	781b      	ldrb	r3, [r3, #0]
 801f48c:	2b07      	cmp	r3, #7
 801f48e:	f040 81b6 	bne.w	801f7fe <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 801f492:	68bb      	ldr	r3, [r7, #8]
 801f494:	781b      	ldrb	r3, [r3, #0]
 801f496:	2b07      	cmp	r3, #7
 801f498:	d156      	bne.n	801f548 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	691b      	ldr	r3, [r3, #16]
 801f49e:	2b00      	cmp	r3, #0
 801f4a0:	d011      	beq.n	801f4c6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 801f4a2:	68fb      	ldr	r3, [r7, #12]
 801f4a4:	695c      	ldr	r4, [r3, #20]
 801f4a6:	687b      	ldr	r3, [r7, #4]
 801f4a8:	691b      	ldr	r3, [r3, #16]
 801f4aa:	2200      	movs	r2, #0
 801f4ac:	9203      	str	r2, [sp, #12]
 801f4ae:	9302      	str	r3, [sp, #8]
 801f4b0:	4ba1      	ldr	r3, [pc, #644]	; (801f738 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 801f4b2:	9301      	str	r3, [sp, #4]
 801f4b4:	4ba1      	ldr	r3, [pc, #644]	; (801f73c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801f4b6:	9300      	str	r3, [sp, #0]
 801f4b8:	2325      	movs	r3, #37	; 0x25
 801f4ba:	4aa1      	ldr	r2, [pc, #644]	; (801f740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f4bc:	49a1      	ldr	r1, [pc, #644]	; (801f744 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801f4be:	68f8      	ldr	r0, [r7, #12]
 801f4c0:	47a0      	blx	r4
 801f4c2:	2301      	movs	r3, #1
 801f4c4:	e1e0      	b.n	801f888 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 801f4c6:	687b      	ldr	r3, [r7, #4]
 801f4c8:	edd3 7a03 	vldr	s15, [r3, #12]
 801f4cc:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 801f748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801f4d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4d8:	dd07      	ble.n	801f4ea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 801f4da:	687b      	ldr	r3, [r7, #4]
 801f4dc:	edd3 7a03 	vldr	s15, [r3, #12]
 801f4e0:	ed9f 7a99 	vldr	s14, [pc, #612]	; 801f748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801f4e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f4e8:	e006      	b.n	801f4f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	edd3 7a03 	vldr	s15, [r3, #12]
 801f4f0:	ed9f 7a95 	vldr	s14, [pc, #596]	; 801f748 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801f4f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f4f8:	edc7 7a08 	vstr	s15, [r7, #32]
 801f4fc:	edd7 7a08 	vldr	s15, [r7, #32]
 801f500:	ed9f 7a92 	vldr	s14, [pc, #584]	; 801f74c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 801f504:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f50c:	f340 80dd 	ble.w	801f6ca <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801f510:	68fb      	ldr	r3, [r7, #12]
 801f512:	695c      	ldr	r4, [r3, #20]
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	68db      	ldr	r3, [r3, #12]
 801f518:	4618      	mov	r0, r3
 801f51a:	f7e1 f81f 	bl	800055c <__aeabi_f2d>
 801f51e:	4602      	mov	r2, r0
 801f520:	460b      	mov	r3, r1
 801f522:	f04f 0000 	mov.w	r0, #0
 801f526:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801f52a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f52e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f532:	4b87      	ldr	r3, [pc, #540]	; (801f750 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 801f534:	9301      	str	r3, [sp, #4]
 801f536:	4b87      	ldr	r3, [pc, #540]	; (801f754 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801f538:	9300      	str	r3, [sp, #0]
 801f53a:	2326      	movs	r3, #38	; 0x26
 801f53c:	4a80      	ldr	r2, [pc, #512]	; (801f740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f53e:	4986      	ldr	r1, [pc, #536]	; (801f758 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801f540:	68f8      	ldr	r0, [r7, #12]
 801f542:	47a0      	blx	r4
 801f544:	2301      	movs	r3, #1
 801f546:	e19f      	b.n	801f888 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 801f548:	68bb      	ldr	r3, [r7, #8]
 801f54a:	781b      	ldrb	r3, [r3, #0]
 801f54c:	2b09      	cmp	r3, #9
 801f54e:	d018      	beq.n	801f582 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 801f550:	68fb      	ldr	r3, [r7, #12]
 801f552:	695c      	ldr	r4, [r3, #20]
 801f554:	68bb      	ldr	r3, [r7, #8]
 801f556:	781b      	ldrb	r3, [r3, #0]
 801f558:	4618      	mov	r0, r3
 801f55a:	f7fb fe0f 	bl	801b17c <TfLiteTypeGetName>
 801f55e:	4605      	mov	r5, r0
 801f560:	2009      	movs	r0, #9
 801f562:	f7fb fe0b 	bl	801b17c <TfLiteTypeGetName>
 801f566:	4603      	mov	r3, r0
 801f568:	9303      	str	r3, [sp, #12]
 801f56a:	9502      	str	r5, [sp, #8]
 801f56c:	4b7b      	ldr	r3, [pc, #492]	; (801f75c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801f56e:	9301      	str	r3, [sp, #4]
 801f570:	4b7b      	ldr	r3, [pc, #492]	; (801f760 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 801f572:	9300      	str	r3, [sp, #0]
 801f574:	2329      	movs	r3, #41	; 0x29
 801f576:	4a72      	ldr	r2, [pc, #456]	; (801f740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f578:	497a      	ldr	r1, [pc, #488]	; (801f764 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801f57a:	68f8      	ldr	r0, [r7, #12]
 801f57c:	47a0      	blx	r4
 801f57e:	2301      	movs	r3, #1
 801f580:	e182      	b.n	801f888 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 801f582:	687b      	ldr	r3, [r7, #4]
 801f584:	781b      	ldrb	r3, [r3, #0]
 801f586:	2b07      	cmp	r3, #7
 801f588:	d155      	bne.n	801f636 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 801f58a:	687b      	ldr	r3, [r7, #4]
 801f58c:	691b      	ldr	r3, [r3, #16]
 801f58e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801f592:	d011      	beq.n	801f5b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 801f594:	68fb      	ldr	r3, [r7, #12]
 801f596:	695c      	ldr	r4, [r3, #20]
 801f598:	687b      	ldr	r3, [r7, #4]
 801f59a:	691b      	ldr	r3, [r3, #16]
 801f59c:	4a72      	ldr	r2, [pc, #456]	; (801f768 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 801f59e:	9203      	str	r2, [sp, #12]
 801f5a0:	9302      	str	r3, [sp, #8]
 801f5a2:	4b72      	ldr	r3, [pc, #456]	; (801f76c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 801f5a4:	9301      	str	r3, [sp, #4]
 801f5a6:	4b65      	ldr	r3, [pc, #404]	; (801f73c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801f5a8:	9300      	str	r3, [sp, #0]
 801f5aa:	232b      	movs	r3, #43	; 0x2b
 801f5ac:	4a64      	ldr	r2, [pc, #400]	; (801f740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f5ae:	4965      	ldr	r1, [pc, #404]	; (801f744 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801f5b0:	68f8      	ldr	r0, [r7, #12]
 801f5b2:	47a0      	blx	r4
 801f5b4:	2301      	movs	r3, #1
 801f5b6:	e167      	b.n	801f888 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 801f5b8:	687b      	ldr	r3, [r7, #4]
 801f5ba:	edd3 7a03 	vldr	s15, [r3, #12]
 801f5be:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801f770 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801f5c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5ca:	dd07      	ble.n	801f5dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	edd3 7a03 	vldr	s15, [r3, #12]
 801f5d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801f770 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801f5d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f5da:	e006      	b.n	801f5ea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	edd3 7a03 	vldr	s15, [r3, #12]
 801f5e2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 801f770 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801f5e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f5ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801f5ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801f5f2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 801f774 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 801f5f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5fe:	dd64      	ble.n	801f6ca <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801f600:	68fb      	ldr	r3, [r7, #12]
 801f602:	695c      	ldr	r4, [r3, #20]
 801f604:	687b      	ldr	r3, [r7, #4]
 801f606:	68db      	ldr	r3, [r3, #12]
 801f608:	4618      	mov	r0, r3
 801f60a:	f7e0 ffa7 	bl	800055c <__aeabi_f2d>
 801f60e:	4602      	mov	r2, r0
 801f610:	460b      	mov	r3, r1
 801f612:	f04f 0000 	mov.w	r0, #0
 801f616:	4958      	ldr	r1, [pc, #352]	; (801f778 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 801f618:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f61c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f620:	4b56      	ldr	r3, [pc, #344]	; (801f77c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 801f622:	9301      	str	r3, [sp, #4]
 801f624:	4b4b      	ldr	r3, [pc, #300]	; (801f754 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801f626:	9300      	str	r3, [sp, #0]
 801f628:	232c      	movs	r3, #44	; 0x2c
 801f62a:	4a45      	ldr	r2, [pc, #276]	; (801f740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f62c:	494a      	ldr	r1, [pc, #296]	; (801f758 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801f62e:	68f8      	ldr	r0, [r7, #12]
 801f630:	47a0      	blx	r4
 801f632:	2301      	movs	r3, #1
 801f634:	e128      	b.n	801f888 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 801f636:	687b      	ldr	r3, [r7, #4]
 801f638:	781b      	ldrb	r3, [r3, #0]
 801f63a:	2b09      	cmp	r3, #9
 801f63c:	d018      	beq.n	801f670 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 801f63e:	68fb      	ldr	r3, [r7, #12]
 801f640:	695c      	ldr	r4, [r3, #20]
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	781b      	ldrb	r3, [r3, #0]
 801f646:	4618      	mov	r0, r3
 801f648:	f7fb fd98 	bl	801b17c <TfLiteTypeGetName>
 801f64c:	4605      	mov	r5, r0
 801f64e:	2009      	movs	r0, #9
 801f650:	f7fb fd94 	bl	801b17c <TfLiteTypeGetName>
 801f654:	4603      	mov	r3, r0
 801f656:	9303      	str	r3, [sp, #12]
 801f658:	9502      	str	r5, [sp, #8]
 801f65a:	4b40      	ldr	r3, [pc, #256]	; (801f75c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801f65c:	9301      	str	r3, [sp, #4]
 801f65e:	4b48      	ldr	r3, [pc, #288]	; (801f780 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 801f660:	9300      	str	r3, [sp, #0]
 801f662:	232f      	movs	r3, #47	; 0x2f
 801f664:	4a36      	ldr	r2, [pc, #216]	; (801f740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f666:	493f      	ldr	r1, [pc, #252]	; (801f764 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801f668:	68f8      	ldr	r0, [r7, #12]
 801f66a:	47a0      	blx	r4
 801f66c:	2301      	movs	r3, #1
 801f66e:	e10b      	b.n	801f888 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 801f670:	687b      	ldr	r3, [r7, #4]
 801f672:	691b      	ldr	r3, [r3, #16]
 801f674:	f113 0f80 	cmn.w	r3, #128	; 0x80
 801f678:	d012      	beq.n	801f6a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 801f67a:	68fb      	ldr	r3, [r7, #12]
 801f67c:	695c      	ldr	r4, [r3, #20]
 801f67e:	687b      	ldr	r3, [r7, #4]
 801f680:	691b      	ldr	r3, [r3, #16]
 801f682:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801f686:	9203      	str	r2, [sp, #12]
 801f688:	9302      	str	r3, [sp, #8]
 801f68a:	4b3e      	ldr	r3, [pc, #248]	; (801f784 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 801f68c:	9301      	str	r3, [sp, #4]
 801f68e:	4b2b      	ldr	r3, [pc, #172]	; (801f73c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801f690:	9300      	str	r3, [sp, #0]
 801f692:	2330      	movs	r3, #48	; 0x30
 801f694:	4a2a      	ldr	r2, [pc, #168]	; (801f740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f696:	492b      	ldr	r1, [pc, #172]	; (801f744 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801f698:	68f8      	ldr	r0, [r7, #12]
 801f69a:	47a0      	blx	r4
 801f69c:	2301      	movs	r3, #1
 801f69e:	e0f3      	b.n	801f888 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	edd3 7a03 	vldr	s15, [r3, #12]
 801f6a6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801f788 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 801f6aa:	eef4 7a47 	vcmp.f32	s15, s14
 801f6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6b2:	d00a      	beq.n	801f6ca <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801f6b4:	68fb      	ldr	r3, [r7, #12]
 801f6b6:	695c      	ldr	r4, [r3, #20]
 801f6b8:	4b34      	ldr	r3, [pc, #208]	; (801f78c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 801f6ba:	9300      	str	r3, [sp, #0]
 801f6bc:	2331      	movs	r3, #49	; 0x31
 801f6be:	4a20      	ldr	r2, [pc, #128]	; (801f740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801f6c0:	4933      	ldr	r1, [pc, #204]	; (801f790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 801f6c2:	68f8      	ldr	r0, [r7, #12]
 801f6c4:	47a0      	blx	r4
 801f6c6:	2301      	movs	r3, #1
 801f6c8:	e0de      	b.n	801f888 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 801f6ca:	68bb      	ldr	r3, [r7, #8]
 801f6cc:	781b      	ldrb	r3, [r3, #0]
 801f6ce:	2b07      	cmp	r3, #7
 801f6d0:	d160      	bne.n	801f794 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 801f6d2:	68bb      	ldr	r3, [r7, #8]
 801f6d4:	68db      	ldr	r3, [r3, #12]
 801f6d6:	4618      	mov	r0, r3
 801f6d8:	f7e0 ff40 	bl	800055c <__aeabi_f2d>
 801f6dc:	4604      	mov	r4, r0
 801f6de:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 801f6e0:	683b      	ldr	r3, [r7, #0]
 801f6e2:	681b      	ldr	r3, [r3, #0]
 801f6e4:	4618      	mov	r0, r3
 801f6e6:	f7e0 ff39 	bl	800055c <__aeabi_f2d>
 801f6ea:	4602      	mov	r2, r0
 801f6ec:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 801f6ee:	4620      	mov	r0, r4
 801f6f0:	4629      	mov	r1, r5
 801f6f2:	f7e0 ff8b 	bl	800060c <__aeabi_dmul>
 801f6f6:	4602      	mov	r2, r0
 801f6f8:	460b      	mov	r3, r1
 801f6fa:	4610      	mov	r0, r2
 801f6fc:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 801f6fe:	a30c      	add	r3, pc, #48	; (adr r3, 801f730 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 801f700:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f704:	f7e1 f8ac 	bl	8000860 <__aeabi_ddiv>
 801f708:	4602      	mov	r2, r0
 801f70a:	460b      	mov	r3, r1
 801f70c:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 801f710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f712:	3308      	adds	r3, #8
 801f714:	f107 0214 	add.w	r2, r7, #20
 801f718:	4611      	mov	r1, r2
 801f71a:	4618      	mov	r0, r3
 801f71c:	ed97 0b06 	vldr	d0, [r7, #24]
 801f720:	f7fb fdb2 	bl	801b288 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 801f724:	697a      	ldr	r2, [r7, #20]
 801f726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f728:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 801f72a:	e0ac      	b.n	801f886 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 801f72c:	f3af 8000 	nop.w
 801f730:	00140014 	.word	0x00140014
 801f734:	3f240014 	.word	0x3f240014
 801f738:	08029534 	.word	0x08029534
 801f73c:	08029538 	.word	0x08029538
 801f740:	0802948c 	.word	0x0802948c
 801f744:	08029518 	.word	0x08029518
 801f748:	38000000 	.word	0x38000000
 801f74c:	3303126f 	.word	0x3303126f
 801f750:	08029574 	.word	0x08029574
 801f754:	08029580 	.word	0x08029580
 801f758:	08029554 	.word	0x08029554
 801f75c:	080295b4 	.word	0x080295b4
 801f760:	080295c0 	.word	0x080295c0
 801f764:	08029598 	.word	0x08029598
 801f768:	ffff8000 	.word	0xffff8000
 801f76c:	080295cc 	.word	0x080295cc
 801f770:	37800000 	.word	0x37800000
 801f774:	3283126f 	.word	0x3283126f
 801f778:	3ef00000 	.word	0x3ef00000
 801f77c:	080295d4 	.word	0x080295d4
 801f780:	080295e0 	.word	0x080295e0
 801f784:	080295f0 	.word	0x080295f0
 801f788:	3b800000 	.word	0x3b800000
 801f78c:	08029610 	.word	0x08029610
 801f790:	080295f8 	.word	0x080295f8
          static_cast<double>(params->beta),
 801f794:	683b      	ldr	r3, [r7, #0]
 801f796:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 801f798:	4618      	mov	r0, r3
 801f79a:	f7e0 fedf 	bl	800055c <__aeabi_f2d>
 801f79e:	4680      	mov	r8, r0
 801f7a0:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 801f7a2:	68bb      	ldr	r3, [r7, #8]
 801f7a4:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 801f7a6:	4618      	mov	r0, r3
 801f7a8:	f7e0 fed8 	bl	800055c <__aeabi_f2d>
 801f7ac:	4682      	mov	sl, r0
 801f7ae:	468b      	mov	fp, r1
 801f7b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f7b2:	3308      	adds	r3, #8
 801f7b4:	f107 0210 	add.w	r2, r7, #16
 801f7b8:	4619      	mov	r1, r3
 801f7ba:	2005      	movs	r0, #5
 801f7bc:	ec4b ab11 	vmov	d1, sl, fp
 801f7c0:	ec49 8b10 	vmov	d0, r8, r9
 801f7c4:	f7fb fe2c 	bl	801b420 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 801f7c8:	693a      	ldr	r2, [r7, #16]
 801f7ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f7cc:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 801f7ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f7d0:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 801f7d2:	221f      	movs	r2, #31
 801f7d4:	4619      	mov	r1, r3
 801f7d6:	2005      	movs	r0, #5
 801f7d8:	f7fb fe6a 	bl	801b4b0 <_ZN6tflite20CalculateInputRadiusEiii>
 801f7dc:	4603      	mov	r3, r0
 801f7de:	4618      	mov	r0, r3
 801f7e0:	f7e0 feaa 	bl	8000538 <__aeabi_i2d>
 801f7e4:	4602      	mov	r2, r0
 801f7e6:	460b      	mov	r3, r1
 801f7e8:	4614      	mov	r4, r2
 801f7ea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 801f7ee:	4620      	mov	r0, r4
 801f7f0:	4629      	mov	r1, r5
 801f7f2:	f7e1 f9bb 	bl	8000b6c <__aeabi_d2iz>
 801f7f6:	4602      	mov	r2, r0
 801f7f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f7fa:	619a      	str	r2, [r3, #24]
    }
 801f7fc:	e043      	b.n	801f886 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 801f7fe:	68bb      	ldr	r3, [r7, #8]
 801f800:	781b      	ldrb	r3, [r3, #0]
 801f802:	2b01      	cmp	r3, #1
 801f804:	d018      	beq.n	801f838 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 801f806:	68fb      	ldr	r3, [r7, #12]
 801f808:	695c      	ldr	r4, [r3, #20]
 801f80a:	68bb      	ldr	r3, [r7, #8]
 801f80c:	781b      	ldrb	r3, [r3, #0]
 801f80e:	4618      	mov	r0, r3
 801f810:	f7fb fcb4 	bl	801b17c <TfLiteTypeGetName>
 801f814:	4605      	mov	r5, r0
 801f816:	2001      	movs	r0, #1
 801f818:	f7fb fcb0 	bl	801b17c <TfLiteTypeGetName>
 801f81c:	4603      	mov	r3, r0
 801f81e:	9303      	str	r3, [sp, #12]
 801f820:	9502      	str	r5, [sp, #8]
 801f822:	4b1c      	ldr	r3, [pc, #112]	; (801f894 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801f824:	9301      	str	r3, [sp, #4]
 801f826:	4b1c      	ldr	r3, [pc, #112]	; (801f898 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 801f828:	9300      	str	r3, [sp, #0]
 801f82a:	234e      	movs	r3, #78	; 0x4e
 801f82c:	4a1b      	ldr	r2, [pc, #108]	; (801f89c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801f82e:	491c      	ldr	r1, [pc, #112]	; (801f8a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801f830:	68f8      	ldr	r0, [r7, #12]
 801f832:	47a0      	blx	r4
 801f834:	2301      	movs	r3, #1
 801f836:	e027      	b.n	801f888 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 801f838:	687b      	ldr	r3, [r7, #4]
 801f83a:	781b      	ldrb	r3, [r3, #0]
 801f83c:	2b01      	cmp	r3, #1
 801f83e:	d018      	beq.n	801f872 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 801f840:	68fb      	ldr	r3, [r7, #12]
 801f842:	695c      	ldr	r4, [r3, #20]
 801f844:	687b      	ldr	r3, [r7, #4]
 801f846:	781b      	ldrb	r3, [r3, #0]
 801f848:	4618      	mov	r0, r3
 801f84a:	f7fb fc97 	bl	801b17c <TfLiteTypeGetName>
 801f84e:	4605      	mov	r5, r0
 801f850:	2001      	movs	r0, #1
 801f852:	f7fb fc93 	bl	801b17c <TfLiteTypeGetName>
 801f856:	4603      	mov	r3, r0
 801f858:	9303      	str	r3, [sp, #12]
 801f85a:	9502      	str	r5, [sp, #8]
 801f85c:	4b0d      	ldr	r3, [pc, #52]	; (801f894 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801f85e:	9301      	str	r3, [sp, #4]
 801f860:	4b10      	ldr	r3, [pc, #64]	; (801f8a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 801f862:	9300      	str	r3, [sp, #0]
 801f864:	234f      	movs	r3, #79	; 0x4f
 801f866:	4a0d      	ldr	r2, [pc, #52]	; (801f89c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801f868:	490d      	ldr	r1, [pc, #52]	; (801f8a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801f86a:	68f8      	ldr	r0, [r7, #12]
 801f86c:	47a0      	blx	r4
 801f86e:	2301      	movs	r3, #1
 801f870:	e00a      	b.n	801f888 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 801f872:	683b      	ldr	r3, [r7, #0]
 801f874:	681b      	ldr	r3, [r3, #0]
 801f876:	4618      	mov	r0, r3
 801f878:	f7e0 fe70 	bl	800055c <__aeabi_f2d>
 801f87c:	4602      	mov	r2, r0
 801f87e:	460b      	mov	r3, r1
 801f880:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801f882:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 801f886:	2300      	movs	r3, #0
}
 801f888:	4618      	mov	r0, r3
 801f88a:	3728      	adds	r7, #40	; 0x28
 801f88c:	46bd      	mov	sp, r7
 801f88e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f892:	bf00      	nop
 801f894:	08029634 	.word	0x08029634
 801f898:	080295c0 	.word	0x080295c0
 801f89c:	0802948c 	.word	0x0802948c
 801f8a0:	08029598 	.word	0x08029598
 801f8a4:	080295e0 	.word	0x080295e0

0801f8a8 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 801f8a8:	b580      	push	{r7, lr}
 801f8aa:	b084      	sub	sp, #16
 801f8ac:	af00      	add	r7, sp, #0
 801f8ae:	60f8      	str	r0, [r7, #12]
 801f8b0:	60b9      	str	r1, [r7, #8]
 801f8b2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801f8b4:	68fb      	ldr	r3, [r7, #12]
 801f8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f8b8:	2b00      	cmp	r3, #0
 801f8ba:	d101      	bne.n	801f8c0 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 801f8bc:	f004 f836 	bl	802392c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 801f8c0:	68fb      	ldr	r3, [r7, #12]
 801f8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f8c4:	2138      	movs	r1, #56	; 0x38
 801f8c6:	68f8      	ldr	r0, [r7, #12]
 801f8c8:	4798      	blx	r3
 801f8ca:	4603      	mov	r3, r0
}
 801f8cc:	4618      	mov	r0, r3
 801f8ce:	3710      	adds	r7, #16
 801f8d0:	46bd      	mov	sp, r7
 801f8d2:	bd80      	pop	{r7, pc}

0801f8d4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801f8d4:	b580      	push	{r7, lr}
 801f8d6:	b082      	sub	sp, #8
 801f8d8:	af00      	add	r7, sp, #0
 801f8da:	6078      	str	r0, [r7, #4]
 801f8dc:	ed87 0a00 	vstr	s0, [r7]
 801f8e0:	ed97 0a00 	vldr	s0, [r7]
 801f8e4:	f7e2 f8bb 	bl	8001a5e <_ZSt3expf>
 801f8e8:	eef0 7a40 	vmov.f32	s15, s0
 801f8ec:	eeb0 0a67 	vmov.f32	s0, s15
 801f8f0:	3708      	adds	r7, #8
 801f8f2:	46bd      	mov	sp, r7
 801f8f4:	bd80      	pop	{r7, pc}

0801f8f6 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 801f8f6:	b580      	push	{r7, lr}
 801f8f8:	b082      	sub	sp, #8
 801f8fa:	af00      	add	r7, sp, #0
 801f8fc:	ed87 0a01 	vstr	s0, [r7, #4]
 801f900:	ed97 0a01 	vldr	s0, [r7, #4]
 801f904:	2000      	movs	r0, #0
 801f906:	f7ff ffe5 	bl	801f8d4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 801f90a:	eef0 7a40 	vmov.f32	s15, s0
 801f90e:	eeb0 0a67 	vmov.f32	s0, s15
 801f912:	3708      	adds	r7, #8
 801f914:	46bd      	mov	sp, r7
 801f916:	bd80      	pop	{r7, pc}

0801f918 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 801f918:	b480      	push	{r7}
 801f91a:	b083      	sub	sp, #12
 801f91c:	af00      	add	r7, sp, #0
 801f91e:	6078      	str	r0, [r7, #4]
 801f920:	4b03      	ldr	r3, [pc, #12]	; (801f930 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 801f922:	4618      	mov	r0, r3
 801f924:	370c      	adds	r7, #12
 801f926:	46bd      	mov	sp, r7
 801f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f92c:	4770      	bx	lr
 801f92e:	bf00      	nop
 801f930:	0801f8f7 	.word	0x0801f8f7

0801f934 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801f934:	b480      	push	{r7}
 801f936:	b083      	sub	sp, #12
 801f938:	af00      	add	r7, sp, #0
 801f93a:	6078      	str	r0, [r7, #4]
 801f93c:	ed87 0a00 	vstr	s0, [r7]
 801f940:	edd7 7a00 	vldr	s15, [r7]
 801f944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f948:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f94c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f950:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801f954:	eef0 7a66 	vmov.f32	s15, s13
 801f958:	eeb0 0a67 	vmov.f32	s0, s15
 801f95c:	370c      	adds	r7, #12
 801f95e:	46bd      	mov	sp, r7
 801f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f964:	4770      	bx	lr

0801f966 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 801f966:	b580      	push	{r7, lr}
 801f968:	b082      	sub	sp, #8
 801f96a:	af00      	add	r7, sp, #0
 801f96c:	ed87 0a01 	vstr	s0, [r7, #4]
 801f970:	ed97 0a01 	vldr	s0, [r7, #4]
 801f974:	2000      	movs	r0, #0
 801f976:	f7ff ffdd 	bl	801f934 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 801f97a:	eef0 7a40 	vmov.f32	s15, s0
 801f97e:	eeb0 0a67 	vmov.f32	s0, s15
 801f982:	3708      	adds	r7, #8
 801f984:	46bd      	mov	sp, r7
 801f986:	bd80      	pop	{r7, pc}

0801f988 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 801f988:	b480      	push	{r7}
 801f98a:	b083      	sub	sp, #12
 801f98c:	af00      	add	r7, sp, #0
 801f98e:	6078      	str	r0, [r7, #4]
 801f990:	4b03      	ldr	r3, [pc, #12]	; (801f9a0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 801f992:	4618      	mov	r0, r3
 801f994:	370c      	adds	r7, #12
 801f996:	46bd      	mov	sp, r7
 801f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f99c:	4770      	bx	lr
 801f99e:	bf00      	nop
 801f9a0:	0801f967 	.word	0x0801f967

0801f9a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 801f9a4:	b590      	push	{r4, r7, lr}
 801f9a6:	b08f      	sub	sp, #60	; 0x3c
 801f9a8:	af04      	add	r7, sp, #16
 801f9aa:	6078      	str	r0, [r7, #4]
 801f9ac:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801f9ae:	6838      	ldr	r0, [r7, #0]
 801f9b0:	f7fd fa9b 	bl	801ceea <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801f9b4:	4603      	mov	r3, r0
 801f9b6:	2b01      	cmp	r3, #1
 801f9b8:	bf14      	ite	ne
 801f9ba:	2301      	movne	r3, #1
 801f9bc:	2300      	moveq	r3, #0
 801f9be:	b2db      	uxtb	r3, r3
 801f9c0:	2b00      	cmp	r3, #0
 801f9c2:	d013      	beq.n	801f9ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 801f9c4:	687b      	ldr	r3, [r7, #4]
 801f9c6:	695c      	ldr	r4, [r3, #20]
 801f9c8:	6838      	ldr	r0, [r7, #0]
 801f9ca:	f7fd fa8e 	bl	801ceea <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801f9ce:	4603      	mov	r3, r0
 801f9d0:	2201      	movs	r2, #1
 801f9d2:	9203      	str	r2, [sp, #12]
 801f9d4:	9302      	str	r3, [sp, #8]
 801f9d6:	4b7c      	ldr	r3, [pc, #496]	; (801fbc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801f9d8:	9301      	str	r3, [sp, #4]
 801f9da:	4b7c      	ldr	r3, [pc, #496]	; (801fbcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 801f9dc:	9300      	str	r3, [sp, #0]
 801f9de:	235d      	movs	r3, #93	; 0x5d
 801f9e0:	4a7b      	ldr	r2, [pc, #492]	; (801fbd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801f9e2:	497c      	ldr	r1, [pc, #496]	; (801fbd4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801f9e4:	6878      	ldr	r0, [r7, #4]
 801f9e6:	47a0      	blx	r4
 801f9e8:	2301      	movs	r3, #1
 801f9ea:	e146      	b.n	801fc7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801f9ec:	6838      	ldr	r0, [r7, #0]
 801f9ee:	f7fd fa89 	bl	801cf04 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801f9f2:	4603      	mov	r3, r0
 801f9f4:	2b01      	cmp	r3, #1
 801f9f6:	bf14      	ite	ne
 801f9f8:	2301      	movne	r3, #1
 801f9fa:	2300      	moveq	r3, #0
 801f9fc:	b2db      	uxtb	r3, r3
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	d013      	beq.n	801fa2a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 801fa02:	687b      	ldr	r3, [r7, #4]
 801fa04:	695c      	ldr	r4, [r3, #20]
 801fa06:	6838      	ldr	r0, [r7, #0]
 801fa08:	f7fd fa7c 	bl	801cf04 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801fa0c:	4603      	mov	r3, r0
 801fa0e:	2201      	movs	r2, #1
 801fa10:	9203      	str	r2, [sp, #12]
 801fa12:	9302      	str	r3, [sp, #8]
 801fa14:	4b6c      	ldr	r3, [pc, #432]	; (801fbc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801fa16:	9301      	str	r3, [sp, #4]
 801fa18:	4b6f      	ldr	r3, [pc, #444]	; (801fbd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 801fa1a:	9300      	str	r3, [sp, #0]
 801fa1c:	235e      	movs	r3, #94	; 0x5e
 801fa1e:	4a6c      	ldr	r2, [pc, #432]	; (801fbd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801fa20:	496c      	ldr	r1, [pc, #432]	; (801fbd4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801fa22:	6878      	ldr	r0, [r7, #4]
 801fa24:	47a0      	blx	r4
 801fa26:	2301      	movs	r3, #1
 801fa28:	e127      	b.n	801fc7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 801fa2a:	2200      	movs	r2, #0
 801fa2c:	6839      	ldr	r1, [r7, #0]
 801fa2e:	6878      	ldr	r0, [r7, #4]
 801fa30:	f7fb fe94 	bl	801b75c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801fa34:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 801fa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	d10a      	bne.n	801fa52 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 801fa3c:	687b      	ldr	r3, [r7, #4]
 801fa3e:	695c      	ldr	r4, [r3, #20]
 801fa40:	4b66      	ldr	r3, [pc, #408]	; (801fbdc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801fa42:	9300      	str	r3, [sp, #0]
 801fa44:	2360      	movs	r3, #96	; 0x60
 801fa46:	4a62      	ldr	r2, [pc, #392]	; (801fbd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801fa48:	4965      	ldr	r1, [pc, #404]	; (801fbe0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801fa4a:	6878      	ldr	r0, [r7, #4]
 801fa4c:	47a0      	blx	r4
 801fa4e:	2301      	movs	r3, #1
 801fa50:	e113      	b.n	801fc7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 801fa52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fa54:	f7fb fe05 	bl	801b662 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 801fa58:	4603      	mov	r3, r0
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	bfd4      	ite	le
 801fa5e:	2301      	movle	r3, #1
 801fa60:	2300      	movgt	r3, #0
 801fa62:	b2db      	uxtb	r3, r3
 801fa64:	2b00      	cmp	r3, #0
 801fa66:	d00a      	beq.n	801fa7e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 801fa68:	687b      	ldr	r3, [r7, #4]
 801fa6a:	695c      	ldr	r4, [r3, #20]
 801fa6c:	4b5d      	ldr	r3, [pc, #372]	; (801fbe4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801fa6e:	9300      	str	r3, [sp, #0]
 801fa70:	2361      	movs	r3, #97	; 0x61
 801fa72:	4a57      	ldr	r2, [pc, #348]	; (801fbd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801fa74:	495a      	ldr	r1, [pc, #360]	; (801fbe0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801fa76:	6878      	ldr	r0, [r7, #4]
 801fa78:	47a0      	blx	r4
 801fa7a:	2301      	movs	r3, #1
 801fa7c:	e0fd      	b.n	801fc7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 801fa7e:	2200      	movs	r2, #0
 801fa80:	6839      	ldr	r1, [r7, #0]
 801fa82:	6878      	ldr	r0, [r7, #4]
 801fa84:	f7fb fe7a 	bl	801b77c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801fa88:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 801fa8a:	6a3b      	ldr	r3, [r7, #32]
 801fa8c:	2b00      	cmp	r3, #0
 801fa8e:	d10a      	bne.n	801faa6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 801fa90:	687b      	ldr	r3, [r7, #4]
 801fa92:	695c      	ldr	r4, [r3, #20]
 801fa94:	4b54      	ldr	r3, [pc, #336]	; (801fbe8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801fa96:	9300      	str	r3, [sp, #0]
 801fa98:	2363      	movs	r3, #99	; 0x63
 801fa9a:	4a4d      	ldr	r2, [pc, #308]	; (801fbd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801fa9c:	4950      	ldr	r1, [pc, #320]	; (801fbe0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801fa9e:	6878      	ldr	r0, [r7, #4]
 801faa0:	47a0      	blx	r4
 801faa2:	2301      	movs	r3, #1
 801faa4:	e0e9      	b.n	801fc7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 801faa6:	683b      	ldr	r3, [r7, #0]
 801faa8:	691b      	ldr	r3, [r3, #16]
 801faaa:	2b00      	cmp	r3, #0
 801faac:	d10a      	bne.n	801fac4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801faae:	687b      	ldr	r3, [r7, #4]
 801fab0:	695c      	ldr	r4, [r3, #20]
 801fab2:	4b4e      	ldr	r3, [pc, #312]	; (801fbec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801fab4:	9300      	str	r3, [sp, #0]
 801fab6:	2365      	movs	r3, #101	; 0x65
 801fab8:	4a45      	ldr	r2, [pc, #276]	; (801fbd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801faba:	4949      	ldr	r1, [pc, #292]	; (801fbe0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801fabc:	6878      	ldr	r0, [r7, #4]
 801fabe:	47a0      	blx	r4
 801fac0:	2301      	movs	r3, #1
 801fac2:	e0da      	b.n	801fc7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 801fac4:	683b      	ldr	r3, [r7, #0]
 801fac6:	691b      	ldr	r3, [r3, #16]
 801fac8:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 801faca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801facc:	781b      	ldrb	r3, [r3, #0]
 801face:	2b07      	cmp	r3, #7
 801fad0:	d12f      	bne.n	801fb32 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 801fad2:	687b      	ldr	r3, [r7, #4]
 801fad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fad6:	f240 4102 	movw	r1, #1026	; 0x402
 801fada:	6878      	ldr	r0, [r7, #4]
 801fadc:	4798      	blx	r3
 801fade:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 801fae0:	69bb      	ldr	r3, [r7, #24]
 801fae2:	2b00      	cmp	r3, #0
 801fae4:	d10a      	bne.n	801fafc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 801fae6:	687b      	ldr	r3, [r7, #4]
 801fae8:	695c      	ldr	r4, [r3, #20]
 801faea:	4b41      	ldr	r3, [pc, #260]	; (801fbf0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801faec:	9300      	str	r3, [sp, #0]
 801faee:	236b      	movs	r3, #107	; 0x6b
 801faf0:	4a37      	ldr	r2, [pc, #220]	; (801fbd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801faf2:	493b      	ldr	r1, [pc, #236]	; (801fbe0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801faf4:	6878      	ldr	r0, [r7, #4]
 801faf6:	47a0      	blx	r4
 801faf8:	2301      	movs	r3, #1
 801fafa:	e0be      	b.n	801fc7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 801fafc:	69fb      	ldr	r3, [r7, #28]
 801fafe:	69ba      	ldr	r2, [r7, #24]
 801fb00:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fb06:	f240 4102 	movw	r1, #1026	; 0x402
 801fb0a:	6878      	ldr	r0, [r7, #4]
 801fb0c:	4798      	blx	r3
 801fb0e:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 801fb10:	697b      	ldr	r3, [r7, #20]
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d10a      	bne.n	801fb2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 801fb16:	687b      	ldr	r3, [r7, #4]
 801fb18:	695c      	ldr	r4, [r3, #20]
 801fb1a:	4b36      	ldr	r3, [pc, #216]	; (801fbf4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801fb1c:	9300      	str	r3, [sp, #0]
 801fb1e:	236f      	movs	r3, #111	; 0x6f
 801fb20:	4a2b      	ldr	r2, [pc, #172]	; (801fbd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801fb22:	492f      	ldr	r1, [pc, #188]	; (801fbe0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801fb24:	6878      	ldr	r0, [r7, #4]
 801fb26:	47a0      	blx	r4
 801fb28:	2301      	movs	r3, #1
 801fb2a:	e0a6      	b.n	801fc7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 801fb2c:	69fb      	ldr	r3, [r7, #28]
 801fb2e:	697a      	ldr	r2, [r7, #20]
 801fb30:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 801fb32:	6a3b      	ldr	r3, [r7, #32]
 801fb34:	781b      	ldrb	r3, [r3, #0]
 801fb36:	2b07      	cmp	r3, #7
 801fb38:	d112      	bne.n	801fb60 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 801fb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb3c:	781b      	ldrb	r3, [r3, #0]
 801fb3e:	2b09      	cmp	r3, #9
 801fb40:	d028      	beq.n	801fb94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801fb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb44:	781b      	ldrb	r3, [r3, #0]
 801fb46:	2b07      	cmp	r3, #7
 801fb48:	d024      	beq.n	801fb94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801fb4a:	687b      	ldr	r3, [r7, #4]
 801fb4c:	695c      	ldr	r4, [r3, #20]
 801fb4e:	4b2a      	ldr	r3, [pc, #168]	; (801fbf8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801fb50:	9300      	str	r3, [sp, #0]
 801fb52:	2375      	movs	r3, #117	; 0x75
 801fb54:	4a1e      	ldr	r2, [pc, #120]	; (801fbd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801fb56:	4922      	ldr	r1, [pc, #136]	; (801fbe0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801fb58:	6878      	ldr	r0, [r7, #4]
 801fb5a:	47a0      	blx	r4
 801fb5c:	2301      	movs	r3, #1
 801fb5e:	e08c      	b.n	801fc7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 801fb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb62:	781a      	ldrb	r2, [r3, #0]
 801fb64:	6a3b      	ldr	r3, [r7, #32]
 801fb66:	781b      	ldrb	r3, [r3, #0]
 801fb68:	429a      	cmp	r2, r3
 801fb6a:	d013      	beq.n	801fb94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801fb6c:	687b      	ldr	r3, [r7, #4]
 801fb6e:	695c      	ldr	r4, [r3, #20]
 801fb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb72:	781b      	ldrb	r3, [r3, #0]
 801fb74:	461a      	mov	r2, r3
 801fb76:	6a3b      	ldr	r3, [r7, #32]
 801fb78:	781b      	ldrb	r3, [r3, #0]
 801fb7a:	9303      	str	r3, [sp, #12]
 801fb7c:	9202      	str	r2, [sp, #8]
 801fb7e:	4b1f      	ldr	r3, [pc, #124]	; (801fbfc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801fb80:	9301      	str	r3, [sp, #4]
 801fb82:	4b1f      	ldr	r3, [pc, #124]	; (801fc00 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801fb84:	9300      	str	r3, [sp, #0]
 801fb86:	2378      	movs	r3, #120	; 0x78
 801fb88:	4a11      	ldr	r2, [pc, #68]	; (801fbd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801fb8a:	4912      	ldr	r1, [pc, #72]	; (801fbd4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801fb8c:	6878      	ldr	r0, [r7, #4]
 801fb8e:	47a0      	blx	r4
 801fb90:	2301      	movs	r3, #1
 801fb92:	e072      	b.n	801fc7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 801fb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb96:	781b      	ldrb	r3, [r3, #0]
 801fb98:	2b07      	cmp	r3, #7
 801fb9a:	d161      	bne.n	801fc60 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801fb9c:	6a3b      	ldr	r3, [r7, #32]
 801fb9e:	691b      	ldr	r3, [r3, #16]
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	d035      	beq.n	801fc10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 801fba4:	687b      	ldr	r3, [r7, #4]
 801fba6:	695c      	ldr	r4, [r3, #20]
 801fba8:	6a3b      	ldr	r3, [r7, #32]
 801fbaa:	691b      	ldr	r3, [r3, #16]
 801fbac:	2200      	movs	r2, #0
 801fbae:	9203      	str	r2, [sp, #12]
 801fbb0:	9302      	str	r3, [sp, #8]
 801fbb2:	4b14      	ldr	r3, [pc, #80]	; (801fc04 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801fbb4:	9301      	str	r3, [sp, #4]
 801fbb6:	4b14      	ldr	r3, [pc, #80]	; (801fc08 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801fbb8:	9300      	str	r3, [sp, #0]
 801fbba:	237d      	movs	r3, #125	; 0x7d
 801fbbc:	4a04      	ldr	r2, [pc, #16]	; (801fbd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801fbbe:	4905      	ldr	r1, [pc, #20]	; (801fbd4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801fbc0:	6878      	ldr	r0, [r7, #4]
 801fbc2:	47a0      	blx	r4
 801fbc4:	2301      	movs	r3, #1
 801fbc6:	e058      	b.n	801fc7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 801fbc8:	08029644 	.word	0x08029644
 801fbcc:	08029648 	.word	0x08029648
 801fbd0:	0802948c 	.word	0x0802948c
 801fbd4:	08029518 	.word	0x08029518
 801fbd8:	08029658 	.word	0x08029658
 801fbdc:	0802966c 	.word	0x0802966c
 801fbe0:	080295f8 	.word	0x080295f8
 801fbe4:	08029680 	.word	0x08029680
 801fbe8:	0802969c 	.word	0x0802969c
 801fbec:	080296b0 	.word	0x080296b0
 801fbf0:	080296cc 	.word	0x080296cc
 801fbf4:	080296e4 	.word	0x080296e4
 801fbf8:	08029708 	.word	0x08029708
 801fbfc:	080295e0 	.word	0x080295e0
 801fc00:	080295c0 	.word	0x080295c0
 801fc04:	08029534 	.word	0x08029534
 801fc08:	08029538 	.word	0x08029538
 801fc0c:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801fc10:	f107 0308 	add.w	r3, r7, #8
 801fc14:	4618      	mov	r0, r3
 801fc16:	f7ff fe7f 	bl	801f918 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 801fc1a:	69fb      	ldr	r3, [r7, #28]
 801fc1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc1e:	f240 2201 	movw	r2, #513	; 0x201
 801fc22:	4619      	mov	r1, r3
 801fc24:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 801fc0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801fc28:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 801fc2c:	f7ff faf4 	bl	801f218 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801fc30:	f107 030c 	add.w	r3, r7, #12
 801fc34:	4618      	mov	r0, r3
 801fc36:	f7ff fea7 	bl	801f988 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 801fc3a:	69fb      	ldr	r3, [r7, #28]
 801fc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fc3e:	f240 2201 	movw	r2, #513	; 0x201
 801fc42:	4619      	mov	r1, r3
 801fc44:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801fc48:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 801fc0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801fc4c:	f7ff fae4 	bl	801f218 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 801fc50:	6a3b      	ldr	r3, [r7, #32]
 801fc52:	691a      	ldr	r2, [r3, #16]
 801fc54:	69fb      	ldr	r3, [r7, #28]
 801fc56:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 801fc58:	6a3b      	ldr	r3, [r7, #32]
 801fc5a:	68da      	ldr	r2, [r3, #12]
 801fc5c:	69fb      	ldr	r3, [r7, #28]
 801fc5e:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 801fc60:	683b      	ldr	r3, [r7, #0]
 801fc62:	695b      	ldr	r3, [r3, #20]
 801fc64:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 801fc66:	69fb      	ldr	r3, [r7, #28]
 801fc68:	9300      	str	r3, [sp, #0]
 801fc6a:	693b      	ldr	r3, [r7, #16]
 801fc6c:	6a3a      	ldr	r2, [r7, #32]
 801fc6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fc70:	6878      	ldr	r0, [r7, #4]
 801fc72:	f7ff fbfd 	bl	801f470 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801fc76:	4603      	mov	r3, r0
 801fc78:	bf00      	nop
}
 801fc7a:	4618      	mov	r0, r3
 801fc7c:	372c      	adds	r7, #44	; 0x2c
 801fc7e:	46bd      	mov	sp, r7
 801fc80:	bd90      	pop	{r4, r7, pc}
 801fc82:	bf00      	nop

0801fc84 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 801fc84:	b580      	push	{r7, lr}
 801fc86:	b084      	sub	sp, #16
 801fc88:	af00      	add	r7, sp, #0
 801fc8a:	6078      	str	r0, [r7, #4]
 801fc8c:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 801fc8e:	4b21      	ldr	r3, [pc, #132]	; (801fd14 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801fc90:	681a      	ldr	r2, [r3, #0]
 801fc92:	683b      	ldr	r3, [r7, #0]
 801fc94:	425b      	negs	r3, r3
 801fc96:	441a      	add	r2, r3
 801fc98:	4b1f      	ldr	r3, [pc, #124]	; (801fd18 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x94>)
 801fc9a:	681b      	ldr	r3, [r3, #0]
 801fc9c:	429a      	cmp	r2, r3
 801fc9e:	d224      	bcs.n	801fcea <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x66>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 801fca0:	4b1e      	ldr	r3, [pc, #120]	; (801fd1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801fca2:	681b      	ldr	r3, [r3, #0]
 801fca4:	2b09      	cmp	r3, #9
 801fca6:	d906      	bls.n	801fcb6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 801fca8:	683b      	ldr	r3, [r7, #0]
 801fcaa:	4619      	mov	r1, r3
 801fcac:	481c      	ldr	r0, [pc, #112]	; (801fd20 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x9c>)
 801fcae:	f7e6 f935 	bl	8005f1c <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 801fcb2:	2300      	movs	r3, #0
 801fcb4:	e029      	b.n	801fd0a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 801fcb6:	2101      	movs	r1, #1
 801fcb8:	6838      	ldr	r0, [r7, #0]
 801fcba:	f7fb fa29 	bl	801b110 <_Z9ei_callocjj>
 801fcbe:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL) {
 801fcc0:	68fb      	ldr	r3, [r7, #12]
 801fcc2:	2b00      	cmp	r3, #0
 801fcc4:	d106      	bne.n	801fcd4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 801fcc6:	683b      	ldr	r3, [r7, #0]
 801fcc8:	4619      	mov	r1, r3
 801fcca:	4816      	ldr	r0, [pc, #88]	; (801fd24 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa0>)
 801fccc:	f7e6 f926 	bl	8005f1c <_Z9ei_printfPKcz>
      return NULL;
 801fcd0:	2300      	movs	r3, #0
 801fcd2:	e01a      	b.n	801fd0a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 801fcd4:	4b11      	ldr	r3, [pc, #68]	; (801fd1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801fcd6:	681b      	ldr	r3, [r3, #0]
 801fcd8:	1c5a      	adds	r2, r3, #1
 801fcda:	4910      	ldr	r1, [pc, #64]	; (801fd1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801fcdc:	600a      	str	r2, [r1, #0]
 801fcde:	4912      	ldr	r1, [pc, #72]	; (801fd28 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa4>)
 801fce0:	68fa      	ldr	r2, [r7, #12]
 801fce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 801fce6:	68fb      	ldr	r3, [r7, #12]
 801fce8:	e00f      	b.n	801fd0a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
  }

  current_location -= bytes;
 801fcea:	4b0a      	ldr	r3, [pc, #40]	; (801fd14 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801fcec:	681a      	ldr	r2, [r3, #0]
 801fcee:	683b      	ldr	r3, [r7, #0]
 801fcf0:	425b      	negs	r3, r3
 801fcf2:	4413      	add	r3, r2
 801fcf4:	4a07      	ldr	r2, [pc, #28]	; (801fd14 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801fcf6:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 801fcf8:	4b06      	ldr	r3, [pc, #24]	; (801fd14 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 801fcfe:	683a      	ldr	r2, [r7, #0]
 801fd00:	2100      	movs	r1, #0
 801fd02:	68f8      	ldr	r0, [r7, #12]
 801fd04:	f003 febc 	bl	8023a80 <memset>

  return ptr;
 801fd08:	68fb      	ldr	r3, [r7, #12]
}
 801fd0a:	4618      	mov	r0, r3
 801fd0c:	3710      	adds	r7, #16
 801fd0e:	46bd      	mov	sp, r7
 801fd10:	bd80      	pop	{r7, pc}
 801fd12:	bf00      	nop
 801fd14:	20002c1c 	.word	0x20002c1c
 801fd18:	20002c18 	.word	0x20002c18
 801fd1c:	200030b4 	.word	0x200030b4
 801fd20:	08029758 	.word	0x08029758
 801fd24:	080297d8 	.word	0x080297d8
 801fd28:	2000308c 	.word	0x2000308c

0801fd2c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 801fd2c:	b580      	push	{r7, lr}
 801fd2e:	b086      	sub	sp, #24
 801fd30:	af00      	add	r7, sp, #0
 801fd32:	60f8      	str	r0, [r7, #12]
 801fd34:	60b9      	str	r1, [r7, #8]
 801fd36:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 801fd38:	4b1b      	ldr	r3, [pc, #108]	; (801fda8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801fd3a:	681b      	ldr	r3, [r3, #0]
 801fd3c:	2b03      	cmp	r3, #3
 801fd3e:	d906      	bls.n	801fd4e <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 801fd40:	68bb      	ldr	r3, [r7, #8]
 801fd42:	4619      	mov	r1, r3
 801fd44:	4819      	ldr	r0, [pc, #100]	; (801fdac <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x80>)
 801fd46:	f7e6 f8e9 	bl	8005f1c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801fd4a:	2301      	movs	r3, #1
 801fd4c:	e028      	b.n	801fda0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 801fd4e:	68bb      	ldr	r3, [r7, #8]
 801fd50:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 801fd52:	693b      	ldr	r3, [r7, #16]
 801fd54:	4619      	mov	r1, r3
 801fd56:	68f8      	ldr	r0, [r7, #12]
 801fd58:	f7ff ff94 	bl	801fc84 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 801fd5c:	4603      	mov	r3, r0
 801fd5e:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 801fd60:	697b      	ldr	r3, [r7, #20]
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	d106      	bne.n	801fd74 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 801fd66:	68bb      	ldr	r3, [r7, #8]
 801fd68:	4619      	mov	r1, r3
 801fd6a:	4811      	ldr	r0, [pc, #68]	; (801fdb0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x84>)
 801fd6c:	f7e6 f8d6 	bl	8005f1c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801fd70:	2301      	movs	r3, #1
 801fd72:	e015      	b.n	801fda0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 801fd74:	4b0c      	ldr	r3, [pc, #48]	; (801fda8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801fd76:	681b      	ldr	r3, [r3, #0]
 801fd78:	4a0e      	ldr	r2, [pc, #56]	; (801fdb4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x88>)
 801fd7a:	00db      	lsls	r3, r3, #3
 801fd7c:	4413      	add	r3, r2
 801fd7e:	f107 0210 	add.w	r2, r7, #16
 801fd82:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fd86:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 801fd8a:	4b07      	ldr	r3, [pc, #28]	; (801fda8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801fd8c:	681b      	ldr	r3, [r3, #0]
 801fd8e:	461a      	mov	r2, r3
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 801fd94:	4b04      	ldr	r3, [pc, #16]	; (801fda8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801fd96:	681b      	ldr	r3, [r3, #0]
 801fd98:	3301      	adds	r3, #1
 801fd9a:	4a03      	ldr	r2, [pc, #12]	; (801fda8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801fd9c:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 801fd9e:	2300      	movs	r3, #0
}
 801fda0:	4618      	mov	r0, r3
 801fda2:	3718      	adds	r7, #24
 801fda4:	46bd      	mov	sp, r7
 801fda6:	bd80      	pop	{r7, pc}
 801fda8:	200030d8 	.word	0x200030d8
 801fdac:	08029810 	.word	0x08029810
 801fdb0:	08029868 	.word	0x08029868
 801fdb4:	200030b8 	.word	0x200030b8

0801fdb8 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 801fdb8:	b480      	push	{r7}
 801fdba:	b083      	sub	sp, #12
 801fdbc:	af00      	add	r7, sp, #0
 801fdbe:	6078      	str	r0, [r7, #4]
 801fdc0:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 801fdc2:	4b09      	ldr	r3, [pc, #36]	; (801fde8 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x30>)
 801fdc4:	681b      	ldr	r3, [r3, #0]
 801fdc6:	461a      	mov	r2, r3
 801fdc8:	683b      	ldr	r3, [r7, #0]
 801fdca:	4293      	cmp	r3, r2
 801fdcc:	dd01      	ble.n	801fdd2 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x1a>
    return NULL;
 801fdce:	2300      	movs	r3, #0
 801fdd0:	e004      	b.n	801fddc <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 801fdd2:	4a06      	ldr	r2, [pc, #24]	; (801fdec <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x34>)
 801fdd4:	683b      	ldr	r3, [r7, #0]
 801fdd6:	00db      	lsls	r3, r3, #3
 801fdd8:	4413      	add	r3, r2
 801fdda:	685b      	ldr	r3, [r3, #4]
}
 801fddc:	4618      	mov	r0, r3
 801fdde:	370c      	adds	r7, #12
 801fde0:	46bd      	mov	sp, r7
 801fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fde6:	4770      	bx	lr
 801fde8:	200030d8 	.word	0x200030d8
 801fdec:	200030b8 	.word	0x200030b8

0801fdf0 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 801fdf0:	b480      	push	{r7}
 801fdf2:	b083      	sub	sp, #12
 801fdf4:	af00      	add	r7, sp, #0
 801fdf6:	6078      	str	r0, [r7, #4]
 801fdf8:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 801fdfa:	683b      	ldr	r3, [r7, #0]
 801fdfc:	019b      	lsls	r3, r3, #6
 801fdfe:	4a04      	ldr	r2, [pc, #16]	; (801fe10 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 801fe00:	4413      	add	r3, r2
}
 801fe02:	4618      	mov	r0, r3
 801fe04:	370c      	adds	r7, #12
 801fe06:	46bd      	mov	sp, r7
 801fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe0c:	4770      	bx	lr
 801fe0e:	bf00      	nop
 801fe10:	20002c78 	.word	0x20002c78

0801fe14 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 801fe14:	b480      	push	{r7}
 801fe16:	b083      	sub	sp, #12
 801fe18:	af00      	add	r7, sp, #0
 801fe1a:	6078      	str	r0, [r7, #4]
 801fe1c:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 801fe1e:	683a      	ldr	r2, [r7, #0]
 801fe20:	4613      	mov	r3, r2
 801fe22:	005b      	lsls	r3, r3, #1
 801fe24:	4413      	add	r3, r2
 801fe26:	009b      	lsls	r3, r3, #2
 801fe28:	4a03      	ldr	r2, [pc, #12]	; (801fe38 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 801fe2a:	4413      	add	r3, r2
}
 801fe2c:	4618      	mov	r0, r3
 801fe2e:	370c      	adds	r7, #12
 801fe30:	46bd      	mov	sp, r7
 801fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe36:	4770      	bx	lr
 801fe38:	20002f38 	.word	0x20002f38

0801fe3c <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 801fe3c:	b5b0      	push	{r4, r5, r7, lr}
 801fe3e:	b092      	sub	sp, #72	; 0x48
 801fe40:	af00      	add	r7, sp, #0
 801fe42:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 801fe44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe46:	f44f 7188 	mov.w	r1, #272	; 0x110
 801fe4a:	2010      	movs	r0, #16
 801fe4c:	4798      	blx	r3
 801fe4e:	4603      	mov	r3, r0
 801fe50:	4aa3      	ldr	r2, [pc, #652]	; (80200e0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801fe52:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 801fe54:	4ba2      	ldr	r3, [pc, #648]	; (80200e0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801fe56:	681b      	ldr	r3, [r3, #0]
 801fe58:	2b00      	cmp	r3, #0
 801fe5a:	d104      	bne.n	801fe66 <_Z18trained_model_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 801fe5c:	48a1      	ldr	r0, [pc, #644]	; (80200e4 <_Z18trained_model_initPFPvjjE+0x2a8>)
 801fe5e:	f7e6 f85d 	bl	8005f1c <_Z9ei_printfPKcz>
    return kTfLiteError;
 801fe62:	2301      	movs	r3, #1
 801fe64:	e21d      	b.n	80202a2 <_Z18trained_model_initPFPvjjE+0x466>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 801fe66:	4b9e      	ldr	r3, [pc, #632]	; (80200e0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801fe68:	681b      	ldr	r3, [r3, #0]
 801fe6a:	4a9f      	ldr	r2, [pc, #636]	; (80200e8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801fe6c:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 801fe6e:	4b9c      	ldr	r3, [pc, #624]	; (80200e0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801fe70:	681b      	ldr	r3, [r3, #0]
 801fe72:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801fe76:	4a9d      	ldr	r2, [pc, #628]	; (80200ec <_Z18trained_model_initPFPvjjE+0x2b0>)
 801fe78:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 801fe7a:	4b9d      	ldr	r3, [pc, #628]	; (80200f0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fe7c:	4a9d      	ldr	r2, [pc, #628]	; (80200f4 <_Z18trained_model_initPFPvjjE+0x2b8>)
 801fe7e:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 801fe80:	4b9b      	ldr	r3, [pc, #620]	; (80200f0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fe82:	4a9d      	ldr	r2, [pc, #628]	; (80200f8 <_Z18trained_model_initPFPvjjE+0x2bc>)
 801fe84:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 801fe86:	4b9a      	ldr	r3, [pc, #616]	; (80200f0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fe88:	4a9c      	ldr	r2, [pc, #624]	; (80200fc <_Z18trained_model_initPFPvjjE+0x2c0>)
 801fe8a:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 801fe8c:	4b98      	ldr	r3, [pc, #608]	; (80200f0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fe8e:	4a9c      	ldr	r2, [pc, #624]	; (8020100 <_Z18trained_model_initPFPvjjE+0x2c4>)
 801fe90:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 801fe92:	4b97      	ldr	r3, [pc, #604]	; (80200f0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fe94:	4a9b      	ldr	r2, [pc, #620]	; (8020104 <_Z18trained_model_initPFPvjjE+0x2c8>)
 801fe96:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 801fe98:	4b95      	ldr	r3, [pc, #596]	; (80200f0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fe9a:	4a9b      	ldr	r2, [pc, #620]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fe9c:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 801fe9e:	4b94      	ldr	r3, [pc, #592]	; (80200f0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801fea0:	220b      	movs	r2, #11
 801fea2:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 801fea4:	2300      	movs	r3, #0
 801fea6:	647b      	str	r3, [r7, #68]	; 0x44
 801fea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801feaa:	2b0a      	cmp	r3, #10
 801feac:	f200 810c 	bhi.w	80200c8 <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 801feb0:	4996      	ldr	r1, [pc, #600]	; (802010c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801feb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801feb4:	4613      	mov	r3, r2
 801feb6:	005b      	lsls	r3, r3, #1
 801feb8:	4413      	add	r3, r2
 801feba:	00db      	lsls	r3, r3, #3
 801febc:	440b      	add	r3, r1
 801febe:	3301      	adds	r3, #1
 801fec0:	7819      	ldrb	r1, [r3, #0]
 801fec2:	4a91      	ldr	r2, [pc, #580]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fec6:	019b      	lsls	r3, r3, #6
 801fec8:	4413      	add	r3, r2
 801feca:	460a      	mov	r2, r1
 801fecc:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 801fece:	498f      	ldr	r1, [pc, #572]	; (802010c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801fed0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fed2:	4613      	mov	r3, r2
 801fed4:	005b      	lsls	r3, r3, #1
 801fed6:	4413      	add	r3, r2
 801fed8:	00db      	lsls	r3, r3, #3
 801feda:	440b      	add	r3, r1
 801fedc:	3301      	adds	r3, #1
 801fede:	7818      	ldrb	r0, [r3, #0]
 801fee0:	498b      	ldr	r1, [pc, #556]	; (8020110 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801fee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fee4:	4613      	mov	r3, r2
 801fee6:	005b      	lsls	r3, r3, #1
 801fee8:	4413      	add	r3, r2
 801feea:	009b      	lsls	r3, r3, #2
 801feec:	440b      	add	r3, r1
 801feee:	3308      	adds	r3, #8
 801fef0:	4602      	mov	r2, r0
 801fef2:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 801fef4:	4a84      	ldr	r2, [pc, #528]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801fef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fef8:	019b      	lsls	r3, r3, #6
 801fefa:	4413      	add	r3, r2
 801fefc:	332d      	adds	r3, #45	; 0x2d
 801fefe:	2200      	movs	r2, #0
 801ff00:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 801ff02:	4982      	ldr	r1, [pc, #520]	; (802010c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ff04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ff06:	4613      	mov	r3, r2
 801ff08:	005b      	lsls	r3, r3, #1
 801ff0a:	4413      	add	r3, r2
 801ff0c:	00db      	lsls	r3, r3, #3
 801ff0e:	440b      	add	r3, r1
 801ff10:	7819      	ldrb	r1, [r3, #0]
 801ff12:	4a7d      	ldr	r2, [pc, #500]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ff14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ff16:	019b      	lsls	r3, r3, #6
 801ff18:	4413      	add	r3, r2
 801ff1a:	3314      	adds	r3, #20
 801ff1c:	460a      	mov	r2, r1
 801ff1e:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 801ff20:	497a      	ldr	r1, [pc, #488]	; (802010c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ff22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ff24:	4613      	mov	r3, r2
 801ff26:	005b      	lsls	r3, r3, #1
 801ff28:	4413      	add	r3, r2
 801ff2a:	00db      	lsls	r3, r3, #3
 801ff2c:	440b      	add	r3, r1
 801ff2e:	330c      	adds	r3, #12
 801ff30:	681a      	ldr	r2, [r3, #0]
 801ff32:	4975      	ldr	r1, [pc, #468]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ff34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ff36:	019b      	lsls	r3, r3, #6
 801ff38:	440b      	add	r3, r1
 801ff3a:	3318      	adds	r3, #24
 801ff3c:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 801ff3e:	4973      	ldr	r1, [pc, #460]	; (802010c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ff40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ff42:	4613      	mov	r3, r2
 801ff44:	005b      	lsls	r3, r3, #1
 801ff46:	4413      	add	r3, r2
 801ff48:	00db      	lsls	r3, r3, #3
 801ff4a:	440b      	add	r3, r1
 801ff4c:	3308      	adds	r3, #8
 801ff4e:	681a      	ldr	r2, [r3, #0]
 801ff50:	496d      	ldr	r1, [pc, #436]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ff52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ff54:	019b      	lsls	r3, r3, #6
 801ff56:	440b      	add	r3, r1
 801ff58:	3308      	adds	r3, #8
 801ff5a:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 801ff5c:	496b      	ldr	r1, [pc, #428]	; (802010c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ff5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ff60:	4613      	mov	r3, r2
 801ff62:	005b      	lsls	r3, r3, #1
 801ff64:	4413      	add	r3, r2
 801ff66:	00db      	lsls	r3, r3, #3
 801ff68:	440b      	add	r3, r1
 801ff6a:	3308      	adds	r3, #8
 801ff6c:	6819      	ldr	r1, [r3, #0]
 801ff6e:	4868      	ldr	r0, [pc, #416]	; (8020110 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801ff70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ff72:	4613      	mov	r3, r2
 801ff74:	005b      	lsls	r3, r3, #1
 801ff76:	4413      	add	r3, r2
 801ff78:	009b      	lsls	r3, r3, #2
 801ff7a:	4403      	add	r3, r0
 801ff7c:	3304      	adds	r3, #4
 801ff7e:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 801ff80:	4a61      	ldr	r2, [pc, #388]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ff82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ff84:	019b      	lsls	r3, r3, #6
 801ff86:	4413      	add	r3, r2
 801ff88:	3314      	adds	r3, #20
 801ff8a:	781b      	ldrb	r3, [r3, #0]
 801ff8c:	2b02      	cmp	r3, #2
 801ff8e:	d11e      	bne.n	801ffce <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 801ff90:	495e      	ldr	r1, [pc, #376]	; (802010c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ff92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ff94:	4613      	mov	r3, r2
 801ff96:	005b      	lsls	r3, r3, #1
 801ff98:	4413      	add	r3, r2
 801ff9a:	00db      	lsls	r3, r3, #3
 801ff9c:	440b      	add	r3, r1
 801ff9e:	3304      	adds	r3, #4
 801ffa0:	681b      	ldr	r3, [r3, #0]
 801ffa2:	461a      	mov	r2, r3
 801ffa4:	4b4e      	ldr	r3, [pc, #312]	; (80200e0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801ffa6:	681b      	ldr	r3, [r3, #0]
 801ffa8:	4413      	add	r3, r2
 801ffaa:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 801ffac:	4a56      	ldr	r2, [pc, #344]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ffae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ffb0:	019b      	lsls	r3, r3, #6
 801ffb2:	4413      	add	r3, r2
 801ffb4:	3304      	adds	r3, #4
 801ffb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ffb8:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 801ffba:	4955      	ldr	r1, [pc, #340]	; (8020110 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801ffbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ffbe:	4613      	mov	r3, r2
 801ffc0:	005b      	lsls	r3, r3, #1
 801ffc2:	4413      	add	r3, r2
 801ffc4:	009b      	lsls	r3, r3, #2
 801ffc6:	440b      	add	r3, r1
 801ffc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ffca:	601a      	str	r2, [r3, #0]
 801ffcc:	e01f      	b.n	802000e <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
 801ffce:	494f      	ldr	r1, [pc, #316]	; (802010c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ffd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ffd2:	4613      	mov	r3, r2
 801ffd4:	005b      	lsls	r3, r3, #1
 801ffd6:	4413      	add	r3, r2
 801ffd8:	00db      	lsls	r3, r3, #3
 801ffda:	440b      	add	r3, r1
 801ffdc:	3304      	adds	r3, #4
 801ffde:	681a      	ldr	r2, [r3, #0]
 801ffe0:	4949      	ldr	r1, [pc, #292]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ffe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ffe4:	019b      	lsls	r3, r3, #6
 801ffe6:	440b      	add	r3, r1
 801ffe8:	3304      	adds	r3, #4
 801ffea:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 801ffec:	4947      	ldr	r1, [pc, #284]	; (802010c <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ffee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fff0:	4613      	mov	r3, r2
 801fff2:	005b      	lsls	r3, r3, #1
 801fff4:	4413      	add	r3, r2
 801fff6:	00db      	lsls	r3, r3, #3
 801fff8:	440b      	add	r3, r1
 801fffa:	3304      	adds	r3, #4
 801fffc:	6819      	ldr	r1, [r3, #0]
 801fffe:	4844      	ldr	r0, [pc, #272]	; (8020110 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8020000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020002:	4613      	mov	r3, r2
 8020004:	005b      	lsls	r3, r3, #1
 8020006:	4413      	add	r3, r2
 8020008:	009b      	lsls	r3, r3, #2
 802000a:	4403      	add	r3, r0
 802000c:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 802000e:	4a3e      	ldr	r2, [pc, #248]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8020010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020012:	019b      	lsls	r3, r3, #6
 8020014:	4413      	add	r3, r2
 8020016:	f103 0030 	add.w	r0, r3, #48	; 0x30
 802001a:	493c      	ldr	r1, [pc, #240]	; (802010c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802001c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802001e:	4613      	mov	r3, r2
 8020020:	005b      	lsls	r3, r3, #1
 8020022:	4413      	add	r3, r2
 8020024:	00db      	lsls	r3, r3, #3
 8020026:	440b      	add	r3, r1
 8020028:	f103 0210 	add.w	r2, r3, #16
 802002c:	4603      	mov	r3, r0
 802002e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020032:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 8020036:	4a34      	ldr	r2, [pc, #208]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8020038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802003a:	019b      	lsls	r3, r3, #6
 802003c:	4413      	add	r3, r2
 802003e:	3330      	adds	r3, #48	; 0x30
 8020040:	781b      	ldrb	r3, [r3, #0]
 8020042:	2b01      	cmp	r3, #1
 8020044:	d11b      	bne.n	802007e <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 8020046:	4931      	ldr	r1, [pc, #196]	; (802010c <_Z18trained_model_initPFPvjjE+0x2d0>)
 8020048:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802004a:	4613      	mov	r3, r2
 802004c:	005b      	lsls	r3, r3, #1
 802004e:	4413      	add	r3, r2
 8020050:	00db      	lsls	r3, r3, #3
 8020052:	440b      	add	r3, r1
 8020054:	3314      	adds	r3, #20
 8020056:	681b      	ldr	r3, [r3, #0]
 8020058:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 802005a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802005c:	681b      	ldr	r3, [r3, #0]
 802005e:	685a      	ldr	r2, [r3, #4]
 8020060:	4929      	ldr	r1, [pc, #164]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8020062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020064:	019b      	lsls	r3, r3, #6
 8020066:	440b      	add	r3, r1
 8020068:	330c      	adds	r3, #12
 802006a:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 802006c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802006e:	685b      	ldr	r3, [r3, #4]
 8020070:	685a      	ldr	r2, [r3, #4]
 8020072:	4925      	ldr	r1, [pc, #148]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8020074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020076:	019b      	lsls	r3, r3, #6
 8020078:	440b      	add	r3, r1
 802007a:	3310      	adds	r3, #16
 802007c:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 802007e:	4a22      	ldr	r2, [pc, #136]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8020080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020082:	019b      	lsls	r3, r3, #6
 8020084:	4413      	add	r3, r2
 8020086:	3314      	adds	r3, #20
 8020088:	781b      	ldrb	r3, [r3, #0]
 802008a:	2b02      	cmp	r3, #2
 802008c:	d118      	bne.n	80200c0 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 802008e:	4a1e      	ldr	r2, [pc, #120]	; (8020108 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8020090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020092:	019b      	lsls	r3, r3, #6
 8020094:	4413      	add	r3, r2
 8020096:	3304      	adds	r3, #4
 8020098:	6819      	ldr	r1, [r3, #0]
 802009a:	481c      	ldr	r0, [pc, #112]	; (802010c <_Z18trained_model_initPFPvjjE+0x2d0>)
 802009c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802009e:	4613      	mov	r3, r2
 80200a0:	005b      	lsls	r3, r3, #1
 80200a2:	4413      	add	r3, r2
 80200a4:	00db      	lsls	r3, r3, #3
 80200a6:	4403      	add	r3, r0
 80200a8:	330c      	adds	r3, #12
 80200aa:	681b      	ldr	r3, [r3, #0]
 80200ac:	440b      	add	r3, r1
 80200ae:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 80200b0:	4b0d      	ldr	r3, [pc, #52]	; (80200e8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 80200b2:	681b      	ldr	r3, [r3, #0]
 80200b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80200b6:	429a      	cmp	r2, r3
 80200b8:	d902      	bls.n	80200c0 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 80200ba:	4a0b      	ldr	r2, [pc, #44]	; (80200e8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 80200bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200be:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 11; ++i) {
 80200c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80200c2:	3301      	adds	r3, #1
 80200c4:	647b      	str	r3, [r7, #68]	; 0x44
 80200c6:	e6ef      	b.n	801fea8 <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 80200c8:	4b07      	ldr	r3, [pc, #28]	; (80200e8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 80200ca:	681a      	ldr	r2, [r3, #0]
 80200cc:	4b07      	ldr	r3, [pc, #28]	; (80200ec <_Z18trained_model_initPFPvjjE+0x2b0>)
 80200ce:	681b      	ldr	r3, [r3, #0]
 80200d0:	429a      	cmp	r2, r3
 80200d2:	d921      	bls.n	8020118 <_Z18trained_model_initPFPvjjE+0x2dc>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 80200d4:	480f      	ldr	r0, [pc, #60]	; (8020114 <_Z18trained_model_initPFPvjjE+0x2d8>)
 80200d6:	f7e5 ff21 	bl	8005f1c <_Z9ei_printfPKcz>
    return kTfLiteError;
 80200da:	2301      	movs	r3, #1
 80200dc:	e0e1      	b.n	80202a2 <_Z18trained_model_initPFPvjjE+0x466>
 80200de:	bf00      	nop
 80200e0:	20002c14 	.word	0x20002c14
 80200e4:	0802989c 	.word	0x0802989c
 80200e8:	20002c18 	.word	0x20002c18
 80200ec:	20002c1c 	.word	0x20002c1c
 80200f0:	20002c20 	.word	0x20002c20
 80200f4:	0801fc85 	.word	0x0801fc85
 80200f8:	0801fd2d 	.word	0x0801fd2d
 80200fc:	0801fdb9 	.word	0x0801fdb9
 8020100:	0801fdf1 	.word	0x0801fdf1
 8020104:	0801fe15 	.word	0x0801fe15
 8020108:	20002c78 	.word	0x20002c78
 802010c:	20000114 	.word	0x20000114
 8020110:	20002f38 	.word	0x20002f38
 8020114:	080298c4 	.word	0x080298c4
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 8020118:	4c64      	ldr	r4, [pc, #400]	; (80202ac <_Z18trained_model_initPFPvjjE+0x470>)
 802011a:	463b      	mov	r3, r7
 802011c:	4618      	mov	r0, r3
 802011e:	f7fd fe59 	bl	801ddd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 8020122:	4625      	mov	r5, r4
 8020124:	463c      	mov	r4, r7
 8020126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802012a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 802012e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 8020132:	4c5e      	ldr	r4, [pc, #376]	; (80202ac <_Z18trained_model_initPFPvjjE+0x470>)
 8020134:	463b      	mov	r3, r7
 8020136:	4618      	mov	r0, r3
 8020138:	f7fe fc7c 	bl	801ea34 <_ZN6tflite16Register_SOFTMAXEv>
 802013c:	3420      	adds	r4, #32
 802013e:	463d      	mov	r5, r7
 8020140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020144:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for (size_t i = 0; i < 4; ++i) {
 802014c:	2300      	movs	r3, #0
 802014e:	643b      	str	r3, [r7, #64]	; 0x40
 8020150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020152:	2b03      	cmp	r3, #3
 8020154:	d86f      	bhi.n	8020236 <_Z18trained_model_initPFPvjjE+0x3fa>
    tflNodes[i].inputs = nodeData[i].inputs;
 8020156:	4a56      	ldr	r2, [pc, #344]	; (80202b0 <_Z18trained_model_initPFPvjjE+0x474>)
 8020158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802015a:	011b      	lsls	r3, r3, #4
 802015c:	4413      	add	r3, r2
 802015e:	6819      	ldr	r1, [r3, #0]
 8020160:	4854      	ldr	r0, [pc, #336]	; (80202b4 <_Z18trained_model_initPFPvjjE+0x478>)
 8020162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020164:	4613      	mov	r3, r2
 8020166:	00db      	lsls	r3, r3, #3
 8020168:	4413      	add	r3, r2
 802016a:	009b      	lsls	r3, r3, #2
 802016c:	4403      	add	r3, r0
 802016e:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 8020170:	4a4f      	ldr	r2, [pc, #316]	; (80202b0 <_Z18trained_model_initPFPvjjE+0x474>)
 8020172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020174:	011b      	lsls	r3, r3, #4
 8020176:	4413      	add	r3, r2
 8020178:	3304      	adds	r3, #4
 802017a:	6819      	ldr	r1, [r3, #0]
 802017c:	484d      	ldr	r0, [pc, #308]	; (80202b4 <_Z18trained_model_initPFPvjjE+0x478>)
 802017e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020180:	4613      	mov	r3, r2
 8020182:	00db      	lsls	r3, r3, #3
 8020184:	4413      	add	r3, r2
 8020186:	009b      	lsls	r3, r3, #2
 8020188:	4403      	add	r3, r0
 802018a:	3304      	adds	r3, #4
 802018c:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 802018e:	4a48      	ldr	r2, [pc, #288]	; (80202b0 <_Z18trained_model_initPFPvjjE+0x474>)
 8020190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020192:	011b      	lsls	r3, r3, #4
 8020194:	4413      	add	r3, r2
 8020196:	3308      	adds	r3, #8
 8020198:	6819      	ldr	r1, [r3, #0]
 802019a:	4846      	ldr	r0, [pc, #280]	; (80202b4 <_Z18trained_model_initPFPvjjE+0x478>)
 802019c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802019e:	4613      	mov	r3, r2
 80201a0:	00db      	lsls	r3, r3, #3
 80201a2:	4413      	add	r3, r2
 80201a4:	009b      	lsls	r3, r3, #2
 80201a6:	4403      	add	r3, r0
 80201a8:	3314      	adds	r3, #20
 80201aa:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 80201ac:	4941      	ldr	r1, [pc, #260]	; (80202b4 <_Z18trained_model_initPFPvjjE+0x478>)
 80201ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80201b0:	4613      	mov	r3, r2
 80201b2:	00db      	lsls	r3, r3, #3
 80201b4:	4413      	add	r3, r2
 80201b6:	009b      	lsls	r3, r3, #2
 80201b8:	440b      	add	r3, r1
 80201ba:	3318      	adds	r3, #24
 80201bc:	2200      	movs	r2, #0
 80201be:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 80201c0:	493c      	ldr	r1, [pc, #240]	; (80202b4 <_Z18trained_model_initPFPvjjE+0x478>)
 80201c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80201c4:	4613      	mov	r3, r2
 80201c6:	00db      	lsls	r3, r3, #3
 80201c8:	4413      	add	r3, r2
 80201ca:	009b      	lsls	r3, r3, #2
 80201cc:	440b      	add	r3, r1
 80201ce:	331c      	adds	r3, #28
 80201d0:	2200      	movs	r2, #0
 80201d2:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 80201d4:	4a36      	ldr	r2, [pc, #216]	; (80202b0 <_Z18trained_model_initPFPvjjE+0x474>)
 80201d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80201d8:	011b      	lsls	r3, r3, #4
 80201da:	4413      	add	r3, r2
 80201dc:	330c      	adds	r3, #12
 80201de:	781b      	ldrb	r3, [r3, #0]
 80201e0:	4a32      	ldr	r2, [pc, #200]	; (80202ac <_Z18trained_model_initPFPvjjE+0x470>)
 80201e2:	015b      	lsls	r3, r3, #5
 80201e4:	4413      	add	r3, r2
 80201e6:	681b      	ldr	r3, [r3, #0]
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	d020      	beq.n	802022e <_Z18trained_model_initPFPvjjE+0x3f2>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 80201ec:	4a30      	ldr	r2, [pc, #192]	; (80202b0 <_Z18trained_model_initPFPvjjE+0x474>)
 80201ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80201f0:	011b      	lsls	r3, r3, #4
 80201f2:	4413      	add	r3, r2
 80201f4:	330c      	adds	r3, #12
 80201f6:	781b      	ldrb	r3, [r3, #0]
 80201f8:	4a2c      	ldr	r2, [pc, #176]	; (80202ac <_Z18trained_model_initPFPvjjE+0x470>)
 80201fa:	015b      	lsls	r3, r3, #5
 80201fc:	4413      	add	r3, r2
 80201fe:	681c      	ldr	r4, [r3, #0]
 8020200:	492c      	ldr	r1, [pc, #176]	; (80202b4 <_Z18trained_model_initPFPvjjE+0x478>)
 8020202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020204:	4613      	mov	r3, r2
 8020206:	00db      	lsls	r3, r3, #3
 8020208:	4413      	add	r3, r2
 802020a:	009b      	lsls	r3, r3, #2
 802020c:	440b      	add	r3, r1
 802020e:	3314      	adds	r3, #20
 8020210:	681b      	ldr	r3, [r3, #0]
 8020212:	2200      	movs	r2, #0
 8020214:	4619      	mov	r1, r3
 8020216:	4828      	ldr	r0, [pc, #160]	; (80202b8 <_Z18trained_model_initPFPvjjE+0x47c>)
 8020218:	47a0      	blx	r4
 802021a:	4601      	mov	r1, r0
 802021c:	4825      	ldr	r0, [pc, #148]	; (80202b4 <_Z18trained_model_initPFPvjjE+0x478>)
 802021e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020220:	4613      	mov	r3, r2
 8020222:	00db      	lsls	r3, r3, #3
 8020224:	4413      	add	r3, r2
 8020226:	009b      	lsls	r3, r3, #2
 8020228:	4403      	add	r3, r0
 802022a:	3310      	adds	r3, #16
 802022c:	6019      	str	r1, [r3, #0]
  for (size_t i = 0; i < 4; ++i) {
 802022e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020230:	3301      	adds	r3, #1
 8020232:	643b      	str	r3, [r7, #64]	; 0x40
 8020234:	e78c      	b.n	8020150 <_Z18trained_model_initPFPvjjE+0x314>
    }
  }
  for (size_t i = 0; i < 4; ++i) {
 8020236:	2300      	movs	r3, #0
 8020238:	63fb      	str	r3, [r7, #60]	; 0x3c
 802023a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802023c:	2b03      	cmp	r3, #3
 802023e:	d82f      	bhi.n	80202a0 <_Z18trained_model_initPFPvjjE+0x464>
    if (registrations[nodeData[i].used_op_index].prepare) {
 8020240:	4a1b      	ldr	r2, [pc, #108]	; (80202b0 <_Z18trained_model_initPFPvjjE+0x474>)
 8020242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020244:	011b      	lsls	r3, r3, #4
 8020246:	4413      	add	r3, r2
 8020248:	330c      	adds	r3, #12
 802024a:	781b      	ldrb	r3, [r3, #0]
 802024c:	4a17      	ldr	r2, [pc, #92]	; (80202ac <_Z18trained_model_initPFPvjjE+0x470>)
 802024e:	015b      	lsls	r3, r3, #5
 8020250:	4413      	add	r3, r2
 8020252:	3308      	adds	r3, #8
 8020254:	681b      	ldr	r3, [r3, #0]
 8020256:	2b00      	cmp	r3, #0
 8020258:	d01e      	beq.n	8020298 <_Z18trained_model_initPFPvjjE+0x45c>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 802025a:	4a15      	ldr	r2, [pc, #84]	; (80202b0 <_Z18trained_model_initPFPvjjE+0x474>)
 802025c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802025e:	011b      	lsls	r3, r3, #4
 8020260:	4413      	add	r3, r2
 8020262:	330c      	adds	r3, #12
 8020264:	781b      	ldrb	r3, [r3, #0]
 8020266:	4a11      	ldr	r2, [pc, #68]	; (80202ac <_Z18trained_model_initPFPvjjE+0x470>)
 8020268:	015b      	lsls	r3, r3, #5
 802026a:	4413      	add	r3, r2
 802026c:	3308      	adds	r3, #8
 802026e:	681c      	ldr	r4, [r3, #0]
 8020270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020272:	4613      	mov	r3, r2
 8020274:	00db      	lsls	r3, r3, #3
 8020276:	4413      	add	r3, r2
 8020278:	009b      	lsls	r3, r3, #2
 802027a:	4a0e      	ldr	r2, [pc, #56]	; (80202b4 <_Z18trained_model_initPFPvjjE+0x478>)
 802027c:	4413      	add	r3, r2
 802027e:	4619      	mov	r1, r3
 8020280:	480d      	ldr	r0, [pc, #52]	; (80202b8 <_Z18trained_model_initPFPvjjE+0x47c>)
 8020282:	47a0      	blx	r4
 8020284:	4603      	mov	r3, r0
 8020286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 802028a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802028e:	2b00      	cmp	r3, #0
 8020290:	d002      	beq.n	8020298 <_Z18trained_model_initPFPvjjE+0x45c>
        return status;
 8020292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8020296:	e004      	b.n	80202a2 <_Z18trained_model_initPFPvjjE+0x466>
  for (size_t i = 0; i < 4; ++i) {
 8020298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802029a:	3301      	adds	r3, #1
 802029c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802029e:	e7cc      	b.n	802023a <_Z18trained_model_initPFPvjjE+0x3fe>
      }
    }
  }
  return kTfLiteOk;
 80202a0:	2300      	movs	r3, #0
}
 80202a2:	4618      	mov	r0, r3
 80202a4:	3748      	adds	r7, #72	; 0x48
 80202a6:	46bd      	mov	sp, r7
 80202a8:	bdb0      	pop	{r4, r5, r7, pc}
 80202aa:	bf00      	nop
 80202ac:	20002fbc 	.word	0x20002fbc
 80202b0:	08029fb0 	.word	0x08029fb0
 80202b4:	20002ffc 	.word	0x20002ffc
 80202b8:	20002c20 	.word	0x20002c20

080202bc <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 80202bc:	b480      	push	{r7}
 80202be:	b083      	sub	sp, #12
 80202c0:	af00      	add	r7, sp, #0
 80202c2:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 80202c4:	4b05      	ldr	r3, [pc, #20]	; (80202dc <_Z19trained_model_inputi+0x20>)
 80202c6:	689a      	ldr	r2, [r3, #8]
 80202c8:	2300      	movs	r3, #0
 80202ca:	019b      	lsls	r3, r3, #6
 80202cc:	4413      	add	r3, r2
}
 80202ce:	4618      	mov	r0, r3
 80202d0:	370c      	adds	r7, #12
 80202d2:	46bd      	mov	sp, r7
 80202d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202d8:	4770      	bx	lr
 80202da:	bf00      	nop
 80202dc:	20002c20 	.word	0x20002c20

080202e0 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 80202e0:	b480      	push	{r7}
 80202e2:	b083      	sub	sp, #12
 80202e4:	af00      	add	r7, sp, #0
 80202e6:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 80202e8:	4b05      	ldr	r3, [pc, #20]	; (8020300 <_Z20trained_model_outputi+0x20>)
 80202ea:	689a      	ldr	r2, [r3, #8]
 80202ec:	230a      	movs	r3, #10
 80202ee:	019b      	lsls	r3, r3, #6
 80202f0:	4413      	add	r3, r2
}
 80202f2:	4618      	mov	r0, r3
 80202f4:	370c      	adds	r7, #12
 80202f6:	46bd      	mov	sp, r7
 80202f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202fc:	4770      	bx	lr
 80202fe:	bf00      	nop
 8020300:	20002c20 	.word	0x20002c20

08020304 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 8020304:	b590      	push	{r4, r7, lr}
 8020306:	b083      	sub	sp, #12
 8020308:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 4; ++i) {
 802030a:	2300      	movs	r3, #0
 802030c:	607b      	str	r3, [r7, #4]
 802030e:	687b      	ldr	r3, [r7, #4]
 8020310:	2b03      	cmp	r3, #3
 8020312:	d81f      	bhi.n	8020354 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 8020314:	4a12      	ldr	r2, [pc, #72]	; (8020360 <_Z20trained_model_invokev+0x5c>)
 8020316:	687b      	ldr	r3, [r7, #4]
 8020318:	011b      	lsls	r3, r3, #4
 802031a:	4413      	add	r3, r2
 802031c:	330c      	adds	r3, #12
 802031e:	781b      	ldrb	r3, [r3, #0]
 8020320:	4a10      	ldr	r2, [pc, #64]	; (8020364 <_Z20trained_model_invokev+0x60>)
 8020322:	015b      	lsls	r3, r3, #5
 8020324:	4413      	add	r3, r2
 8020326:	330c      	adds	r3, #12
 8020328:	681c      	ldr	r4, [r3, #0]
 802032a:	687a      	ldr	r2, [r7, #4]
 802032c:	4613      	mov	r3, r2
 802032e:	00db      	lsls	r3, r3, #3
 8020330:	4413      	add	r3, r2
 8020332:	009b      	lsls	r3, r3, #2
 8020334:	4a0c      	ldr	r2, [pc, #48]	; (8020368 <_Z20trained_model_invokev+0x64>)
 8020336:	4413      	add	r3, r2
 8020338:	4619      	mov	r1, r3
 802033a:	480c      	ldr	r0, [pc, #48]	; (802036c <_Z20trained_model_invokev+0x68>)
 802033c:	47a0      	blx	r4
 802033e:	4603      	mov	r3, r0
 8020340:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 8020342:	78fb      	ldrb	r3, [r7, #3]
 8020344:	2b00      	cmp	r3, #0
 8020346:	d001      	beq.n	802034c <_Z20trained_model_invokev+0x48>
      return status;
 8020348:	78fb      	ldrb	r3, [r7, #3]
 802034a:	e004      	b.n	8020356 <_Z20trained_model_invokev+0x52>
  for (size_t i = 0; i < 4; ++i) {
 802034c:	687b      	ldr	r3, [r7, #4]
 802034e:	3301      	adds	r3, #1
 8020350:	607b      	str	r3, [r7, #4]
 8020352:	e7dc      	b.n	802030e <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 8020354:	2300      	movs	r3, #0
}
 8020356:	4618      	mov	r0, r3
 8020358:	370c      	adds	r7, #12
 802035a:	46bd      	mov	sp, r7
 802035c:	bd90      	pop	{r4, r7, pc}
 802035e:	bf00      	nop
 8020360:	08029fb0 	.word	0x08029fb0
 8020364:	20002fbc 	.word	0x20002fbc
 8020368:	20002ffc 	.word	0x20002ffc
 802036c:	20002c20 	.word	0x20002c20

08020370 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 8020370:	b580      	push	{r7, lr}
 8020372:	b084      	sub	sp, #16
 8020374:	af00      	add	r7, sp, #0
 8020376:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8020378:	4b10      	ldr	r3, [pc, #64]	; (80203bc <_Z19trained_model_resetPFvPvE+0x4c>)
 802037a:	681a      	ldr	r2, [r3, #0]
 802037c:	687b      	ldr	r3, [r7, #4]
 802037e:	4610      	mov	r0, r2
 8020380:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 8020382:	4b0f      	ldr	r3, [pc, #60]	; (80203c0 <_Z19trained_model_resetPFvPvE+0x50>)
 8020384:	2200      	movs	r2, #0
 8020386:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 8020388:	2300      	movs	r3, #0
 802038a:	60fb      	str	r3, [r7, #12]
 802038c:	4b0d      	ldr	r3, [pc, #52]	; (80203c4 <_Z19trained_model_resetPFvPvE+0x54>)
 802038e:	681b      	ldr	r3, [r3, #0]
 8020390:	68fa      	ldr	r2, [r7, #12]
 8020392:	429a      	cmp	r2, r3
 8020394:	d20a      	bcs.n	80203ac <_Z19trained_model_resetPFvPvE+0x3c>
    ei_free(overflow_buffers[ix]);
 8020396:	4a0c      	ldr	r2, [pc, #48]	; (80203c8 <_Z19trained_model_resetPFvPvE+0x58>)
 8020398:	68fb      	ldr	r3, [r7, #12]
 802039a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802039e:	4618      	mov	r0, r3
 80203a0:	f7fa fec4 	bl	801b12c <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 80203a4:	68fb      	ldr	r3, [r7, #12]
 80203a6:	3301      	adds	r3, #1
 80203a8:	60fb      	str	r3, [r7, #12]
 80203aa:	e7ef      	b.n	802038c <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers_ix = 0;
 80203ac:	4b05      	ldr	r3, [pc, #20]	; (80203c4 <_Z19trained_model_resetPFvPvE+0x54>)
 80203ae:	2200      	movs	r2, #0
 80203b0:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80203b2:	2300      	movs	r3, #0
}
 80203b4:	4618      	mov	r0, r3
 80203b6:	3710      	adds	r7, #16
 80203b8:	46bd      	mov	sp, r7
 80203ba:	bd80      	pop	{r7, pc}
 80203bc:	20002c14 	.word	0x20002c14
 80203c0:	200030d8 	.word	0x200030d8
 80203c4:	200030b4 	.word	0x200030b4
 80203c8:	2000308c 	.word	0x2000308c

080203cc <_Z41__static_initialization_and_destruction_0ii>:
 80203cc:	b480      	push	{r7}
 80203ce:	b083      	sub	sp, #12
 80203d0:	af00      	add	r7, sp, #0
 80203d2:	6078      	str	r0, [r7, #4]
 80203d4:	6039      	str	r1, [r7, #0]
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	2b01      	cmp	r3, #1
 80203da:	d11e      	bne.n	802041a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80203dc:	683b      	ldr	r3, [r7, #0]
 80203de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80203e2:	4293      	cmp	r3, r2
 80203e4:	d119      	bne.n	802041a <_Z41__static_initialization_and_destruction_0ii+0x4e>
};const NodeInfo_t nodeData[] = {
 80203e6:	4b10      	ldr	r3, [pc, #64]	; (8020428 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80203e8:	681b      	ldr	r3, [r3, #0]
 80203ea:	4a10      	ldr	r2, [pc, #64]	; (802042c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80203ec:	6053      	str	r3, [r2, #4]
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
 80203ee:	4b0e      	ldr	r3, [pc, #56]	; (8020428 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80203f0:	681b      	ldr	r3, [r3, #0]
 80203f2:	3330      	adds	r3, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 80203f4:	4a0d      	ldr	r2, [pc, #52]	; (802042c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80203f6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 80203fa:	4b0b      	ldr	r3, [pc, #44]	; (8020428 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80203fc:	681b      	ldr	r3, [r3, #0]
 80203fe:	4a0b      	ldr	r2, [pc, #44]	; (802042c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8020400:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 8020404:	4b08      	ldr	r3, [pc, #32]	; (8020428 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8020406:	681b      	ldr	r3, [r3, #0]
 8020408:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 802040a:	4a08      	ldr	r2, [pc, #32]	; (802042c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 802040c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8020410:	4b05      	ldr	r3, [pc, #20]	; (8020428 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8020412:	681b      	ldr	r3, [r3, #0]
 8020414:	4a05      	ldr	r2, [pc, #20]	; (802042c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8020416:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 802041a:	bf00      	nop
 802041c:	370c      	adds	r7, #12
 802041e:	46bd      	mov	sp, r7
 8020420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020424:	4770      	bx	lr
 8020426:	bf00      	nop
 8020428:	20002c14 	.word	0x20002c14
 802042c:	20000114 	.word	0x20000114

08020430 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8020430:	b580      	push	{r7, lr}
 8020432:	af00      	add	r7, sp, #0
 8020434:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8020438:	2001      	movs	r0, #1
 802043a:	f7ff ffc7 	bl	80203cc <_Z41__static_initialization_and_destruction_0ii>
 802043e:	bd80      	pop	{r7, pc}

08020440 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8020440:	b580      	push	{r7, lr}
 8020442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8020444:	2200      	movs	r2, #0
 8020446:	4912      	ldr	r1, [pc, #72]	; (8020490 <MX_USB_DEVICE_Init+0x50>)
 8020448:	4812      	ldr	r0, [pc, #72]	; (8020494 <MX_USB_DEVICE_Init+0x54>)
 802044a:	f7ee fb41 	bl	800ead0 <USBD_Init>
 802044e:	4603      	mov	r3, r0
 8020450:	2b00      	cmp	r3, #0
 8020452:	d001      	beq.n	8020458 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8020454:	f7e6 f860 	bl	8006518 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8020458:	490f      	ldr	r1, [pc, #60]	; (8020498 <MX_USB_DEVICE_Init+0x58>)
 802045a:	480e      	ldr	r0, [pc, #56]	; (8020494 <MX_USB_DEVICE_Init+0x54>)
 802045c:	f7ee fb68 	bl	800eb30 <USBD_RegisterClass>
 8020460:	4603      	mov	r3, r0
 8020462:	2b00      	cmp	r3, #0
 8020464:	d001      	beq.n	802046a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8020466:	f7e6 f857 	bl	8006518 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 802046a:	490c      	ldr	r1, [pc, #48]	; (802049c <MX_USB_DEVICE_Init+0x5c>)
 802046c:	4809      	ldr	r0, [pc, #36]	; (8020494 <MX_USB_DEVICE_Init+0x54>)
 802046e:	f7ee fa59 	bl	800e924 <USBD_CDC_RegisterInterface>
 8020472:	4603      	mov	r3, r0
 8020474:	2b00      	cmp	r3, #0
 8020476:	d001      	beq.n	802047c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8020478:	f7e6 f84e 	bl	8006518 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 802047c:	4805      	ldr	r0, [pc, #20]	; (8020494 <MX_USB_DEVICE_Init+0x54>)
 802047e:	f7ee fb8d 	bl	800eb9c <USBD_Start>
 8020482:	4603      	mov	r3, r0
 8020484:	2b00      	cmp	r3, #0
 8020486:	d001      	beq.n	802048c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8020488:	f7e6 f846 	bl	8006518 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 802048c:	bf00      	nop
 802048e:	bd80      	pop	{r7, pc}
 8020490:	20000230 	.word	0x20000230
 8020494:	200030dc 	.word	0x200030dc
 8020498:	20000088 	.word	0x20000088
 802049c:	2000021c 	.word	0x2000021c

080204a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80204a0:	b580      	push	{r7, lr}
 80204a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80204a4:	2200      	movs	r2, #0
 80204a6:	4905      	ldr	r1, [pc, #20]	; (80204bc <CDC_Init_FS+0x1c>)
 80204a8:	4805      	ldr	r0, [pc, #20]	; (80204c0 <CDC_Init_FS+0x20>)
 80204aa:	f7ee fa55 	bl	800e958 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80204ae:	4905      	ldr	r1, [pc, #20]	; (80204c4 <CDC_Init_FS+0x24>)
 80204b0:	4803      	ldr	r0, [pc, #12]	; (80204c0 <CDC_Init_FS+0x20>)
 80204b2:	f7ee fa73 	bl	800e99c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80204b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80204b8:	4618      	mov	r0, r3
 80204ba:	bd80      	pop	{r7, pc}
 80204bc:	20003bb8 	.word	0x20003bb8
 80204c0:	200030dc 	.word	0x200030dc
 80204c4:	200033b8 	.word	0x200033b8

080204c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80204c8:	b480      	push	{r7}
 80204ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80204cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80204ce:	4618      	mov	r0, r3
 80204d0:	46bd      	mov	sp, r7
 80204d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204d6:	4770      	bx	lr

080204d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80204d8:	b480      	push	{r7}
 80204da:	b083      	sub	sp, #12
 80204dc:	af00      	add	r7, sp, #0
 80204de:	4603      	mov	r3, r0
 80204e0:	6039      	str	r1, [r7, #0]
 80204e2:	71fb      	strb	r3, [r7, #7]
 80204e4:	4613      	mov	r3, r2
 80204e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80204e8:	79fb      	ldrb	r3, [r7, #7]
 80204ea:	2b23      	cmp	r3, #35	; 0x23
 80204ec:	d84a      	bhi.n	8020584 <CDC_Control_FS+0xac>
 80204ee:	a201      	add	r2, pc, #4	; (adr r2, 80204f4 <CDC_Control_FS+0x1c>)
 80204f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80204f4:	08020585 	.word	0x08020585
 80204f8:	08020585 	.word	0x08020585
 80204fc:	08020585 	.word	0x08020585
 8020500:	08020585 	.word	0x08020585
 8020504:	08020585 	.word	0x08020585
 8020508:	08020585 	.word	0x08020585
 802050c:	08020585 	.word	0x08020585
 8020510:	08020585 	.word	0x08020585
 8020514:	08020585 	.word	0x08020585
 8020518:	08020585 	.word	0x08020585
 802051c:	08020585 	.word	0x08020585
 8020520:	08020585 	.word	0x08020585
 8020524:	08020585 	.word	0x08020585
 8020528:	08020585 	.word	0x08020585
 802052c:	08020585 	.word	0x08020585
 8020530:	08020585 	.word	0x08020585
 8020534:	08020585 	.word	0x08020585
 8020538:	08020585 	.word	0x08020585
 802053c:	08020585 	.word	0x08020585
 8020540:	08020585 	.word	0x08020585
 8020544:	08020585 	.word	0x08020585
 8020548:	08020585 	.word	0x08020585
 802054c:	08020585 	.word	0x08020585
 8020550:	08020585 	.word	0x08020585
 8020554:	08020585 	.word	0x08020585
 8020558:	08020585 	.word	0x08020585
 802055c:	08020585 	.word	0x08020585
 8020560:	08020585 	.word	0x08020585
 8020564:	08020585 	.word	0x08020585
 8020568:	08020585 	.word	0x08020585
 802056c:	08020585 	.word	0x08020585
 8020570:	08020585 	.word	0x08020585
 8020574:	08020585 	.word	0x08020585
 8020578:	08020585 	.word	0x08020585
 802057c:	08020585 	.word	0x08020585
 8020580:	08020585 	.word	0x08020585
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8020584:	bf00      	nop
  }

  return (USBD_OK);
 8020586:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8020588:	4618      	mov	r0, r3
 802058a:	370c      	adds	r7, #12
 802058c:	46bd      	mov	sp, r7
 802058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020592:	4770      	bx	lr

08020594 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	b082      	sub	sp, #8
 8020598:	af00      	add	r7, sp, #0
 802059a:	6078      	str	r0, [r7, #4]
 802059c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 802059e:	6879      	ldr	r1, [r7, #4]
 80205a0:	4805      	ldr	r0, [pc, #20]	; (80205b8 <CDC_Receive_FS+0x24>)
 80205a2:	f7ee f9fb 	bl	800e99c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80205a6:	4804      	ldr	r0, [pc, #16]	; (80205b8 <CDC_Receive_FS+0x24>)
 80205a8:	f7ee fa5c 	bl	800ea64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80205ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80205ae:	4618      	mov	r0, r3
 80205b0:	3708      	adds	r7, #8
 80205b2:	46bd      	mov	sp, r7
 80205b4:	bd80      	pop	{r7, pc}
 80205b6:	bf00      	nop
 80205b8:	200030dc 	.word	0x200030dc

080205bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80205bc:	b580      	push	{r7, lr}
 80205be:	b084      	sub	sp, #16
 80205c0:	af00      	add	r7, sp, #0
 80205c2:	6078      	str	r0, [r7, #4]
 80205c4:	460b      	mov	r3, r1
 80205c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80205c8:	2300      	movs	r3, #0
 80205ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80205cc:	4b0d      	ldr	r3, [pc, #52]	; (8020604 <CDC_Transmit_FS+0x48>)
 80205ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80205d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80205d4:	68bb      	ldr	r3, [r7, #8]
 80205d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80205da:	2b00      	cmp	r3, #0
 80205dc:	d001      	beq.n	80205e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80205de:	2301      	movs	r3, #1
 80205e0:	e00b      	b.n	80205fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80205e2:	887b      	ldrh	r3, [r7, #2]
 80205e4:	461a      	mov	r2, r3
 80205e6:	6879      	ldr	r1, [r7, #4]
 80205e8:	4806      	ldr	r0, [pc, #24]	; (8020604 <CDC_Transmit_FS+0x48>)
 80205ea:	f7ee f9b5 	bl	800e958 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80205ee:	4805      	ldr	r0, [pc, #20]	; (8020604 <CDC_Transmit_FS+0x48>)
 80205f0:	f7ee f9f2 	bl	800e9d8 <USBD_CDC_TransmitPacket>
 80205f4:	4603      	mov	r3, r0
 80205f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80205f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80205fa:	4618      	mov	r0, r3
 80205fc:	3710      	adds	r7, #16
 80205fe:	46bd      	mov	sp, r7
 8020600:	bd80      	pop	{r7, pc}
 8020602:	bf00      	nop
 8020604:	200030dc 	.word	0x200030dc

08020608 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8020608:	b480      	push	{r7}
 802060a:	b087      	sub	sp, #28
 802060c:	af00      	add	r7, sp, #0
 802060e:	60f8      	str	r0, [r7, #12]
 8020610:	60b9      	str	r1, [r7, #8]
 8020612:	4613      	mov	r3, r2
 8020614:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8020616:	2300      	movs	r3, #0
 8020618:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 802061a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802061e:	4618      	mov	r0, r3
 8020620:	371c      	adds	r7, #28
 8020622:	46bd      	mov	sp, r7
 8020624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020628:	4770      	bx	lr
	...

0802062c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802062c:	b480      	push	{r7}
 802062e:	b083      	sub	sp, #12
 8020630:	af00      	add	r7, sp, #0
 8020632:	4603      	mov	r3, r0
 8020634:	6039      	str	r1, [r7, #0]
 8020636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8020638:	683b      	ldr	r3, [r7, #0]
 802063a:	2212      	movs	r2, #18
 802063c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802063e:	4b03      	ldr	r3, [pc, #12]	; (802064c <USBD_FS_DeviceDescriptor+0x20>)
}
 8020640:	4618      	mov	r0, r3
 8020642:	370c      	adds	r7, #12
 8020644:	46bd      	mov	sp, r7
 8020646:	f85d 7b04 	ldr.w	r7, [sp], #4
 802064a:	4770      	bx	lr
 802064c:	2000024c 	.word	0x2000024c

08020650 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020650:	b480      	push	{r7}
 8020652:	b083      	sub	sp, #12
 8020654:	af00      	add	r7, sp, #0
 8020656:	4603      	mov	r3, r0
 8020658:	6039      	str	r1, [r7, #0]
 802065a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802065c:	683b      	ldr	r3, [r7, #0]
 802065e:	2204      	movs	r2, #4
 8020660:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8020662:	4b03      	ldr	r3, [pc, #12]	; (8020670 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8020664:	4618      	mov	r0, r3
 8020666:	370c      	adds	r7, #12
 8020668:	46bd      	mov	sp, r7
 802066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802066e:	4770      	bx	lr
 8020670:	20000260 	.word	0x20000260

08020674 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020674:	b580      	push	{r7, lr}
 8020676:	b082      	sub	sp, #8
 8020678:	af00      	add	r7, sp, #0
 802067a:	4603      	mov	r3, r0
 802067c:	6039      	str	r1, [r7, #0]
 802067e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8020680:	79fb      	ldrb	r3, [r7, #7]
 8020682:	2b00      	cmp	r3, #0
 8020684:	d105      	bne.n	8020692 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8020686:	683a      	ldr	r2, [r7, #0]
 8020688:	4907      	ldr	r1, [pc, #28]	; (80206a8 <USBD_FS_ProductStrDescriptor+0x34>)
 802068a:	4808      	ldr	r0, [pc, #32]	; (80206ac <USBD_FS_ProductStrDescriptor+0x38>)
 802068c:	f7ef fc32 	bl	800fef4 <USBD_GetString>
 8020690:	e004      	b.n	802069c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8020692:	683a      	ldr	r2, [r7, #0]
 8020694:	4904      	ldr	r1, [pc, #16]	; (80206a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8020696:	4805      	ldr	r0, [pc, #20]	; (80206ac <USBD_FS_ProductStrDescriptor+0x38>)
 8020698:	f7ef fc2c 	bl	800fef4 <USBD_GetString>
  }
  return USBD_StrDesc;
 802069c:	4b02      	ldr	r3, [pc, #8]	; (80206a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802069e:	4618      	mov	r0, r3
 80206a0:	3708      	adds	r7, #8
 80206a2:	46bd      	mov	sp, r7
 80206a4:	bd80      	pop	{r7, pc}
 80206a6:	bf00      	nop
 80206a8:	200043b8 	.word	0x200043b8
 80206ac:	08029918 	.word	0x08029918

080206b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80206b0:	b580      	push	{r7, lr}
 80206b2:	b082      	sub	sp, #8
 80206b4:	af00      	add	r7, sp, #0
 80206b6:	4603      	mov	r3, r0
 80206b8:	6039      	str	r1, [r7, #0]
 80206ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80206bc:	683a      	ldr	r2, [r7, #0]
 80206be:	4904      	ldr	r1, [pc, #16]	; (80206d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80206c0:	4804      	ldr	r0, [pc, #16]	; (80206d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80206c2:	f7ef fc17 	bl	800fef4 <USBD_GetString>
  return USBD_StrDesc;
 80206c6:	4b02      	ldr	r3, [pc, #8]	; (80206d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80206c8:	4618      	mov	r0, r3
 80206ca:	3708      	adds	r7, #8
 80206cc:	46bd      	mov	sp, r7
 80206ce:	bd80      	pop	{r7, pc}
 80206d0:	200043b8 	.word	0x200043b8
 80206d4:	08029930 	.word	0x08029930

080206d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80206d8:	b580      	push	{r7, lr}
 80206da:	b082      	sub	sp, #8
 80206dc:	af00      	add	r7, sp, #0
 80206de:	4603      	mov	r3, r0
 80206e0:	6039      	str	r1, [r7, #0]
 80206e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80206e4:	683b      	ldr	r3, [r7, #0]
 80206e6:	221a      	movs	r2, #26
 80206e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80206ea:	f000 f843 	bl	8020774 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80206ee:	4b02      	ldr	r3, [pc, #8]	; (80206f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80206f0:	4618      	mov	r0, r3
 80206f2:	3708      	adds	r7, #8
 80206f4:	46bd      	mov	sp, r7
 80206f6:	bd80      	pop	{r7, pc}
 80206f8:	20000264 	.word	0x20000264

080206fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80206fc:	b580      	push	{r7, lr}
 80206fe:	b082      	sub	sp, #8
 8020700:	af00      	add	r7, sp, #0
 8020702:	4603      	mov	r3, r0
 8020704:	6039      	str	r1, [r7, #0]
 8020706:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8020708:	79fb      	ldrb	r3, [r7, #7]
 802070a:	2b00      	cmp	r3, #0
 802070c:	d105      	bne.n	802071a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802070e:	683a      	ldr	r2, [r7, #0]
 8020710:	4907      	ldr	r1, [pc, #28]	; (8020730 <USBD_FS_ConfigStrDescriptor+0x34>)
 8020712:	4808      	ldr	r0, [pc, #32]	; (8020734 <USBD_FS_ConfigStrDescriptor+0x38>)
 8020714:	f7ef fbee 	bl	800fef4 <USBD_GetString>
 8020718:	e004      	b.n	8020724 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802071a:	683a      	ldr	r2, [r7, #0]
 802071c:	4904      	ldr	r1, [pc, #16]	; (8020730 <USBD_FS_ConfigStrDescriptor+0x34>)
 802071e:	4805      	ldr	r0, [pc, #20]	; (8020734 <USBD_FS_ConfigStrDescriptor+0x38>)
 8020720:	f7ef fbe8 	bl	800fef4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8020724:	4b02      	ldr	r3, [pc, #8]	; (8020730 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8020726:	4618      	mov	r0, r3
 8020728:	3708      	adds	r7, #8
 802072a:	46bd      	mov	sp, r7
 802072c:	bd80      	pop	{r7, pc}
 802072e:	bf00      	nop
 8020730:	200043b8 	.word	0x200043b8
 8020734:	08029944 	.word	0x08029944

08020738 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020738:	b580      	push	{r7, lr}
 802073a:	b082      	sub	sp, #8
 802073c:	af00      	add	r7, sp, #0
 802073e:	4603      	mov	r3, r0
 8020740:	6039      	str	r1, [r7, #0]
 8020742:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8020744:	79fb      	ldrb	r3, [r7, #7]
 8020746:	2b00      	cmp	r3, #0
 8020748:	d105      	bne.n	8020756 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802074a:	683a      	ldr	r2, [r7, #0]
 802074c:	4907      	ldr	r1, [pc, #28]	; (802076c <USBD_FS_InterfaceStrDescriptor+0x34>)
 802074e:	4808      	ldr	r0, [pc, #32]	; (8020770 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8020750:	f7ef fbd0 	bl	800fef4 <USBD_GetString>
 8020754:	e004      	b.n	8020760 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8020756:	683a      	ldr	r2, [r7, #0]
 8020758:	4904      	ldr	r1, [pc, #16]	; (802076c <USBD_FS_InterfaceStrDescriptor+0x34>)
 802075a:	4805      	ldr	r0, [pc, #20]	; (8020770 <USBD_FS_InterfaceStrDescriptor+0x38>)
 802075c:	f7ef fbca 	bl	800fef4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8020760:	4b02      	ldr	r3, [pc, #8]	; (802076c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8020762:	4618      	mov	r0, r3
 8020764:	3708      	adds	r7, #8
 8020766:	46bd      	mov	sp, r7
 8020768:	bd80      	pop	{r7, pc}
 802076a:	bf00      	nop
 802076c:	200043b8 	.word	0x200043b8
 8020770:	08029950 	.word	0x08029950

08020774 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8020774:	b580      	push	{r7, lr}
 8020776:	b084      	sub	sp, #16
 8020778:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802077a:	4b0f      	ldr	r3, [pc, #60]	; (80207b8 <Get_SerialNum+0x44>)
 802077c:	681b      	ldr	r3, [r3, #0]
 802077e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8020780:	4b0e      	ldr	r3, [pc, #56]	; (80207bc <Get_SerialNum+0x48>)
 8020782:	681b      	ldr	r3, [r3, #0]
 8020784:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8020786:	4b0e      	ldr	r3, [pc, #56]	; (80207c0 <Get_SerialNum+0x4c>)
 8020788:	681b      	ldr	r3, [r3, #0]
 802078a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 802078c:	68fa      	ldr	r2, [r7, #12]
 802078e:	687b      	ldr	r3, [r7, #4]
 8020790:	4413      	add	r3, r2
 8020792:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8020794:	68fb      	ldr	r3, [r7, #12]
 8020796:	2b00      	cmp	r3, #0
 8020798:	d009      	beq.n	80207ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802079a:	2208      	movs	r2, #8
 802079c:	4909      	ldr	r1, [pc, #36]	; (80207c4 <Get_SerialNum+0x50>)
 802079e:	68f8      	ldr	r0, [r7, #12]
 80207a0:	f000 f814 	bl	80207cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80207a4:	2204      	movs	r2, #4
 80207a6:	4908      	ldr	r1, [pc, #32]	; (80207c8 <Get_SerialNum+0x54>)
 80207a8:	68b8      	ldr	r0, [r7, #8]
 80207aa:	f000 f80f 	bl	80207cc <IntToUnicode>
  }
}
 80207ae:	bf00      	nop
 80207b0:	3710      	adds	r7, #16
 80207b2:	46bd      	mov	sp, r7
 80207b4:	bd80      	pop	{r7, pc}
 80207b6:	bf00      	nop
 80207b8:	1fff7a10 	.word	0x1fff7a10
 80207bc:	1fff7a14 	.word	0x1fff7a14
 80207c0:	1fff7a18 	.word	0x1fff7a18
 80207c4:	20000266 	.word	0x20000266
 80207c8:	20000276 	.word	0x20000276

080207cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80207cc:	b480      	push	{r7}
 80207ce:	b087      	sub	sp, #28
 80207d0:	af00      	add	r7, sp, #0
 80207d2:	60f8      	str	r0, [r7, #12]
 80207d4:	60b9      	str	r1, [r7, #8]
 80207d6:	4613      	mov	r3, r2
 80207d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80207da:	2300      	movs	r3, #0
 80207dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80207de:	2300      	movs	r3, #0
 80207e0:	75fb      	strb	r3, [r7, #23]
 80207e2:	e027      	b.n	8020834 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80207e4:	68fb      	ldr	r3, [r7, #12]
 80207e6:	0f1b      	lsrs	r3, r3, #28
 80207e8:	2b09      	cmp	r3, #9
 80207ea:	d80b      	bhi.n	8020804 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80207ec:	68fb      	ldr	r3, [r7, #12]
 80207ee:	0f1b      	lsrs	r3, r3, #28
 80207f0:	b2da      	uxtb	r2, r3
 80207f2:	7dfb      	ldrb	r3, [r7, #23]
 80207f4:	005b      	lsls	r3, r3, #1
 80207f6:	4619      	mov	r1, r3
 80207f8:	68bb      	ldr	r3, [r7, #8]
 80207fa:	440b      	add	r3, r1
 80207fc:	3230      	adds	r2, #48	; 0x30
 80207fe:	b2d2      	uxtb	r2, r2
 8020800:	701a      	strb	r2, [r3, #0]
 8020802:	e00a      	b.n	802081a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8020804:	68fb      	ldr	r3, [r7, #12]
 8020806:	0f1b      	lsrs	r3, r3, #28
 8020808:	b2da      	uxtb	r2, r3
 802080a:	7dfb      	ldrb	r3, [r7, #23]
 802080c:	005b      	lsls	r3, r3, #1
 802080e:	4619      	mov	r1, r3
 8020810:	68bb      	ldr	r3, [r7, #8]
 8020812:	440b      	add	r3, r1
 8020814:	3237      	adds	r2, #55	; 0x37
 8020816:	b2d2      	uxtb	r2, r2
 8020818:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802081a:	68fb      	ldr	r3, [r7, #12]
 802081c:	011b      	lsls	r3, r3, #4
 802081e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8020820:	7dfb      	ldrb	r3, [r7, #23]
 8020822:	005b      	lsls	r3, r3, #1
 8020824:	3301      	adds	r3, #1
 8020826:	68ba      	ldr	r2, [r7, #8]
 8020828:	4413      	add	r3, r2
 802082a:	2200      	movs	r2, #0
 802082c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 802082e:	7dfb      	ldrb	r3, [r7, #23]
 8020830:	3301      	adds	r3, #1
 8020832:	75fb      	strb	r3, [r7, #23]
 8020834:	7dfa      	ldrb	r2, [r7, #23]
 8020836:	79fb      	ldrb	r3, [r7, #7]
 8020838:	429a      	cmp	r2, r3
 802083a:	d3d3      	bcc.n	80207e4 <IntToUnicode+0x18>
  }
}
 802083c:	bf00      	nop
 802083e:	bf00      	nop
 8020840:	371c      	adds	r7, #28
 8020842:	46bd      	mov	sp, r7
 8020844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020848:	4770      	bx	lr
	...

0802084c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802084c:	b580      	push	{r7, lr}
 802084e:	b08a      	sub	sp, #40	; 0x28
 8020850:	af00      	add	r7, sp, #0
 8020852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020854:	f107 0314 	add.w	r3, r7, #20
 8020858:	2200      	movs	r2, #0
 802085a:	601a      	str	r2, [r3, #0]
 802085c:	605a      	str	r2, [r3, #4]
 802085e:	609a      	str	r2, [r3, #8]
 8020860:	60da      	str	r2, [r3, #12]
 8020862:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8020864:	687b      	ldr	r3, [r7, #4]
 8020866:	681b      	ldr	r3, [r3, #0]
 8020868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802086c:	d13a      	bne.n	80208e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802086e:	2300      	movs	r3, #0
 8020870:	613b      	str	r3, [r7, #16]
 8020872:	4b1e      	ldr	r3, [pc, #120]	; (80208ec <HAL_PCD_MspInit+0xa0>)
 8020874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020876:	4a1d      	ldr	r2, [pc, #116]	; (80208ec <HAL_PCD_MspInit+0xa0>)
 8020878:	f043 0301 	orr.w	r3, r3, #1
 802087c:	6313      	str	r3, [r2, #48]	; 0x30
 802087e:	4b1b      	ldr	r3, [pc, #108]	; (80208ec <HAL_PCD_MspInit+0xa0>)
 8020880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020882:	f003 0301 	and.w	r3, r3, #1
 8020886:	613b      	str	r3, [r7, #16]
 8020888:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 802088a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020890:	2302      	movs	r3, #2
 8020892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020894:	2300      	movs	r3, #0
 8020896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020898:	2303      	movs	r3, #3
 802089a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802089c:	230a      	movs	r3, #10
 802089e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80208a0:	f107 0314 	add.w	r3, r7, #20
 80208a4:	4619      	mov	r1, r3
 80208a6:	4812      	ldr	r0, [pc, #72]	; (80208f0 <HAL_PCD_MspInit+0xa4>)
 80208a8:	f7e8 feb6 	bl	8009618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80208ac:	4b0f      	ldr	r3, [pc, #60]	; (80208ec <HAL_PCD_MspInit+0xa0>)
 80208ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80208b0:	4a0e      	ldr	r2, [pc, #56]	; (80208ec <HAL_PCD_MspInit+0xa0>)
 80208b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80208b6:	6353      	str	r3, [r2, #52]	; 0x34
 80208b8:	2300      	movs	r3, #0
 80208ba:	60fb      	str	r3, [r7, #12]
 80208bc:	4b0b      	ldr	r3, [pc, #44]	; (80208ec <HAL_PCD_MspInit+0xa0>)
 80208be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80208c0:	4a0a      	ldr	r2, [pc, #40]	; (80208ec <HAL_PCD_MspInit+0xa0>)
 80208c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80208c6:	6453      	str	r3, [r2, #68]	; 0x44
 80208c8:	4b08      	ldr	r3, [pc, #32]	; (80208ec <HAL_PCD_MspInit+0xa0>)
 80208ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80208cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80208d0:	60fb      	str	r3, [r7, #12]
 80208d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80208d4:	2200      	movs	r2, #0
 80208d6:	2100      	movs	r1, #0
 80208d8:	2043      	movs	r0, #67	; 0x43
 80208da:	f7e8 fe4a 	bl	8009572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80208de:	2043      	movs	r0, #67	; 0x43
 80208e0:	f7e8 fe63 	bl	80095aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80208e4:	bf00      	nop
 80208e6:	3728      	adds	r7, #40	; 0x28
 80208e8:	46bd      	mov	sp, r7
 80208ea:	bd80      	pop	{r7, pc}
 80208ec:	40023800 	.word	0x40023800
 80208f0:	40020000 	.word	0x40020000

080208f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80208f4:	b580      	push	{r7, lr}
 80208f6:	b082      	sub	sp, #8
 80208f8:	af00      	add	r7, sp, #0
 80208fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80208fc:	687b      	ldr	r3, [r7, #4]
 80208fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8020902:	687b      	ldr	r3, [r7, #4]
 8020904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8020908:	4619      	mov	r1, r3
 802090a:	4610      	mov	r0, r2
 802090c:	f7ee f993 	bl	800ec36 <USBD_LL_SetupStage>
}
 8020910:	bf00      	nop
 8020912:	3708      	adds	r7, #8
 8020914:	46bd      	mov	sp, r7
 8020916:	bd80      	pop	{r7, pc}

08020918 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020918:	b580      	push	{r7, lr}
 802091a:	b082      	sub	sp, #8
 802091c:	af00      	add	r7, sp, #0
 802091e:	6078      	str	r0, [r7, #4]
 8020920:	460b      	mov	r3, r1
 8020922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 802092a:	78fa      	ldrb	r2, [r7, #3]
 802092c:	6879      	ldr	r1, [r7, #4]
 802092e:	4613      	mov	r3, r2
 8020930:	00db      	lsls	r3, r3, #3
 8020932:	4413      	add	r3, r2
 8020934:	009b      	lsls	r3, r3, #2
 8020936:	440b      	add	r3, r1
 8020938:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 802093c:	681a      	ldr	r2, [r3, #0]
 802093e:	78fb      	ldrb	r3, [r7, #3]
 8020940:	4619      	mov	r1, r3
 8020942:	f7ee f9cd 	bl	800ece0 <USBD_LL_DataOutStage>
}
 8020946:	bf00      	nop
 8020948:	3708      	adds	r7, #8
 802094a:	46bd      	mov	sp, r7
 802094c:	bd80      	pop	{r7, pc}

0802094e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802094e:	b580      	push	{r7, lr}
 8020950:	b082      	sub	sp, #8
 8020952:	af00      	add	r7, sp, #0
 8020954:	6078      	str	r0, [r7, #4]
 8020956:	460b      	mov	r3, r1
 8020958:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802095a:	687b      	ldr	r3, [r7, #4]
 802095c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8020960:	78fa      	ldrb	r2, [r7, #3]
 8020962:	6879      	ldr	r1, [r7, #4]
 8020964:	4613      	mov	r3, r2
 8020966:	00db      	lsls	r3, r3, #3
 8020968:	4413      	add	r3, r2
 802096a:	009b      	lsls	r3, r3, #2
 802096c:	440b      	add	r3, r1
 802096e:	334c      	adds	r3, #76	; 0x4c
 8020970:	681a      	ldr	r2, [r3, #0]
 8020972:	78fb      	ldrb	r3, [r7, #3]
 8020974:	4619      	mov	r1, r3
 8020976:	f7ee fa66 	bl	800ee46 <USBD_LL_DataInStage>
}
 802097a:	bf00      	nop
 802097c:	3708      	adds	r7, #8
 802097e:	46bd      	mov	sp, r7
 8020980:	bd80      	pop	{r7, pc}

08020982 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020982:	b580      	push	{r7, lr}
 8020984:	b082      	sub	sp, #8
 8020986:	af00      	add	r7, sp, #0
 8020988:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802098a:	687b      	ldr	r3, [r7, #4]
 802098c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020990:	4618      	mov	r0, r3
 8020992:	f7ee fb9a 	bl	800f0ca <USBD_LL_SOF>
}
 8020996:	bf00      	nop
 8020998:	3708      	adds	r7, #8
 802099a:	46bd      	mov	sp, r7
 802099c:	bd80      	pop	{r7, pc}

0802099e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802099e:	b580      	push	{r7, lr}
 80209a0:	b084      	sub	sp, #16
 80209a2:	af00      	add	r7, sp, #0
 80209a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80209a6:	2301      	movs	r3, #1
 80209a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	68db      	ldr	r3, [r3, #12]
 80209ae:	2b00      	cmp	r3, #0
 80209b0:	d102      	bne.n	80209b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80209b2:	2300      	movs	r3, #0
 80209b4:	73fb      	strb	r3, [r7, #15]
 80209b6:	e008      	b.n	80209ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	68db      	ldr	r3, [r3, #12]
 80209bc:	2b02      	cmp	r3, #2
 80209be:	d102      	bne.n	80209c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80209c0:	2301      	movs	r3, #1
 80209c2:	73fb      	strb	r3, [r7, #15]
 80209c4:	e001      	b.n	80209ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80209c6:	f7e5 fda7 	bl	8006518 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80209ca:	687b      	ldr	r3, [r7, #4]
 80209cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80209d0:	7bfa      	ldrb	r2, [r7, #15]
 80209d2:	4611      	mov	r1, r2
 80209d4:	4618      	mov	r0, r3
 80209d6:	f7ee fb3a 	bl	800f04e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80209e0:	4618      	mov	r0, r3
 80209e2:	f7ee fae2 	bl	800efaa <USBD_LL_Reset>
}
 80209e6:	bf00      	nop
 80209e8:	3710      	adds	r7, #16
 80209ea:	46bd      	mov	sp, r7
 80209ec:	bd80      	pop	{r7, pc}
	...

080209f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80209f0:	b580      	push	{r7, lr}
 80209f2:	b082      	sub	sp, #8
 80209f4:	af00      	add	r7, sp, #0
 80209f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80209f8:	687b      	ldr	r3, [r7, #4]
 80209fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80209fe:	4618      	mov	r0, r3
 8020a00:	f7ee fb35 	bl	800f06e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8020a04:	687b      	ldr	r3, [r7, #4]
 8020a06:	681b      	ldr	r3, [r3, #0]
 8020a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8020a0c:	681b      	ldr	r3, [r3, #0]
 8020a0e:	687a      	ldr	r2, [r7, #4]
 8020a10:	6812      	ldr	r2, [r2, #0]
 8020a12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8020a16:	f043 0301 	orr.w	r3, r3, #1
 8020a1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8020a1c:	687b      	ldr	r3, [r7, #4]
 8020a1e:	6a1b      	ldr	r3, [r3, #32]
 8020a20:	2b00      	cmp	r3, #0
 8020a22:	d005      	beq.n	8020a30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020a24:	4b04      	ldr	r3, [pc, #16]	; (8020a38 <HAL_PCD_SuspendCallback+0x48>)
 8020a26:	691b      	ldr	r3, [r3, #16]
 8020a28:	4a03      	ldr	r2, [pc, #12]	; (8020a38 <HAL_PCD_SuspendCallback+0x48>)
 8020a2a:	f043 0306 	orr.w	r3, r3, #6
 8020a2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8020a30:	bf00      	nop
 8020a32:	3708      	adds	r7, #8
 8020a34:	46bd      	mov	sp, r7
 8020a36:	bd80      	pop	{r7, pc}
 8020a38:	e000ed00 	.word	0xe000ed00

08020a3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a3c:	b580      	push	{r7, lr}
 8020a3e:	b082      	sub	sp, #8
 8020a40:	af00      	add	r7, sp, #0
 8020a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020a4a:	4618      	mov	r0, r3
 8020a4c:	f7ee fb25 	bl	800f09a <USBD_LL_Resume>
}
 8020a50:	bf00      	nop
 8020a52:	3708      	adds	r7, #8
 8020a54:	46bd      	mov	sp, r7
 8020a56:	bd80      	pop	{r7, pc}

08020a58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a58:	b580      	push	{r7, lr}
 8020a5a:	b082      	sub	sp, #8
 8020a5c:	af00      	add	r7, sp, #0
 8020a5e:	6078      	str	r0, [r7, #4]
 8020a60:	460b      	mov	r3, r1
 8020a62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8020a64:	687b      	ldr	r3, [r7, #4]
 8020a66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020a6a:	78fa      	ldrb	r2, [r7, #3]
 8020a6c:	4611      	mov	r1, r2
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f7ee fb7d 	bl	800f16e <USBD_LL_IsoOUTIncomplete>
}
 8020a74:	bf00      	nop
 8020a76:	3708      	adds	r7, #8
 8020a78:	46bd      	mov	sp, r7
 8020a7a:	bd80      	pop	{r7, pc}

08020a7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a7c:	b580      	push	{r7, lr}
 8020a7e:	b082      	sub	sp, #8
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	6078      	str	r0, [r7, #4]
 8020a84:	460b      	mov	r3, r1
 8020a86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020a8e:	78fa      	ldrb	r2, [r7, #3]
 8020a90:	4611      	mov	r1, r2
 8020a92:	4618      	mov	r0, r3
 8020a94:	f7ee fb39 	bl	800f10a <USBD_LL_IsoINIncomplete>
}
 8020a98:	bf00      	nop
 8020a9a:	3708      	adds	r7, #8
 8020a9c:	46bd      	mov	sp, r7
 8020a9e:	bd80      	pop	{r7, pc}

08020aa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020aa0:	b580      	push	{r7, lr}
 8020aa2:	b082      	sub	sp, #8
 8020aa4:	af00      	add	r7, sp, #0
 8020aa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020aae:	4618      	mov	r0, r3
 8020ab0:	f7ee fb8f 	bl	800f1d2 <USBD_LL_DevConnected>
}
 8020ab4:	bf00      	nop
 8020ab6:	3708      	adds	r7, #8
 8020ab8:	46bd      	mov	sp, r7
 8020aba:	bd80      	pop	{r7, pc}

08020abc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020abc:	b580      	push	{r7, lr}
 8020abe:	b082      	sub	sp, #8
 8020ac0:	af00      	add	r7, sp, #0
 8020ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8020ac4:	687b      	ldr	r3, [r7, #4]
 8020ac6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020aca:	4618      	mov	r0, r3
 8020acc:	f7ee fb8c 	bl	800f1e8 <USBD_LL_DevDisconnected>
}
 8020ad0:	bf00      	nop
 8020ad2:	3708      	adds	r7, #8
 8020ad4:	46bd      	mov	sp, r7
 8020ad6:	bd80      	pop	{r7, pc}

08020ad8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8020ad8:	b580      	push	{r7, lr}
 8020ada:	b082      	sub	sp, #8
 8020adc:	af00      	add	r7, sp, #0
 8020ade:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8020ae0:	687b      	ldr	r3, [r7, #4]
 8020ae2:	781b      	ldrb	r3, [r3, #0]
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	d13c      	bne.n	8020b62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8020ae8:	4a20      	ldr	r2, [pc, #128]	; (8020b6c <USBD_LL_Init+0x94>)
 8020aea:	687b      	ldr	r3, [r7, #4]
 8020aec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8020af0:	687b      	ldr	r3, [r7, #4]
 8020af2:	4a1e      	ldr	r2, [pc, #120]	; (8020b6c <USBD_LL_Init+0x94>)
 8020af4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8020af8:	4b1c      	ldr	r3, [pc, #112]	; (8020b6c <USBD_LL_Init+0x94>)
 8020afa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8020afe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8020b00:	4b1a      	ldr	r3, [pc, #104]	; (8020b6c <USBD_LL_Init+0x94>)
 8020b02:	2204      	movs	r2, #4
 8020b04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8020b06:	4b19      	ldr	r3, [pc, #100]	; (8020b6c <USBD_LL_Init+0x94>)
 8020b08:	2202      	movs	r2, #2
 8020b0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8020b0c:	4b17      	ldr	r3, [pc, #92]	; (8020b6c <USBD_LL_Init+0x94>)
 8020b0e:	2200      	movs	r2, #0
 8020b10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8020b12:	4b16      	ldr	r3, [pc, #88]	; (8020b6c <USBD_LL_Init+0x94>)
 8020b14:	2202      	movs	r2, #2
 8020b16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8020b18:	4b14      	ldr	r3, [pc, #80]	; (8020b6c <USBD_LL_Init+0x94>)
 8020b1a:	2200      	movs	r2, #0
 8020b1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8020b1e:	4b13      	ldr	r3, [pc, #76]	; (8020b6c <USBD_LL_Init+0x94>)
 8020b20:	2200      	movs	r2, #0
 8020b22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8020b24:	4b11      	ldr	r3, [pc, #68]	; (8020b6c <USBD_LL_Init+0x94>)
 8020b26:	2200      	movs	r2, #0
 8020b28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8020b2a:	4b10      	ldr	r3, [pc, #64]	; (8020b6c <USBD_LL_Init+0x94>)
 8020b2c:	2200      	movs	r2, #0
 8020b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8020b30:	4b0e      	ldr	r3, [pc, #56]	; (8020b6c <USBD_LL_Init+0x94>)
 8020b32:	2200      	movs	r2, #0
 8020b34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8020b36:	480d      	ldr	r0, [pc, #52]	; (8020b6c <USBD_LL_Init+0x94>)
 8020b38:	f7e8 ff56 	bl	80099e8 <HAL_PCD_Init>
 8020b3c:	4603      	mov	r3, r0
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	d001      	beq.n	8020b46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8020b42:	f7e5 fce9 	bl	8006518 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8020b46:	2180      	movs	r1, #128	; 0x80
 8020b48:	4808      	ldr	r0, [pc, #32]	; (8020b6c <USBD_LL_Init+0x94>)
 8020b4a:	f7ea f9ae 	bl	800aeaa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8020b4e:	2240      	movs	r2, #64	; 0x40
 8020b50:	2100      	movs	r1, #0
 8020b52:	4806      	ldr	r0, [pc, #24]	; (8020b6c <USBD_LL_Init+0x94>)
 8020b54:	f7ea f962 	bl	800ae1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8020b58:	2280      	movs	r2, #128	; 0x80
 8020b5a:	2101      	movs	r1, #1
 8020b5c:	4803      	ldr	r0, [pc, #12]	; (8020b6c <USBD_LL_Init+0x94>)
 8020b5e:	f7ea f95d 	bl	800ae1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8020b62:	2300      	movs	r3, #0
}
 8020b64:	4618      	mov	r0, r3
 8020b66:	3708      	adds	r7, #8
 8020b68:	46bd      	mov	sp, r7
 8020b6a:	bd80      	pop	{r7, pc}
 8020b6c:	200045b8 	.word	0x200045b8

08020b70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8020b70:	b580      	push	{r7, lr}
 8020b72:	b084      	sub	sp, #16
 8020b74:	af00      	add	r7, sp, #0
 8020b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020b78:	2300      	movs	r3, #0
 8020b7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020b7c:	2300      	movs	r3, #0
 8020b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020b86:	4618      	mov	r0, r3
 8020b88:	f7e9 f84b 	bl	8009c22 <HAL_PCD_Start>
 8020b8c:	4603      	mov	r3, r0
 8020b8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020b90:	7bfb      	ldrb	r3, [r7, #15]
 8020b92:	4618      	mov	r0, r3
 8020b94:	f000 f942 	bl	8020e1c <USBD_Get_USB_Status>
 8020b98:	4603      	mov	r3, r0
 8020b9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8020b9e:	4618      	mov	r0, r3
 8020ba0:	3710      	adds	r7, #16
 8020ba2:	46bd      	mov	sp, r7
 8020ba4:	bd80      	pop	{r7, pc}

08020ba6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8020ba6:	b580      	push	{r7, lr}
 8020ba8:	b084      	sub	sp, #16
 8020baa:	af00      	add	r7, sp, #0
 8020bac:	6078      	str	r0, [r7, #4]
 8020bae:	4608      	mov	r0, r1
 8020bb0:	4611      	mov	r1, r2
 8020bb2:	461a      	mov	r2, r3
 8020bb4:	4603      	mov	r3, r0
 8020bb6:	70fb      	strb	r3, [r7, #3]
 8020bb8:	460b      	mov	r3, r1
 8020bba:	70bb      	strb	r3, [r7, #2]
 8020bbc:	4613      	mov	r3, r2
 8020bbe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020bc0:	2300      	movs	r3, #0
 8020bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020bc4:	2300      	movs	r3, #0
 8020bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8020bc8:	687b      	ldr	r3, [r7, #4]
 8020bca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8020bce:	78bb      	ldrb	r3, [r7, #2]
 8020bd0:	883a      	ldrh	r2, [r7, #0]
 8020bd2:	78f9      	ldrb	r1, [r7, #3]
 8020bd4:	f7e9 fd1c 	bl	800a610 <HAL_PCD_EP_Open>
 8020bd8:	4603      	mov	r3, r0
 8020bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020bdc:	7bfb      	ldrb	r3, [r7, #15]
 8020bde:	4618      	mov	r0, r3
 8020be0:	f000 f91c 	bl	8020e1c <USBD_Get_USB_Status>
 8020be4:	4603      	mov	r3, r0
 8020be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8020bea:	4618      	mov	r0, r3
 8020bec:	3710      	adds	r7, #16
 8020bee:	46bd      	mov	sp, r7
 8020bf0:	bd80      	pop	{r7, pc}

08020bf2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020bf2:	b580      	push	{r7, lr}
 8020bf4:	b084      	sub	sp, #16
 8020bf6:	af00      	add	r7, sp, #0
 8020bf8:	6078      	str	r0, [r7, #4]
 8020bfa:	460b      	mov	r3, r1
 8020bfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020bfe:	2300      	movs	r3, #0
 8020c00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020c02:	2300      	movs	r3, #0
 8020c04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8020c06:	687b      	ldr	r3, [r7, #4]
 8020c08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020c0c:	78fa      	ldrb	r2, [r7, #3]
 8020c0e:	4611      	mov	r1, r2
 8020c10:	4618      	mov	r0, r3
 8020c12:	f7e9 fd65 	bl	800a6e0 <HAL_PCD_EP_Close>
 8020c16:	4603      	mov	r3, r0
 8020c18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020c1a:	7bfb      	ldrb	r3, [r7, #15]
 8020c1c:	4618      	mov	r0, r3
 8020c1e:	f000 f8fd 	bl	8020e1c <USBD_Get_USB_Status>
 8020c22:	4603      	mov	r3, r0
 8020c24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8020c28:	4618      	mov	r0, r3
 8020c2a:	3710      	adds	r7, #16
 8020c2c:	46bd      	mov	sp, r7
 8020c2e:	bd80      	pop	{r7, pc}

08020c30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020c30:	b580      	push	{r7, lr}
 8020c32:	b084      	sub	sp, #16
 8020c34:	af00      	add	r7, sp, #0
 8020c36:	6078      	str	r0, [r7, #4]
 8020c38:	460b      	mov	r3, r1
 8020c3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c3c:	2300      	movs	r3, #0
 8020c3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020c40:	2300      	movs	r3, #0
 8020c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8020c44:	687b      	ldr	r3, [r7, #4]
 8020c46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020c4a:	78fa      	ldrb	r2, [r7, #3]
 8020c4c:	4611      	mov	r1, r2
 8020c4e:	4618      	mov	r0, r3
 8020c50:	f7e9 fe3d 	bl	800a8ce <HAL_PCD_EP_SetStall>
 8020c54:	4603      	mov	r3, r0
 8020c56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020c58:	7bfb      	ldrb	r3, [r7, #15]
 8020c5a:	4618      	mov	r0, r3
 8020c5c:	f000 f8de 	bl	8020e1c <USBD_Get_USB_Status>
 8020c60:	4603      	mov	r3, r0
 8020c62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020c64:	7bbb      	ldrb	r3, [r7, #14]
}
 8020c66:	4618      	mov	r0, r3
 8020c68:	3710      	adds	r7, #16
 8020c6a:	46bd      	mov	sp, r7
 8020c6c:	bd80      	pop	{r7, pc}

08020c6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020c6e:	b580      	push	{r7, lr}
 8020c70:	b084      	sub	sp, #16
 8020c72:	af00      	add	r7, sp, #0
 8020c74:	6078      	str	r0, [r7, #4]
 8020c76:	460b      	mov	r3, r1
 8020c78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c7a:	2300      	movs	r3, #0
 8020c7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020c7e:	2300      	movs	r3, #0
 8020c80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8020c82:	687b      	ldr	r3, [r7, #4]
 8020c84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020c88:	78fa      	ldrb	r2, [r7, #3]
 8020c8a:	4611      	mov	r1, r2
 8020c8c:	4618      	mov	r0, r3
 8020c8e:	f7e9 fe82 	bl	800a996 <HAL_PCD_EP_ClrStall>
 8020c92:	4603      	mov	r3, r0
 8020c94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020c96:	7bfb      	ldrb	r3, [r7, #15]
 8020c98:	4618      	mov	r0, r3
 8020c9a:	f000 f8bf 	bl	8020e1c <USBD_Get_USB_Status>
 8020c9e:	4603      	mov	r3, r0
 8020ca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020ca2:	7bbb      	ldrb	r3, [r7, #14]
}
 8020ca4:	4618      	mov	r0, r3
 8020ca6:	3710      	adds	r7, #16
 8020ca8:	46bd      	mov	sp, r7
 8020caa:	bd80      	pop	{r7, pc}

08020cac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020cac:	b480      	push	{r7}
 8020cae:	b085      	sub	sp, #20
 8020cb0:	af00      	add	r7, sp, #0
 8020cb2:	6078      	str	r0, [r7, #4]
 8020cb4:	460b      	mov	r3, r1
 8020cb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020cbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8020cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	da0b      	bge.n	8020ce0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8020cc8:	78fb      	ldrb	r3, [r7, #3]
 8020cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8020cce:	68f9      	ldr	r1, [r7, #12]
 8020cd0:	4613      	mov	r3, r2
 8020cd2:	00db      	lsls	r3, r3, #3
 8020cd4:	4413      	add	r3, r2
 8020cd6:	009b      	lsls	r3, r3, #2
 8020cd8:	440b      	add	r3, r1
 8020cda:	333e      	adds	r3, #62	; 0x3e
 8020cdc:	781b      	ldrb	r3, [r3, #0]
 8020cde:	e00b      	b.n	8020cf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8020ce0:	78fb      	ldrb	r3, [r7, #3]
 8020ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8020ce6:	68f9      	ldr	r1, [r7, #12]
 8020ce8:	4613      	mov	r3, r2
 8020cea:	00db      	lsls	r3, r3, #3
 8020cec:	4413      	add	r3, r2
 8020cee:	009b      	lsls	r3, r3, #2
 8020cf0:	440b      	add	r3, r1
 8020cf2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8020cf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020cf8:	4618      	mov	r0, r3
 8020cfa:	3714      	adds	r7, #20
 8020cfc:	46bd      	mov	sp, r7
 8020cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d02:	4770      	bx	lr

08020d04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8020d04:	b580      	push	{r7, lr}
 8020d06:	b084      	sub	sp, #16
 8020d08:	af00      	add	r7, sp, #0
 8020d0a:	6078      	str	r0, [r7, #4]
 8020d0c:	460b      	mov	r3, r1
 8020d0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d10:	2300      	movs	r3, #0
 8020d12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020d14:	2300      	movs	r3, #0
 8020d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8020d18:	687b      	ldr	r3, [r7, #4]
 8020d1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020d1e:	78fa      	ldrb	r2, [r7, #3]
 8020d20:	4611      	mov	r1, r2
 8020d22:	4618      	mov	r0, r3
 8020d24:	f7e9 fc4f 	bl	800a5c6 <HAL_PCD_SetAddress>
 8020d28:	4603      	mov	r3, r0
 8020d2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020d2c:	7bfb      	ldrb	r3, [r7, #15]
 8020d2e:	4618      	mov	r0, r3
 8020d30:	f000 f874 	bl	8020e1c <USBD_Get_USB_Status>
 8020d34:	4603      	mov	r3, r0
 8020d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8020d3a:	4618      	mov	r0, r3
 8020d3c:	3710      	adds	r7, #16
 8020d3e:	46bd      	mov	sp, r7
 8020d40:	bd80      	pop	{r7, pc}

08020d42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8020d42:	b580      	push	{r7, lr}
 8020d44:	b086      	sub	sp, #24
 8020d46:	af00      	add	r7, sp, #0
 8020d48:	60f8      	str	r0, [r7, #12]
 8020d4a:	607a      	str	r2, [r7, #4]
 8020d4c:	603b      	str	r3, [r7, #0]
 8020d4e:	460b      	mov	r3, r1
 8020d50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d52:	2300      	movs	r3, #0
 8020d54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020d56:	2300      	movs	r3, #0
 8020d58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8020d5a:	68fb      	ldr	r3, [r7, #12]
 8020d5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8020d60:	7af9      	ldrb	r1, [r7, #11]
 8020d62:	683b      	ldr	r3, [r7, #0]
 8020d64:	687a      	ldr	r2, [r7, #4]
 8020d66:	f7e9 fd68 	bl	800a83a <HAL_PCD_EP_Transmit>
 8020d6a:	4603      	mov	r3, r0
 8020d6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020d6e:	7dfb      	ldrb	r3, [r7, #23]
 8020d70:	4618      	mov	r0, r3
 8020d72:	f000 f853 	bl	8020e1c <USBD_Get_USB_Status>
 8020d76:	4603      	mov	r3, r0
 8020d78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8020d7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8020d7c:	4618      	mov	r0, r3
 8020d7e:	3718      	adds	r7, #24
 8020d80:	46bd      	mov	sp, r7
 8020d82:	bd80      	pop	{r7, pc}

08020d84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8020d84:	b580      	push	{r7, lr}
 8020d86:	b086      	sub	sp, #24
 8020d88:	af00      	add	r7, sp, #0
 8020d8a:	60f8      	str	r0, [r7, #12]
 8020d8c:	607a      	str	r2, [r7, #4]
 8020d8e:	603b      	str	r3, [r7, #0]
 8020d90:	460b      	mov	r3, r1
 8020d92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d94:	2300      	movs	r3, #0
 8020d96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020d98:	2300      	movs	r3, #0
 8020d9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8020d9c:	68fb      	ldr	r3, [r7, #12]
 8020d9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8020da2:	7af9      	ldrb	r1, [r7, #11]
 8020da4:	683b      	ldr	r3, [r7, #0]
 8020da6:	687a      	ldr	r2, [r7, #4]
 8020da8:	f7e9 fce4 	bl	800a774 <HAL_PCD_EP_Receive>
 8020dac:	4603      	mov	r3, r0
 8020dae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020db0:	7dfb      	ldrb	r3, [r7, #23]
 8020db2:	4618      	mov	r0, r3
 8020db4:	f000 f832 	bl	8020e1c <USBD_Get_USB_Status>
 8020db8:	4603      	mov	r3, r0
 8020dba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8020dbc:	7dbb      	ldrb	r3, [r7, #22]
}
 8020dbe:	4618      	mov	r0, r3
 8020dc0:	3718      	adds	r7, #24
 8020dc2:	46bd      	mov	sp, r7
 8020dc4:	bd80      	pop	{r7, pc}

08020dc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020dc6:	b580      	push	{r7, lr}
 8020dc8:	b082      	sub	sp, #8
 8020dca:	af00      	add	r7, sp, #0
 8020dcc:	6078      	str	r0, [r7, #4]
 8020dce:	460b      	mov	r3, r1
 8020dd0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020dd8:	78fa      	ldrb	r2, [r7, #3]
 8020dda:	4611      	mov	r1, r2
 8020ddc:	4618      	mov	r0, r3
 8020dde:	f7e9 fd14 	bl	800a80a <HAL_PCD_EP_GetRxCount>
 8020de2:	4603      	mov	r3, r0
}
 8020de4:	4618      	mov	r0, r3
 8020de6:	3708      	adds	r7, #8
 8020de8:	46bd      	mov	sp, r7
 8020dea:	bd80      	pop	{r7, pc}

08020dec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8020dec:	b480      	push	{r7}
 8020dee:	b083      	sub	sp, #12
 8020df0:	af00      	add	r7, sp, #0
 8020df2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8020df4:	4b03      	ldr	r3, [pc, #12]	; (8020e04 <USBD_static_malloc+0x18>)
}
 8020df6:	4618      	mov	r0, r3
 8020df8:	370c      	adds	r7, #12
 8020dfa:	46bd      	mov	sp, r7
 8020dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e00:	4770      	bx	lr
 8020e02:	bf00      	nop
 8020e04:	20004ac4 	.word	0x20004ac4

08020e08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8020e08:	b480      	push	{r7}
 8020e0a:	b083      	sub	sp, #12
 8020e0c:	af00      	add	r7, sp, #0
 8020e0e:	6078      	str	r0, [r7, #4]

}
 8020e10:	bf00      	nop
 8020e12:	370c      	adds	r7, #12
 8020e14:	46bd      	mov	sp, r7
 8020e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e1a:	4770      	bx	lr

08020e1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8020e1c:	b480      	push	{r7}
 8020e1e:	b085      	sub	sp, #20
 8020e20:	af00      	add	r7, sp, #0
 8020e22:	4603      	mov	r3, r0
 8020e24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020e26:	2300      	movs	r3, #0
 8020e28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8020e2a:	79fb      	ldrb	r3, [r7, #7]
 8020e2c:	2b03      	cmp	r3, #3
 8020e2e:	d817      	bhi.n	8020e60 <USBD_Get_USB_Status+0x44>
 8020e30:	a201      	add	r2, pc, #4	; (adr r2, 8020e38 <USBD_Get_USB_Status+0x1c>)
 8020e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020e36:	bf00      	nop
 8020e38:	08020e49 	.word	0x08020e49
 8020e3c:	08020e4f 	.word	0x08020e4f
 8020e40:	08020e55 	.word	0x08020e55
 8020e44:	08020e5b 	.word	0x08020e5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8020e48:	2300      	movs	r3, #0
 8020e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8020e4c:	e00b      	b.n	8020e66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8020e4e:	2303      	movs	r3, #3
 8020e50:	73fb      	strb	r3, [r7, #15]
    break;
 8020e52:	e008      	b.n	8020e66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8020e54:	2301      	movs	r3, #1
 8020e56:	73fb      	strb	r3, [r7, #15]
    break;
 8020e58:	e005      	b.n	8020e66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8020e5a:	2303      	movs	r3, #3
 8020e5c:	73fb      	strb	r3, [r7, #15]
    break;
 8020e5e:	e002      	b.n	8020e66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8020e60:	2303      	movs	r3, #3
 8020e62:	73fb      	strb	r3, [r7, #15]
    break;
 8020e64:	bf00      	nop
  }
  return usb_status;
 8020e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8020e68:	4618      	mov	r0, r3
 8020e6a:	3714      	adds	r7, #20
 8020e6c:	46bd      	mov	sp, r7
 8020e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e72:	4770      	bx	lr

08020e74 <_ZdaPv>:
 8020e74:	f000 b816 	b.w	8020ea4 <_ZdlPv>

08020e78 <_Znwj>:
 8020e78:	2801      	cmp	r0, #1
 8020e7a:	bf38      	it	cc
 8020e7c:	2001      	movcc	r0, #1
 8020e7e:	b510      	push	{r4, lr}
 8020e80:	4604      	mov	r4, r0
 8020e82:	4620      	mov	r0, r4
 8020e84:	f002 fdc4 	bl	8023a10 <malloc>
 8020e88:	b930      	cbnz	r0, 8020e98 <_Znwj+0x20>
 8020e8a:	f000 f80d 	bl	8020ea8 <_ZSt15get_new_handlerv>
 8020e8e:	b908      	cbnz	r0, 8020e94 <_Znwj+0x1c>
 8020e90:	f002 fd4c 	bl	802392c <abort>
 8020e94:	4780      	blx	r0
 8020e96:	e7f4      	b.n	8020e82 <_Znwj+0xa>
 8020e98:	bd10      	pop	{r4, pc}

08020e9a <_Znaj>:
 8020e9a:	f7ff bfed 	b.w	8020e78 <_Znwj>

08020e9e <_ZSt20__throw_length_errorPKc>:
 8020e9e:	b508      	push	{r3, lr}
 8020ea0:	f002 fd44 	bl	802392c <abort>

08020ea4 <_ZdlPv>:
 8020ea4:	f002 bdbc 	b.w	8023a20 <free>

08020ea8 <_ZSt15get_new_handlerv>:
 8020ea8:	4b02      	ldr	r3, [pc, #8]	; (8020eb4 <_ZSt15get_new_handlerv+0xc>)
 8020eaa:	6818      	ldr	r0, [r3, #0]
 8020eac:	f3bf 8f5b 	dmb	ish
 8020eb0:	4770      	bx	lr
 8020eb2:	bf00      	nop
 8020eb4:	20004ce4 	.word	0x20004ce4

08020eb8 <cos>:
 8020eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020eba:	ec53 2b10 	vmov	r2, r3, d0
 8020ebe:	4826      	ldr	r0, [pc, #152]	; (8020f58 <cos+0xa0>)
 8020ec0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8020ec4:	4281      	cmp	r1, r0
 8020ec6:	dc06      	bgt.n	8020ed6 <cos+0x1e>
 8020ec8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8020f50 <cos+0x98>
 8020ecc:	b005      	add	sp, #20
 8020ece:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ed2:	f001 bd41 	b.w	8022958 <__kernel_cos>
 8020ed6:	4821      	ldr	r0, [pc, #132]	; (8020f5c <cos+0xa4>)
 8020ed8:	4281      	cmp	r1, r0
 8020eda:	dd09      	ble.n	8020ef0 <cos+0x38>
 8020edc:	ee10 0a10 	vmov	r0, s0
 8020ee0:	4619      	mov	r1, r3
 8020ee2:	f7df f9db 	bl	800029c <__aeabi_dsub>
 8020ee6:	ec41 0b10 	vmov	d0, r0, r1
 8020eea:	b005      	add	sp, #20
 8020eec:	f85d fb04 	ldr.w	pc, [sp], #4
 8020ef0:	4668      	mov	r0, sp
 8020ef2:	f001 f859 	bl	8021fa8 <__ieee754_rem_pio2>
 8020ef6:	f000 0003 	and.w	r0, r0, #3
 8020efa:	2801      	cmp	r0, #1
 8020efc:	d00b      	beq.n	8020f16 <cos+0x5e>
 8020efe:	2802      	cmp	r0, #2
 8020f00:	d016      	beq.n	8020f30 <cos+0x78>
 8020f02:	b9e0      	cbnz	r0, 8020f3e <cos+0x86>
 8020f04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020f08:	ed9d 0b00 	vldr	d0, [sp]
 8020f0c:	f001 fd24 	bl	8022958 <__kernel_cos>
 8020f10:	ec51 0b10 	vmov	r0, r1, d0
 8020f14:	e7e7      	b.n	8020ee6 <cos+0x2e>
 8020f16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020f1a:	ed9d 0b00 	vldr	d0, [sp]
 8020f1e:	f002 f933 	bl	8023188 <__kernel_sin>
 8020f22:	ec53 2b10 	vmov	r2, r3, d0
 8020f26:	ee10 0a10 	vmov	r0, s0
 8020f2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020f2e:	e7da      	b.n	8020ee6 <cos+0x2e>
 8020f30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020f34:	ed9d 0b00 	vldr	d0, [sp]
 8020f38:	f001 fd0e 	bl	8022958 <__kernel_cos>
 8020f3c:	e7f1      	b.n	8020f22 <cos+0x6a>
 8020f3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020f42:	ed9d 0b00 	vldr	d0, [sp]
 8020f46:	2001      	movs	r0, #1
 8020f48:	f002 f91e 	bl	8023188 <__kernel_sin>
 8020f4c:	e7e0      	b.n	8020f10 <cos+0x58>
 8020f4e:	bf00      	nop
	...
 8020f58:	3fe921fb 	.word	0x3fe921fb
 8020f5c:	7fefffff 	.word	0x7fefffff

08020f60 <floor>:
 8020f60:	ec51 0b10 	vmov	r0, r1, d0
 8020f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8020f6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8020f70:	2e13      	cmp	r6, #19
 8020f72:	ee10 5a10 	vmov	r5, s0
 8020f76:	ee10 8a10 	vmov	r8, s0
 8020f7a:	460c      	mov	r4, r1
 8020f7c:	dc32      	bgt.n	8020fe4 <floor+0x84>
 8020f7e:	2e00      	cmp	r6, #0
 8020f80:	da14      	bge.n	8020fac <floor+0x4c>
 8020f82:	a333      	add	r3, pc, #204	; (adr r3, 8021050 <floor+0xf0>)
 8020f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f88:	f7df f98a 	bl	80002a0 <__adddf3>
 8020f8c:	2200      	movs	r2, #0
 8020f8e:	2300      	movs	r3, #0
 8020f90:	f7df fdcc 	bl	8000b2c <__aeabi_dcmpgt>
 8020f94:	b138      	cbz	r0, 8020fa6 <floor+0x46>
 8020f96:	2c00      	cmp	r4, #0
 8020f98:	da57      	bge.n	802104a <floor+0xea>
 8020f9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8020f9e:	431d      	orrs	r5, r3
 8020fa0:	d001      	beq.n	8020fa6 <floor+0x46>
 8020fa2:	4c2d      	ldr	r4, [pc, #180]	; (8021058 <floor+0xf8>)
 8020fa4:	2500      	movs	r5, #0
 8020fa6:	4621      	mov	r1, r4
 8020fa8:	4628      	mov	r0, r5
 8020faa:	e025      	b.n	8020ff8 <floor+0x98>
 8020fac:	4f2b      	ldr	r7, [pc, #172]	; (802105c <floor+0xfc>)
 8020fae:	4137      	asrs	r7, r6
 8020fb0:	ea01 0307 	and.w	r3, r1, r7
 8020fb4:	4303      	orrs	r3, r0
 8020fb6:	d01f      	beq.n	8020ff8 <floor+0x98>
 8020fb8:	a325      	add	r3, pc, #148	; (adr r3, 8021050 <floor+0xf0>)
 8020fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fbe:	f7df f96f 	bl	80002a0 <__adddf3>
 8020fc2:	2200      	movs	r2, #0
 8020fc4:	2300      	movs	r3, #0
 8020fc6:	f7df fdb1 	bl	8000b2c <__aeabi_dcmpgt>
 8020fca:	2800      	cmp	r0, #0
 8020fcc:	d0eb      	beq.n	8020fa6 <floor+0x46>
 8020fce:	2c00      	cmp	r4, #0
 8020fd0:	bfbe      	ittt	lt
 8020fd2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8020fd6:	fa43 f606 	asrlt.w	r6, r3, r6
 8020fda:	19a4      	addlt	r4, r4, r6
 8020fdc:	ea24 0407 	bic.w	r4, r4, r7
 8020fe0:	2500      	movs	r5, #0
 8020fe2:	e7e0      	b.n	8020fa6 <floor+0x46>
 8020fe4:	2e33      	cmp	r6, #51	; 0x33
 8020fe6:	dd0b      	ble.n	8021000 <floor+0xa0>
 8020fe8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8020fec:	d104      	bne.n	8020ff8 <floor+0x98>
 8020fee:	ee10 2a10 	vmov	r2, s0
 8020ff2:	460b      	mov	r3, r1
 8020ff4:	f7df f954 	bl	80002a0 <__adddf3>
 8020ff8:	ec41 0b10 	vmov	d0, r0, r1
 8020ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021000:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8021004:	f04f 33ff 	mov.w	r3, #4294967295
 8021008:	fa23 f707 	lsr.w	r7, r3, r7
 802100c:	4207      	tst	r7, r0
 802100e:	d0f3      	beq.n	8020ff8 <floor+0x98>
 8021010:	a30f      	add	r3, pc, #60	; (adr r3, 8021050 <floor+0xf0>)
 8021012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021016:	f7df f943 	bl	80002a0 <__adddf3>
 802101a:	2200      	movs	r2, #0
 802101c:	2300      	movs	r3, #0
 802101e:	f7df fd85 	bl	8000b2c <__aeabi_dcmpgt>
 8021022:	2800      	cmp	r0, #0
 8021024:	d0bf      	beq.n	8020fa6 <floor+0x46>
 8021026:	2c00      	cmp	r4, #0
 8021028:	da02      	bge.n	8021030 <floor+0xd0>
 802102a:	2e14      	cmp	r6, #20
 802102c:	d103      	bne.n	8021036 <floor+0xd6>
 802102e:	3401      	adds	r4, #1
 8021030:	ea25 0507 	bic.w	r5, r5, r7
 8021034:	e7b7      	b.n	8020fa6 <floor+0x46>
 8021036:	2301      	movs	r3, #1
 8021038:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802103c:	fa03 f606 	lsl.w	r6, r3, r6
 8021040:	4435      	add	r5, r6
 8021042:	4545      	cmp	r5, r8
 8021044:	bf38      	it	cc
 8021046:	18e4      	addcc	r4, r4, r3
 8021048:	e7f2      	b.n	8021030 <floor+0xd0>
 802104a:	2500      	movs	r5, #0
 802104c:	462c      	mov	r4, r5
 802104e:	e7aa      	b.n	8020fa6 <floor+0x46>
 8021050:	8800759c 	.word	0x8800759c
 8021054:	7e37e43c 	.word	0x7e37e43c
 8021058:	bff00000 	.word	0xbff00000
 802105c:	000fffff 	.word	0x000fffff

08021060 <frexp>:
 8021060:	b570      	push	{r4, r5, r6, lr}
 8021062:	2100      	movs	r1, #0
 8021064:	ec55 4b10 	vmov	r4, r5, d0
 8021068:	6001      	str	r1, [r0, #0]
 802106a:	4916      	ldr	r1, [pc, #88]	; (80210c4 <frexp+0x64>)
 802106c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8021070:	428a      	cmp	r2, r1
 8021072:	4606      	mov	r6, r0
 8021074:	462b      	mov	r3, r5
 8021076:	dc22      	bgt.n	80210be <frexp+0x5e>
 8021078:	ee10 1a10 	vmov	r1, s0
 802107c:	4311      	orrs	r1, r2
 802107e:	d01e      	beq.n	80210be <frexp+0x5e>
 8021080:	4911      	ldr	r1, [pc, #68]	; (80210c8 <frexp+0x68>)
 8021082:	4029      	ands	r1, r5
 8021084:	b969      	cbnz	r1, 80210a2 <frexp+0x42>
 8021086:	4b11      	ldr	r3, [pc, #68]	; (80210cc <frexp+0x6c>)
 8021088:	2200      	movs	r2, #0
 802108a:	ee10 0a10 	vmov	r0, s0
 802108e:	4629      	mov	r1, r5
 8021090:	f7df fabc 	bl	800060c <__aeabi_dmul>
 8021094:	460b      	mov	r3, r1
 8021096:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802109a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 802109e:	4604      	mov	r4, r0
 80210a0:	6031      	str	r1, [r6, #0]
 80210a2:	6831      	ldr	r1, [r6, #0]
 80210a4:	1512      	asrs	r2, r2, #20
 80210a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80210aa:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80210ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80210b2:	440a      	add	r2, r1
 80210b4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80210b8:	6032      	str	r2, [r6, #0]
 80210ba:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80210be:	ec45 4b10 	vmov	d0, r4, r5
 80210c2:	bd70      	pop	{r4, r5, r6, pc}
 80210c4:	7fefffff 	.word	0x7fefffff
 80210c8:	7ff00000 	.word	0x7ff00000
 80210cc:	43500000 	.word	0x43500000

080210d0 <round>:
 80210d0:	ec51 0b10 	vmov	r0, r1, d0
 80210d4:	b570      	push	{r4, r5, r6, lr}
 80210d6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80210da:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80210de:	2c13      	cmp	r4, #19
 80210e0:	ee10 2a10 	vmov	r2, s0
 80210e4:	460b      	mov	r3, r1
 80210e6:	dc19      	bgt.n	802111c <round+0x4c>
 80210e8:	2c00      	cmp	r4, #0
 80210ea:	da09      	bge.n	8021100 <round+0x30>
 80210ec:	3401      	adds	r4, #1
 80210ee:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80210f2:	d103      	bne.n	80210fc <round+0x2c>
 80210f4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80210f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80210fc:	2200      	movs	r2, #0
 80210fe:	e028      	b.n	8021152 <round+0x82>
 8021100:	4d15      	ldr	r5, [pc, #84]	; (8021158 <round+0x88>)
 8021102:	4125      	asrs	r5, r4
 8021104:	ea01 0605 	and.w	r6, r1, r5
 8021108:	4332      	orrs	r2, r6
 802110a:	d00e      	beq.n	802112a <round+0x5a>
 802110c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8021110:	fa42 f404 	asr.w	r4, r2, r4
 8021114:	4423      	add	r3, r4
 8021116:	ea23 0305 	bic.w	r3, r3, r5
 802111a:	e7ef      	b.n	80210fc <round+0x2c>
 802111c:	2c33      	cmp	r4, #51	; 0x33
 802111e:	dd07      	ble.n	8021130 <round+0x60>
 8021120:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8021124:	d101      	bne.n	802112a <round+0x5a>
 8021126:	f7df f8bb 	bl	80002a0 <__adddf3>
 802112a:	ec41 0b10 	vmov	d0, r0, r1
 802112e:	bd70      	pop	{r4, r5, r6, pc}
 8021130:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8021134:	f04f 35ff 	mov.w	r5, #4294967295
 8021138:	40f5      	lsrs	r5, r6
 802113a:	4228      	tst	r0, r5
 802113c:	d0f5      	beq.n	802112a <round+0x5a>
 802113e:	2101      	movs	r1, #1
 8021140:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8021144:	fa01 f404 	lsl.w	r4, r1, r4
 8021148:	1912      	adds	r2, r2, r4
 802114a:	bf28      	it	cs
 802114c:	185b      	addcs	r3, r3, r1
 802114e:	ea22 0205 	bic.w	r2, r2, r5
 8021152:	4619      	mov	r1, r3
 8021154:	4610      	mov	r0, r2
 8021156:	e7e8      	b.n	802112a <round+0x5a>
 8021158:	000fffff 	.word	0x000fffff
 802115c:	00000000 	.word	0x00000000

08021160 <sin>:
 8021160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021162:	ec53 2b10 	vmov	r2, r3, d0
 8021166:	4828      	ldr	r0, [pc, #160]	; (8021208 <sin+0xa8>)
 8021168:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802116c:	4281      	cmp	r1, r0
 802116e:	dc07      	bgt.n	8021180 <sin+0x20>
 8021170:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8021200 <sin+0xa0>
 8021174:	2000      	movs	r0, #0
 8021176:	b005      	add	sp, #20
 8021178:	f85d eb04 	ldr.w	lr, [sp], #4
 802117c:	f002 b804 	b.w	8023188 <__kernel_sin>
 8021180:	4822      	ldr	r0, [pc, #136]	; (802120c <sin+0xac>)
 8021182:	4281      	cmp	r1, r0
 8021184:	dd09      	ble.n	802119a <sin+0x3a>
 8021186:	ee10 0a10 	vmov	r0, s0
 802118a:	4619      	mov	r1, r3
 802118c:	f7df f886 	bl	800029c <__aeabi_dsub>
 8021190:	ec41 0b10 	vmov	d0, r0, r1
 8021194:	b005      	add	sp, #20
 8021196:	f85d fb04 	ldr.w	pc, [sp], #4
 802119a:	4668      	mov	r0, sp
 802119c:	f000 ff04 	bl	8021fa8 <__ieee754_rem_pio2>
 80211a0:	f000 0003 	and.w	r0, r0, #3
 80211a4:	2801      	cmp	r0, #1
 80211a6:	d00c      	beq.n	80211c2 <sin+0x62>
 80211a8:	2802      	cmp	r0, #2
 80211aa:	d011      	beq.n	80211d0 <sin+0x70>
 80211ac:	b9f0      	cbnz	r0, 80211ec <sin+0x8c>
 80211ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80211b2:	ed9d 0b00 	vldr	d0, [sp]
 80211b6:	2001      	movs	r0, #1
 80211b8:	f001 ffe6 	bl	8023188 <__kernel_sin>
 80211bc:	ec51 0b10 	vmov	r0, r1, d0
 80211c0:	e7e6      	b.n	8021190 <sin+0x30>
 80211c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80211c6:	ed9d 0b00 	vldr	d0, [sp]
 80211ca:	f001 fbc5 	bl	8022958 <__kernel_cos>
 80211ce:	e7f5      	b.n	80211bc <sin+0x5c>
 80211d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80211d4:	ed9d 0b00 	vldr	d0, [sp]
 80211d8:	2001      	movs	r0, #1
 80211da:	f001 ffd5 	bl	8023188 <__kernel_sin>
 80211de:	ec53 2b10 	vmov	r2, r3, d0
 80211e2:	ee10 0a10 	vmov	r0, s0
 80211e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80211ea:	e7d1      	b.n	8021190 <sin+0x30>
 80211ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80211f0:	ed9d 0b00 	vldr	d0, [sp]
 80211f4:	f001 fbb0 	bl	8022958 <__kernel_cos>
 80211f8:	e7f1      	b.n	80211de <sin+0x7e>
 80211fa:	bf00      	nop
 80211fc:	f3af 8000 	nop.w
	...
 8021208:	3fe921fb 	.word	0x3fe921fb
 802120c:	7fefffff 	.word	0x7fefffff

08021210 <tan>:
 8021210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021212:	ec53 2b10 	vmov	r2, r3, d0
 8021216:	4816      	ldr	r0, [pc, #88]	; (8021270 <tan+0x60>)
 8021218:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802121c:	4281      	cmp	r1, r0
 802121e:	dc07      	bgt.n	8021230 <tan+0x20>
 8021220:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8021268 <tan+0x58>
 8021224:	2001      	movs	r0, #1
 8021226:	b005      	add	sp, #20
 8021228:	f85d eb04 	ldr.w	lr, [sp], #4
 802122c:	f002 b86c 	b.w	8023308 <__kernel_tan>
 8021230:	4810      	ldr	r0, [pc, #64]	; (8021274 <tan+0x64>)
 8021232:	4281      	cmp	r1, r0
 8021234:	dd09      	ble.n	802124a <tan+0x3a>
 8021236:	ee10 0a10 	vmov	r0, s0
 802123a:	4619      	mov	r1, r3
 802123c:	f7df f82e 	bl	800029c <__aeabi_dsub>
 8021240:	ec41 0b10 	vmov	d0, r0, r1
 8021244:	b005      	add	sp, #20
 8021246:	f85d fb04 	ldr.w	pc, [sp], #4
 802124a:	4668      	mov	r0, sp
 802124c:	f000 feac 	bl	8021fa8 <__ieee754_rem_pio2>
 8021250:	0040      	lsls	r0, r0, #1
 8021252:	f000 0002 	and.w	r0, r0, #2
 8021256:	ed9d 1b02 	vldr	d1, [sp, #8]
 802125a:	ed9d 0b00 	vldr	d0, [sp]
 802125e:	f1c0 0001 	rsb	r0, r0, #1
 8021262:	f002 f851 	bl	8023308 <__kernel_tan>
 8021266:	e7ed      	b.n	8021244 <tan+0x34>
	...
 8021270:	3fe921fb 	.word	0x3fe921fb
 8021274:	7fefffff 	.word	0x7fefffff

08021278 <frexpf>:
 8021278:	ee10 3a10 	vmov	r3, s0
 802127c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8021280:	2100      	movs	r1, #0
 8021282:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8021286:	6001      	str	r1, [r0, #0]
 8021288:	da19      	bge.n	80212be <frexpf+0x46>
 802128a:	b1c2      	cbz	r2, 80212be <frexpf+0x46>
 802128c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8021290:	d10a      	bne.n	80212a8 <frexpf+0x30>
 8021292:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80212c0 <frexpf+0x48>
 8021296:	ee60 7a27 	vmul.f32	s15, s0, s15
 802129a:	f06f 0118 	mvn.w	r1, #24
 802129e:	ee17 3a90 	vmov	r3, s15
 80212a2:	6001      	str	r1, [r0, #0]
 80212a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80212a8:	6801      	ldr	r1, [r0, #0]
 80212aa:	15d2      	asrs	r2, r2, #23
 80212ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80212b0:	3a7e      	subs	r2, #126	; 0x7e
 80212b2:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 80212b6:	440a      	add	r2, r1
 80212b8:	ee00 3a10 	vmov	s0, r3
 80212bc:	6002      	str	r2, [r0, #0]
 80212be:	4770      	bx	lr
 80212c0:	4c000000 	.word	0x4c000000

080212c4 <roundf>:
 80212c4:	ee10 0a10 	vmov	r0, s0
 80212c8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80212cc:	3a7f      	subs	r2, #127	; 0x7f
 80212ce:	2a16      	cmp	r2, #22
 80212d0:	dc15      	bgt.n	80212fe <roundf+0x3a>
 80212d2:	2a00      	cmp	r2, #0
 80212d4:	da08      	bge.n	80212e8 <roundf+0x24>
 80212d6:	3201      	adds	r2, #1
 80212d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80212dc:	d101      	bne.n	80212e2 <roundf+0x1e>
 80212de:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80212e2:	ee00 3a10 	vmov	s0, r3
 80212e6:	4770      	bx	lr
 80212e8:	4907      	ldr	r1, [pc, #28]	; (8021308 <roundf+0x44>)
 80212ea:	4111      	asrs	r1, r2
 80212ec:	4208      	tst	r0, r1
 80212ee:	d0fa      	beq.n	80212e6 <roundf+0x22>
 80212f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80212f4:	4113      	asrs	r3, r2
 80212f6:	4403      	add	r3, r0
 80212f8:	ea23 0301 	bic.w	r3, r3, r1
 80212fc:	e7f1      	b.n	80212e2 <roundf+0x1e>
 80212fe:	2a80      	cmp	r2, #128	; 0x80
 8021300:	d1f1      	bne.n	80212e6 <roundf+0x22>
 8021302:	ee30 0a00 	vadd.f32	s0, s0, s0
 8021306:	4770      	bx	lr
 8021308:	007fffff 	.word	0x007fffff

0802130c <pow>:
 802130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802130e:	ed2d 8b02 	vpush	{d8}
 8021312:	eeb0 8a40 	vmov.f32	s16, s0
 8021316:	eef0 8a60 	vmov.f32	s17, s1
 802131a:	ec55 4b11 	vmov	r4, r5, d1
 802131e:	f000 f913 	bl	8021548 <__ieee754_pow>
 8021322:	4622      	mov	r2, r4
 8021324:	462b      	mov	r3, r5
 8021326:	4620      	mov	r0, r4
 8021328:	4629      	mov	r1, r5
 802132a:	ec57 6b10 	vmov	r6, r7, d0
 802132e:	f7df fc07 	bl	8000b40 <__aeabi_dcmpun>
 8021332:	2800      	cmp	r0, #0
 8021334:	d13b      	bne.n	80213ae <pow+0xa2>
 8021336:	ec51 0b18 	vmov	r0, r1, d8
 802133a:	2200      	movs	r2, #0
 802133c:	2300      	movs	r3, #0
 802133e:	f7df fbcd 	bl	8000adc <__aeabi_dcmpeq>
 8021342:	b1b8      	cbz	r0, 8021374 <pow+0x68>
 8021344:	2200      	movs	r2, #0
 8021346:	2300      	movs	r3, #0
 8021348:	4620      	mov	r0, r4
 802134a:	4629      	mov	r1, r5
 802134c:	f7df fbc6 	bl	8000adc <__aeabi_dcmpeq>
 8021350:	2800      	cmp	r0, #0
 8021352:	d146      	bne.n	80213e2 <pow+0xd6>
 8021354:	ec45 4b10 	vmov	d0, r4, r5
 8021358:	f002 fa3b 	bl	80237d2 <finite>
 802135c:	b338      	cbz	r0, 80213ae <pow+0xa2>
 802135e:	2200      	movs	r2, #0
 8021360:	2300      	movs	r3, #0
 8021362:	4620      	mov	r0, r4
 8021364:	4629      	mov	r1, r5
 8021366:	f7df fbc3 	bl	8000af0 <__aeabi_dcmplt>
 802136a:	b300      	cbz	r0, 80213ae <pow+0xa2>
 802136c:	f002 fb10 	bl	8023990 <__errno>
 8021370:	2322      	movs	r3, #34	; 0x22
 8021372:	e01b      	b.n	80213ac <pow+0xa0>
 8021374:	ec47 6b10 	vmov	d0, r6, r7
 8021378:	f002 fa2b 	bl	80237d2 <finite>
 802137c:	b9e0      	cbnz	r0, 80213b8 <pow+0xac>
 802137e:	eeb0 0a48 	vmov.f32	s0, s16
 8021382:	eef0 0a68 	vmov.f32	s1, s17
 8021386:	f002 fa24 	bl	80237d2 <finite>
 802138a:	b1a8      	cbz	r0, 80213b8 <pow+0xac>
 802138c:	ec45 4b10 	vmov	d0, r4, r5
 8021390:	f002 fa1f 	bl	80237d2 <finite>
 8021394:	b180      	cbz	r0, 80213b8 <pow+0xac>
 8021396:	4632      	mov	r2, r6
 8021398:	463b      	mov	r3, r7
 802139a:	4630      	mov	r0, r6
 802139c:	4639      	mov	r1, r7
 802139e:	f7df fbcf 	bl	8000b40 <__aeabi_dcmpun>
 80213a2:	2800      	cmp	r0, #0
 80213a4:	d0e2      	beq.n	802136c <pow+0x60>
 80213a6:	f002 faf3 	bl	8023990 <__errno>
 80213aa:	2321      	movs	r3, #33	; 0x21
 80213ac:	6003      	str	r3, [r0, #0]
 80213ae:	ecbd 8b02 	vpop	{d8}
 80213b2:	ec47 6b10 	vmov	d0, r6, r7
 80213b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80213b8:	2200      	movs	r2, #0
 80213ba:	2300      	movs	r3, #0
 80213bc:	4630      	mov	r0, r6
 80213be:	4639      	mov	r1, r7
 80213c0:	f7df fb8c 	bl	8000adc <__aeabi_dcmpeq>
 80213c4:	2800      	cmp	r0, #0
 80213c6:	d0f2      	beq.n	80213ae <pow+0xa2>
 80213c8:	eeb0 0a48 	vmov.f32	s0, s16
 80213cc:	eef0 0a68 	vmov.f32	s1, s17
 80213d0:	f002 f9ff 	bl	80237d2 <finite>
 80213d4:	2800      	cmp	r0, #0
 80213d6:	d0ea      	beq.n	80213ae <pow+0xa2>
 80213d8:	ec45 4b10 	vmov	d0, r4, r5
 80213dc:	f002 f9f9 	bl	80237d2 <finite>
 80213e0:	e7c3      	b.n	802136a <pow+0x5e>
 80213e2:	4f01      	ldr	r7, [pc, #4]	; (80213e8 <pow+0xdc>)
 80213e4:	2600      	movs	r6, #0
 80213e6:	e7e2      	b.n	80213ae <pow+0xa2>
 80213e8:	3ff00000 	.word	0x3ff00000

080213ec <sqrt>:
 80213ec:	b538      	push	{r3, r4, r5, lr}
 80213ee:	ed2d 8b02 	vpush	{d8}
 80213f2:	ec55 4b10 	vmov	r4, r5, d0
 80213f6:	f000 ffe3 	bl	80223c0 <__ieee754_sqrt>
 80213fa:	4622      	mov	r2, r4
 80213fc:	462b      	mov	r3, r5
 80213fe:	4620      	mov	r0, r4
 8021400:	4629      	mov	r1, r5
 8021402:	eeb0 8a40 	vmov.f32	s16, s0
 8021406:	eef0 8a60 	vmov.f32	s17, s1
 802140a:	f7df fb99 	bl	8000b40 <__aeabi_dcmpun>
 802140e:	b990      	cbnz	r0, 8021436 <sqrt+0x4a>
 8021410:	2200      	movs	r2, #0
 8021412:	2300      	movs	r3, #0
 8021414:	4620      	mov	r0, r4
 8021416:	4629      	mov	r1, r5
 8021418:	f7df fb6a 	bl	8000af0 <__aeabi_dcmplt>
 802141c:	b158      	cbz	r0, 8021436 <sqrt+0x4a>
 802141e:	f002 fab7 	bl	8023990 <__errno>
 8021422:	2321      	movs	r3, #33	; 0x21
 8021424:	6003      	str	r3, [r0, #0]
 8021426:	2200      	movs	r2, #0
 8021428:	2300      	movs	r3, #0
 802142a:	4610      	mov	r0, r2
 802142c:	4619      	mov	r1, r3
 802142e:	f7df fa17 	bl	8000860 <__aeabi_ddiv>
 8021432:	ec41 0b18 	vmov	d8, r0, r1
 8021436:	eeb0 0a48 	vmov.f32	s0, s16
 802143a:	eef0 0a68 	vmov.f32	s1, s17
 802143e:	ecbd 8b02 	vpop	{d8}
 8021442:	bd38      	pop	{r3, r4, r5, pc}

08021444 <expf>:
 8021444:	b508      	push	{r3, lr}
 8021446:	ed2d 8b02 	vpush	{d8}
 802144a:	eef0 8a40 	vmov.f32	s17, s0
 802144e:	f001 f869 	bl	8022524 <__ieee754_expf>
 8021452:	eeb0 8a40 	vmov.f32	s16, s0
 8021456:	eeb0 0a68 	vmov.f32	s0, s17
 802145a:	f002 fa53 	bl	8023904 <finitef>
 802145e:	b160      	cbz	r0, 802147a <expf+0x36>
 8021460:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80214a0 <expf+0x5c>
 8021464:	eef4 8ae7 	vcmpe.f32	s17, s15
 8021468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802146c:	dd0a      	ble.n	8021484 <expf+0x40>
 802146e:	f002 fa8f 	bl	8023990 <__errno>
 8021472:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80214a4 <expf+0x60>
 8021476:	2322      	movs	r3, #34	; 0x22
 8021478:	6003      	str	r3, [r0, #0]
 802147a:	eeb0 0a48 	vmov.f32	s0, s16
 802147e:	ecbd 8b02 	vpop	{d8}
 8021482:	bd08      	pop	{r3, pc}
 8021484:	eddf 7a08 	vldr	s15, [pc, #32]	; 80214a8 <expf+0x64>
 8021488:	eef4 8ae7 	vcmpe.f32	s17, s15
 802148c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021490:	d5f3      	bpl.n	802147a <expf+0x36>
 8021492:	f002 fa7d 	bl	8023990 <__errno>
 8021496:	2322      	movs	r3, #34	; 0x22
 8021498:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80214ac <expf+0x68>
 802149c:	6003      	str	r3, [r0, #0]
 802149e:	e7ec      	b.n	802147a <expf+0x36>
 80214a0:	42b17180 	.word	0x42b17180
 80214a4:	7f800000 	.word	0x7f800000
 80214a8:	c2cff1b5 	.word	0xc2cff1b5
 80214ac:	00000000 	.word	0x00000000

080214b0 <log10f>:
 80214b0:	b508      	push	{r3, lr}
 80214b2:	ed2d 8b02 	vpush	{d8}
 80214b6:	eeb0 8a40 	vmov.f32	s16, s0
 80214ba:	f001 f9f1 	bl	80228a0 <__ieee754_log10f>
 80214be:	eeb4 8a48 	vcmp.f32	s16, s16
 80214c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214c6:	d60f      	bvs.n	80214e8 <log10f+0x38>
 80214c8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80214cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214d0:	d80a      	bhi.n	80214e8 <log10f+0x38>
 80214d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80214d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214da:	d108      	bne.n	80214ee <log10f+0x3e>
 80214dc:	f002 fa58 	bl	8023990 <__errno>
 80214e0:	2322      	movs	r3, #34	; 0x22
 80214e2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8021504 <log10f+0x54>
 80214e6:	6003      	str	r3, [r0, #0]
 80214e8:	ecbd 8b02 	vpop	{d8}
 80214ec:	bd08      	pop	{r3, pc}
 80214ee:	f002 fa4f 	bl	8023990 <__errno>
 80214f2:	ecbd 8b02 	vpop	{d8}
 80214f6:	2321      	movs	r3, #33	; 0x21
 80214f8:	6003      	str	r3, [r0, #0]
 80214fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80214fe:	4802      	ldr	r0, [pc, #8]	; (8021508 <log10f+0x58>)
 8021500:	f002 ba0e 	b.w	8023920 <nanf>
 8021504:	ff800000 	.word	0xff800000
 8021508:	0802a24b 	.word	0x0802a24b

0802150c <sqrtf>:
 802150c:	b508      	push	{r3, lr}
 802150e:	ed2d 8b02 	vpush	{d8}
 8021512:	eeb0 8a40 	vmov.f32	s16, s0
 8021516:	f001 fa1b 	bl	8022950 <__ieee754_sqrtf>
 802151a:	eeb4 8a48 	vcmp.f32	s16, s16
 802151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021522:	d60c      	bvs.n	802153e <sqrtf+0x32>
 8021524:	eddf 8a07 	vldr	s17, [pc, #28]	; 8021544 <sqrtf+0x38>
 8021528:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802152c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021530:	d505      	bpl.n	802153e <sqrtf+0x32>
 8021532:	f002 fa2d 	bl	8023990 <__errno>
 8021536:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802153a:	2321      	movs	r3, #33	; 0x21
 802153c:	6003      	str	r3, [r0, #0]
 802153e:	ecbd 8b02 	vpop	{d8}
 8021542:	bd08      	pop	{r3, pc}
 8021544:	00000000 	.word	0x00000000

08021548 <__ieee754_pow>:
 8021548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802154c:	ed2d 8b06 	vpush	{d8-d10}
 8021550:	b089      	sub	sp, #36	; 0x24
 8021552:	ed8d 1b00 	vstr	d1, [sp]
 8021556:	e9dd 2900 	ldrd	r2, r9, [sp]
 802155a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802155e:	ea58 0102 	orrs.w	r1, r8, r2
 8021562:	ec57 6b10 	vmov	r6, r7, d0
 8021566:	d115      	bne.n	8021594 <__ieee754_pow+0x4c>
 8021568:	19b3      	adds	r3, r6, r6
 802156a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 802156e:	4152      	adcs	r2, r2
 8021570:	4299      	cmp	r1, r3
 8021572:	4b89      	ldr	r3, [pc, #548]	; (8021798 <__ieee754_pow+0x250>)
 8021574:	4193      	sbcs	r3, r2
 8021576:	f080 84d2 	bcs.w	8021f1e <__ieee754_pow+0x9d6>
 802157a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802157e:	4630      	mov	r0, r6
 8021580:	4639      	mov	r1, r7
 8021582:	f7de fe8d 	bl	80002a0 <__adddf3>
 8021586:	ec41 0b10 	vmov	d0, r0, r1
 802158a:	b009      	add	sp, #36	; 0x24
 802158c:	ecbd 8b06 	vpop	{d8-d10}
 8021590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021594:	4b81      	ldr	r3, [pc, #516]	; (802179c <__ieee754_pow+0x254>)
 8021596:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 802159a:	429c      	cmp	r4, r3
 802159c:	ee10 aa10 	vmov	sl, s0
 80215a0:	463d      	mov	r5, r7
 80215a2:	dc06      	bgt.n	80215b2 <__ieee754_pow+0x6a>
 80215a4:	d101      	bne.n	80215aa <__ieee754_pow+0x62>
 80215a6:	2e00      	cmp	r6, #0
 80215a8:	d1e7      	bne.n	802157a <__ieee754_pow+0x32>
 80215aa:	4598      	cmp	r8, r3
 80215ac:	dc01      	bgt.n	80215b2 <__ieee754_pow+0x6a>
 80215ae:	d10f      	bne.n	80215d0 <__ieee754_pow+0x88>
 80215b0:	b172      	cbz	r2, 80215d0 <__ieee754_pow+0x88>
 80215b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80215b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80215ba:	ea55 050a 	orrs.w	r5, r5, sl
 80215be:	d1dc      	bne.n	802157a <__ieee754_pow+0x32>
 80215c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80215c4:	18db      	adds	r3, r3, r3
 80215c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80215ca:	4152      	adcs	r2, r2
 80215cc:	429d      	cmp	r5, r3
 80215ce:	e7d0      	b.n	8021572 <__ieee754_pow+0x2a>
 80215d0:	2d00      	cmp	r5, #0
 80215d2:	da3b      	bge.n	802164c <__ieee754_pow+0x104>
 80215d4:	4b72      	ldr	r3, [pc, #456]	; (80217a0 <__ieee754_pow+0x258>)
 80215d6:	4598      	cmp	r8, r3
 80215d8:	dc51      	bgt.n	802167e <__ieee754_pow+0x136>
 80215da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80215de:	4598      	cmp	r8, r3
 80215e0:	f340 84ac 	ble.w	8021f3c <__ieee754_pow+0x9f4>
 80215e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80215e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80215ec:	2b14      	cmp	r3, #20
 80215ee:	dd0f      	ble.n	8021610 <__ieee754_pow+0xc8>
 80215f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80215f4:	fa22 f103 	lsr.w	r1, r2, r3
 80215f8:	fa01 f303 	lsl.w	r3, r1, r3
 80215fc:	4293      	cmp	r3, r2
 80215fe:	f040 849d 	bne.w	8021f3c <__ieee754_pow+0x9f4>
 8021602:	f001 0101 	and.w	r1, r1, #1
 8021606:	f1c1 0302 	rsb	r3, r1, #2
 802160a:	9304      	str	r3, [sp, #16]
 802160c:	b182      	cbz	r2, 8021630 <__ieee754_pow+0xe8>
 802160e:	e05f      	b.n	80216d0 <__ieee754_pow+0x188>
 8021610:	2a00      	cmp	r2, #0
 8021612:	d15b      	bne.n	80216cc <__ieee754_pow+0x184>
 8021614:	f1c3 0314 	rsb	r3, r3, #20
 8021618:	fa48 f103 	asr.w	r1, r8, r3
 802161c:	fa01 f303 	lsl.w	r3, r1, r3
 8021620:	4543      	cmp	r3, r8
 8021622:	f040 8488 	bne.w	8021f36 <__ieee754_pow+0x9ee>
 8021626:	f001 0101 	and.w	r1, r1, #1
 802162a:	f1c1 0302 	rsb	r3, r1, #2
 802162e:	9304      	str	r3, [sp, #16]
 8021630:	4b5c      	ldr	r3, [pc, #368]	; (80217a4 <__ieee754_pow+0x25c>)
 8021632:	4598      	cmp	r8, r3
 8021634:	d132      	bne.n	802169c <__ieee754_pow+0x154>
 8021636:	f1b9 0f00 	cmp.w	r9, #0
 802163a:	f280 8478 	bge.w	8021f2e <__ieee754_pow+0x9e6>
 802163e:	4959      	ldr	r1, [pc, #356]	; (80217a4 <__ieee754_pow+0x25c>)
 8021640:	4632      	mov	r2, r6
 8021642:	463b      	mov	r3, r7
 8021644:	2000      	movs	r0, #0
 8021646:	f7df f90b 	bl	8000860 <__aeabi_ddiv>
 802164a:	e79c      	b.n	8021586 <__ieee754_pow+0x3e>
 802164c:	2300      	movs	r3, #0
 802164e:	9304      	str	r3, [sp, #16]
 8021650:	2a00      	cmp	r2, #0
 8021652:	d13d      	bne.n	80216d0 <__ieee754_pow+0x188>
 8021654:	4b51      	ldr	r3, [pc, #324]	; (802179c <__ieee754_pow+0x254>)
 8021656:	4598      	cmp	r8, r3
 8021658:	d1ea      	bne.n	8021630 <__ieee754_pow+0xe8>
 802165a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802165e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8021662:	ea53 030a 	orrs.w	r3, r3, sl
 8021666:	f000 845a 	beq.w	8021f1e <__ieee754_pow+0x9d6>
 802166a:	4b4f      	ldr	r3, [pc, #316]	; (80217a8 <__ieee754_pow+0x260>)
 802166c:	429c      	cmp	r4, r3
 802166e:	dd08      	ble.n	8021682 <__ieee754_pow+0x13a>
 8021670:	f1b9 0f00 	cmp.w	r9, #0
 8021674:	f2c0 8457 	blt.w	8021f26 <__ieee754_pow+0x9de>
 8021678:	e9dd 0100 	ldrd	r0, r1, [sp]
 802167c:	e783      	b.n	8021586 <__ieee754_pow+0x3e>
 802167e:	2302      	movs	r3, #2
 8021680:	e7e5      	b.n	802164e <__ieee754_pow+0x106>
 8021682:	f1b9 0f00 	cmp.w	r9, #0
 8021686:	f04f 0000 	mov.w	r0, #0
 802168a:	f04f 0100 	mov.w	r1, #0
 802168e:	f6bf af7a 	bge.w	8021586 <__ieee754_pow+0x3e>
 8021692:	e9dd 0300 	ldrd	r0, r3, [sp]
 8021696:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802169a:	e774      	b.n	8021586 <__ieee754_pow+0x3e>
 802169c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80216a0:	d106      	bne.n	80216b0 <__ieee754_pow+0x168>
 80216a2:	4632      	mov	r2, r6
 80216a4:	463b      	mov	r3, r7
 80216a6:	4630      	mov	r0, r6
 80216a8:	4639      	mov	r1, r7
 80216aa:	f7de ffaf 	bl	800060c <__aeabi_dmul>
 80216ae:	e76a      	b.n	8021586 <__ieee754_pow+0x3e>
 80216b0:	4b3e      	ldr	r3, [pc, #248]	; (80217ac <__ieee754_pow+0x264>)
 80216b2:	4599      	cmp	r9, r3
 80216b4:	d10c      	bne.n	80216d0 <__ieee754_pow+0x188>
 80216b6:	2d00      	cmp	r5, #0
 80216b8:	db0a      	blt.n	80216d0 <__ieee754_pow+0x188>
 80216ba:	ec47 6b10 	vmov	d0, r6, r7
 80216be:	b009      	add	sp, #36	; 0x24
 80216c0:	ecbd 8b06 	vpop	{d8-d10}
 80216c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216c8:	f000 be7a 	b.w	80223c0 <__ieee754_sqrt>
 80216cc:	2300      	movs	r3, #0
 80216ce:	9304      	str	r3, [sp, #16]
 80216d0:	ec47 6b10 	vmov	d0, r6, r7
 80216d4:	f002 f874 	bl	80237c0 <fabs>
 80216d8:	ec51 0b10 	vmov	r0, r1, d0
 80216dc:	f1ba 0f00 	cmp.w	sl, #0
 80216e0:	d129      	bne.n	8021736 <__ieee754_pow+0x1ee>
 80216e2:	b124      	cbz	r4, 80216ee <__ieee754_pow+0x1a6>
 80216e4:	4b2f      	ldr	r3, [pc, #188]	; (80217a4 <__ieee754_pow+0x25c>)
 80216e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80216ea:	429a      	cmp	r2, r3
 80216ec:	d123      	bne.n	8021736 <__ieee754_pow+0x1ee>
 80216ee:	f1b9 0f00 	cmp.w	r9, #0
 80216f2:	da05      	bge.n	8021700 <__ieee754_pow+0x1b8>
 80216f4:	4602      	mov	r2, r0
 80216f6:	460b      	mov	r3, r1
 80216f8:	2000      	movs	r0, #0
 80216fa:	492a      	ldr	r1, [pc, #168]	; (80217a4 <__ieee754_pow+0x25c>)
 80216fc:	f7df f8b0 	bl	8000860 <__aeabi_ddiv>
 8021700:	2d00      	cmp	r5, #0
 8021702:	f6bf af40 	bge.w	8021586 <__ieee754_pow+0x3e>
 8021706:	9b04      	ldr	r3, [sp, #16]
 8021708:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802170c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8021710:	4323      	orrs	r3, r4
 8021712:	d108      	bne.n	8021726 <__ieee754_pow+0x1de>
 8021714:	4602      	mov	r2, r0
 8021716:	460b      	mov	r3, r1
 8021718:	4610      	mov	r0, r2
 802171a:	4619      	mov	r1, r3
 802171c:	f7de fdbe 	bl	800029c <__aeabi_dsub>
 8021720:	4602      	mov	r2, r0
 8021722:	460b      	mov	r3, r1
 8021724:	e78f      	b.n	8021646 <__ieee754_pow+0xfe>
 8021726:	9b04      	ldr	r3, [sp, #16]
 8021728:	2b01      	cmp	r3, #1
 802172a:	f47f af2c 	bne.w	8021586 <__ieee754_pow+0x3e>
 802172e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021732:	4619      	mov	r1, r3
 8021734:	e727      	b.n	8021586 <__ieee754_pow+0x3e>
 8021736:	0feb      	lsrs	r3, r5, #31
 8021738:	3b01      	subs	r3, #1
 802173a:	9306      	str	r3, [sp, #24]
 802173c:	9a06      	ldr	r2, [sp, #24]
 802173e:	9b04      	ldr	r3, [sp, #16]
 8021740:	4313      	orrs	r3, r2
 8021742:	d102      	bne.n	802174a <__ieee754_pow+0x202>
 8021744:	4632      	mov	r2, r6
 8021746:	463b      	mov	r3, r7
 8021748:	e7e6      	b.n	8021718 <__ieee754_pow+0x1d0>
 802174a:	4b19      	ldr	r3, [pc, #100]	; (80217b0 <__ieee754_pow+0x268>)
 802174c:	4598      	cmp	r8, r3
 802174e:	f340 80fb 	ble.w	8021948 <__ieee754_pow+0x400>
 8021752:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8021756:	4598      	cmp	r8, r3
 8021758:	4b13      	ldr	r3, [pc, #76]	; (80217a8 <__ieee754_pow+0x260>)
 802175a:	dd0c      	ble.n	8021776 <__ieee754_pow+0x22e>
 802175c:	429c      	cmp	r4, r3
 802175e:	dc0f      	bgt.n	8021780 <__ieee754_pow+0x238>
 8021760:	f1b9 0f00 	cmp.w	r9, #0
 8021764:	da0f      	bge.n	8021786 <__ieee754_pow+0x23e>
 8021766:	2000      	movs	r0, #0
 8021768:	b009      	add	sp, #36	; 0x24
 802176a:	ecbd 8b06 	vpop	{d8-d10}
 802176e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021772:	f001 bffa 	b.w	802376a <__math_oflow>
 8021776:	429c      	cmp	r4, r3
 8021778:	dbf2      	blt.n	8021760 <__ieee754_pow+0x218>
 802177a:	4b0a      	ldr	r3, [pc, #40]	; (80217a4 <__ieee754_pow+0x25c>)
 802177c:	429c      	cmp	r4, r3
 802177e:	dd19      	ble.n	80217b4 <__ieee754_pow+0x26c>
 8021780:	f1b9 0f00 	cmp.w	r9, #0
 8021784:	dcef      	bgt.n	8021766 <__ieee754_pow+0x21e>
 8021786:	2000      	movs	r0, #0
 8021788:	b009      	add	sp, #36	; 0x24
 802178a:	ecbd 8b06 	vpop	{d8-d10}
 802178e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021792:	f001 bfe1 	b.w	8023758 <__math_uflow>
 8021796:	bf00      	nop
 8021798:	fff00000 	.word	0xfff00000
 802179c:	7ff00000 	.word	0x7ff00000
 80217a0:	433fffff 	.word	0x433fffff
 80217a4:	3ff00000 	.word	0x3ff00000
 80217a8:	3fefffff 	.word	0x3fefffff
 80217ac:	3fe00000 	.word	0x3fe00000
 80217b0:	41e00000 	.word	0x41e00000
 80217b4:	4b60      	ldr	r3, [pc, #384]	; (8021938 <__ieee754_pow+0x3f0>)
 80217b6:	2200      	movs	r2, #0
 80217b8:	f7de fd70 	bl	800029c <__aeabi_dsub>
 80217bc:	a354      	add	r3, pc, #336	; (adr r3, 8021910 <__ieee754_pow+0x3c8>)
 80217be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217c2:	4604      	mov	r4, r0
 80217c4:	460d      	mov	r5, r1
 80217c6:	f7de ff21 	bl	800060c <__aeabi_dmul>
 80217ca:	a353      	add	r3, pc, #332	; (adr r3, 8021918 <__ieee754_pow+0x3d0>)
 80217cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217d0:	4606      	mov	r6, r0
 80217d2:	460f      	mov	r7, r1
 80217d4:	4620      	mov	r0, r4
 80217d6:	4629      	mov	r1, r5
 80217d8:	f7de ff18 	bl	800060c <__aeabi_dmul>
 80217dc:	4b57      	ldr	r3, [pc, #348]	; (802193c <__ieee754_pow+0x3f4>)
 80217de:	4682      	mov	sl, r0
 80217e0:	468b      	mov	fp, r1
 80217e2:	2200      	movs	r2, #0
 80217e4:	4620      	mov	r0, r4
 80217e6:	4629      	mov	r1, r5
 80217e8:	f7de ff10 	bl	800060c <__aeabi_dmul>
 80217ec:	4602      	mov	r2, r0
 80217ee:	460b      	mov	r3, r1
 80217f0:	a14b      	add	r1, pc, #300	; (adr r1, 8021920 <__ieee754_pow+0x3d8>)
 80217f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80217f6:	f7de fd51 	bl	800029c <__aeabi_dsub>
 80217fa:	4622      	mov	r2, r4
 80217fc:	462b      	mov	r3, r5
 80217fe:	f7de ff05 	bl	800060c <__aeabi_dmul>
 8021802:	4602      	mov	r2, r0
 8021804:	460b      	mov	r3, r1
 8021806:	2000      	movs	r0, #0
 8021808:	494d      	ldr	r1, [pc, #308]	; (8021940 <__ieee754_pow+0x3f8>)
 802180a:	f7de fd47 	bl	800029c <__aeabi_dsub>
 802180e:	4622      	mov	r2, r4
 8021810:	4680      	mov	r8, r0
 8021812:	4689      	mov	r9, r1
 8021814:	462b      	mov	r3, r5
 8021816:	4620      	mov	r0, r4
 8021818:	4629      	mov	r1, r5
 802181a:	f7de fef7 	bl	800060c <__aeabi_dmul>
 802181e:	4602      	mov	r2, r0
 8021820:	460b      	mov	r3, r1
 8021822:	4640      	mov	r0, r8
 8021824:	4649      	mov	r1, r9
 8021826:	f7de fef1 	bl	800060c <__aeabi_dmul>
 802182a:	a33f      	add	r3, pc, #252	; (adr r3, 8021928 <__ieee754_pow+0x3e0>)
 802182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021830:	f7de feec 	bl	800060c <__aeabi_dmul>
 8021834:	4602      	mov	r2, r0
 8021836:	460b      	mov	r3, r1
 8021838:	4650      	mov	r0, sl
 802183a:	4659      	mov	r1, fp
 802183c:	f7de fd2e 	bl	800029c <__aeabi_dsub>
 8021840:	4602      	mov	r2, r0
 8021842:	460b      	mov	r3, r1
 8021844:	4680      	mov	r8, r0
 8021846:	4689      	mov	r9, r1
 8021848:	4630      	mov	r0, r6
 802184a:	4639      	mov	r1, r7
 802184c:	f7de fd28 	bl	80002a0 <__adddf3>
 8021850:	2000      	movs	r0, #0
 8021852:	4632      	mov	r2, r6
 8021854:	463b      	mov	r3, r7
 8021856:	4604      	mov	r4, r0
 8021858:	460d      	mov	r5, r1
 802185a:	f7de fd1f 	bl	800029c <__aeabi_dsub>
 802185e:	4602      	mov	r2, r0
 8021860:	460b      	mov	r3, r1
 8021862:	4640      	mov	r0, r8
 8021864:	4649      	mov	r1, r9
 8021866:	f7de fd19 	bl	800029c <__aeabi_dsub>
 802186a:	9b04      	ldr	r3, [sp, #16]
 802186c:	9a06      	ldr	r2, [sp, #24]
 802186e:	3b01      	subs	r3, #1
 8021870:	4313      	orrs	r3, r2
 8021872:	4682      	mov	sl, r0
 8021874:	468b      	mov	fp, r1
 8021876:	f040 81e7 	bne.w	8021c48 <__ieee754_pow+0x700>
 802187a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8021930 <__ieee754_pow+0x3e8>
 802187e:	eeb0 8a47 	vmov.f32	s16, s14
 8021882:	eef0 8a67 	vmov.f32	s17, s15
 8021886:	e9dd 6700 	ldrd	r6, r7, [sp]
 802188a:	2600      	movs	r6, #0
 802188c:	4632      	mov	r2, r6
 802188e:	463b      	mov	r3, r7
 8021890:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021894:	f7de fd02 	bl	800029c <__aeabi_dsub>
 8021898:	4622      	mov	r2, r4
 802189a:	462b      	mov	r3, r5
 802189c:	f7de feb6 	bl	800060c <__aeabi_dmul>
 80218a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80218a4:	4680      	mov	r8, r0
 80218a6:	4689      	mov	r9, r1
 80218a8:	4650      	mov	r0, sl
 80218aa:	4659      	mov	r1, fp
 80218ac:	f7de feae 	bl	800060c <__aeabi_dmul>
 80218b0:	4602      	mov	r2, r0
 80218b2:	460b      	mov	r3, r1
 80218b4:	4640      	mov	r0, r8
 80218b6:	4649      	mov	r1, r9
 80218b8:	f7de fcf2 	bl	80002a0 <__adddf3>
 80218bc:	4632      	mov	r2, r6
 80218be:	463b      	mov	r3, r7
 80218c0:	4680      	mov	r8, r0
 80218c2:	4689      	mov	r9, r1
 80218c4:	4620      	mov	r0, r4
 80218c6:	4629      	mov	r1, r5
 80218c8:	f7de fea0 	bl	800060c <__aeabi_dmul>
 80218cc:	460b      	mov	r3, r1
 80218ce:	4604      	mov	r4, r0
 80218d0:	460d      	mov	r5, r1
 80218d2:	4602      	mov	r2, r0
 80218d4:	4649      	mov	r1, r9
 80218d6:	4640      	mov	r0, r8
 80218d8:	f7de fce2 	bl	80002a0 <__adddf3>
 80218dc:	4b19      	ldr	r3, [pc, #100]	; (8021944 <__ieee754_pow+0x3fc>)
 80218de:	4299      	cmp	r1, r3
 80218e0:	ec45 4b19 	vmov	d9, r4, r5
 80218e4:	4606      	mov	r6, r0
 80218e6:	460f      	mov	r7, r1
 80218e8:	468b      	mov	fp, r1
 80218ea:	f340 82f1 	ble.w	8021ed0 <__ieee754_pow+0x988>
 80218ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80218f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80218f6:	4303      	orrs	r3, r0
 80218f8:	f000 81e4 	beq.w	8021cc4 <__ieee754_pow+0x77c>
 80218fc:	ec51 0b18 	vmov	r0, r1, d8
 8021900:	2200      	movs	r2, #0
 8021902:	2300      	movs	r3, #0
 8021904:	f7df f8f4 	bl	8000af0 <__aeabi_dcmplt>
 8021908:	3800      	subs	r0, #0
 802190a:	bf18      	it	ne
 802190c:	2001      	movne	r0, #1
 802190e:	e72b      	b.n	8021768 <__ieee754_pow+0x220>
 8021910:	60000000 	.word	0x60000000
 8021914:	3ff71547 	.word	0x3ff71547
 8021918:	f85ddf44 	.word	0xf85ddf44
 802191c:	3e54ae0b 	.word	0x3e54ae0b
 8021920:	55555555 	.word	0x55555555
 8021924:	3fd55555 	.word	0x3fd55555
 8021928:	652b82fe 	.word	0x652b82fe
 802192c:	3ff71547 	.word	0x3ff71547
 8021930:	00000000 	.word	0x00000000
 8021934:	bff00000 	.word	0xbff00000
 8021938:	3ff00000 	.word	0x3ff00000
 802193c:	3fd00000 	.word	0x3fd00000
 8021940:	3fe00000 	.word	0x3fe00000
 8021944:	408fffff 	.word	0x408fffff
 8021948:	4bd5      	ldr	r3, [pc, #852]	; (8021ca0 <__ieee754_pow+0x758>)
 802194a:	402b      	ands	r3, r5
 802194c:	2200      	movs	r2, #0
 802194e:	b92b      	cbnz	r3, 802195c <__ieee754_pow+0x414>
 8021950:	4bd4      	ldr	r3, [pc, #848]	; (8021ca4 <__ieee754_pow+0x75c>)
 8021952:	f7de fe5b 	bl	800060c <__aeabi_dmul>
 8021956:	f06f 0234 	mvn.w	r2, #52	; 0x34
 802195a:	460c      	mov	r4, r1
 802195c:	1523      	asrs	r3, r4, #20
 802195e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8021962:	4413      	add	r3, r2
 8021964:	9305      	str	r3, [sp, #20]
 8021966:	4bd0      	ldr	r3, [pc, #832]	; (8021ca8 <__ieee754_pow+0x760>)
 8021968:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802196c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8021970:	429c      	cmp	r4, r3
 8021972:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8021976:	dd08      	ble.n	802198a <__ieee754_pow+0x442>
 8021978:	4bcc      	ldr	r3, [pc, #816]	; (8021cac <__ieee754_pow+0x764>)
 802197a:	429c      	cmp	r4, r3
 802197c:	f340 8162 	ble.w	8021c44 <__ieee754_pow+0x6fc>
 8021980:	9b05      	ldr	r3, [sp, #20]
 8021982:	3301      	adds	r3, #1
 8021984:	9305      	str	r3, [sp, #20]
 8021986:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802198a:	2400      	movs	r4, #0
 802198c:	00e3      	lsls	r3, r4, #3
 802198e:	9307      	str	r3, [sp, #28]
 8021990:	4bc7      	ldr	r3, [pc, #796]	; (8021cb0 <__ieee754_pow+0x768>)
 8021992:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8021996:	ed93 7b00 	vldr	d7, [r3]
 802199a:	4629      	mov	r1, r5
 802199c:	ec53 2b17 	vmov	r2, r3, d7
 80219a0:	eeb0 9a47 	vmov.f32	s18, s14
 80219a4:	eef0 9a67 	vmov.f32	s19, s15
 80219a8:	4682      	mov	sl, r0
 80219aa:	f7de fc77 	bl	800029c <__aeabi_dsub>
 80219ae:	4652      	mov	r2, sl
 80219b0:	4606      	mov	r6, r0
 80219b2:	460f      	mov	r7, r1
 80219b4:	462b      	mov	r3, r5
 80219b6:	ec51 0b19 	vmov	r0, r1, d9
 80219ba:	f7de fc71 	bl	80002a0 <__adddf3>
 80219be:	4602      	mov	r2, r0
 80219c0:	460b      	mov	r3, r1
 80219c2:	2000      	movs	r0, #0
 80219c4:	49bb      	ldr	r1, [pc, #748]	; (8021cb4 <__ieee754_pow+0x76c>)
 80219c6:	f7de ff4b 	bl	8000860 <__aeabi_ddiv>
 80219ca:	ec41 0b1a 	vmov	d10, r0, r1
 80219ce:	4602      	mov	r2, r0
 80219d0:	460b      	mov	r3, r1
 80219d2:	4630      	mov	r0, r6
 80219d4:	4639      	mov	r1, r7
 80219d6:	f7de fe19 	bl	800060c <__aeabi_dmul>
 80219da:	2300      	movs	r3, #0
 80219dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80219e0:	9302      	str	r3, [sp, #8]
 80219e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80219e6:	46ab      	mov	fp, r5
 80219e8:	106d      	asrs	r5, r5, #1
 80219ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80219ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80219f2:	ec41 0b18 	vmov	d8, r0, r1
 80219f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80219fa:	2200      	movs	r2, #0
 80219fc:	4640      	mov	r0, r8
 80219fe:	4649      	mov	r1, r9
 8021a00:	4614      	mov	r4, r2
 8021a02:	461d      	mov	r5, r3
 8021a04:	f7de fe02 	bl	800060c <__aeabi_dmul>
 8021a08:	4602      	mov	r2, r0
 8021a0a:	460b      	mov	r3, r1
 8021a0c:	4630      	mov	r0, r6
 8021a0e:	4639      	mov	r1, r7
 8021a10:	f7de fc44 	bl	800029c <__aeabi_dsub>
 8021a14:	ec53 2b19 	vmov	r2, r3, d9
 8021a18:	4606      	mov	r6, r0
 8021a1a:	460f      	mov	r7, r1
 8021a1c:	4620      	mov	r0, r4
 8021a1e:	4629      	mov	r1, r5
 8021a20:	f7de fc3c 	bl	800029c <__aeabi_dsub>
 8021a24:	4602      	mov	r2, r0
 8021a26:	460b      	mov	r3, r1
 8021a28:	4650      	mov	r0, sl
 8021a2a:	4659      	mov	r1, fp
 8021a2c:	f7de fc36 	bl	800029c <__aeabi_dsub>
 8021a30:	4642      	mov	r2, r8
 8021a32:	464b      	mov	r3, r9
 8021a34:	f7de fdea 	bl	800060c <__aeabi_dmul>
 8021a38:	4602      	mov	r2, r0
 8021a3a:	460b      	mov	r3, r1
 8021a3c:	4630      	mov	r0, r6
 8021a3e:	4639      	mov	r1, r7
 8021a40:	f7de fc2c 	bl	800029c <__aeabi_dsub>
 8021a44:	ec53 2b1a 	vmov	r2, r3, d10
 8021a48:	f7de fde0 	bl	800060c <__aeabi_dmul>
 8021a4c:	ec53 2b18 	vmov	r2, r3, d8
 8021a50:	ec41 0b19 	vmov	d9, r0, r1
 8021a54:	ec51 0b18 	vmov	r0, r1, d8
 8021a58:	f7de fdd8 	bl	800060c <__aeabi_dmul>
 8021a5c:	a37c      	add	r3, pc, #496	; (adr r3, 8021c50 <__ieee754_pow+0x708>)
 8021a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a62:	4604      	mov	r4, r0
 8021a64:	460d      	mov	r5, r1
 8021a66:	f7de fdd1 	bl	800060c <__aeabi_dmul>
 8021a6a:	a37b      	add	r3, pc, #492	; (adr r3, 8021c58 <__ieee754_pow+0x710>)
 8021a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a70:	f7de fc16 	bl	80002a0 <__adddf3>
 8021a74:	4622      	mov	r2, r4
 8021a76:	462b      	mov	r3, r5
 8021a78:	f7de fdc8 	bl	800060c <__aeabi_dmul>
 8021a7c:	a378      	add	r3, pc, #480	; (adr r3, 8021c60 <__ieee754_pow+0x718>)
 8021a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a82:	f7de fc0d 	bl	80002a0 <__adddf3>
 8021a86:	4622      	mov	r2, r4
 8021a88:	462b      	mov	r3, r5
 8021a8a:	f7de fdbf 	bl	800060c <__aeabi_dmul>
 8021a8e:	a376      	add	r3, pc, #472	; (adr r3, 8021c68 <__ieee754_pow+0x720>)
 8021a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a94:	f7de fc04 	bl	80002a0 <__adddf3>
 8021a98:	4622      	mov	r2, r4
 8021a9a:	462b      	mov	r3, r5
 8021a9c:	f7de fdb6 	bl	800060c <__aeabi_dmul>
 8021aa0:	a373      	add	r3, pc, #460	; (adr r3, 8021c70 <__ieee754_pow+0x728>)
 8021aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021aa6:	f7de fbfb 	bl	80002a0 <__adddf3>
 8021aaa:	4622      	mov	r2, r4
 8021aac:	462b      	mov	r3, r5
 8021aae:	f7de fdad 	bl	800060c <__aeabi_dmul>
 8021ab2:	a371      	add	r3, pc, #452	; (adr r3, 8021c78 <__ieee754_pow+0x730>)
 8021ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ab8:	f7de fbf2 	bl	80002a0 <__adddf3>
 8021abc:	4622      	mov	r2, r4
 8021abe:	4606      	mov	r6, r0
 8021ac0:	460f      	mov	r7, r1
 8021ac2:	462b      	mov	r3, r5
 8021ac4:	4620      	mov	r0, r4
 8021ac6:	4629      	mov	r1, r5
 8021ac8:	f7de fda0 	bl	800060c <__aeabi_dmul>
 8021acc:	4602      	mov	r2, r0
 8021ace:	460b      	mov	r3, r1
 8021ad0:	4630      	mov	r0, r6
 8021ad2:	4639      	mov	r1, r7
 8021ad4:	f7de fd9a 	bl	800060c <__aeabi_dmul>
 8021ad8:	4642      	mov	r2, r8
 8021ada:	4604      	mov	r4, r0
 8021adc:	460d      	mov	r5, r1
 8021ade:	464b      	mov	r3, r9
 8021ae0:	ec51 0b18 	vmov	r0, r1, d8
 8021ae4:	f7de fbdc 	bl	80002a0 <__adddf3>
 8021ae8:	ec53 2b19 	vmov	r2, r3, d9
 8021aec:	f7de fd8e 	bl	800060c <__aeabi_dmul>
 8021af0:	4622      	mov	r2, r4
 8021af2:	462b      	mov	r3, r5
 8021af4:	f7de fbd4 	bl	80002a0 <__adddf3>
 8021af8:	4642      	mov	r2, r8
 8021afa:	4682      	mov	sl, r0
 8021afc:	468b      	mov	fp, r1
 8021afe:	464b      	mov	r3, r9
 8021b00:	4640      	mov	r0, r8
 8021b02:	4649      	mov	r1, r9
 8021b04:	f7de fd82 	bl	800060c <__aeabi_dmul>
 8021b08:	4b6b      	ldr	r3, [pc, #428]	; (8021cb8 <__ieee754_pow+0x770>)
 8021b0a:	2200      	movs	r2, #0
 8021b0c:	4606      	mov	r6, r0
 8021b0e:	460f      	mov	r7, r1
 8021b10:	f7de fbc6 	bl	80002a0 <__adddf3>
 8021b14:	4652      	mov	r2, sl
 8021b16:	465b      	mov	r3, fp
 8021b18:	f7de fbc2 	bl	80002a0 <__adddf3>
 8021b1c:	2000      	movs	r0, #0
 8021b1e:	4604      	mov	r4, r0
 8021b20:	460d      	mov	r5, r1
 8021b22:	4602      	mov	r2, r0
 8021b24:	460b      	mov	r3, r1
 8021b26:	4640      	mov	r0, r8
 8021b28:	4649      	mov	r1, r9
 8021b2a:	f7de fd6f 	bl	800060c <__aeabi_dmul>
 8021b2e:	4b62      	ldr	r3, [pc, #392]	; (8021cb8 <__ieee754_pow+0x770>)
 8021b30:	4680      	mov	r8, r0
 8021b32:	4689      	mov	r9, r1
 8021b34:	2200      	movs	r2, #0
 8021b36:	4620      	mov	r0, r4
 8021b38:	4629      	mov	r1, r5
 8021b3a:	f7de fbaf 	bl	800029c <__aeabi_dsub>
 8021b3e:	4632      	mov	r2, r6
 8021b40:	463b      	mov	r3, r7
 8021b42:	f7de fbab 	bl	800029c <__aeabi_dsub>
 8021b46:	4602      	mov	r2, r0
 8021b48:	460b      	mov	r3, r1
 8021b4a:	4650      	mov	r0, sl
 8021b4c:	4659      	mov	r1, fp
 8021b4e:	f7de fba5 	bl	800029c <__aeabi_dsub>
 8021b52:	ec53 2b18 	vmov	r2, r3, d8
 8021b56:	f7de fd59 	bl	800060c <__aeabi_dmul>
 8021b5a:	4622      	mov	r2, r4
 8021b5c:	4606      	mov	r6, r0
 8021b5e:	460f      	mov	r7, r1
 8021b60:	462b      	mov	r3, r5
 8021b62:	ec51 0b19 	vmov	r0, r1, d9
 8021b66:	f7de fd51 	bl	800060c <__aeabi_dmul>
 8021b6a:	4602      	mov	r2, r0
 8021b6c:	460b      	mov	r3, r1
 8021b6e:	4630      	mov	r0, r6
 8021b70:	4639      	mov	r1, r7
 8021b72:	f7de fb95 	bl	80002a0 <__adddf3>
 8021b76:	4606      	mov	r6, r0
 8021b78:	460f      	mov	r7, r1
 8021b7a:	4602      	mov	r2, r0
 8021b7c:	460b      	mov	r3, r1
 8021b7e:	4640      	mov	r0, r8
 8021b80:	4649      	mov	r1, r9
 8021b82:	f7de fb8d 	bl	80002a0 <__adddf3>
 8021b86:	a33e      	add	r3, pc, #248	; (adr r3, 8021c80 <__ieee754_pow+0x738>)
 8021b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b8c:	2000      	movs	r0, #0
 8021b8e:	4604      	mov	r4, r0
 8021b90:	460d      	mov	r5, r1
 8021b92:	f7de fd3b 	bl	800060c <__aeabi_dmul>
 8021b96:	4642      	mov	r2, r8
 8021b98:	ec41 0b18 	vmov	d8, r0, r1
 8021b9c:	464b      	mov	r3, r9
 8021b9e:	4620      	mov	r0, r4
 8021ba0:	4629      	mov	r1, r5
 8021ba2:	f7de fb7b 	bl	800029c <__aeabi_dsub>
 8021ba6:	4602      	mov	r2, r0
 8021ba8:	460b      	mov	r3, r1
 8021baa:	4630      	mov	r0, r6
 8021bac:	4639      	mov	r1, r7
 8021bae:	f7de fb75 	bl	800029c <__aeabi_dsub>
 8021bb2:	a335      	add	r3, pc, #212	; (adr r3, 8021c88 <__ieee754_pow+0x740>)
 8021bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bb8:	f7de fd28 	bl	800060c <__aeabi_dmul>
 8021bbc:	a334      	add	r3, pc, #208	; (adr r3, 8021c90 <__ieee754_pow+0x748>)
 8021bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bc2:	4606      	mov	r6, r0
 8021bc4:	460f      	mov	r7, r1
 8021bc6:	4620      	mov	r0, r4
 8021bc8:	4629      	mov	r1, r5
 8021bca:	f7de fd1f 	bl	800060c <__aeabi_dmul>
 8021bce:	4602      	mov	r2, r0
 8021bd0:	460b      	mov	r3, r1
 8021bd2:	4630      	mov	r0, r6
 8021bd4:	4639      	mov	r1, r7
 8021bd6:	f7de fb63 	bl	80002a0 <__adddf3>
 8021bda:	9a07      	ldr	r2, [sp, #28]
 8021bdc:	4b37      	ldr	r3, [pc, #220]	; (8021cbc <__ieee754_pow+0x774>)
 8021bde:	4413      	add	r3, r2
 8021be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021be4:	f7de fb5c 	bl	80002a0 <__adddf3>
 8021be8:	4682      	mov	sl, r0
 8021bea:	9805      	ldr	r0, [sp, #20]
 8021bec:	468b      	mov	fp, r1
 8021bee:	f7de fca3 	bl	8000538 <__aeabi_i2d>
 8021bf2:	9a07      	ldr	r2, [sp, #28]
 8021bf4:	4b32      	ldr	r3, [pc, #200]	; (8021cc0 <__ieee754_pow+0x778>)
 8021bf6:	4413      	add	r3, r2
 8021bf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021bfc:	4606      	mov	r6, r0
 8021bfe:	460f      	mov	r7, r1
 8021c00:	4652      	mov	r2, sl
 8021c02:	465b      	mov	r3, fp
 8021c04:	ec51 0b18 	vmov	r0, r1, d8
 8021c08:	f7de fb4a 	bl	80002a0 <__adddf3>
 8021c0c:	4642      	mov	r2, r8
 8021c0e:	464b      	mov	r3, r9
 8021c10:	f7de fb46 	bl	80002a0 <__adddf3>
 8021c14:	4632      	mov	r2, r6
 8021c16:	463b      	mov	r3, r7
 8021c18:	f7de fb42 	bl	80002a0 <__adddf3>
 8021c1c:	2000      	movs	r0, #0
 8021c1e:	4632      	mov	r2, r6
 8021c20:	463b      	mov	r3, r7
 8021c22:	4604      	mov	r4, r0
 8021c24:	460d      	mov	r5, r1
 8021c26:	f7de fb39 	bl	800029c <__aeabi_dsub>
 8021c2a:	4642      	mov	r2, r8
 8021c2c:	464b      	mov	r3, r9
 8021c2e:	f7de fb35 	bl	800029c <__aeabi_dsub>
 8021c32:	ec53 2b18 	vmov	r2, r3, d8
 8021c36:	f7de fb31 	bl	800029c <__aeabi_dsub>
 8021c3a:	4602      	mov	r2, r0
 8021c3c:	460b      	mov	r3, r1
 8021c3e:	4650      	mov	r0, sl
 8021c40:	4659      	mov	r1, fp
 8021c42:	e610      	b.n	8021866 <__ieee754_pow+0x31e>
 8021c44:	2401      	movs	r4, #1
 8021c46:	e6a1      	b.n	802198c <__ieee754_pow+0x444>
 8021c48:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8021c98 <__ieee754_pow+0x750>
 8021c4c:	e617      	b.n	802187e <__ieee754_pow+0x336>
 8021c4e:	bf00      	nop
 8021c50:	4a454eef 	.word	0x4a454eef
 8021c54:	3fca7e28 	.word	0x3fca7e28
 8021c58:	93c9db65 	.word	0x93c9db65
 8021c5c:	3fcd864a 	.word	0x3fcd864a
 8021c60:	a91d4101 	.word	0xa91d4101
 8021c64:	3fd17460 	.word	0x3fd17460
 8021c68:	518f264d 	.word	0x518f264d
 8021c6c:	3fd55555 	.word	0x3fd55555
 8021c70:	db6fabff 	.word	0xdb6fabff
 8021c74:	3fdb6db6 	.word	0x3fdb6db6
 8021c78:	33333303 	.word	0x33333303
 8021c7c:	3fe33333 	.word	0x3fe33333
 8021c80:	e0000000 	.word	0xe0000000
 8021c84:	3feec709 	.word	0x3feec709
 8021c88:	dc3a03fd 	.word	0xdc3a03fd
 8021c8c:	3feec709 	.word	0x3feec709
 8021c90:	145b01f5 	.word	0x145b01f5
 8021c94:	be3e2fe0 	.word	0xbe3e2fe0
 8021c98:	00000000 	.word	0x00000000
 8021c9c:	3ff00000 	.word	0x3ff00000
 8021ca0:	7ff00000 	.word	0x7ff00000
 8021ca4:	43400000 	.word	0x43400000
 8021ca8:	0003988e 	.word	0x0003988e
 8021cac:	000bb679 	.word	0x000bb679
 8021cb0:	08029ff0 	.word	0x08029ff0
 8021cb4:	3ff00000 	.word	0x3ff00000
 8021cb8:	40080000 	.word	0x40080000
 8021cbc:	0802a010 	.word	0x0802a010
 8021cc0:	0802a000 	.word	0x0802a000
 8021cc4:	a3b5      	add	r3, pc, #724	; (adr r3, 8021f9c <__ieee754_pow+0xa54>)
 8021cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cca:	4640      	mov	r0, r8
 8021ccc:	4649      	mov	r1, r9
 8021cce:	f7de fae7 	bl	80002a0 <__adddf3>
 8021cd2:	4622      	mov	r2, r4
 8021cd4:	ec41 0b1a 	vmov	d10, r0, r1
 8021cd8:	462b      	mov	r3, r5
 8021cda:	4630      	mov	r0, r6
 8021cdc:	4639      	mov	r1, r7
 8021cde:	f7de fadd 	bl	800029c <__aeabi_dsub>
 8021ce2:	4602      	mov	r2, r0
 8021ce4:	460b      	mov	r3, r1
 8021ce6:	ec51 0b1a 	vmov	r0, r1, d10
 8021cea:	f7de ff1f 	bl	8000b2c <__aeabi_dcmpgt>
 8021cee:	2800      	cmp	r0, #0
 8021cf0:	f47f ae04 	bne.w	80218fc <__ieee754_pow+0x3b4>
 8021cf4:	4aa4      	ldr	r2, [pc, #656]	; (8021f88 <__ieee754_pow+0xa40>)
 8021cf6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021cfa:	4293      	cmp	r3, r2
 8021cfc:	f340 8108 	ble.w	8021f10 <__ieee754_pow+0x9c8>
 8021d00:	151b      	asrs	r3, r3, #20
 8021d02:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8021d06:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8021d0a:	fa4a f303 	asr.w	r3, sl, r3
 8021d0e:	445b      	add	r3, fp
 8021d10:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8021d14:	4e9d      	ldr	r6, [pc, #628]	; (8021f8c <__ieee754_pow+0xa44>)
 8021d16:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8021d1a:	4116      	asrs	r6, r2
 8021d1c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8021d20:	2000      	movs	r0, #0
 8021d22:	ea23 0106 	bic.w	r1, r3, r6
 8021d26:	f1c2 0214 	rsb	r2, r2, #20
 8021d2a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8021d2e:	fa4a fa02 	asr.w	sl, sl, r2
 8021d32:	f1bb 0f00 	cmp.w	fp, #0
 8021d36:	4602      	mov	r2, r0
 8021d38:	460b      	mov	r3, r1
 8021d3a:	4620      	mov	r0, r4
 8021d3c:	4629      	mov	r1, r5
 8021d3e:	bfb8      	it	lt
 8021d40:	f1ca 0a00 	rsblt	sl, sl, #0
 8021d44:	f7de faaa 	bl	800029c <__aeabi_dsub>
 8021d48:	ec41 0b19 	vmov	d9, r0, r1
 8021d4c:	4642      	mov	r2, r8
 8021d4e:	464b      	mov	r3, r9
 8021d50:	ec51 0b19 	vmov	r0, r1, d9
 8021d54:	f7de faa4 	bl	80002a0 <__adddf3>
 8021d58:	a37b      	add	r3, pc, #492	; (adr r3, 8021f48 <__ieee754_pow+0xa00>)
 8021d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d5e:	2000      	movs	r0, #0
 8021d60:	4604      	mov	r4, r0
 8021d62:	460d      	mov	r5, r1
 8021d64:	f7de fc52 	bl	800060c <__aeabi_dmul>
 8021d68:	ec53 2b19 	vmov	r2, r3, d9
 8021d6c:	4606      	mov	r6, r0
 8021d6e:	460f      	mov	r7, r1
 8021d70:	4620      	mov	r0, r4
 8021d72:	4629      	mov	r1, r5
 8021d74:	f7de fa92 	bl	800029c <__aeabi_dsub>
 8021d78:	4602      	mov	r2, r0
 8021d7a:	460b      	mov	r3, r1
 8021d7c:	4640      	mov	r0, r8
 8021d7e:	4649      	mov	r1, r9
 8021d80:	f7de fa8c 	bl	800029c <__aeabi_dsub>
 8021d84:	a372      	add	r3, pc, #456	; (adr r3, 8021f50 <__ieee754_pow+0xa08>)
 8021d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d8a:	f7de fc3f 	bl	800060c <__aeabi_dmul>
 8021d8e:	a372      	add	r3, pc, #456	; (adr r3, 8021f58 <__ieee754_pow+0xa10>)
 8021d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d94:	4680      	mov	r8, r0
 8021d96:	4689      	mov	r9, r1
 8021d98:	4620      	mov	r0, r4
 8021d9a:	4629      	mov	r1, r5
 8021d9c:	f7de fc36 	bl	800060c <__aeabi_dmul>
 8021da0:	4602      	mov	r2, r0
 8021da2:	460b      	mov	r3, r1
 8021da4:	4640      	mov	r0, r8
 8021da6:	4649      	mov	r1, r9
 8021da8:	f7de fa7a 	bl	80002a0 <__adddf3>
 8021dac:	4604      	mov	r4, r0
 8021dae:	460d      	mov	r5, r1
 8021db0:	4602      	mov	r2, r0
 8021db2:	460b      	mov	r3, r1
 8021db4:	4630      	mov	r0, r6
 8021db6:	4639      	mov	r1, r7
 8021db8:	f7de fa72 	bl	80002a0 <__adddf3>
 8021dbc:	4632      	mov	r2, r6
 8021dbe:	463b      	mov	r3, r7
 8021dc0:	4680      	mov	r8, r0
 8021dc2:	4689      	mov	r9, r1
 8021dc4:	f7de fa6a 	bl	800029c <__aeabi_dsub>
 8021dc8:	4602      	mov	r2, r0
 8021dca:	460b      	mov	r3, r1
 8021dcc:	4620      	mov	r0, r4
 8021dce:	4629      	mov	r1, r5
 8021dd0:	f7de fa64 	bl	800029c <__aeabi_dsub>
 8021dd4:	4642      	mov	r2, r8
 8021dd6:	4606      	mov	r6, r0
 8021dd8:	460f      	mov	r7, r1
 8021dda:	464b      	mov	r3, r9
 8021ddc:	4640      	mov	r0, r8
 8021dde:	4649      	mov	r1, r9
 8021de0:	f7de fc14 	bl	800060c <__aeabi_dmul>
 8021de4:	a35e      	add	r3, pc, #376	; (adr r3, 8021f60 <__ieee754_pow+0xa18>)
 8021de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021dea:	4604      	mov	r4, r0
 8021dec:	460d      	mov	r5, r1
 8021dee:	f7de fc0d 	bl	800060c <__aeabi_dmul>
 8021df2:	a35d      	add	r3, pc, #372	; (adr r3, 8021f68 <__ieee754_pow+0xa20>)
 8021df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021df8:	f7de fa50 	bl	800029c <__aeabi_dsub>
 8021dfc:	4622      	mov	r2, r4
 8021dfe:	462b      	mov	r3, r5
 8021e00:	f7de fc04 	bl	800060c <__aeabi_dmul>
 8021e04:	a35a      	add	r3, pc, #360	; (adr r3, 8021f70 <__ieee754_pow+0xa28>)
 8021e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e0a:	f7de fa49 	bl	80002a0 <__adddf3>
 8021e0e:	4622      	mov	r2, r4
 8021e10:	462b      	mov	r3, r5
 8021e12:	f7de fbfb 	bl	800060c <__aeabi_dmul>
 8021e16:	a358      	add	r3, pc, #352	; (adr r3, 8021f78 <__ieee754_pow+0xa30>)
 8021e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e1c:	f7de fa3e 	bl	800029c <__aeabi_dsub>
 8021e20:	4622      	mov	r2, r4
 8021e22:	462b      	mov	r3, r5
 8021e24:	f7de fbf2 	bl	800060c <__aeabi_dmul>
 8021e28:	a355      	add	r3, pc, #340	; (adr r3, 8021f80 <__ieee754_pow+0xa38>)
 8021e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e2e:	f7de fa37 	bl	80002a0 <__adddf3>
 8021e32:	4622      	mov	r2, r4
 8021e34:	462b      	mov	r3, r5
 8021e36:	f7de fbe9 	bl	800060c <__aeabi_dmul>
 8021e3a:	4602      	mov	r2, r0
 8021e3c:	460b      	mov	r3, r1
 8021e3e:	4640      	mov	r0, r8
 8021e40:	4649      	mov	r1, r9
 8021e42:	f7de fa2b 	bl	800029c <__aeabi_dsub>
 8021e46:	4604      	mov	r4, r0
 8021e48:	460d      	mov	r5, r1
 8021e4a:	4602      	mov	r2, r0
 8021e4c:	460b      	mov	r3, r1
 8021e4e:	4640      	mov	r0, r8
 8021e50:	4649      	mov	r1, r9
 8021e52:	f7de fbdb 	bl	800060c <__aeabi_dmul>
 8021e56:	2200      	movs	r2, #0
 8021e58:	ec41 0b19 	vmov	d9, r0, r1
 8021e5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021e60:	4620      	mov	r0, r4
 8021e62:	4629      	mov	r1, r5
 8021e64:	f7de fa1a 	bl	800029c <__aeabi_dsub>
 8021e68:	4602      	mov	r2, r0
 8021e6a:	460b      	mov	r3, r1
 8021e6c:	ec51 0b19 	vmov	r0, r1, d9
 8021e70:	f7de fcf6 	bl	8000860 <__aeabi_ddiv>
 8021e74:	4632      	mov	r2, r6
 8021e76:	4604      	mov	r4, r0
 8021e78:	460d      	mov	r5, r1
 8021e7a:	463b      	mov	r3, r7
 8021e7c:	4640      	mov	r0, r8
 8021e7e:	4649      	mov	r1, r9
 8021e80:	f7de fbc4 	bl	800060c <__aeabi_dmul>
 8021e84:	4632      	mov	r2, r6
 8021e86:	463b      	mov	r3, r7
 8021e88:	f7de fa0a 	bl	80002a0 <__adddf3>
 8021e8c:	4602      	mov	r2, r0
 8021e8e:	460b      	mov	r3, r1
 8021e90:	4620      	mov	r0, r4
 8021e92:	4629      	mov	r1, r5
 8021e94:	f7de fa02 	bl	800029c <__aeabi_dsub>
 8021e98:	4642      	mov	r2, r8
 8021e9a:	464b      	mov	r3, r9
 8021e9c:	f7de f9fe 	bl	800029c <__aeabi_dsub>
 8021ea0:	460b      	mov	r3, r1
 8021ea2:	4602      	mov	r2, r0
 8021ea4:	493a      	ldr	r1, [pc, #232]	; (8021f90 <__ieee754_pow+0xa48>)
 8021ea6:	2000      	movs	r0, #0
 8021ea8:	f7de f9f8 	bl	800029c <__aeabi_dsub>
 8021eac:	ec41 0b10 	vmov	d0, r0, r1
 8021eb0:	ee10 3a90 	vmov	r3, s1
 8021eb4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8021eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021ebc:	da2b      	bge.n	8021f16 <__ieee754_pow+0x9ce>
 8021ebe:	4650      	mov	r0, sl
 8021ec0:	f001 fc9a 	bl	80237f8 <scalbn>
 8021ec4:	ec51 0b10 	vmov	r0, r1, d0
 8021ec8:	ec53 2b18 	vmov	r2, r3, d8
 8021ecc:	f7ff bbed 	b.w	80216aa <__ieee754_pow+0x162>
 8021ed0:	4b30      	ldr	r3, [pc, #192]	; (8021f94 <__ieee754_pow+0xa4c>)
 8021ed2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8021ed6:	429e      	cmp	r6, r3
 8021ed8:	f77f af0c 	ble.w	8021cf4 <__ieee754_pow+0x7ac>
 8021edc:	4b2e      	ldr	r3, [pc, #184]	; (8021f98 <__ieee754_pow+0xa50>)
 8021ede:	440b      	add	r3, r1
 8021ee0:	4303      	orrs	r3, r0
 8021ee2:	d009      	beq.n	8021ef8 <__ieee754_pow+0x9b0>
 8021ee4:	ec51 0b18 	vmov	r0, r1, d8
 8021ee8:	2200      	movs	r2, #0
 8021eea:	2300      	movs	r3, #0
 8021eec:	f7de fe00 	bl	8000af0 <__aeabi_dcmplt>
 8021ef0:	3800      	subs	r0, #0
 8021ef2:	bf18      	it	ne
 8021ef4:	2001      	movne	r0, #1
 8021ef6:	e447      	b.n	8021788 <__ieee754_pow+0x240>
 8021ef8:	4622      	mov	r2, r4
 8021efa:	462b      	mov	r3, r5
 8021efc:	f7de f9ce 	bl	800029c <__aeabi_dsub>
 8021f00:	4642      	mov	r2, r8
 8021f02:	464b      	mov	r3, r9
 8021f04:	f7de fe08 	bl	8000b18 <__aeabi_dcmpge>
 8021f08:	2800      	cmp	r0, #0
 8021f0a:	f43f aef3 	beq.w	8021cf4 <__ieee754_pow+0x7ac>
 8021f0e:	e7e9      	b.n	8021ee4 <__ieee754_pow+0x99c>
 8021f10:	f04f 0a00 	mov.w	sl, #0
 8021f14:	e71a      	b.n	8021d4c <__ieee754_pow+0x804>
 8021f16:	ec51 0b10 	vmov	r0, r1, d0
 8021f1a:	4619      	mov	r1, r3
 8021f1c:	e7d4      	b.n	8021ec8 <__ieee754_pow+0x980>
 8021f1e:	491c      	ldr	r1, [pc, #112]	; (8021f90 <__ieee754_pow+0xa48>)
 8021f20:	2000      	movs	r0, #0
 8021f22:	f7ff bb30 	b.w	8021586 <__ieee754_pow+0x3e>
 8021f26:	2000      	movs	r0, #0
 8021f28:	2100      	movs	r1, #0
 8021f2a:	f7ff bb2c 	b.w	8021586 <__ieee754_pow+0x3e>
 8021f2e:	4630      	mov	r0, r6
 8021f30:	4639      	mov	r1, r7
 8021f32:	f7ff bb28 	b.w	8021586 <__ieee754_pow+0x3e>
 8021f36:	9204      	str	r2, [sp, #16]
 8021f38:	f7ff bb7a 	b.w	8021630 <__ieee754_pow+0xe8>
 8021f3c:	2300      	movs	r3, #0
 8021f3e:	f7ff bb64 	b.w	802160a <__ieee754_pow+0xc2>
 8021f42:	bf00      	nop
 8021f44:	f3af 8000 	nop.w
 8021f48:	00000000 	.word	0x00000000
 8021f4c:	3fe62e43 	.word	0x3fe62e43
 8021f50:	fefa39ef 	.word	0xfefa39ef
 8021f54:	3fe62e42 	.word	0x3fe62e42
 8021f58:	0ca86c39 	.word	0x0ca86c39
 8021f5c:	be205c61 	.word	0xbe205c61
 8021f60:	72bea4d0 	.word	0x72bea4d0
 8021f64:	3e663769 	.word	0x3e663769
 8021f68:	c5d26bf1 	.word	0xc5d26bf1
 8021f6c:	3ebbbd41 	.word	0x3ebbbd41
 8021f70:	af25de2c 	.word	0xaf25de2c
 8021f74:	3f11566a 	.word	0x3f11566a
 8021f78:	16bebd93 	.word	0x16bebd93
 8021f7c:	3f66c16c 	.word	0x3f66c16c
 8021f80:	5555553e 	.word	0x5555553e
 8021f84:	3fc55555 	.word	0x3fc55555
 8021f88:	3fe00000 	.word	0x3fe00000
 8021f8c:	000fffff 	.word	0x000fffff
 8021f90:	3ff00000 	.word	0x3ff00000
 8021f94:	4090cbff 	.word	0x4090cbff
 8021f98:	3f6f3400 	.word	0x3f6f3400
 8021f9c:	652b82fe 	.word	0x652b82fe
 8021fa0:	3c971547 	.word	0x3c971547
 8021fa4:	00000000 	.word	0x00000000

08021fa8 <__ieee754_rem_pio2>:
 8021fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fac:	ed2d 8b02 	vpush	{d8}
 8021fb0:	ec55 4b10 	vmov	r4, r5, d0
 8021fb4:	4bca      	ldr	r3, [pc, #808]	; (80222e0 <__ieee754_rem_pio2+0x338>)
 8021fb6:	b08b      	sub	sp, #44	; 0x2c
 8021fb8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8021fbc:	4598      	cmp	r8, r3
 8021fbe:	4682      	mov	sl, r0
 8021fc0:	9502      	str	r5, [sp, #8]
 8021fc2:	dc08      	bgt.n	8021fd6 <__ieee754_rem_pio2+0x2e>
 8021fc4:	2200      	movs	r2, #0
 8021fc6:	2300      	movs	r3, #0
 8021fc8:	ed80 0b00 	vstr	d0, [r0]
 8021fcc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8021fd0:	f04f 0b00 	mov.w	fp, #0
 8021fd4:	e028      	b.n	8022028 <__ieee754_rem_pio2+0x80>
 8021fd6:	4bc3      	ldr	r3, [pc, #780]	; (80222e4 <__ieee754_rem_pio2+0x33c>)
 8021fd8:	4598      	cmp	r8, r3
 8021fda:	dc78      	bgt.n	80220ce <__ieee754_rem_pio2+0x126>
 8021fdc:	9b02      	ldr	r3, [sp, #8]
 8021fde:	4ec2      	ldr	r6, [pc, #776]	; (80222e8 <__ieee754_rem_pio2+0x340>)
 8021fe0:	2b00      	cmp	r3, #0
 8021fe2:	ee10 0a10 	vmov	r0, s0
 8021fe6:	a3b0      	add	r3, pc, #704	; (adr r3, 80222a8 <__ieee754_rem_pio2+0x300>)
 8021fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fec:	4629      	mov	r1, r5
 8021fee:	dd39      	ble.n	8022064 <__ieee754_rem_pio2+0xbc>
 8021ff0:	f7de f954 	bl	800029c <__aeabi_dsub>
 8021ff4:	45b0      	cmp	r8, r6
 8021ff6:	4604      	mov	r4, r0
 8021ff8:	460d      	mov	r5, r1
 8021ffa:	d01b      	beq.n	8022034 <__ieee754_rem_pio2+0x8c>
 8021ffc:	a3ac      	add	r3, pc, #688	; (adr r3, 80222b0 <__ieee754_rem_pio2+0x308>)
 8021ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022002:	f7de f94b 	bl	800029c <__aeabi_dsub>
 8022006:	4602      	mov	r2, r0
 8022008:	460b      	mov	r3, r1
 802200a:	e9ca 2300 	strd	r2, r3, [sl]
 802200e:	4620      	mov	r0, r4
 8022010:	4629      	mov	r1, r5
 8022012:	f7de f943 	bl	800029c <__aeabi_dsub>
 8022016:	a3a6      	add	r3, pc, #664	; (adr r3, 80222b0 <__ieee754_rem_pio2+0x308>)
 8022018:	e9d3 2300 	ldrd	r2, r3, [r3]
 802201c:	f7de f93e 	bl	800029c <__aeabi_dsub>
 8022020:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022024:	f04f 0b01 	mov.w	fp, #1
 8022028:	4658      	mov	r0, fp
 802202a:	b00b      	add	sp, #44	; 0x2c
 802202c:	ecbd 8b02 	vpop	{d8}
 8022030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022034:	a3a0      	add	r3, pc, #640	; (adr r3, 80222b8 <__ieee754_rem_pio2+0x310>)
 8022036:	e9d3 2300 	ldrd	r2, r3, [r3]
 802203a:	f7de f92f 	bl	800029c <__aeabi_dsub>
 802203e:	a3a0      	add	r3, pc, #640	; (adr r3, 80222c0 <__ieee754_rem_pio2+0x318>)
 8022040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022044:	4604      	mov	r4, r0
 8022046:	460d      	mov	r5, r1
 8022048:	f7de f928 	bl	800029c <__aeabi_dsub>
 802204c:	4602      	mov	r2, r0
 802204e:	460b      	mov	r3, r1
 8022050:	e9ca 2300 	strd	r2, r3, [sl]
 8022054:	4620      	mov	r0, r4
 8022056:	4629      	mov	r1, r5
 8022058:	f7de f920 	bl	800029c <__aeabi_dsub>
 802205c:	a398      	add	r3, pc, #608	; (adr r3, 80222c0 <__ieee754_rem_pio2+0x318>)
 802205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022062:	e7db      	b.n	802201c <__ieee754_rem_pio2+0x74>
 8022064:	f7de f91c 	bl	80002a0 <__adddf3>
 8022068:	45b0      	cmp	r8, r6
 802206a:	4604      	mov	r4, r0
 802206c:	460d      	mov	r5, r1
 802206e:	d016      	beq.n	802209e <__ieee754_rem_pio2+0xf6>
 8022070:	a38f      	add	r3, pc, #572	; (adr r3, 80222b0 <__ieee754_rem_pio2+0x308>)
 8022072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022076:	f7de f913 	bl	80002a0 <__adddf3>
 802207a:	4602      	mov	r2, r0
 802207c:	460b      	mov	r3, r1
 802207e:	e9ca 2300 	strd	r2, r3, [sl]
 8022082:	4620      	mov	r0, r4
 8022084:	4629      	mov	r1, r5
 8022086:	f7de f909 	bl	800029c <__aeabi_dsub>
 802208a:	a389      	add	r3, pc, #548	; (adr r3, 80222b0 <__ieee754_rem_pio2+0x308>)
 802208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022090:	f7de f906 	bl	80002a0 <__adddf3>
 8022094:	f04f 3bff 	mov.w	fp, #4294967295
 8022098:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802209c:	e7c4      	b.n	8022028 <__ieee754_rem_pio2+0x80>
 802209e:	a386      	add	r3, pc, #536	; (adr r3, 80222b8 <__ieee754_rem_pio2+0x310>)
 80220a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220a4:	f7de f8fc 	bl	80002a0 <__adddf3>
 80220a8:	a385      	add	r3, pc, #532	; (adr r3, 80222c0 <__ieee754_rem_pio2+0x318>)
 80220aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220ae:	4604      	mov	r4, r0
 80220b0:	460d      	mov	r5, r1
 80220b2:	f7de f8f5 	bl	80002a0 <__adddf3>
 80220b6:	4602      	mov	r2, r0
 80220b8:	460b      	mov	r3, r1
 80220ba:	e9ca 2300 	strd	r2, r3, [sl]
 80220be:	4620      	mov	r0, r4
 80220c0:	4629      	mov	r1, r5
 80220c2:	f7de f8eb 	bl	800029c <__aeabi_dsub>
 80220c6:	a37e      	add	r3, pc, #504	; (adr r3, 80222c0 <__ieee754_rem_pio2+0x318>)
 80220c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220cc:	e7e0      	b.n	8022090 <__ieee754_rem_pio2+0xe8>
 80220ce:	4b87      	ldr	r3, [pc, #540]	; (80222ec <__ieee754_rem_pio2+0x344>)
 80220d0:	4598      	cmp	r8, r3
 80220d2:	f300 80d9 	bgt.w	8022288 <__ieee754_rem_pio2+0x2e0>
 80220d6:	f001 fb73 	bl	80237c0 <fabs>
 80220da:	ec55 4b10 	vmov	r4, r5, d0
 80220de:	ee10 0a10 	vmov	r0, s0
 80220e2:	a379      	add	r3, pc, #484	; (adr r3, 80222c8 <__ieee754_rem_pio2+0x320>)
 80220e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220e8:	4629      	mov	r1, r5
 80220ea:	f7de fa8f 	bl	800060c <__aeabi_dmul>
 80220ee:	4b80      	ldr	r3, [pc, #512]	; (80222f0 <__ieee754_rem_pio2+0x348>)
 80220f0:	2200      	movs	r2, #0
 80220f2:	f7de f8d5 	bl	80002a0 <__adddf3>
 80220f6:	f7de fd39 	bl	8000b6c <__aeabi_d2iz>
 80220fa:	4683      	mov	fp, r0
 80220fc:	f7de fa1c 	bl	8000538 <__aeabi_i2d>
 8022100:	4602      	mov	r2, r0
 8022102:	460b      	mov	r3, r1
 8022104:	ec43 2b18 	vmov	d8, r2, r3
 8022108:	a367      	add	r3, pc, #412	; (adr r3, 80222a8 <__ieee754_rem_pio2+0x300>)
 802210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802210e:	f7de fa7d 	bl	800060c <__aeabi_dmul>
 8022112:	4602      	mov	r2, r0
 8022114:	460b      	mov	r3, r1
 8022116:	4620      	mov	r0, r4
 8022118:	4629      	mov	r1, r5
 802211a:	f7de f8bf 	bl	800029c <__aeabi_dsub>
 802211e:	a364      	add	r3, pc, #400	; (adr r3, 80222b0 <__ieee754_rem_pio2+0x308>)
 8022120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022124:	4606      	mov	r6, r0
 8022126:	460f      	mov	r7, r1
 8022128:	ec51 0b18 	vmov	r0, r1, d8
 802212c:	f7de fa6e 	bl	800060c <__aeabi_dmul>
 8022130:	f1bb 0f1f 	cmp.w	fp, #31
 8022134:	4604      	mov	r4, r0
 8022136:	460d      	mov	r5, r1
 8022138:	dc0d      	bgt.n	8022156 <__ieee754_rem_pio2+0x1ae>
 802213a:	4b6e      	ldr	r3, [pc, #440]	; (80222f4 <__ieee754_rem_pio2+0x34c>)
 802213c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8022140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022144:	4543      	cmp	r3, r8
 8022146:	d006      	beq.n	8022156 <__ieee754_rem_pio2+0x1ae>
 8022148:	4622      	mov	r2, r4
 802214a:	462b      	mov	r3, r5
 802214c:	4630      	mov	r0, r6
 802214e:	4639      	mov	r1, r7
 8022150:	f7de f8a4 	bl	800029c <__aeabi_dsub>
 8022154:	e00f      	b.n	8022176 <__ieee754_rem_pio2+0x1ce>
 8022156:	462b      	mov	r3, r5
 8022158:	4622      	mov	r2, r4
 802215a:	4630      	mov	r0, r6
 802215c:	4639      	mov	r1, r7
 802215e:	f7de f89d 	bl	800029c <__aeabi_dsub>
 8022162:	ea4f 5328 	mov.w	r3, r8, asr #20
 8022166:	9303      	str	r3, [sp, #12]
 8022168:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802216c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8022170:	f1b8 0f10 	cmp.w	r8, #16
 8022174:	dc02      	bgt.n	802217c <__ieee754_rem_pio2+0x1d4>
 8022176:	e9ca 0100 	strd	r0, r1, [sl]
 802217a:	e039      	b.n	80221f0 <__ieee754_rem_pio2+0x248>
 802217c:	a34e      	add	r3, pc, #312	; (adr r3, 80222b8 <__ieee754_rem_pio2+0x310>)
 802217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022182:	ec51 0b18 	vmov	r0, r1, d8
 8022186:	f7de fa41 	bl	800060c <__aeabi_dmul>
 802218a:	4604      	mov	r4, r0
 802218c:	460d      	mov	r5, r1
 802218e:	4602      	mov	r2, r0
 8022190:	460b      	mov	r3, r1
 8022192:	4630      	mov	r0, r6
 8022194:	4639      	mov	r1, r7
 8022196:	f7de f881 	bl	800029c <__aeabi_dsub>
 802219a:	4602      	mov	r2, r0
 802219c:	460b      	mov	r3, r1
 802219e:	4680      	mov	r8, r0
 80221a0:	4689      	mov	r9, r1
 80221a2:	4630      	mov	r0, r6
 80221a4:	4639      	mov	r1, r7
 80221a6:	f7de f879 	bl	800029c <__aeabi_dsub>
 80221aa:	4622      	mov	r2, r4
 80221ac:	462b      	mov	r3, r5
 80221ae:	f7de f875 	bl	800029c <__aeabi_dsub>
 80221b2:	a343      	add	r3, pc, #268	; (adr r3, 80222c0 <__ieee754_rem_pio2+0x318>)
 80221b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221b8:	4604      	mov	r4, r0
 80221ba:	460d      	mov	r5, r1
 80221bc:	ec51 0b18 	vmov	r0, r1, d8
 80221c0:	f7de fa24 	bl	800060c <__aeabi_dmul>
 80221c4:	4622      	mov	r2, r4
 80221c6:	462b      	mov	r3, r5
 80221c8:	f7de f868 	bl	800029c <__aeabi_dsub>
 80221cc:	4602      	mov	r2, r0
 80221ce:	460b      	mov	r3, r1
 80221d0:	4604      	mov	r4, r0
 80221d2:	460d      	mov	r5, r1
 80221d4:	4640      	mov	r0, r8
 80221d6:	4649      	mov	r1, r9
 80221d8:	f7de f860 	bl	800029c <__aeabi_dsub>
 80221dc:	9a03      	ldr	r2, [sp, #12]
 80221de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80221e2:	1ad3      	subs	r3, r2, r3
 80221e4:	2b31      	cmp	r3, #49	; 0x31
 80221e6:	dc24      	bgt.n	8022232 <__ieee754_rem_pio2+0x28a>
 80221e8:	e9ca 0100 	strd	r0, r1, [sl]
 80221ec:	4646      	mov	r6, r8
 80221ee:	464f      	mov	r7, r9
 80221f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80221f4:	4630      	mov	r0, r6
 80221f6:	4642      	mov	r2, r8
 80221f8:	464b      	mov	r3, r9
 80221fa:	4639      	mov	r1, r7
 80221fc:	f7de f84e 	bl	800029c <__aeabi_dsub>
 8022200:	462b      	mov	r3, r5
 8022202:	4622      	mov	r2, r4
 8022204:	f7de f84a 	bl	800029c <__aeabi_dsub>
 8022208:	9b02      	ldr	r3, [sp, #8]
 802220a:	2b00      	cmp	r3, #0
 802220c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022210:	f6bf af0a 	bge.w	8022028 <__ieee754_rem_pio2+0x80>
 8022214:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8022218:	f8ca 3004 	str.w	r3, [sl, #4]
 802221c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022220:	f8ca 8000 	str.w	r8, [sl]
 8022224:	f8ca 0008 	str.w	r0, [sl, #8]
 8022228:	f8ca 300c 	str.w	r3, [sl, #12]
 802222c:	f1cb 0b00 	rsb	fp, fp, #0
 8022230:	e6fa      	b.n	8022028 <__ieee754_rem_pio2+0x80>
 8022232:	a327      	add	r3, pc, #156	; (adr r3, 80222d0 <__ieee754_rem_pio2+0x328>)
 8022234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022238:	ec51 0b18 	vmov	r0, r1, d8
 802223c:	f7de f9e6 	bl	800060c <__aeabi_dmul>
 8022240:	4604      	mov	r4, r0
 8022242:	460d      	mov	r5, r1
 8022244:	4602      	mov	r2, r0
 8022246:	460b      	mov	r3, r1
 8022248:	4640      	mov	r0, r8
 802224a:	4649      	mov	r1, r9
 802224c:	f7de f826 	bl	800029c <__aeabi_dsub>
 8022250:	4602      	mov	r2, r0
 8022252:	460b      	mov	r3, r1
 8022254:	4606      	mov	r6, r0
 8022256:	460f      	mov	r7, r1
 8022258:	4640      	mov	r0, r8
 802225a:	4649      	mov	r1, r9
 802225c:	f7de f81e 	bl	800029c <__aeabi_dsub>
 8022260:	4622      	mov	r2, r4
 8022262:	462b      	mov	r3, r5
 8022264:	f7de f81a 	bl	800029c <__aeabi_dsub>
 8022268:	a31b      	add	r3, pc, #108	; (adr r3, 80222d8 <__ieee754_rem_pio2+0x330>)
 802226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802226e:	4604      	mov	r4, r0
 8022270:	460d      	mov	r5, r1
 8022272:	ec51 0b18 	vmov	r0, r1, d8
 8022276:	f7de f9c9 	bl	800060c <__aeabi_dmul>
 802227a:	4622      	mov	r2, r4
 802227c:	462b      	mov	r3, r5
 802227e:	f7de f80d 	bl	800029c <__aeabi_dsub>
 8022282:	4604      	mov	r4, r0
 8022284:	460d      	mov	r5, r1
 8022286:	e75f      	b.n	8022148 <__ieee754_rem_pio2+0x1a0>
 8022288:	4b1b      	ldr	r3, [pc, #108]	; (80222f8 <__ieee754_rem_pio2+0x350>)
 802228a:	4598      	cmp	r8, r3
 802228c:	dd36      	ble.n	80222fc <__ieee754_rem_pio2+0x354>
 802228e:	ee10 2a10 	vmov	r2, s0
 8022292:	462b      	mov	r3, r5
 8022294:	4620      	mov	r0, r4
 8022296:	4629      	mov	r1, r5
 8022298:	f7de f800 	bl	800029c <__aeabi_dsub>
 802229c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80222a0:	e9ca 0100 	strd	r0, r1, [sl]
 80222a4:	e694      	b.n	8021fd0 <__ieee754_rem_pio2+0x28>
 80222a6:	bf00      	nop
 80222a8:	54400000 	.word	0x54400000
 80222ac:	3ff921fb 	.word	0x3ff921fb
 80222b0:	1a626331 	.word	0x1a626331
 80222b4:	3dd0b461 	.word	0x3dd0b461
 80222b8:	1a600000 	.word	0x1a600000
 80222bc:	3dd0b461 	.word	0x3dd0b461
 80222c0:	2e037073 	.word	0x2e037073
 80222c4:	3ba3198a 	.word	0x3ba3198a
 80222c8:	6dc9c883 	.word	0x6dc9c883
 80222cc:	3fe45f30 	.word	0x3fe45f30
 80222d0:	2e000000 	.word	0x2e000000
 80222d4:	3ba3198a 	.word	0x3ba3198a
 80222d8:	252049c1 	.word	0x252049c1
 80222dc:	397b839a 	.word	0x397b839a
 80222e0:	3fe921fb 	.word	0x3fe921fb
 80222e4:	4002d97b 	.word	0x4002d97b
 80222e8:	3ff921fb 	.word	0x3ff921fb
 80222ec:	413921fb 	.word	0x413921fb
 80222f0:	3fe00000 	.word	0x3fe00000
 80222f4:	0802a020 	.word	0x0802a020
 80222f8:	7fefffff 	.word	0x7fefffff
 80222fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8022300:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8022304:	ee10 0a10 	vmov	r0, s0
 8022308:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 802230c:	ee10 6a10 	vmov	r6, s0
 8022310:	460f      	mov	r7, r1
 8022312:	f7de fc2b 	bl	8000b6c <__aeabi_d2iz>
 8022316:	f7de f90f 	bl	8000538 <__aeabi_i2d>
 802231a:	4602      	mov	r2, r0
 802231c:	460b      	mov	r3, r1
 802231e:	4630      	mov	r0, r6
 8022320:	4639      	mov	r1, r7
 8022322:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022326:	f7dd ffb9 	bl	800029c <__aeabi_dsub>
 802232a:	4b23      	ldr	r3, [pc, #140]	; (80223b8 <__ieee754_rem_pio2+0x410>)
 802232c:	2200      	movs	r2, #0
 802232e:	f7de f96d 	bl	800060c <__aeabi_dmul>
 8022332:	460f      	mov	r7, r1
 8022334:	4606      	mov	r6, r0
 8022336:	f7de fc19 	bl	8000b6c <__aeabi_d2iz>
 802233a:	f7de f8fd 	bl	8000538 <__aeabi_i2d>
 802233e:	4602      	mov	r2, r0
 8022340:	460b      	mov	r3, r1
 8022342:	4630      	mov	r0, r6
 8022344:	4639      	mov	r1, r7
 8022346:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802234a:	f7dd ffa7 	bl	800029c <__aeabi_dsub>
 802234e:	4b1a      	ldr	r3, [pc, #104]	; (80223b8 <__ieee754_rem_pio2+0x410>)
 8022350:	2200      	movs	r2, #0
 8022352:	f7de f95b 	bl	800060c <__aeabi_dmul>
 8022356:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802235a:	ad04      	add	r5, sp, #16
 802235c:	f04f 0803 	mov.w	r8, #3
 8022360:	46a9      	mov	r9, r5
 8022362:	2600      	movs	r6, #0
 8022364:	2700      	movs	r7, #0
 8022366:	4632      	mov	r2, r6
 8022368:	463b      	mov	r3, r7
 802236a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 802236e:	46c3      	mov	fp, r8
 8022370:	3d08      	subs	r5, #8
 8022372:	f108 38ff 	add.w	r8, r8, #4294967295
 8022376:	f7de fbb1 	bl	8000adc <__aeabi_dcmpeq>
 802237a:	2800      	cmp	r0, #0
 802237c:	d1f3      	bne.n	8022366 <__ieee754_rem_pio2+0x3be>
 802237e:	4b0f      	ldr	r3, [pc, #60]	; (80223bc <__ieee754_rem_pio2+0x414>)
 8022380:	9301      	str	r3, [sp, #4]
 8022382:	2302      	movs	r3, #2
 8022384:	9300      	str	r3, [sp, #0]
 8022386:	4622      	mov	r2, r4
 8022388:	465b      	mov	r3, fp
 802238a:	4651      	mov	r1, sl
 802238c:	4648      	mov	r0, r9
 802238e:	f000 fbab 	bl	8022ae8 <__kernel_rem_pio2>
 8022392:	9b02      	ldr	r3, [sp, #8]
 8022394:	2b00      	cmp	r3, #0
 8022396:	4683      	mov	fp, r0
 8022398:	f6bf ae46 	bge.w	8022028 <__ieee754_rem_pio2+0x80>
 802239c:	e9da 2100 	ldrd	r2, r1, [sl]
 80223a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80223a4:	e9ca 2300 	strd	r2, r3, [sl]
 80223a8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80223ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80223b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80223b4:	e73a      	b.n	802222c <__ieee754_rem_pio2+0x284>
 80223b6:	bf00      	nop
 80223b8:	41700000 	.word	0x41700000
 80223bc:	0802a0a0 	.word	0x0802a0a0

080223c0 <__ieee754_sqrt>:
 80223c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80223c4:	ec55 4b10 	vmov	r4, r5, d0
 80223c8:	4e55      	ldr	r6, [pc, #340]	; (8022520 <__ieee754_sqrt+0x160>)
 80223ca:	43ae      	bics	r6, r5
 80223cc:	ee10 0a10 	vmov	r0, s0
 80223d0:	ee10 3a10 	vmov	r3, s0
 80223d4:	462a      	mov	r2, r5
 80223d6:	4629      	mov	r1, r5
 80223d8:	d110      	bne.n	80223fc <__ieee754_sqrt+0x3c>
 80223da:	ee10 2a10 	vmov	r2, s0
 80223de:	462b      	mov	r3, r5
 80223e0:	f7de f914 	bl	800060c <__aeabi_dmul>
 80223e4:	4602      	mov	r2, r0
 80223e6:	460b      	mov	r3, r1
 80223e8:	4620      	mov	r0, r4
 80223ea:	4629      	mov	r1, r5
 80223ec:	f7dd ff58 	bl	80002a0 <__adddf3>
 80223f0:	4604      	mov	r4, r0
 80223f2:	460d      	mov	r5, r1
 80223f4:	ec45 4b10 	vmov	d0, r4, r5
 80223f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80223fc:	2d00      	cmp	r5, #0
 80223fe:	dc10      	bgt.n	8022422 <__ieee754_sqrt+0x62>
 8022400:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8022404:	4330      	orrs	r0, r6
 8022406:	d0f5      	beq.n	80223f4 <__ieee754_sqrt+0x34>
 8022408:	b15d      	cbz	r5, 8022422 <__ieee754_sqrt+0x62>
 802240a:	ee10 2a10 	vmov	r2, s0
 802240e:	462b      	mov	r3, r5
 8022410:	ee10 0a10 	vmov	r0, s0
 8022414:	f7dd ff42 	bl	800029c <__aeabi_dsub>
 8022418:	4602      	mov	r2, r0
 802241a:	460b      	mov	r3, r1
 802241c:	f7de fa20 	bl	8000860 <__aeabi_ddiv>
 8022420:	e7e6      	b.n	80223f0 <__ieee754_sqrt+0x30>
 8022422:	1512      	asrs	r2, r2, #20
 8022424:	d074      	beq.n	8022510 <__ieee754_sqrt+0x150>
 8022426:	07d4      	lsls	r4, r2, #31
 8022428:	f3c1 0113 	ubfx	r1, r1, #0, #20
 802242c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8022430:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8022434:	bf5e      	ittt	pl
 8022436:	0fda      	lsrpl	r2, r3, #31
 8022438:	005b      	lslpl	r3, r3, #1
 802243a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 802243e:	2400      	movs	r4, #0
 8022440:	0fda      	lsrs	r2, r3, #31
 8022442:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8022446:	107f      	asrs	r7, r7, #1
 8022448:	005b      	lsls	r3, r3, #1
 802244a:	2516      	movs	r5, #22
 802244c:	4620      	mov	r0, r4
 802244e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8022452:	1886      	adds	r6, r0, r2
 8022454:	428e      	cmp	r6, r1
 8022456:	bfde      	ittt	le
 8022458:	1b89      	suble	r1, r1, r6
 802245a:	18b0      	addle	r0, r6, r2
 802245c:	18a4      	addle	r4, r4, r2
 802245e:	0049      	lsls	r1, r1, #1
 8022460:	3d01      	subs	r5, #1
 8022462:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8022466:	ea4f 0252 	mov.w	r2, r2, lsr #1
 802246a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802246e:	d1f0      	bne.n	8022452 <__ieee754_sqrt+0x92>
 8022470:	462a      	mov	r2, r5
 8022472:	f04f 0e20 	mov.w	lr, #32
 8022476:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 802247a:	4281      	cmp	r1, r0
 802247c:	eb06 0c05 	add.w	ip, r6, r5
 8022480:	dc02      	bgt.n	8022488 <__ieee754_sqrt+0xc8>
 8022482:	d113      	bne.n	80224ac <__ieee754_sqrt+0xec>
 8022484:	459c      	cmp	ip, r3
 8022486:	d811      	bhi.n	80224ac <__ieee754_sqrt+0xec>
 8022488:	f1bc 0f00 	cmp.w	ip, #0
 802248c:	eb0c 0506 	add.w	r5, ip, r6
 8022490:	da43      	bge.n	802251a <__ieee754_sqrt+0x15a>
 8022492:	2d00      	cmp	r5, #0
 8022494:	db41      	blt.n	802251a <__ieee754_sqrt+0x15a>
 8022496:	f100 0801 	add.w	r8, r0, #1
 802249a:	1a09      	subs	r1, r1, r0
 802249c:	459c      	cmp	ip, r3
 802249e:	bf88      	it	hi
 80224a0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80224a4:	eba3 030c 	sub.w	r3, r3, ip
 80224a8:	4432      	add	r2, r6
 80224aa:	4640      	mov	r0, r8
 80224ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80224b0:	f1be 0e01 	subs.w	lr, lr, #1
 80224b4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80224b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80224bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80224c0:	d1db      	bne.n	802247a <__ieee754_sqrt+0xba>
 80224c2:	430b      	orrs	r3, r1
 80224c4:	d006      	beq.n	80224d4 <__ieee754_sqrt+0x114>
 80224c6:	1c50      	adds	r0, r2, #1
 80224c8:	bf13      	iteet	ne
 80224ca:	3201      	addne	r2, #1
 80224cc:	3401      	addeq	r4, #1
 80224ce:	4672      	moveq	r2, lr
 80224d0:	f022 0201 	bicne.w	r2, r2, #1
 80224d4:	1063      	asrs	r3, r4, #1
 80224d6:	0852      	lsrs	r2, r2, #1
 80224d8:	07e1      	lsls	r1, r4, #31
 80224da:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80224de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80224e2:	bf48      	it	mi
 80224e4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80224e8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80224ec:	4614      	mov	r4, r2
 80224ee:	e781      	b.n	80223f4 <__ieee754_sqrt+0x34>
 80224f0:	0ad9      	lsrs	r1, r3, #11
 80224f2:	3815      	subs	r0, #21
 80224f4:	055b      	lsls	r3, r3, #21
 80224f6:	2900      	cmp	r1, #0
 80224f8:	d0fa      	beq.n	80224f0 <__ieee754_sqrt+0x130>
 80224fa:	02cd      	lsls	r5, r1, #11
 80224fc:	d50a      	bpl.n	8022514 <__ieee754_sqrt+0x154>
 80224fe:	f1c2 0420 	rsb	r4, r2, #32
 8022502:	fa23 f404 	lsr.w	r4, r3, r4
 8022506:	1e55      	subs	r5, r2, #1
 8022508:	4093      	lsls	r3, r2
 802250a:	4321      	orrs	r1, r4
 802250c:	1b42      	subs	r2, r0, r5
 802250e:	e78a      	b.n	8022426 <__ieee754_sqrt+0x66>
 8022510:	4610      	mov	r0, r2
 8022512:	e7f0      	b.n	80224f6 <__ieee754_sqrt+0x136>
 8022514:	0049      	lsls	r1, r1, #1
 8022516:	3201      	adds	r2, #1
 8022518:	e7ef      	b.n	80224fa <__ieee754_sqrt+0x13a>
 802251a:	4680      	mov	r8, r0
 802251c:	e7bd      	b.n	802249a <__ieee754_sqrt+0xda>
 802251e:	bf00      	nop
 8022520:	7ff00000 	.word	0x7ff00000

08022524 <__ieee754_expf>:
 8022524:	ee10 2a10 	vmov	r2, s0
 8022528:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 802252c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022530:	d902      	bls.n	8022538 <__ieee754_expf+0x14>
 8022532:	ee30 0a00 	vadd.f32	s0, s0, s0
 8022536:	4770      	bx	lr
 8022538:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 802253c:	d106      	bne.n	802254c <__ieee754_expf+0x28>
 802253e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8022678 <__ieee754_expf+0x154>
 8022542:	2b00      	cmp	r3, #0
 8022544:	bf18      	it	ne
 8022546:	eeb0 0a67 	vmovne.f32	s0, s15
 802254a:	4770      	bx	lr
 802254c:	484b      	ldr	r0, [pc, #300]	; (802267c <__ieee754_expf+0x158>)
 802254e:	4282      	cmp	r2, r0
 8022550:	dd02      	ble.n	8022558 <__ieee754_expf+0x34>
 8022552:	2000      	movs	r0, #0
 8022554:	f001 b92e 	b.w	80237b4 <__math_oflowf>
 8022558:	2a00      	cmp	r2, #0
 802255a:	da05      	bge.n	8022568 <__ieee754_expf+0x44>
 802255c:	4a48      	ldr	r2, [pc, #288]	; (8022680 <__ieee754_expf+0x15c>)
 802255e:	4291      	cmp	r1, r2
 8022560:	d902      	bls.n	8022568 <__ieee754_expf+0x44>
 8022562:	2000      	movs	r0, #0
 8022564:	f001 b920 	b.w	80237a8 <__math_uflowf>
 8022568:	4a46      	ldr	r2, [pc, #280]	; (8022684 <__ieee754_expf+0x160>)
 802256a:	4291      	cmp	r1, r2
 802256c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8022570:	d952      	bls.n	8022618 <__ieee754_expf+0xf4>
 8022572:	4a45      	ldr	r2, [pc, #276]	; (8022688 <__ieee754_expf+0x164>)
 8022574:	4291      	cmp	r1, r2
 8022576:	ea4f 0283 	mov.w	r2, r3, lsl #2
 802257a:	d834      	bhi.n	80225e6 <__ieee754_expf+0xc2>
 802257c:	4943      	ldr	r1, [pc, #268]	; (802268c <__ieee754_expf+0x168>)
 802257e:	4411      	add	r1, r2
 8022580:	ed91 7a00 	vldr	s14, [r1]
 8022584:	4942      	ldr	r1, [pc, #264]	; (8022690 <__ieee754_expf+0x16c>)
 8022586:	440a      	add	r2, r1
 8022588:	edd2 7a00 	vldr	s15, [r2]
 802258c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8022590:	f1c3 0201 	rsb	r2, r3, #1
 8022594:	1ad2      	subs	r2, r2, r3
 8022596:	ee37 0a67 	vsub.f32	s0, s14, s15
 802259a:	ee20 6a00 	vmul.f32	s12, s0, s0
 802259e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8022694 <__ieee754_expf+0x170>
 80225a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8022698 <__ieee754_expf+0x174>
 80225a6:	eee6 6a05 	vfma.f32	s13, s12, s10
 80225aa:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 802269c <__ieee754_expf+0x178>
 80225ae:	eea6 5a86 	vfma.f32	s10, s13, s12
 80225b2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80226a0 <__ieee754_expf+0x17c>
 80225b6:	eee5 6a06 	vfma.f32	s13, s10, s12
 80225ba:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80226a4 <__ieee754_expf+0x180>
 80225be:	eea6 5a86 	vfma.f32	s10, s13, s12
 80225c2:	eef0 6a40 	vmov.f32	s13, s0
 80225c6:	eee5 6a46 	vfms.f32	s13, s10, s12
 80225ca:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80225ce:	ee20 5a26 	vmul.f32	s10, s0, s13
 80225d2:	bb92      	cbnz	r2, 802263a <__ieee754_expf+0x116>
 80225d4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80225d8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80225dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80225e0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80225e4:	4770      	bx	lr
 80225e6:	4b30      	ldr	r3, [pc, #192]	; (80226a8 <__ieee754_expf+0x184>)
 80225e8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80226ac <__ieee754_expf+0x188>
 80225ec:	eddf 6a30 	vldr	s13, [pc, #192]	; 80226b0 <__ieee754_expf+0x18c>
 80225f0:	4413      	add	r3, r2
 80225f2:	edd3 7a00 	vldr	s15, [r3]
 80225f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80225fa:	eeb0 7a40 	vmov.f32	s14, s0
 80225fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022602:	ee17 2a90 	vmov	r2, s15
 8022606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802260a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802260e:	eddf 6a29 	vldr	s13, [pc, #164]	; 80226b4 <__ieee754_expf+0x190>
 8022612:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022616:	e7be      	b.n	8022596 <__ieee754_expf+0x72>
 8022618:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 802261c:	d20b      	bcs.n	8022636 <__ieee754_expf+0x112>
 802261e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80226b8 <__ieee754_expf+0x194>
 8022622:	ee70 6a26 	vadd.f32	s13, s0, s13
 8022626:	eef4 6ae5 	vcmpe.f32	s13, s11
 802262a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802262e:	dd02      	ble.n	8022636 <__ieee754_expf+0x112>
 8022630:	ee30 0a25 	vadd.f32	s0, s0, s11
 8022634:	4770      	bx	lr
 8022636:	2200      	movs	r2, #0
 8022638:	e7af      	b.n	802259a <__ieee754_expf+0x76>
 802263a:	ee76 6a66 	vsub.f32	s13, s12, s13
 802263e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8022642:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8022646:	bfb8      	it	lt
 8022648:	3264      	addlt	r2, #100	; 0x64
 802264a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802264e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8022652:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8022656:	ee17 3a90 	vmov	r3, s15
 802265a:	bfab      	itete	ge
 802265c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8022660:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8022664:	ee00 3a10 	vmovge	s0, r3
 8022668:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80226bc <__ieee754_expf+0x198>
 802266c:	bfbc      	itt	lt
 802266e:	ee00 3a10 	vmovlt	s0, r3
 8022672:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8022676:	4770      	bx	lr
 8022678:	00000000 	.word	0x00000000
 802267c:	42b17217 	.word	0x42b17217
 8022680:	42cff1b5 	.word	0x42cff1b5
 8022684:	3eb17218 	.word	0x3eb17218
 8022688:	3f851591 	.word	0x3f851591
 802268c:	0802a1b0 	.word	0x0802a1b0
 8022690:	0802a1b8 	.word	0x0802a1b8
 8022694:	3331bb4c 	.word	0x3331bb4c
 8022698:	b5ddea0e 	.word	0xb5ddea0e
 802269c:	388ab355 	.word	0x388ab355
 80226a0:	bb360b61 	.word	0xbb360b61
 80226a4:	3e2aaaab 	.word	0x3e2aaaab
 80226a8:	0802a1a8 	.word	0x0802a1a8
 80226ac:	3fb8aa3b 	.word	0x3fb8aa3b
 80226b0:	3f317180 	.word	0x3f317180
 80226b4:	3717f7d1 	.word	0x3717f7d1
 80226b8:	7149f2ca 	.word	0x7149f2ca
 80226bc:	0d800000 	.word	0x0d800000

080226c0 <__ieee754_logf>:
 80226c0:	ee10 3a10 	vmov	r3, s0
 80226c4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80226c8:	d106      	bne.n	80226d8 <__ieee754_logf+0x18>
 80226ca:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8022860 <__ieee754_logf+0x1a0>
 80226ce:	eddf 7a65 	vldr	s15, [pc, #404]	; 8022864 <__ieee754_logf+0x1a4>
 80226d2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80226d6:	4770      	bx	lr
 80226d8:	2b00      	cmp	r3, #0
 80226da:	da02      	bge.n	80226e2 <__ieee754_logf+0x22>
 80226dc:	ee30 7a40 	vsub.f32	s14, s0, s0
 80226e0:	e7f5      	b.n	80226ce <__ieee754_logf+0xe>
 80226e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80226e6:	db02      	blt.n	80226ee <__ieee754_logf+0x2e>
 80226e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80226ec:	4770      	bx	lr
 80226ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80226f2:	bfb8      	it	lt
 80226f4:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8022868 <__ieee754_logf+0x1a8>
 80226f8:	485c      	ldr	r0, [pc, #368]	; (802286c <__ieee754_logf+0x1ac>)
 80226fa:	bfbe      	ittt	lt
 80226fc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8022700:	f06f 0118 	mvnlt.w	r1, #24
 8022704:	ee17 3a90 	vmovlt	r3, s15
 8022708:	ea4f 52e3 	mov.w	r2, r3, asr #23
 802270c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8022710:	4418      	add	r0, r3
 8022712:	bfa8      	it	ge
 8022714:	2100      	movge	r1, #0
 8022716:	3a7f      	subs	r2, #127	; 0x7f
 8022718:	440a      	add	r2, r1
 802271a:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 802271e:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8022722:	4319      	orrs	r1, r3
 8022724:	ee00 1a10 	vmov	s0, r1
 8022728:	4951      	ldr	r1, [pc, #324]	; (8022870 <__ieee754_logf+0x1b0>)
 802272a:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 802272e:	f103 000f 	add.w	r0, r3, #15
 8022732:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8022736:	4001      	ands	r1, r0
 8022738:	ee30 0a67 	vsub.f32	s0, s0, s15
 802273c:	bb89      	cbnz	r1, 80227a2 <__ieee754_logf+0xe2>
 802273e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8022742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022746:	d10f      	bne.n	8022768 <__ieee754_logf+0xa8>
 8022748:	2a00      	cmp	r2, #0
 802274a:	f000 8085 	beq.w	8022858 <__ieee754_logf+0x198>
 802274e:	ee07 2a90 	vmov	s15, r2
 8022752:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8022874 <__ieee754_logf+0x1b4>
 8022756:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8022878 <__ieee754_logf+0x1b8>
 802275a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802275e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8022762:	eea7 0a87 	vfma.f32	s0, s15, s14
 8022766:	4770      	bx	lr
 8022768:	eddf 6a44 	vldr	s13, [pc, #272]	; 802287c <__ieee754_logf+0x1bc>
 802276c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022770:	eee0 7a66 	vfms.f32	s15, s0, s13
 8022774:	ee20 7a00 	vmul.f32	s14, s0, s0
 8022778:	ee27 7a27 	vmul.f32	s14, s14, s15
 802277c:	b912      	cbnz	r2, 8022784 <__ieee754_logf+0xc4>
 802277e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8022782:	4770      	bx	lr
 8022784:	ee07 2a90 	vmov	s15, r2
 8022788:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8022874 <__ieee754_logf+0x1b4>
 802278c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022790:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8022794:	ee37 0a40 	vsub.f32	s0, s14, s0
 8022798:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8022878 <__ieee754_logf+0x1b8>
 802279c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80227a0:	4770      	bx	lr
 80227a2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80227a6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80227aa:	eddf 5a35 	vldr	s11, [pc, #212]	; 8022880 <__ieee754_logf+0x1c0>
 80227ae:	eddf 4a35 	vldr	s9, [pc, #212]	; 8022884 <__ieee754_logf+0x1c4>
 80227b2:	4935      	ldr	r1, [pc, #212]	; (8022888 <__ieee754_logf+0x1c8>)
 80227b4:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80227b8:	4419      	add	r1, r3
 80227ba:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80227be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80227c2:	430b      	orrs	r3, r1
 80227c4:	2b00      	cmp	r3, #0
 80227c6:	ee07 2a90 	vmov	s15, r2
 80227ca:	ee26 5a06 	vmul.f32	s10, s12, s12
 80227ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80227d2:	ee25 7a05 	vmul.f32	s14, s10, s10
 80227d6:	eddf 7a2d 	vldr	s15, [pc, #180]	; 802288c <__ieee754_logf+0x1cc>
 80227da:	eee7 7a25 	vfma.f32	s15, s14, s11
 80227de:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8022890 <__ieee754_logf+0x1d0>
 80227e2:	eee7 5a87 	vfma.f32	s11, s15, s14
 80227e6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8022894 <__ieee754_logf+0x1d4>
 80227ea:	eee7 7a24 	vfma.f32	s15, s14, s9
 80227ee:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8022898 <__ieee754_logf+0x1d8>
 80227f2:	eee7 4a87 	vfma.f32	s9, s15, s14
 80227f6:	eddf 7a29 	vldr	s15, [pc, #164]	; 802289c <__ieee754_logf+0x1dc>
 80227fa:	eee4 7a87 	vfma.f32	s15, s9, s14
 80227fe:	ee67 7a85 	vmul.f32	s15, s15, s10
 8022802:	eee5 7a87 	vfma.f32	s15, s11, s14
 8022806:	dd1c      	ble.n	8022842 <__ieee754_logf+0x182>
 8022808:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802280c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8022810:	ee27 7a00 	vmul.f32	s14, s14, s0
 8022814:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022818:	ee67 7a86 	vmul.f32	s15, s15, s12
 802281c:	b922      	cbnz	r2, 8022828 <__ieee754_logf+0x168>
 802281e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022822:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022826:	4770      	bx	lr
 8022828:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8022874 <__ieee754_logf+0x1b4>
 802282c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8022830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022834:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8022838:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8022878 <__ieee754_logf+0x1b8>
 802283c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8022840:	4770      	bx	lr
 8022842:	ee70 7a67 	vsub.f32	s15, s0, s15
 8022846:	ee67 7a86 	vmul.f32	s15, s15, s12
 802284a:	2a00      	cmp	r2, #0
 802284c:	d0e9      	beq.n	8022822 <__ieee754_logf+0x162>
 802284e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8022874 <__ieee754_logf+0x1b4>
 8022852:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8022856:	e7ed      	b.n	8022834 <__ieee754_logf+0x174>
 8022858:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8022864 <__ieee754_logf+0x1a4>
 802285c:	4770      	bx	lr
 802285e:	bf00      	nop
 8022860:	cc000000 	.word	0xcc000000
 8022864:	00000000 	.word	0x00000000
 8022868:	4c000000 	.word	0x4c000000
 802286c:	004afb20 	.word	0x004afb20
 8022870:	007ffff0 	.word	0x007ffff0
 8022874:	3717f7d1 	.word	0x3717f7d1
 8022878:	3f317180 	.word	0x3f317180
 802287c:	3eaaaaab 	.word	0x3eaaaaab
 8022880:	3e1cd04f 	.word	0x3e1cd04f
 8022884:	3e178897 	.word	0x3e178897
 8022888:	ffcf5c30 	.word	0xffcf5c30
 802288c:	3e638e29 	.word	0x3e638e29
 8022890:	3ecccccd 	.word	0x3ecccccd
 8022894:	3e3a3325 	.word	0x3e3a3325
 8022898:	3e924925 	.word	0x3e924925
 802289c:	3f2aaaab 	.word	0x3f2aaaab

080228a0 <__ieee754_log10f>:
 80228a0:	b508      	push	{r3, lr}
 80228a2:	ee10 2a10 	vmov	r2, s0
 80228a6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80228aa:	ed2d 8b02 	vpush	{d8}
 80228ae:	d108      	bne.n	80228c2 <__ieee754_log10f+0x22>
 80228b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8022938 <__ieee754_log10f+0x98>
 80228b4:	eddf 7a21 	vldr	s15, [pc, #132]	; 802293c <__ieee754_log10f+0x9c>
 80228b8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80228bc:	ecbd 8b02 	vpop	{d8}
 80228c0:	bd08      	pop	{r3, pc}
 80228c2:	2a00      	cmp	r2, #0
 80228c4:	da02      	bge.n	80228cc <__ieee754_log10f+0x2c>
 80228c6:	ee30 7a40 	vsub.f32	s14, s0, s0
 80228ca:	e7f3      	b.n	80228b4 <__ieee754_log10f+0x14>
 80228cc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80228d0:	db02      	blt.n	80228d8 <__ieee754_log10f+0x38>
 80228d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80228d6:	e7f1      	b.n	80228bc <__ieee754_log10f+0x1c>
 80228d8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80228dc:	bfbf      	itttt	lt
 80228de:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8022940 <__ieee754_log10f+0xa0>
 80228e2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80228e6:	f06f 0118 	mvnlt.w	r1, #24
 80228ea:	ee17 2a90 	vmovlt	r2, s15
 80228ee:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80228f2:	bfa8      	it	ge
 80228f4:	2100      	movge	r1, #0
 80228f6:	3b7f      	subs	r3, #127	; 0x7f
 80228f8:	440b      	add	r3, r1
 80228fa:	0fd9      	lsrs	r1, r3, #31
 80228fc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8022900:	ee07 3a90 	vmov	s15, r3
 8022904:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8022908:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 802290c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8022910:	ee00 3a10 	vmov	s0, r3
 8022914:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8022918:	f7ff fed2 	bl	80226c0 <__ieee754_logf>
 802291c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8022944 <__ieee754_log10f+0xa4>
 8022920:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022924:	eddf 7a08 	vldr	s15, [pc, #32]	; 8022948 <__ieee754_log10f+0xa8>
 8022928:	eea8 0a27 	vfma.f32	s0, s16, s15
 802292c:	eddf 7a07 	vldr	s15, [pc, #28]	; 802294c <__ieee754_log10f+0xac>
 8022930:	eea8 0a27 	vfma.f32	s0, s16, s15
 8022934:	e7c2      	b.n	80228bc <__ieee754_log10f+0x1c>
 8022936:	bf00      	nop
 8022938:	cc000000 	.word	0xcc000000
 802293c:	00000000 	.word	0x00000000
 8022940:	4c000000 	.word	0x4c000000
 8022944:	3ede5bd9 	.word	0x3ede5bd9
 8022948:	355427db 	.word	0x355427db
 802294c:	3e9a2080 	.word	0x3e9a2080

08022950 <__ieee754_sqrtf>:
 8022950:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8022954:	4770      	bx	lr
	...

08022958 <__kernel_cos>:
 8022958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802295c:	ec57 6b10 	vmov	r6, r7, d0
 8022960:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8022964:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8022968:	ed8d 1b00 	vstr	d1, [sp]
 802296c:	da07      	bge.n	802297e <__kernel_cos+0x26>
 802296e:	ee10 0a10 	vmov	r0, s0
 8022972:	4639      	mov	r1, r7
 8022974:	f7de f8fa 	bl	8000b6c <__aeabi_d2iz>
 8022978:	2800      	cmp	r0, #0
 802297a:	f000 8088 	beq.w	8022a8e <__kernel_cos+0x136>
 802297e:	4632      	mov	r2, r6
 8022980:	463b      	mov	r3, r7
 8022982:	4630      	mov	r0, r6
 8022984:	4639      	mov	r1, r7
 8022986:	f7dd fe41 	bl	800060c <__aeabi_dmul>
 802298a:	4b51      	ldr	r3, [pc, #324]	; (8022ad0 <__kernel_cos+0x178>)
 802298c:	2200      	movs	r2, #0
 802298e:	4604      	mov	r4, r0
 8022990:	460d      	mov	r5, r1
 8022992:	f7dd fe3b 	bl	800060c <__aeabi_dmul>
 8022996:	a340      	add	r3, pc, #256	; (adr r3, 8022a98 <__kernel_cos+0x140>)
 8022998:	e9d3 2300 	ldrd	r2, r3, [r3]
 802299c:	4682      	mov	sl, r0
 802299e:	468b      	mov	fp, r1
 80229a0:	4620      	mov	r0, r4
 80229a2:	4629      	mov	r1, r5
 80229a4:	f7dd fe32 	bl	800060c <__aeabi_dmul>
 80229a8:	a33d      	add	r3, pc, #244	; (adr r3, 8022aa0 <__kernel_cos+0x148>)
 80229aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229ae:	f7dd fc77 	bl	80002a0 <__adddf3>
 80229b2:	4622      	mov	r2, r4
 80229b4:	462b      	mov	r3, r5
 80229b6:	f7dd fe29 	bl	800060c <__aeabi_dmul>
 80229ba:	a33b      	add	r3, pc, #236	; (adr r3, 8022aa8 <__kernel_cos+0x150>)
 80229bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229c0:	f7dd fc6c 	bl	800029c <__aeabi_dsub>
 80229c4:	4622      	mov	r2, r4
 80229c6:	462b      	mov	r3, r5
 80229c8:	f7dd fe20 	bl	800060c <__aeabi_dmul>
 80229cc:	a338      	add	r3, pc, #224	; (adr r3, 8022ab0 <__kernel_cos+0x158>)
 80229ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229d2:	f7dd fc65 	bl	80002a0 <__adddf3>
 80229d6:	4622      	mov	r2, r4
 80229d8:	462b      	mov	r3, r5
 80229da:	f7dd fe17 	bl	800060c <__aeabi_dmul>
 80229de:	a336      	add	r3, pc, #216	; (adr r3, 8022ab8 <__kernel_cos+0x160>)
 80229e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229e4:	f7dd fc5a 	bl	800029c <__aeabi_dsub>
 80229e8:	4622      	mov	r2, r4
 80229ea:	462b      	mov	r3, r5
 80229ec:	f7dd fe0e 	bl	800060c <__aeabi_dmul>
 80229f0:	a333      	add	r3, pc, #204	; (adr r3, 8022ac0 <__kernel_cos+0x168>)
 80229f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229f6:	f7dd fc53 	bl	80002a0 <__adddf3>
 80229fa:	4622      	mov	r2, r4
 80229fc:	462b      	mov	r3, r5
 80229fe:	f7dd fe05 	bl	800060c <__aeabi_dmul>
 8022a02:	4622      	mov	r2, r4
 8022a04:	462b      	mov	r3, r5
 8022a06:	f7dd fe01 	bl	800060c <__aeabi_dmul>
 8022a0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022a0e:	4604      	mov	r4, r0
 8022a10:	460d      	mov	r5, r1
 8022a12:	4630      	mov	r0, r6
 8022a14:	4639      	mov	r1, r7
 8022a16:	f7dd fdf9 	bl	800060c <__aeabi_dmul>
 8022a1a:	460b      	mov	r3, r1
 8022a1c:	4602      	mov	r2, r0
 8022a1e:	4629      	mov	r1, r5
 8022a20:	4620      	mov	r0, r4
 8022a22:	f7dd fc3b 	bl	800029c <__aeabi_dsub>
 8022a26:	4b2b      	ldr	r3, [pc, #172]	; (8022ad4 <__kernel_cos+0x17c>)
 8022a28:	4598      	cmp	r8, r3
 8022a2a:	4606      	mov	r6, r0
 8022a2c:	460f      	mov	r7, r1
 8022a2e:	dc10      	bgt.n	8022a52 <__kernel_cos+0xfa>
 8022a30:	4602      	mov	r2, r0
 8022a32:	460b      	mov	r3, r1
 8022a34:	4650      	mov	r0, sl
 8022a36:	4659      	mov	r1, fp
 8022a38:	f7dd fc30 	bl	800029c <__aeabi_dsub>
 8022a3c:	460b      	mov	r3, r1
 8022a3e:	4926      	ldr	r1, [pc, #152]	; (8022ad8 <__kernel_cos+0x180>)
 8022a40:	4602      	mov	r2, r0
 8022a42:	2000      	movs	r0, #0
 8022a44:	f7dd fc2a 	bl	800029c <__aeabi_dsub>
 8022a48:	ec41 0b10 	vmov	d0, r0, r1
 8022a4c:	b003      	add	sp, #12
 8022a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a52:	4b22      	ldr	r3, [pc, #136]	; (8022adc <__kernel_cos+0x184>)
 8022a54:	4920      	ldr	r1, [pc, #128]	; (8022ad8 <__kernel_cos+0x180>)
 8022a56:	4598      	cmp	r8, r3
 8022a58:	bfcc      	ite	gt
 8022a5a:	4d21      	ldrgt	r5, [pc, #132]	; (8022ae0 <__kernel_cos+0x188>)
 8022a5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8022a60:	2400      	movs	r4, #0
 8022a62:	4622      	mov	r2, r4
 8022a64:	462b      	mov	r3, r5
 8022a66:	2000      	movs	r0, #0
 8022a68:	f7dd fc18 	bl	800029c <__aeabi_dsub>
 8022a6c:	4622      	mov	r2, r4
 8022a6e:	4680      	mov	r8, r0
 8022a70:	4689      	mov	r9, r1
 8022a72:	462b      	mov	r3, r5
 8022a74:	4650      	mov	r0, sl
 8022a76:	4659      	mov	r1, fp
 8022a78:	f7dd fc10 	bl	800029c <__aeabi_dsub>
 8022a7c:	4632      	mov	r2, r6
 8022a7e:	463b      	mov	r3, r7
 8022a80:	f7dd fc0c 	bl	800029c <__aeabi_dsub>
 8022a84:	4602      	mov	r2, r0
 8022a86:	460b      	mov	r3, r1
 8022a88:	4640      	mov	r0, r8
 8022a8a:	4649      	mov	r1, r9
 8022a8c:	e7da      	b.n	8022a44 <__kernel_cos+0xec>
 8022a8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8022ac8 <__kernel_cos+0x170>
 8022a92:	e7db      	b.n	8022a4c <__kernel_cos+0xf4>
 8022a94:	f3af 8000 	nop.w
 8022a98:	be8838d4 	.word	0xbe8838d4
 8022a9c:	bda8fae9 	.word	0xbda8fae9
 8022aa0:	bdb4b1c4 	.word	0xbdb4b1c4
 8022aa4:	3e21ee9e 	.word	0x3e21ee9e
 8022aa8:	809c52ad 	.word	0x809c52ad
 8022aac:	3e927e4f 	.word	0x3e927e4f
 8022ab0:	19cb1590 	.word	0x19cb1590
 8022ab4:	3efa01a0 	.word	0x3efa01a0
 8022ab8:	16c15177 	.word	0x16c15177
 8022abc:	3f56c16c 	.word	0x3f56c16c
 8022ac0:	5555554c 	.word	0x5555554c
 8022ac4:	3fa55555 	.word	0x3fa55555
 8022ac8:	00000000 	.word	0x00000000
 8022acc:	3ff00000 	.word	0x3ff00000
 8022ad0:	3fe00000 	.word	0x3fe00000
 8022ad4:	3fd33332 	.word	0x3fd33332
 8022ad8:	3ff00000 	.word	0x3ff00000
 8022adc:	3fe90000 	.word	0x3fe90000
 8022ae0:	3fd20000 	.word	0x3fd20000
 8022ae4:	00000000 	.word	0x00000000

08022ae8 <__kernel_rem_pio2>:
 8022ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022aec:	ed2d 8b02 	vpush	{d8}
 8022af0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8022af4:	f112 0f14 	cmn.w	r2, #20
 8022af8:	9308      	str	r3, [sp, #32]
 8022afa:	9101      	str	r1, [sp, #4]
 8022afc:	4bc4      	ldr	r3, [pc, #784]	; (8022e10 <__kernel_rem_pio2+0x328>)
 8022afe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8022b00:	900b      	str	r0, [sp, #44]	; 0x2c
 8022b02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022b06:	9302      	str	r3, [sp, #8]
 8022b08:	9b08      	ldr	r3, [sp, #32]
 8022b0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8022b0e:	bfa8      	it	ge
 8022b10:	1ed4      	subge	r4, r2, #3
 8022b12:	9306      	str	r3, [sp, #24]
 8022b14:	bfb2      	itee	lt
 8022b16:	2400      	movlt	r4, #0
 8022b18:	2318      	movge	r3, #24
 8022b1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8022b1e:	f06f 0317 	mvn.w	r3, #23
 8022b22:	fb04 3303 	mla	r3, r4, r3, r3
 8022b26:	eb03 0a02 	add.w	sl, r3, r2
 8022b2a:	9b02      	ldr	r3, [sp, #8]
 8022b2c:	9a06      	ldr	r2, [sp, #24]
 8022b2e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8022e00 <__kernel_rem_pio2+0x318>
 8022b32:	eb03 0802 	add.w	r8, r3, r2
 8022b36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8022b38:	1aa7      	subs	r7, r4, r2
 8022b3a:	ae22      	add	r6, sp, #136	; 0x88
 8022b3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8022b40:	2500      	movs	r5, #0
 8022b42:	4545      	cmp	r5, r8
 8022b44:	dd13      	ble.n	8022b6e <__kernel_rem_pio2+0x86>
 8022b46:	9b08      	ldr	r3, [sp, #32]
 8022b48:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8022e00 <__kernel_rem_pio2+0x318>
 8022b4c:	aa22      	add	r2, sp, #136	; 0x88
 8022b4e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8022b52:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8022b56:	f04f 0800 	mov.w	r8, #0
 8022b5a:	9b02      	ldr	r3, [sp, #8]
 8022b5c:	4598      	cmp	r8, r3
 8022b5e:	dc2f      	bgt.n	8022bc0 <__kernel_rem_pio2+0xd8>
 8022b60:	ed8d 8b04 	vstr	d8, [sp, #16]
 8022b64:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8022b68:	462f      	mov	r7, r5
 8022b6a:	2600      	movs	r6, #0
 8022b6c:	e01b      	b.n	8022ba6 <__kernel_rem_pio2+0xbe>
 8022b6e:	42ef      	cmn	r7, r5
 8022b70:	d407      	bmi.n	8022b82 <__kernel_rem_pio2+0x9a>
 8022b72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8022b76:	f7dd fcdf 	bl	8000538 <__aeabi_i2d>
 8022b7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8022b7e:	3501      	adds	r5, #1
 8022b80:	e7df      	b.n	8022b42 <__kernel_rem_pio2+0x5a>
 8022b82:	ec51 0b18 	vmov	r0, r1, d8
 8022b86:	e7f8      	b.n	8022b7a <__kernel_rem_pio2+0x92>
 8022b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022b8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8022b90:	f7dd fd3c 	bl	800060c <__aeabi_dmul>
 8022b94:	4602      	mov	r2, r0
 8022b96:	460b      	mov	r3, r1
 8022b98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022b9c:	f7dd fb80 	bl	80002a0 <__adddf3>
 8022ba0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022ba4:	3601      	adds	r6, #1
 8022ba6:	9b06      	ldr	r3, [sp, #24]
 8022ba8:	429e      	cmp	r6, r3
 8022baa:	f1a7 0708 	sub.w	r7, r7, #8
 8022bae:	ddeb      	ble.n	8022b88 <__kernel_rem_pio2+0xa0>
 8022bb0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8022bb4:	f108 0801 	add.w	r8, r8, #1
 8022bb8:	ecab 7b02 	vstmia	fp!, {d7}
 8022bbc:	3508      	adds	r5, #8
 8022bbe:	e7cc      	b.n	8022b5a <__kernel_rem_pio2+0x72>
 8022bc0:	9b02      	ldr	r3, [sp, #8]
 8022bc2:	aa0e      	add	r2, sp, #56	; 0x38
 8022bc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022bc8:	930d      	str	r3, [sp, #52]	; 0x34
 8022bca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8022bcc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8022bd0:	9c02      	ldr	r4, [sp, #8]
 8022bd2:	930c      	str	r3, [sp, #48]	; 0x30
 8022bd4:	00e3      	lsls	r3, r4, #3
 8022bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8022bd8:	ab9a      	add	r3, sp, #616	; 0x268
 8022bda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022bde:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8022be2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8022be6:	ab72      	add	r3, sp, #456	; 0x1c8
 8022be8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8022bec:	46c3      	mov	fp, r8
 8022bee:	46a1      	mov	r9, r4
 8022bf0:	f1b9 0f00 	cmp.w	r9, #0
 8022bf4:	f1a5 0508 	sub.w	r5, r5, #8
 8022bf8:	dc77      	bgt.n	8022cea <__kernel_rem_pio2+0x202>
 8022bfa:	ec47 6b10 	vmov	d0, r6, r7
 8022bfe:	4650      	mov	r0, sl
 8022c00:	f000 fdfa 	bl	80237f8 <scalbn>
 8022c04:	ec57 6b10 	vmov	r6, r7, d0
 8022c08:	2200      	movs	r2, #0
 8022c0a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8022c0e:	ee10 0a10 	vmov	r0, s0
 8022c12:	4639      	mov	r1, r7
 8022c14:	f7dd fcfa 	bl	800060c <__aeabi_dmul>
 8022c18:	ec41 0b10 	vmov	d0, r0, r1
 8022c1c:	f7fe f9a0 	bl	8020f60 <floor>
 8022c20:	4b7c      	ldr	r3, [pc, #496]	; (8022e14 <__kernel_rem_pio2+0x32c>)
 8022c22:	ec51 0b10 	vmov	r0, r1, d0
 8022c26:	2200      	movs	r2, #0
 8022c28:	f7dd fcf0 	bl	800060c <__aeabi_dmul>
 8022c2c:	4602      	mov	r2, r0
 8022c2e:	460b      	mov	r3, r1
 8022c30:	4630      	mov	r0, r6
 8022c32:	4639      	mov	r1, r7
 8022c34:	f7dd fb32 	bl	800029c <__aeabi_dsub>
 8022c38:	460f      	mov	r7, r1
 8022c3a:	4606      	mov	r6, r0
 8022c3c:	f7dd ff96 	bl	8000b6c <__aeabi_d2iz>
 8022c40:	9004      	str	r0, [sp, #16]
 8022c42:	f7dd fc79 	bl	8000538 <__aeabi_i2d>
 8022c46:	4602      	mov	r2, r0
 8022c48:	460b      	mov	r3, r1
 8022c4a:	4630      	mov	r0, r6
 8022c4c:	4639      	mov	r1, r7
 8022c4e:	f7dd fb25 	bl	800029c <__aeabi_dsub>
 8022c52:	f1ba 0f00 	cmp.w	sl, #0
 8022c56:	4606      	mov	r6, r0
 8022c58:	460f      	mov	r7, r1
 8022c5a:	dd6d      	ble.n	8022d38 <__kernel_rem_pio2+0x250>
 8022c5c:	1e62      	subs	r2, r4, #1
 8022c5e:	ab0e      	add	r3, sp, #56	; 0x38
 8022c60:	9d04      	ldr	r5, [sp, #16]
 8022c62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022c66:	f1ca 0118 	rsb	r1, sl, #24
 8022c6a:	fa40 f301 	asr.w	r3, r0, r1
 8022c6e:	441d      	add	r5, r3
 8022c70:	408b      	lsls	r3, r1
 8022c72:	1ac0      	subs	r0, r0, r3
 8022c74:	ab0e      	add	r3, sp, #56	; 0x38
 8022c76:	9504      	str	r5, [sp, #16]
 8022c78:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8022c7c:	f1ca 0317 	rsb	r3, sl, #23
 8022c80:	fa40 fb03 	asr.w	fp, r0, r3
 8022c84:	f1bb 0f00 	cmp.w	fp, #0
 8022c88:	dd65      	ble.n	8022d56 <__kernel_rem_pio2+0x26e>
 8022c8a:	9b04      	ldr	r3, [sp, #16]
 8022c8c:	2200      	movs	r2, #0
 8022c8e:	3301      	adds	r3, #1
 8022c90:	9304      	str	r3, [sp, #16]
 8022c92:	4615      	mov	r5, r2
 8022c94:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8022c98:	4294      	cmp	r4, r2
 8022c9a:	f300 809c 	bgt.w	8022dd6 <__kernel_rem_pio2+0x2ee>
 8022c9e:	f1ba 0f00 	cmp.w	sl, #0
 8022ca2:	dd07      	ble.n	8022cb4 <__kernel_rem_pio2+0x1cc>
 8022ca4:	f1ba 0f01 	cmp.w	sl, #1
 8022ca8:	f000 80c0 	beq.w	8022e2c <__kernel_rem_pio2+0x344>
 8022cac:	f1ba 0f02 	cmp.w	sl, #2
 8022cb0:	f000 80c6 	beq.w	8022e40 <__kernel_rem_pio2+0x358>
 8022cb4:	f1bb 0f02 	cmp.w	fp, #2
 8022cb8:	d14d      	bne.n	8022d56 <__kernel_rem_pio2+0x26e>
 8022cba:	4632      	mov	r2, r6
 8022cbc:	463b      	mov	r3, r7
 8022cbe:	4956      	ldr	r1, [pc, #344]	; (8022e18 <__kernel_rem_pio2+0x330>)
 8022cc0:	2000      	movs	r0, #0
 8022cc2:	f7dd faeb 	bl	800029c <__aeabi_dsub>
 8022cc6:	4606      	mov	r6, r0
 8022cc8:	460f      	mov	r7, r1
 8022cca:	2d00      	cmp	r5, #0
 8022ccc:	d043      	beq.n	8022d56 <__kernel_rem_pio2+0x26e>
 8022cce:	4650      	mov	r0, sl
 8022cd0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8022e08 <__kernel_rem_pio2+0x320>
 8022cd4:	f000 fd90 	bl	80237f8 <scalbn>
 8022cd8:	4630      	mov	r0, r6
 8022cda:	4639      	mov	r1, r7
 8022cdc:	ec53 2b10 	vmov	r2, r3, d0
 8022ce0:	f7dd fadc 	bl	800029c <__aeabi_dsub>
 8022ce4:	4606      	mov	r6, r0
 8022ce6:	460f      	mov	r7, r1
 8022ce8:	e035      	b.n	8022d56 <__kernel_rem_pio2+0x26e>
 8022cea:	4b4c      	ldr	r3, [pc, #304]	; (8022e1c <__kernel_rem_pio2+0x334>)
 8022cec:	2200      	movs	r2, #0
 8022cee:	4630      	mov	r0, r6
 8022cf0:	4639      	mov	r1, r7
 8022cf2:	f7dd fc8b 	bl	800060c <__aeabi_dmul>
 8022cf6:	f7dd ff39 	bl	8000b6c <__aeabi_d2iz>
 8022cfa:	f7dd fc1d 	bl	8000538 <__aeabi_i2d>
 8022cfe:	4602      	mov	r2, r0
 8022d00:	460b      	mov	r3, r1
 8022d02:	ec43 2b18 	vmov	d8, r2, r3
 8022d06:	4b46      	ldr	r3, [pc, #280]	; (8022e20 <__kernel_rem_pio2+0x338>)
 8022d08:	2200      	movs	r2, #0
 8022d0a:	f7dd fc7f 	bl	800060c <__aeabi_dmul>
 8022d0e:	4602      	mov	r2, r0
 8022d10:	460b      	mov	r3, r1
 8022d12:	4630      	mov	r0, r6
 8022d14:	4639      	mov	r1, r7
 8022d16:	f7dd fac1 	bl	800029c <__aeabi_dsub>
 8022d1a:	f7dd ff27 	bl	8000b6c <__aeabi_d2iz>
 8022d1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022d22:	f84b 0b04 	str.w	r0, [fp], #4
 8022d26:	ec51 0b18 	vmov	r0, r1, d8
 8022d2a:	f7dd fab9 	bl	80002a0 <__adddf3>
 8022d2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8022d32:	4606      	mov	r6, r0
 8022d34:	460f      	mov	r7, r1
 8022d36:	e75b      	b.n	8022bf0 <__kernel_rem_pio2+0x108>
 8022d38:	d106      	bne.n	8022d48 <__kernel_rem_pio2+0x260>
 8022d3a:	1e63      	subs	r3, r4, #1
 8022d3c:	aa0e      	add	r2, sp, #56	; 0x38
 8022d3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8022d42:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8022d46:	e79d      	b.n	8022c84 <__kernel_rem_pio2+0x19c>
 8022d48:	4b36      	ldr	r3, [pc, #216]	; (8022e24 <__kernel_rem_pio2+0x33c>)
 8022d4a:	2200      	movs	r2, #0
 8022d4c:	f7dd fee4 	bl	8000b18 <__aeabi_dcmpge>
 8022d50:	2800      	cmp	r0, #0
 8022d52:	d13d      	bne.n	8022dd0 <__kernel_rem_pio2+0x2e8>
 8022d54:	4683      	mov	fp, r0
 8022d56:	2200      	movs	r2, #0
 8022d58:	2300      	movs	r3, #0
 8022d5a:	4630      	mov	r0, r6
 8022d5c:	4639      	mov	r1, r7
 8022d5e:	f7dd febd 	bl	8000adc <__aeabi_dcmpeq>
 8022d62:	2800      	cmp	r0, #0
 8022d64:	f000 80c0 	beq.w	8022ee8 <__kernel_rem_pio2+0x400>
 8022d68:	1e65      	subs	r5, r4, #1
 8022d6a:	462b      	mov	r3, r5
 8022d6c:	2200      	movs	r2, #0
 8022d6e:	9902      	ldr	r1, [sp, #8]
 8022d70:	428b      	cmp	r3, r1
 8022d72:	da6c      	bge.n	8022e4e <__kernel_rem_pio2+0x366>
 8022d74:	2a00      	cmp	r2, #0
 8022d76:	f000 8089 	beq.w	8022e8c <__kernel_rem_pio2+0x3a4>
 8022d7a:	ab0e      	add	r3, sp, #56	; 0x38
 8022d7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8022d80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8022d84:	2b00      	cmp	r3, #0
 8022d86:	f000 80ad 	beq.w	8022ee4 <__kernel_rem_pio2+0x3fc>
 8022d8a:	4650      	mov	r0, sl
 8022d8c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8022e08 <__kernel_rem_pio2+0x320>
 8022d90:	f000 fd32 	bl	80237f8 <scalbn>
 8022d94:	ab9a      	add	r3, sp, #616	; 0x268
 8022d96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8022d9a:	ec57 6b10 	vmov	r6, r7, d0
 8022d9e:	00ec      	lsls	r4, r5, #3
 8022da0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8022da4:	46aa      	mov	sl, r5
 8022da6:	f1ba 0f00 	cmp.w	sl, #0
 8022daa:	f280 80d6 	bge.w	8022f5a <__kernel_rem_pio2+0x472>
 8022dae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8022e00 <__kernel_rem_pio2+0x318>
 8022db2:	462e      	mov	r6, r5
 8022db4:	2e00      	cmp	r6, #0
 8022db6:	f2c0 8104 	blt.w	8022fc2 <__kernel_rem_pio2+0x4da>
 8022dba:	ab72      	add	r3, sp, #456	; 0x1c8
 8022dbc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8022dc0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8022e28 <__kernel_rem_pio2+0x340>
 8022dc4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8022dc8:	f04f 0800 	mov.w	r8, #0
 8022dcc:	1baf      	subs	r7, r5, r6
 8022dce:	e0ea      	b.n	8022fa6 <__kernel_rem_pio2+0x4be>
 8022dd0:	f04f 0b02 	mov.w	fp, #2
 8022dd4:	e759      	b.n	8022c8a <__kernel_rem_pio2+0x1a2>
 8022dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8022dda:	b955      	cbnz	r5, 8022df2 <__kernel_rem_pio2+0x30a>
 8022ddc:	b123      	cbz	r3, 8022de8 <__kernel_rem_pio2+0x300>
 8022dde:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8022de2:	f8c8 3000 	str.w	r3, [r8]
 8022de6:	2301      	movs	r3, #1
 8022de8:	3201      	adds	r2, #1
 8022dea:	f108 0804 	add.w	r8, r8, #4
 8022dee:	461d      	mov	r5, r3
 8022df0:	e752      	b.n	8022c98 <__kernel_rem_pio2+0x1b0>
 8022df2:	1acb      	subs	r3, r1, r3
 8022df4:	f8c8 3000 	str.w	r3, [r8]
 8022df8:	462b      	mov	r3, r5
 8022dfa:	e7f5      	b.n	8022de8 <__kernel_rem_pio2+0x300>
 8022dfc:	f3af 8000 	nop.w
	...
 8022e0c:	3ff00000 	.word	0x3ff00000
 8022e10:	0802a200 	.word	0x0802a200
 8022e14:	40200000 	.word	0x40200000
 8022e18:	3ff00000 	.word	0x3ff00000
 8022e1c:	3e700000 	.word	0x3e700000
 8022e20:	41700000 	.word	0x41700000
 8022e24:	3fe00000 	.word	0x3fe00000
 8022e28:	0802a1c0 	.word	0x0802a1c0
 8022e2c:	1e62      	subs	r2, r4, #1
 8022e2e:	ab0e      	add	r3, sp, #56	; 0x38
 8022e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022e34:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8022e38:	a90e      	add	r1, sp, #56	; 0x38
 8022e3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8022e3e:	e739      	b.n	8022cb4 <__kernel_rem_pio2+0x1cc>
 8022e40:	1e62      	subs	r2, r4, #1
 8022e42:	ab0e      	add	r3, sp, #56	; 0x38
 8022e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022e48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8022e4c:	e7f4      	b.n	8022e38 <__kernel_rem_pio2+0x350>
 8022e4e:	a90e      	add	r1, sp, #56	; 0x38
 8022e50:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8022e54:	3b01      	subs	r3, #1
 8022e56:	430a      	orrs	r2, r1
 8022e58:	e789      	b.n	8022d6e <__kernel_rem_pio2+0x286>
 8022e5a:	3301      	adds	r3, #1
 8022e5c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8022e60:	2900      	cmp	r1, #0
 8022e62:	d0fa      	beq.n	8022e5a <__kernel_rem_pio2+0x372>
 8022e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022e66:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8022e6a:	446a      	add	r2, sp
 8022e6c:	3a98      	subs	r2, #152	; 0x98
 8022e6e:	920a      	str	r2, [sp, #40]	; 0x28
 8022e70:	9a08      	ldr	r2, [sp, #32]
 8022e72:	18e3      	adds	r3, r4, r3
 8022e74:	18a5      	adds	r5, r4, r2
 8022e76:	aa22      	add	r2, sp, #136	; 0x88
 8022e78:	f104 0801 	add.w	r8, r4, #1
 8022e7c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8022e80:	9304      	str	r3, [sp, #16]
 8022e82:	9b04      	ldr	r3, [sp, #16]
 8022e84:	4543      	cmp	r3, r8
 8022e86:	da04      	bge.n	8022e92 <__kernel_rem_pio2+0x3aa>
 8022e88:	461c      	mov	r4, r3
 8022e8a:	e6a3      	b.n	8022bd4 <__kernel_rem_pio2+0xec>
 8022e8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022e8e:	2301      	movs	r3, #1
 8022e90:	e7e4      	b.n	8022e5c <__kernel_rem_pio2+0x374>
 8022e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e94:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8022e98:	f7dd fb4e 	bl	8000538 <__aeabi_i2d>
 8022e9c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8022ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022ea2:	46ab      	mov	fp, r5
 8022ea4:	461c      	mov	r4, r3
 8022ea6:	f04f 0900 	mov.w	r9, #0
 8022eaa:	2600      	movs	r6, #0
 8022eac:	2700      	movs	r7, #0
 8022eae:	9b06      	ldr	r3, [sp, #24]
 8022eb0:	4599      	cmp	r9, r3
 8022eb2:	dd06      	ble.n	8022ec2 <__kernel_rem_pio2+0x3da>
 8022eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022eb6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8022eba:	f108 0801 	add.w	r8, r8, #1
 8022ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8022ec0:	e7df      	b.n	8022e82 <__kernel_rem_pio2+0x39a>
 8022ec2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8022ec6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8022eca:	f7dd fb9f 	bl	800060c <__aeabi_dmul>
 8022ece:	4602      	mov	r2, r0
 8022ed0:	460b      	mov	r3, r1
 8022ed2:	4630      	mov	r0, r6
 8022ed4:	4639      	mov	r1, r7
 8022ed6:	f7dd f9e3 	bl	80002a0 <__adddf3>
 8022eda:	f109 0901 	add.w	r9, r9, #1
 8022ede:	4606      	mov	r6, r0
 8022ee0:	460f      	mov	r7, r1
 8022ee2:	e7e4      	b.n	8022eae <__kernel_rem_pio2+0x3c6>
 8022ee4:	3d01      	subs	r5, #1
 8022ee6:	e748      	b.n	8022d7a <__kernel_rem_pio2+0x292>
 8022ee8:	ec47 6b10 	vmov	d0, r6, r7
 8022eec:	f1ca 0000 	rsb	r0, sl, #0
 8022ef0:	f000 fc82 	bl	80237f8 <scalbn>
 8022ef4:	ec57 6b10 	vmov	r6, r7, d0
 8022ef8:	4ba0      	ldr	r3, [pc, #640]	; (802317c <__kernel_rem_pio2+0x694>)
 8022efa:	ee10 0a10 	vmov	r0, s0
 8022efe:	2200      	movs	r2, #0
 8022f00:	4639      	mov	r1, r7
 8022f02:	f7dd fe09 	bl	8000b18 <__aeabi_dcmpge>
 8022f06:	b1f8      	cbz	r0, 8022f48 <__kernel_rem_pio2+0x460>
 8022f08:	4b9d      	ldr	r3, [pc, #628]	; (8023180 <__kernel_rem_pio2+0x698>)
 8022f0a:	2200      	movs	r2, #0
 8022f0c:	4630      	mov	r0, r6
 8022f0e:	4639      	mov	r1, r7
 8022f10:	f7dd fb7c 	bl	800060c <__aeabi_dmul>
 8022f14:	f7dd fe2a 	bl	8000b6c <__aeabi_d2iz>
 8022f18:	4680      	mov	r8, r0
 8022f1a:	f7dd fb0d 	bl	8000538 <__aeabi_i2d>
 8022f1e:	4b97      	ldr	r3, [pc, #604]	; (802317c <__kernel_rem_pio2+0x694>)
 8022f20:	2200      	movs	r2, #0
 8022f22:	f7dd fb73 	bl	800060c <__aeabi_dmul>
 8022f26:	460b      	mov	r3, r1
 8022f28:	4602      	mov	r2, r0
 8022f2a:	4639      	mov	r1, r7
 8022f2c:	4630      	mov	r0, r6
 8022f2e:	f7dd f9b5 	bl	800029c <__aeabi_dsub>
 8022f32:	f7dd fe1b 	bl	8000b6c <__aeabi_d2iz>
 8022f36:	1c65      	adds	r5, r4, #1
 8022f38:	ab0e      	add	r3, sp, #56	; 0x38
 8022f3a:	f10a 0a18 	add.w	sl, sl, #24
 8022f3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8022f42:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8022f46:	e720      	b.n	8022d8a <__kernel_rem_pio2+0x2a2>
 8022f48:	4630      	mov	r0, r6
 8022f4a:	4639      	mov	r1, r7
 8022f4c:	f7dd fe0e 	bl	8000b6c <__aeabi_d2iz>
 8022f50:	ab0e      	add	r3, sp, #56	; 0x38
 8022f52:	4625      	mov	r5, r4
 8022f54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8022f58:	e717      	b.n	8022d8a <__kernel_rem_pio2+0x2a2>
 8022f5a:	ab0e      	add	r3, sp, #56	; 0x38
 8022f5c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8022f60:	f7dd faea 	bl	8000538 <__aeabi_i2d>
 8022f64:	4632      	mov	r2, r6
 8022f66:	463b      	mov	r3, r7
 8022f68:	f7dd fb50 	bl	800060c <__aeabi_dmul>
 8022f6c:	4b84      	ldr	r3, [pc, #528]	; (8023180 <__kernel_rem_pio2+0x698>)
 8022f6e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8022f72:	2200      	movs	r2, #0
 8022f74:	4630      	mov	r0, r6
 8022f76:	4639      	mov	r1, r7
 8022f78:	f7dd fb48 	bl	800060c <__aeabi_dmul>
 8022f7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022f80:	4606      	mov	r6, r0
 8022f82:	460f      	mov	r7, r1
 8022f84:	e70f      	b.n	8022da6 <__kernel_rem_pio2+0x2be>
 8022f86:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8022f8a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8022f8e:	f7dd fb3d 	bl	800060c <__aeabi_dmul>
 8022f92:	4602      	mov	r2, r0
 8022f94:	460b      	mov	r3, r1
 8022f96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f9a:	f7dd f981 	bl	80002a0 <__adddf3>
 8022f9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022fa2:	f108 0801 	add.w	r8, r8, #1
 8022fa6:	9b02      	ldr	r3, [sp, #8]
 8022fa8:	4598      	cmp	r8, r3
 8022faa:	dc01      	bgt.n	8022fb0 <__kernel_rem_pio2+0x4c8>
 8022fac:	45b8      	cmp	r8, r7
 8022fae:	ddea      	ble.n	8022f86 <__kernel_rem_pio2+0x49e>
 8022fb0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8022fb4:	ab4a      	add	r3, sp, #296	; 0x128
 8022fb6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8022fba:	ed87 7b00 	vstr	d7, [r7]
 8022fbe:	3e01      	subs	r6, #1
 8022fc0:	e6f8      	b.n	8022db4 <__kernel_rem_pio2+0x2cc>
 8022fc2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8022fc4:	2b02      	cmp	r3, #2
 8022fc6:	dc0b      	bgt.n	8022fe0 <__kernel_rem_pio2+0x4f8>
 8022fc8:	2b00      	cmp	r3, #0
 8022fca:	dc35      	bgt.n	8023038 <__kernel_rem_pio2+0x550>
 8022fcc:	d059      	beq.n	8023082 <__kernel_rem_pio2+0x59a>
 8022fce:	9b04      	ldr	r3, [sp, #16]
 8022fd0:	f003 0007 	and.w	r0, r3, #7
 8022fd4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8022fd8:	ecbd 8b02 	vpop	{d8}
 8022fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fe0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8022fe2:	2b03      	cmp	r3, #3
 8022fe4:	d1f3      	bne.n	8022fce <__kernel_rem_pio2+0x4e6>
 8022fe6:	ab4a      	add	r3, sp, #296	; 0x128
 8022fe8:	4423      	add	r3, r4
 8022fea:	9306      	str	r3, [sp, #24]
 8022fec:	461c      	mov	r4, r3
 8022fee:	469a      	mov	sl, r3
 8022ff0:	9502      	str	r5, [sp, #8]
 8022ff2:	9b02      	ldr	r3, [sp, #8]
 8022ff4:	2b00      	cmp	r3, #0
 8022ff6:	f1aa 0a08 	sub.w	sl, sl, #8
 8022ffa:	dc6b      	bgt.n	80230d4 <__kernel_rem_pio2+0x5ec>
 8022ffc:	46aa      	mov	sl, r5
 8022ffe:	f1ba 0f01 	cmp.w	sl, #1
 8023002:	f1a4 0408 	sub.w	r4, r4, #8
 8023006:	f300 8085 	bgt.w	8023114 <__kernel_rem_pio2+0x62c>
 802300a:	9c06      	ldr	r4, [sp, #24]
 802300c:	2000      	movs	r0, #0
 802300e:	3408      	adds	r4, #8
 8023010:	2100      	movs	r1, #0
 8023012:	2d01      	cmp	r5, #1
 8023014:	f300 809d 	bgt.w	8023152 <__kernel_rem_pio2+0x66a>
 8023018:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 802301c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8023020:	f1bb 0f00 	cmp.w	fp, #0
 8023024:	f040 809b 	bne.w	802315e <__kernel_rem_pio2+0x676>
 8023028:	9b01      	ldr	r3, [sp, #4]
 802302a:	e9c3 5600 	strd	r5, r6, [r3]
 802302e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8023032:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8023036:	e7ca      	b.n	8022fce <__kernel_rem_pio2+0x4e6>
 8023038:	3408      	adds	r4, #8
 802303a:	ab4a      	add	r3, sp, #296	; 0x128
 802303c:	441c      	add	r4, r3
 802303e:	462e      	mov	r6, r5
 8023040:	2000      	movs	r0, #0
 8023042:	2100      	movs	r1, #0
 8023044:	2e00      	cmp	r6, #0
 8023046:	da36      	bge.n	80230b6 <__kernel_rem_pio2+0x5ce>
 8023048:	f1bb 0f00 	cmp.w	fp, #0
 802304c:	d039      	beq.n	80230c2 <__kernel_rem_pio2+0x5da>
 802304e:	4602      	mov	r2, r0
 8023050:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023054:	9c01      	ldr	r4, [sp, #4]
 8023056:	e9c4 2300 	strd	r2, r3, [r4]
 802305a:	4602      	mov	r2, r0
 802305c:	460b      	mov	r3, r1
 802305e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8023062:	f7dd f91b 	bl	800029c <__aeabi_dsub>
 8023066:	ae4c      	add	r6, sp, #304	; 0x130
 8023068:	2401      	movs	r4, #1
 802306a:	42a5      	cmp	r5, r4
 802306c:	da2c      	bge.n	80230c8 <__kernel_rem_pio2+0x5e0>
 802306e:	f1bb 0f00 	cmp.w	fp, #0
 8023072:	d002      	beq.n	802307a <__kernel_rem_pio2+0x592>
 8023074:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023078:	4619      	mov	r1, r3
 802307a:	9b01      	ldr	r3, [sp, #4]
 802307c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8023080:	e7a5      	b.n	8022fce <__kernel_rem_pio2+0x4e6>
 8023082:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8023086:	eb0d 0403 	add.w	r4, sp, r3
 802308a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 802308e:	2000      	movs	r0, #0
 8023090:	2100      	movs	r1, #0
 8023092:	2d00      	cmp	r5, #0
 8023094:	da09      	bge.n	80230aa <__kernel_rem_pio2+0x5c2>
 8023096:	f1bb 0f00 	cmp.w	fp, #0
 802309a:	d002      	beq.n	80230a2 <__kernel_rem_pio2+0x5ba>
 802309c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80230a0:	4619      	mov	r1, r3
 80230a2:	9b01      	ldr	r3, [sp, #4]
 80230a4:	e9c3 0100 	strd	r0, r1, [r3]
 80230a8:	e791      	b.n	8022fce <__kernel_rem_pio2+0x4e6>
 80230aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80230ae:	f7dd f8f7 	bl	80002a0 <__adddf3>
 80230b2:	3d01      	subs	r5, #1
 80230b4:	e7ed      	b.n	8023092 <__kernel_rem_pio2+0x5aa>
 80230b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80230ba:	f7dd f8f1 	bl	80002a0 <__adddf3>
 80230be:	3e01      	subs	r6, #1
 80230c0:	e7c0      	b.n	8023044 <__kernel_rem_pio2+0x55c>
 80230c2:	4602      	mov	r2, r0
 80230c4:	460b      	mov	r3, r1
 80230c6:	e7c5      	b.n	8023054 <__kernel_rem_pio2+0x56c>
 80230c8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80230cc:	f7dd f8e8 	bl	80002a0 <__adddf3>
 80230d0:	3401      	adds	r4, #1
 80230d2:	e7ca      	b.n	802306a <__kernel_rem_pio2+0x582>
 80230d4:	e9da 8900 	ldrd	r8, r9, [sl]
 80230d8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80230dc:	9b02      	ldr	r3, [sp, #8]
 80230de:	3b01      	subs	r3, #1
 80230e0:	9302      	str	r3, [sp, #8]
 80230e2:	4632      	mov	r2, r6
 80230e4:	463b      	mov	r3, r7
 80230e6:	4640      	mov	r0, r8
 80230e8:	4649      	mov	r1, r9
 80230ea:	f7dd f8d9 	bl	80002a0 <__adddf3>
 80230ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80230f2:	4602      	mov	r2, r0
 80230f4:	460b      	mov	r3, r1
 80230f6:	4640      	mov	r0, r8
 80230f8:	4649      	mov	r1, r9
 80230fa:	f7dd f8cf 	bl	800029c <__aeabi_dsub>
 80230fe:	4632      	mov	r2, r6
 8023100:	463b      	mov	r3, r7
 8023102:	f7dd f8cd 	bl	80002a0 <__adddf3>
 8023106:	ed9d 7b08 	vldr	d7, [sp, #32]
 802310a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802310e:	ed8a 7b00 	vstr	d7, [sl]
 8023112:	e76e      	b.n	8022ff2 <__kernel_rem_pio2+0x50a>
 8023114:	e9d4 8900 	ldrd	r8, r9, [r4]
 8023118:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 802311c:	4640      	mov	r0, r8
 802311e:	4632      	mov	r2, r6
 8023120:	463b      	mov	r3, r7
 8023122:	4649      	mov	r1, r9
 8023124:	f7dd f8bc 	bl	80002a0 <__adddf3>
 8023128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802312c:	4602      	mov	r2, r0
 802312e:	460b      	mov	r3, r1
 8023130:	4640      	mov	r0, r8
 8023132:	4649      	mov	r1, r9
 8023134:	f7dd f8b2 	bl	800029c <__aeabi_dsub>
 8023138:	4632      	mov	r2, r6
 802313a:	463b      	mov	r3, r7
 802313c:	f7dd f8b0 	bl	80002a0 <__adddf3>
 8023140:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023144:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8023148:	ed84 7b00 	vstr	d7, [r4]
 802314c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023150:	e755      	b.n	8022ffe <__kernel_rem_pio2+0x516>
 8023152:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023156:	f7dd f8a3 	bl	80002a0 <__adddf3>
 802315a:	3d01      	subs	r5, #1
 802315c:	e759      	b.n	8023012 <__kernel_rem_pio2+0x52a>
 802315e:	9b01      	ldr	r3, [sp, #4]
 8023160:	9a01      	ldr	r2, [sp, #4]
 8023162:	601d      	str	r5, [r3, #0]
 8023164:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8023168:	605c      	str	r4, [r3, #4]
 802316a:	609f      	str	r7, [r3, #8]
 802316c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8023170:	60d3      	str	r3, [r2, #12]
 8023172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023176:	6110      	str	r0, [r2, #16]
 8023178:	6153      	str	r3, [r2, #20]
 802317a:	e728      	b.n	8022fce <__kernel_rem_pio2+0x4e6>
 802317c:	41700000 	.word	0x41700000
 8023180:	3e700000 	.word	0x3e700000
 8023184:	00000000 	.word	0x00000000

08023188 <__kernel_sin>:
 8023188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802318c:	ed2d 8b04 	vpush	{d8-d9}
 8023190:	eeb0 8a41 	vmov.f32	s16, s2
 8023194:	eef0 8a61 	vmov.f32	s17, s3
 8023198:	ec55 4b10 	vmov	r4, r5, d0
 802319c:	b083      	sub	sp, #12
 802319e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80231a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80231a6:	9001      	str	r0, [sp, #4]
 80231a8:	da06      	bge.n	80231b8 <__kernel_sin+0x30>
 80231aa:	ee10 0a10 	vmov	r0, s0
 80231ae:	4629      	mov	r1, r5
 80231b0:	f7dd fcdc 	bl	8000b6c <__aeabi_d2iz>
 80231b4:	2800      	cmp	r0, #0
 80231b6:	d051      	beq.n	802325c <__kernel_sin+0xd4>
 80231b8:	4622      	mov	r2, r4
 80231ba:	462b      	mov	r3, r5
 80231bc:	4620      	mov	r0, r4
 80231be:	4629      	mov	r1, r5
 80231c0:	f7dd fa24 	bl	800060c <__aeabi_dmul>
 80231c4:	4682      	mov	sl, r0
 80231c6:	468b      	mov	fp, r1
 80231c8:	4602      	mov	r2, r0
 80231ca:	460b      	mov	r3, r1
 80231cc:	4620      	mov	r0, r4
 80231ce:	4629      	mov	r1, r5
 80231d0:	f7dd fa1c 	bl	800060c <__aeabi_dmul>
 80231d4:	a341      	add	r3, pc, #260	; (adr r3, 80232dc <__kernel_sin+0x154>)
 80231d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231da:	4680      	mov	r8, r0
 80231dc:	4689      	mov	r9, r1
 80231de:	4650      	mov	r0, sl
 80231e0:	4659      	mov	r1, fp
 80231e2:	f7dd fa13 	bl	800060c <__aeabi_dmul>
 80231e6:	a33f      	add	r3, pc, #252	; (adr r3, 80232e4 <__kernel_sin+0x15c>)
 80231e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231ec:	f7dd f856 	bl	800029c <__aeabi_dsub>
 80231f0:	4652      	mov	r2, sl
 80231f2:	465b      	mov	r3, fp
 80231f4:	f7dd fa0a 	bl	800060c <__aeabi_dmul>
 80231f8:	a33c      	add	r3, pc, #240	; (adr r3, 80232ec <__kernel_sin+0x164>)
 80231fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231fe:	f7dd f84f 	bl	80002a0 <__adddf3>
 8023202:	4652      	mov	r2, sl
 8023204:	465b      	mov	r3, fp
 8023206:	f7dd fa01 	bl	800060c <__aeabi_dmul>
 802320a:	a33a      	add	r3, pc, #232	; (adr r3, 80232f4 <__kernel_sin+0x16c>)
 802320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023210:	f7dd f844 	bl	800029c <__aeabi_dsub>
 8023214:	4652      	mov	r2, sl
 8023216:	465b      	mov	r3, fp
 8023218:	f7dd f9f8 	bl	800060c <__aeabi_dmul>
 802321c:	a337      	add	r3, pc, #220	; (adr r3, 80232fc <__kernel_sin+0x174>)
 802321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023222:	f7dd f83d 	bl	80002a0 <__adddf3>
 8023226:	9b01      	ldr	r3, [sp, #4]
 8023228:	4606      	mov	r6, r0
 802322a:	460f      	mov	r7, r1
 802322c:	b9eb      	cbnz	r3, 802326a <__kernel_sin+0xe2>
 802322e:	4602      	mov	r2, r0
 8023230:	460b      	mov	r3, r1
 8023232:	4650      	mov	r0, sl
 8023234:	4659      	mov	r1, fp
 8023236:	f7dd f9e9 	bl	800060c <__aeabi_dmul>
 802323a:	a325      	add	r3, pc, #148	; (adr r3, 80232d0 <__kernel_sin+0x148>)
 802323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023240:	f7dd f82c 	bl	800029c <__aeabi_dsub>
 8023244:	4642      	mov	r2, r8
 8023246:	464b      	mov	r3, r9
 8023248:	f7dd f9e0 	bl	800060c <__aeabi_dmul>
 802324c:	4602      	mov	r2, r0
 802324e:	460b      	mov	r3, r1
 8023250:	4620      	mov	r0, r4
 8023252:	4629      	mov	r1, r5
 8023254:	f7dd f824 	bl	80002a0 <__adddf3>
 8023258:	4604      	mov	r4, r0
 802325a:	460d      	mov	r5, r1
 802325c:	ec45 4b10 	vmov	d0, r4, r5
 8023260:	b003      	add	sp, #12
 8023262:	ecbd 8b04 	vpop	{d8-d9}
 8023266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802326a:	4b1b      	ldr	r3, [pc, #108]	; (80232d8 <__kernel_sin+0x150>)
 802326c:	ec51 0b18 	vmov	r0, r1, d8
 8023270:	2200      	movs	r2, #0
 8023272:	f7dd f9cb 	bl	800060c <__aeabi_dmul>
 8023276:	4632      	mov	r2, r6
 8023278:	ec41 0b19 	vmov	d9, r0, r1
 802327c:	463b      	mov	r3, r7
 802327e:	4640      	mov	r0, r8
 8023280:	4649      	mov	r1, r9
 8023282:	f7dd f9c3 	bl	800060c <__aeabi_dmul>
 8023286:	4602      	mov	r2, r0
 8023288:	460b      	mov	r3, r1
 802328a:	ec51 0b19 	vmov	r0, r1, d9
 802328e:	f7dd f805 	bl	800029c <__aeabi_dsub>
 8023292:	4652      	mov	r2, sl
 8023294:	465b      	mov	r3, fp
 8023296:	f7dd f9b9 	bl	800060c <__aeabi_dmul>
 802329a:	ec53 2b18 	vmov	r2, r3, d8
 802329e:	f7dc fffd 	bl	800029c <__aeabi_dsub>
 80232a2:	a30b      	add	r3, pc, #44	; (adr r3, 80232d0 <__kernel_sin+0x148>)
 80232a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232a8:	4606      	mov	r6, r0
 80232aa:	460f      	mov	r7, r1
 80232ac:	4640      	mov	r0, r8
 80232ae:	4649      	mov	r1, r9
 80232b0:	f7dd f9ac 	bl	800060c <__aeabi_dmul>
 80232b4:	4602      	mov	r2, r0
 80232b6:	460b      	mov	r3, r1
 80232b8:	4630      	mov	r0, r6
 80232ba:	4639      	mov	r1, r7
 80232bc:	f7dc fff0 	bl	80002a0 <__adddf3>
 80232c0:	4602      	mov	r2, r0
 80232c2:	460b      	mov	r3, r1
 80232c4:	4620      	mov	r0, r4
 80232c6:	4629      	mov	r1, r5
 80232c8:	f7dc ffe8 	bl	800029c <__aeabi_dsub>
 80232cc:	e7c4      	b.n	8023258 <__kernel_sin+0xd0>
 80232ce:	bf00      	nop
 80232d0:	55555549 	.word	0x55555549
 80232d4:	3fc55555 	.word	0x3fc55555
 80232d8:	3fe00000 	.word	0x3fe00000
 80232dc:	5acfd57c 	.word	0x5acfd57c
 80232e0:	3de5d93a 	.word	0x3de5d93a
 80232e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80232e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80232ec:	57b1fe7d 	.word	0x57b1fe7d
 80232f0:	3ec71de3 	.word	0x3ec71de3
 80232f4:	19c161d5 	.word	0x19c161d5
 80232f8:	3f2a01a0 	.word	0x3f2a01a0
 80232fc:	1110f8a6 	.word	0x1110f8a6
 8023300:	3f811111 	.word	0x3f811111
 8023304:	00000000 	.word	0x00000000

08023308 <__kernel_tan>:
 8023308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802330c:	ed2d 8b06 	vpush	{d8-d10}
 8023310:	ec5b ab10 	vmov	sl, fp, d0
 8023314:	4be0      	ldr	r3, [pc, #896]	; (8023698 <__kernel_tan+0x390>)
 8023316:	b083      	sub	sp, #12
 8023318:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 802331c:	429f      	cmp	r7, r3
 802331e:	ec59 8b11 	vmov	r8, r9, d1
 8023322:	4606      	mov	r6, r0
 8023324:	f8cd b000 	str.w	fp, [sp]
 8023328:	dc61      	bgt.n	80233ee <__kernel_tan+0xe6>
 802332a:	ee10 0a10 	vmov	r0, s0
 802332e:	4659      	mov	r1, fp
 8023330:	f7dd fc1c 	bl	8000b6c <__aeabi_d2iz>
 8023334:	4605      	mov	r5, r0
 8023336:	2800      	cmp	r0, #0
 8023338:	f040 8083 	bne.w	8023442 <__kernel_tan+0x13a>
 802333c:	1c73      	adds	r3, r6, #1
 802333e:	4652      	mov	r2, sl
 8023340:	4313      	orrs	r3, r2
 8023342:	433b      	orrs	r3, r7
 8023344:	d112      	bne.n	802336c <__kernel_tan+0x64>
 8023346:	ec4b ab10 	vmov	d0, sl, fp
 802334a:	f000 fa39 	bl	80237c0 <fabs>
 802334e:	49d3      	ldr	r1, [pc, #844]	; (802369c <__kernel_tan+0x394>)
 8023350:	ec53 2b10 	vmov	r2, r3, d0
 8023354:	2000      	movs	r0, #0
 8023356:	f7dd fa83 	bl	8000860 <__aeabi_ddiv>
 802335a:	4682      	mov	sl, r0
 802335c:	468b      	mov	fp, r1
 802335e:	ec4b ab10 	vmov	d0, sl, fp
 8023362:	b003      	add	sp, #12
 8023364:	ecbd 8b06 	vpop	{d8-d10}
 8023368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802336c:	2e01      	cmp	r6, #1
 802336e:	d0f6      	beq.n	802335e <__kernel_tan+0x56>
 8023370:	4642      	mov	r2, r8
 8023372:	464b      	mov	r3, r9
 8023374:	4650      	mov	r0, sl
 8023376:	4659      	mov	r1, fp
 8023378:	f7dc ff92 	bl	80002a0 <__adddf3>
 802337c:	4602      	mov	r2, r0
 802337e:	460b      	mov	r3, r1
 8023380:	460f      	mov	r7, r1
 8023382:	2000      	movs	r0, #0
 8023384:	49c6      	ldr	r1, [pc, #792]	; (80236a0 <__kernel_tan+0x398>)
 8023386:	f7dd fa6b 	bl	8000860 <__aeabi_ddiv>
 802338a:	e9cd 0100 	strd	r0, r1, [sp]
 802338e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023392:	462e      	mov	r6, r5
 8023394:	4652      	mov	r2, sl
 8023396:	462c      	mov	r4, r5
 8023398:	4630      	mov	r0, r6
 802339a:	461d      	mov	r5, r3
 802339c:	4639      	mov	r1, r7
 802339e:	465b      	mov	r3, fp
 80233a0:	f7dc ff7c 	bl	800029c <__aeabi_dsub>
 80233a4:	4602      	mov	r2, r0
 80233a6:	460b      	mov	r3, r1
 80233a8:	4640      	mov	r0, r8
 80233aa:	4649      	mov	r1, r9
 80233ac:	f7dc ff76 	bl	800029c <__aeabi_dsub>
 80233b0:	4632      	mov	r2, r6
 80233b2:	462b      	mov	r3, r5
 80233b4:	f7dd f92a 	bl	800060c <__aeabi_dmul>
 80233b8:	4632      	mov	r2, r6
 80233ba:	4680      	mov	r8, r0
 80233bc:	4689      	mov	r9, r1
 80233be:	462b      	mov	r3, r5
 80233c0:	4630      	mov	r0, r6
 80233c2:	4639      	mov	r1, r7
 80233c4:	f7dd f922 	bl	800060c <__aeabi_dmul>
 80233c8:	4bb4      	ldr	r3, [pc, #720]	; (802369c <__kernel_tan+0x394>)
 80233ca:	2200      	movs	r2, #0
 80233cc:	f7dc ff68 	bl	80002a0 <__adddf3>
 80233d0:	4602      	mov	r2, r0
 80233d2:	460b      	mov	r3, r1
 80233d4:	4640      	mov	r0, r8
 80233d6:	4649      	mov	r1, r9
 80233d8:	f7dc ff62 	bl	80002a0 <__adddf3>
 80233dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80233e0:	f7dd f914 	bl	800060c <__aeabi_dmul>
 80233e4:	4622      	mov	r2, r4
 80233e6:	462b      	mov	r3, r5
 80233e8:	f7dc ff5a 	bl	80002a0 <__adddf3>
 80233ec:	e7b5      	b.n	802335a <__kernel_tan+0x52>
 80233ee:	4bad      	ldr	r3, [pc, #692]	; (80236a4 <__kernel_tan+0x39c>)
 80233f0:	429f      	cmp	r7, r3
 80233f2:	dd26      	ble.n	8023442 <__kernel_tan+0x13a>
 80233f4:	9b00      	ldr	r3, [sp, #0]
 80233f6:	2b00      	cmp	r3, #0
 80233f8:	da09      	bge.n	802340e <__kernel_tan+0x106>
 80233fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80233fe:	469b      	mov	fp, r3
 8023400:	ee10 aa10 	vmov	sl, s0
 8023404:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8023408:	ee11 8a10 	vmov	r8, s2
 802340c:	4699      	mov	r9, r3
 802340e:	4652      	mov	r2, sl
 8023410:	465b      	mov	r3, fp
 8023412:	a183      	add	r1, pc, #524	; (adr r1, 8023620 <__kernel_tan+0x318>)
 8023414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023418:	f7dc ff40 	bl	800029c <__aeabi_dsub>
 802341c:	4642      	mov	r2, r8
 802341e:	464b      	mov	r3, r9
 8023420:	4604      	mov	r4, r0
 8023422:	460d      	mov	r5, r1
 8023424:	a180      	add	r1, pc, #512	; (adr r1, 8023628 <__kernel_tan+0x320>)
 8023426:	e9d1 0100 	ldrd	r0, r1, [r1]
 802342a:	f7dc ff37 	bl	800029c <__aeabi_dsub>
 802342e:	4622      	mov	r2, r4
 8023430:	462b      	mov	r3, r5
 8023432:	f7dc ff35 	bl	80002a0 <__adddf3>
 8023436:	f04f 0800 	mov.w	r8, #0
 802343a:	4682      	mov	sl, r0
 802343c:	468b      	mov	fp, r1
 802343e:	f04f 0900 	mov.w	r9, #0
 8023442:	4652      	mov	r2, sl
 8023444:	465b      	mov	r3, fp
 8023446:	4650      	mov	r0, sl
 8023448:	4659      	mov	r1, fp
 802344a:	f7dd f8df 	bl	800060c <__aeabi_dmul>
 802344e:	4602      	mov	r2, r0
 8023450:	460b      	mov	r3, r1
 8023452:	ec43 2b18 	vmov	d8, r2, r3
 8023456:	f7dd f8d9 	bl	800060c <__aeabi_dmul>
 802345a:	ec53 2b18 	vmov	r2, r3, d8
 802345e:	4604      	mov	r4, r0
 8023460:	460d      	mov	r5, r1
 8023462:	4650      	mov	r0, sl
 8023464:	4659      	mov	r1, fp
 8023466:	f7dd f8d1 	bl	800060c <__aeabi_dmul>
 802346a:	a371      	add	r3, pc, #452	; (adr r3, 8023630 <__kernel_tan+0x328>)
 802346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023470:	ec41 0b19 	vmov	d9, r0, r1
 8023474:	4620      	mov	r0, r4
 8023476:	4629      	mov	r1, r5
 8023478:	f7dd f8c8 	bl	800060c <__aeabi_dmul>
 802347c:	a36e      	add	r3, pc, #440	; (adr r3, 8023638 <__kernel_tan+0x330>)
 802347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023482:	f7dc ff0d 	bl	80002a0 <__adddf3>
 8023486:	4622      	mov	r2, r4
 8023488:	462b      	mov	r3, r5
 802348a:	f7dd f8bf 	bl	800060c <__aeabi_dmul>
 802348e:	a36c      	add	r3, pc, #432	; (adr r3, 8023640 <__kernel_tan+0x338>)
 8023490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023494:	f7dc ff04 	bl	80002a0 <__adddf3>
 8023498:	4622      	mov	r2, r4
 802349a:	462b      	mov	r3, r5
 802349c:	f7dd f8b6 	bl	800060c <__aeabi_dmul>
 80234a0:	a369      	add	r3, pc, #420	; (adr r3, 8023648 <__kernel_tan+0x340>)
 80234a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234a6:	f7dc fefb 	bl	80002a0 <__adddf3>
 80234aa:	4622      	mov	r2, r4
 80234ac:	462b      	mov	r3, r5
 80234ae:	f7dd f8ad 	bl	800060c <__aeabi_dmul>
 80234b2:	a367      	add	r3, pc, #412	; (adr r3, 8023650 <__kernel_tan+0x348>)
 80234b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234b8:	f7dc fef2 	bl	80002a0 <__adddf3>
 80234bc:	4622      	mov	r2, r4
 80234be:	462b      	mov	r3, r5
 80234c0:	f7dd f8a4 	bl	800060c <__aeabi_dmul>
 80234c4:	a364      	add	r3, pc, #400	; (adr r3, 8023658 <__kernel_tan+0x350>)
 80234c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234ca:	f7dc fee9 	bl	80002a0 <__adddf3>
 80234ce:	ec53 2b18 	vmov	r2, r3, d8
 80234d2:	f7dd f89b 	bl	800060c <__aeabi_dmul>
 80234d6:	a362      	add	r3, pc, #392	; (adr r3, 8023660 <__kernel_tan+0x358>)
 80234d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234dc:	ec41 0b1a 	vmov	d10, r0, r1
 80234e0:	4620      	mov	r0, r4
 80234e2:	4629      	mov	r1, r5
 80234e4:	f7dd f892 	bl	800060c <__aeabi_dmul>
 80234e8:	a35f      	add	r3, pc, #380	; (adr r3, 8023668 <__kernel_tan+0x360>)
 80234ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234ee:	f7dc fed7 	bl	80002a0 <__adddf3>
 80234f2:	4622      	mov	r2, r4
 80234f4:	462b      	mov	r3, r5
 80234f6:	f7dd f889 	bl	800060c <__aeabi_dmul>
 80234fa:	a35d      	add	r3, pc, #372	; (adr r3, 8023670 <__kernel_tan+0x368>)
 80234fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023500:	f7dc fece 	bl	80002a0 <__adddf3>
 8023504:	4622      	mov	r2, r4
 8023506:	462b      	mov	r3, r5
 8023508:	f7dd f880 	bl	800060c <__aeabi_dmul>
 802350c:	a35a      	add	r3, pc, #360	; (adr r3, 8023678 <__kernel_tan+0x370>)
 802350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023512:	f7dc fec5 	bl	80002a0 <__adddf3>
 8023516:	4622      	mov	r2, r4
 8023518:	462b      	mov	r3, r5
 802351a:	f7dd f877 	bl	800060c <__aeabi_dmul>
 802351e:	a358      	add	r3, pc, #352	; (adr r3, 8023680 <__kernel_tan+0x378>)
 8023520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023524:	f7dc febc 	bl	80002a0 <__adddf3>
 8023528:	4622      	mov	r2, r4
 802352a:	462b      	mov	r3, r5
 802352c:	f7dd f86e 	bl	800060c <__aeabi_dmul>
 8023530:	a355      	add	r3, pc, #340	; (adr r3, 8023688 <__kernel_tan+0x380>)
 8023532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023536:	f7dc feb3 	bl	80002a0 <__adddf3>
 802353a:	4602      	mov	r2, r0
 802353c:	460b      	mov	r3, r1
 802353e:	ec51 0b1a 	vmov	r0, r1, d10
 8023542:	f7dc fead 	bl	80002a0 <__adddf3>
 8023546:	ec53 2b19 	vmov	r2, r3, d9
 802354a:	f7dd f85f 	bl	800060c <__aeabi_dmul>
 802354e:	4642      	mov	r2, r8
 8023550:	464b      	mov	r3, r9
 8023552:	f7dc fea5 	bl	80002a0 <__adddf3>
 8023556:	ec53 2b18 	vmov	r2, r3, d8
 802355a:	f7dd f857 	bl	800060c <__aeabi_dmul>
 802355e:	4642      	mov	r2, r8
 8023560:	464b      	mov	r3, r9
 8023562:	f7dc fe9d 	bl	80002a0 <__adddf3>
 8023566:	a34a      	add	r3, pc, #296	; (adr r3, 8023690 <__kernel_tan+0x388>)
 8023568:	e9d3 2300 	ldrd	r2, r3, [r3]
 802356c:	4604      	mov	r4, r0
 802356e:	460d      	mov	r5, r1
 8023570:	ec51 0b19 	vmov	r0, r1, d9
 8023574:	f7dd f84a 	bl	800060c <__aeabi_dmul>
 8023578:	4622      	mov	r2, r4
 802357a:	462b      	mov	r3, r5
 802357c:	f7dc fe90 	bl	80002a0 <__adddf3>
 8023580:	460b      	mov	r3, r1
 8023582:	ec41 0b18 	vmov	d8, r0, r1
 8023586:	4602      	mov	r2, r0
 8023588:	4659      	mov	r1, fp
 802358a:	4650      	mov	r0, sl
 802358c:	f7dc fe88 	bl	80002a0 <__adddf3>
 8023590:	4b44      	ldr	r3, [pc, #272]	; (80236a4 <__kernel_tan+0x39c>)
 8023592:	429f      	cmp	r7, r3
 8023594:	4604      	mov	r4, r0
 8023596:	460d      	mov	r5, r1
 8023598:	f340 8086 	ble.w	80236a8 <__kernel_tan+0x3a0>
 802359c:	4630      	mov	r0, r6
 802359e:	f7dc ffcb 	bl	8000538 <__aeabi_i2d>
 80235a2:	4622      	mov	r2, r4
 80235a4:	4680      	mov	r8, r0
 80235a6:	4689      	mov	r9, r1
 80235a8:	462b      	mov	r3, r5
 80235aa:	4620      	mov	r0, r4
 80235ac:	4629      	mov	r1, r5
 80235ae:	f7dd f82d 	bl	800060c <__aeabi_dmul>
 80235b2:	4642      	mov	r2, r8
 80235b4:	4606      	mov	r6, r0
 80235b6:	460f      	mov	r7, r1
 80235b8:	464b      	mov	r3, r9
 80235ba:	4620      	mov	r0, r4
 80235bc:	4629      	mov	r1, r5
 80235be:	f7dc fe6f 	bl	80002a0 <__adddf3>
 80235c2:	4602      	mov	r2, r0
 80235c4:	460b      	mov	r3, r1
 80235c6:	4630      	mov	r0, r6
 80235c8:	4639      	mov	r1, r7
 80235ca:	f7dd f949 	bl	8000860 <__aeabi_ddiv>
 80235ce:	ec53 2b18 	vmov	r2, r3, d8
 80235d2:	f7dc fe63 	bl	800029c <__aeabi_dsub>
 80235d6:	4602      	mov	r2, r0
 80235d8:	460b      	mov	r3, r1
 80235da:	4650      	mov	r0, sl
 80235dc:	4659      	mov	r1, fp
 80235de:	f7dc fe5d 	bl	800029c <__aeabi_dsub>
 80235e2:	4602      	mov	r2, r0
 80235e4:	460b      	mov	r3, r1
 80235e6:	f7dc fe5b 	bl	80002a0 <__adddf3>
 80235ea:	4602      	mov	r2, r0
 80235ec:	460b      	mov	r3, r1
 80235ee:	4640      	mov	r0, r8
 80235f0:	4649      	mov	r1, r9
 80235f2:	f7dc fe53 	bl	800029c <__aeabi_dsub>
 80235f6:	9b00      	ldr	r3, [sp, #0]
 80235f8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80235fc:	f00a 0a02 	and.w	sl, sl, #2
 8023600:	4604      	mov	r4, r0
 8023602:	f1ca 0001 	rsb	r0, sl, #1
 8023606:	460d      	mov	r5, r1
 8023608:	f7dc ff96 	bl	8000538 <__aeabi_i2d>
 802360c:	4602      	mov	r2, r0
 802360e:	460b      	mov	r3, r1
 8023610:	4620      	mov	r0, r4
 8023612:	4629      	mov	r1, r5
 8023614:	f7dc fffa 	bl	800060c <__aeabi_dmul>
 8023618:	e69f      	b.n	802335a <__kernel_tan+0x52>
 802361a:	bf00      	nop
 802361c:	f3af 8000 	nop.w
 8023620:	54442d18 	.word	0x54442d18
 8023624:	3fe921fb 	.word	0x3fe921fb
 8023628:	33145c07 	.word	0x33145c07
 802362c:	3c81a626 	.word	0x3c81a626
 8023630:	74bf7ad4 	.word	0x74bf7ad4
 8023634:	3efb2a70 	.word	0x3efb2a70
 8023638:	32f0a7e9 	.word	0x32f0a7e9
 802363c:	3f12b80f 	.word	0x3f12b80f
 8023640:	1a8d1068 	.word	0x1a8d1068
 8023644:	3f3026f7 	.word	0x3f3026f7
 8023648:	fee08315 	.word	0xfee08315
 802364c:	3f57dbc8 	.word	0x3f57dbc8
 8023650:	e96e8493 	.word	0xe96e8493
 8023654:	3f8226e3 	.word	0x3f8226e3
 8023658:	1bb341fe 	.word	0x1bb341fe
 802365c:	3faba1ba 	.word	0x3faba1ba
 8023660:	db605373 	.word	0xdb605373
 8023664:	bef375cb 	.word	0xbef375cb
 8023668:	a03792a6 	.word	0xa03792a6
 802366c:	3f147e88 	.word	0x3f147e88
 8023670:	f2f26501 	.word	0xf2f26501
 8023674:	3f4344d8 	.word	0x3f4344d8
 8023678:	c9560328 	.word	0xc9560328
 802367c:	3f6d6d22 	.word	0x3f6d6d22
 8023680:	8406d637 	.word	0x8406d637
 8023684:	3f9664f4 	.word	0x3f9664f4
 8023688:	1110fe7a 	.word	0x1110fe7a
 802368c:	3fc11111 	.word	0x3fc11111
 8023690:	55555563 	.word	0x55555563
 8023694:	3fd55555 	.word	0x3fd55555
 8023698:	3e2fffff 	.word	0x3e2fffff
 802369c:	3ff00000 	.word	0x3ff00000
 80236a0:	bff00000 	.word	0xbff00000
 80236a4:	3fe59427 	.word	0x3fe59427
 80236a8:	2e01      	cmp	r6, #1
 80236aa:	d02f      	beq.n	802370c <__kernel_tan+0x404>
 80236ac:	460f      	mov	r7, r1
 80236ae:	4602      	mov	r2, r0
 80236b0:	460b      	mov	r3, r1
 80236b2:	4689      	mov	r9, r1
 80236b4:	2000      	movs	r0, #0
 80236b6:	4917      	ldr	r1, [pc, #92]	; (8023714 <__kernel_tan+0x40c>)
 80236b8:	f7dd f8d2 	bl	8000860 <__aeabi_ddiv>
 80236bc:	2600      	movs	r6, #0
 80236be:	e9cd 0100 	strd	r0, r1, [sp]
 80236c2:	4652      	mov	r2, sl
 80236c4:	465b      	mov	r3, fp
 80236c6:	4630      	mov	r0, r6
 80236c8:	4639      	mov	r1, r7
 80236ca:	f7dc fde7 	bl	800029c <__aeabi_dsub>
 80236ce:	e9dd 4500 	ldrd	r4, r5, [sp]
 80236d2:	4602      	mov	r2, r0
 80236d4:	460b      	mov	r3, r1
 80236d6:	ec51 0b18 	vmov	r0, r1, d8
 80236da:	f7dc fddf 	bl	800029c <__aeabi_dsub>
 80236de:	4632      	mov	r2, r6
 80236e0:	462b      	mov	r3, r5
 80236e2:	f7dc ff93 	bl	800060c <__aeabi_dmul>
 80236e6:	46b0      	mov	r8, r6
 80236e8:	460f      	mov	r7, r1
 80236ea:	4642      	mov	r2, r8
 80236ec:	462b      	mov	r3, r5
 80236ee:	4634      	mov	r4, r6
 80236f0:	4649      	mov	r1, r9
 80236f2:	4606      	mov	r6, r0
 80236f4:	4640      	mov	r0, r8
 80236f6:	f7dc ff89 	bl	800060c <__aeabi_dmul>
 80236fa:	4b07      	ldr	r3, [pc, #28]	; (8023718 <__kernel_tan+0x410>)
 80236fc:	2200      	movs	r2, #0
 80236fe:	f7dc fdcf 	bl	80002a0 <__adddf3>
 8023702:	4602      	mov	r2, r0
 8023704:	460b      	mov	r3, r1
 8023706:	4630      	mov	r0, r6
 8023708:	4639      	mov	r1, r7
 802370a:	e665      	b.n	80233d8 <__kernel_tan+0xd0>
 802370c:	4682      	mov	sl, r0
 802370e:	468b      	mov	fp, r1
 8023710:	e625      	b.n	802335e <__kernel_tan+0x56>
 8023712:	bf00      	nop
 8023714:	bff00000 	.word	0xbff00000
 8023718:	3ff00000 	.word	0x3ff00000

0802371c <with_errno>:
 802371c:	b570      	push	{r4, r5, r6, lr}
 802371e:	4604      	mov	r4, r0
 8023720:	460d      	mov	r5, r1
 8023722:	4616      	mov	r6, r2
 8023724:	f000 f934 	bl	8023990 <__errno>
 8023728:	4629      	mov	r1, r5
 802372a:	6006      	str	r6, [r0, #0]
 802372c:	4620      	mov	r0, r4
 802372e:	bd70      	pop	{r4, r5, r6, pc}

08023730 <xflow>:
 8023730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023732:	4614      	mov	r4, r2
 8023734:	461d      	mov	r5, r3
 8023736:	b108      	cbz	r0, 802373c <xflow+0xc>
 8023738:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802373c:	e9cd 2300 	strd	r2, r3, [sp]
 8023740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023744:	4620      	mov	r0, r4
 8023746:	4629      	mov	r1, r5
 8023748:	f7dc ff60 	bl	800060c <__aeabi_dmul>
 802374c:	2222      	movs	r2, #34	; 0x22
 802374e:	b003      	add	sp, #12
 8023750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023754:	f7ff bfe2 	b.w	802371c <with_errno>

08023758 <__math_uflow>:
 8023758:	b508      	push	{r3, lr}
 802375a:	2200      	movs	r2, #0
 802375c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8023760:	f7ff ffe6 	bl	8023730 <xflow>
 8023764:	ec41 0b10 	vmov	d0, r0, r1
 8023768:	bd08      	pop	{r3, pc}

0802376a <__math_oflow>:
 802376a:	b508      	push	{r3, lr}
 802376c:	2200      	movs	r2, #0
 802376e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023772:	f7ff ffdd 	bl	8023730 <xflow>
 8023776:	ec41 0b10 	vmov	d0, r0, r1
 802377a:	bd08      	pop	{r3, pc}

0802377c <with_errnof>:
 802377c:	b513      	push	{r0, r1, r4, lr}
 802377e:	4604      	mov	r4, r0
 8023780:	ed8d 0a01 	vstr	s0, [sp, #4]
 8023784:	f000 f904 	bl	8023990 <__errno>
 8023788:	ed9d 0a01 	vldr	s0, [sp, #4]
 802378c:	6004      	str	r4, [r0, #0]
 802378e:	b002      	add	sp, #8
 8023790:	bd10      	pop	{r4, pc}

08023792 <xflowf>:
 8023792:	b130      	cbz	r0, 80237a2 <xflowf+0x10>
 8023794:	eef1 7a40 	vneg.f32	s15, s0
 8023798:	ee27 0a80 	vmul.f32	s0, s15, s0
 802379c:	2022      	movs	r0, #34	; 0x22
 802379e:	f7ff bfed 	b.w	802377c <with_errnof>
 80237a2:	eef0 7a40 	vmov.f32	s15, s0
 80237a6:	e7f7      	b.n	8023798 <xflowf+0x6>

080237a8 <__math_uflowf>:
 80237a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80237b0 <__math_uflowf+0x8>
 80237ac:	f7ff bff1 	b.w	8023792 <xflowf>
 80237b0:	10000000 	.word	0x10000000

080237b4 <__math_oflowf>:
 80237b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80237bc <__math_oflowf+0x8>
 80237b8:	f7ff bfeb 	b.w	8023792 <xflowf>
 80237bc:	70000000 	.word	0x70000000

080237c0 <fabs>:
 80237c0:	ec51 0b10 	vmov	r0, r1, d0
 80237c4:	ee10 2a10 	vmov	r2, s0
 80237c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80237cc:	ec43 2b10 	vmov	d0, r2, r3
 80237d0:	4770      	bx	lr

080237d2 <finite>:
 80237d2:	b082      	sub	sp, #8
 80237d4:	ed8d 0b00 	vstr	d0, [sp]
 80237d8:	9801      	ldr	r0, [sp, #4]
 80237da:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80237de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80237e2:	0fc0      	lsrs	r0, r0, #31
 80237e4:	b002      	add	sp, #8
 80237e6:	4770      	bx	lr

080237e8 <nan>:
 80237e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80237f0 <nan+0x8>
 80237ec:	4770      	bx	lr
 80237ee:	bf00      	nop
 80237f0:	00000000 	.word	0x00000000
 80237f4:	7ff80000 	.word	0x7ff80000

080237f8 <scalbn>:
 80237f8:	b570      	push	{r4, r5, r6, lr}
 80237fa:	ec55 4b10 	vmov	r4, r5, d0
 80237fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8023802:	4606      	mov	r6, r0
 8023804:	462b      	mov	r3, r5
 8023806:	b99a      	cbnz	r2, 8023830 <scalbn+0x38>
 8023808:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802380c:	4323      	orrs	r3, r4
 802380e:	d036      	beq.n	802387e <scalbn+0x86>
 8023810:	4b39      	ldr	r3, [pc, #228]	; (80238f8 <scalbn+0x100>)
 8023812:	4629      	mov	r1, r5
 8023814:	ee10 0a10 	vmov	r0, s0
 8023818:	2200      	movs	r2, #0
 802381a:	f7dc fef7 	bl	800060c <__aeabi_dmul>
 802381e:	4b37      	ldr	r3, [pc, #220]	; (80238fc <scalbn+0x104>)
 8023820:	429e      	cmp	r6, r3
 8023822:	4604      	mov	r4, r0
 8023824:	460d      	mov	r5, r1
 8023826:	da10      	bge.n	802384a <scalbn+0x52>
 8023828:	a32b      	add	r3, pc, #172	; (adr r3, 80238d8 <scalbn+0xe0>)
 802382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802382e:	e03a      	b.n	80238a6 <scalbn+0xae>
 8023830:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8023834:	428a      	cmp	r2, r1
 8023836:	d10c      	bne.n	8023852 <scalbn+0x5a>
 8023838:	ee10 2a10 	vmov	r2, s0
 802383c:	4620      	mov	r0, r4
 802383e:	4629      	mov	r1, r5
 8023840:	f7dc fd2e 	bl	80002a0 <__adddf3>
 8023844:	4604      	mov	r4, r0
 8023846:	460d      	mov	r5, r1
 8023848:	e019      	b.n	802387e <scalbn+0x86>
 802384a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802384e:	460b      	mov	r3, r1
 8023850:	3a36      	subs	r2, #54	; 0x36
 8023852:	4432      	add	r2, r6
 8023854:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8023858:	428a      	cmp	r2, r1
 802385a:	dd08      	ble.n	802386e <scalbn+0x76>
 802385c:	2d00      	cmp	r5, #0
 802385e:	a120      	add	r1, pc, #128	; (adr r1, 80238e0 <scalbn+0xe8>)
 8023860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023864:	da1c      	bge.n	80238a0 <scalbn+0xa8>
 8023866:	a120      	add	r1, pc, #128	; (adr r1, 80238e8 <scalbn+0xf0>)
 8023868:	e9d1 0100 	ldrd	r0, r1, [r1]
 802386c:	e018      	b.n	80238a0 <scalbn+0xa8>
 802386e:	2a00      	cmp	r2, #0
 8023870:	dd08      	ble.n	8023884 <scalbn+0x8c>
 8023872:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023876:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802387a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802387e:	ec45 4b10 	vmov	d0, r4, r5
 8023882:	bd70      	pop	{r4, r5, r6, pc}
 8023884:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8023888:	da19      	bge.n	80238be <scalbn+0xc6>
 802388a:	f24c 3350 	movw	r3, #50000	; 0xc350
 802388e:	429e      	cmp	r6, r3
 8023890:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8023894:	dd0a      	ble.n	80238ac <scalbn+0xb4>
 8023896:	a112      	add	r1, pc, #72	; (adr r1, 80238e0 <scalbn+0xe8>)
 8023898:	e9d1 0100 	ldrd	r0, r1, [r1]
 802389c:	2b00      	cmp	r3, #0
 802389e:	d1e2      	bne.n	8023866 <scalbn+0x6e>
 80238a0:	a30f      	add	r3, pc, #60	; (adr r3, 80238e0 <scalbn+0xe8>)
 80238a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238a6:	f7dc feb1 	bl	800060c <__aeabi_dmul>
 80238aa:	e7cb      	b.n	8023844 <scalbn+0x4c>
 80238ac:	a10a      	add	r1, pc, #40	; (adr r1, 80238d8 <scalbn+0xe0>)
 80238ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80238b2:	2b00      	cmp	r3, #0
 80238b4:	d0b8      	beq.n	8023828 <scalbn+0x30>
 80238b6:	a10e      	add	r1, pc, #56	; (adr r1, 80238f0 <scalbn+0xf8>)
 80238b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80238bc:	e7b4      	b.n	8023828 <scalbn+0x30>
 80238be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80238c2:	3236      	adds	r2, #54	; 0x36
 80238c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80238c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80238cc:	4620      	mov	r0, r4
 80238ce:	4b0c      	ldr	r3, [pc, #48]	; (8023900 <scalbn+0x108>)
 80238d0:	2200      	movs	r2, #0
 80238d2:	e7e8      	b.n	80238a6 <scalbn+0xae>
 80238d4:	f3af 8000 	nop.w
 80238d8:	c2f8f359 	.word	0xc2f8f359
 80238dc:	01a56e1f 	.word	0x01a56e1f
 80238e0:	8800759c 	.word	0x8800759c
 80238e4:	7e37e43c 	.word	0x7e37e43c
 80238e8:	8800759c 	.word	0x8800759c
 80238ec:	fe37e43c 	.word	0xfe37e43c
 80238f0:	c2f8f359 	.word	0xc2f8f359
 80238f4:	81a56e1f 	.word	0x81a56e1f
 80238f8:	43500000 	.word	0x43500000
 80238fc:	ffff3cb0 	.word	0xffff3cb0
 8023900:	3c900000 	.word	0x3c900000

08023904 <finitef>:
 8023904:	b082      	sub	sp, #8
 8023906:	ed8d 0a01 	vstr	s0, [sp, #4]
 802390a:	9801      	ldr	r0, [sp, #4]
 802390c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8023910:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8023914:	bfac      	ite	ge
 8023916:	2000      	movge	r0, #0
 8023918:	2001      	movlt	r0, #1
 802391a:	b002      	add	sp, #8
 802391c:	4770      	bx	lr
	...

08023920 <nanf>:
 8023920:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8023928 <nanf+0x8>
 8023924:	4770      	bx	lr
 8023926:	bf00      	nop
 8023928:	7fc00000 	.word	0x7fc00000

0802392c <abort>:
 802392c:	b508      	push	{r3, lr}
 802392e:	2006      	movs	r0, #6
 8023930:	f000 ffa0 	bl	8024874 <raise>
 8023934:	2001      	movs	r0, #1
 8023936:	f7e5 fbc1 	bl	80090bc <_exit>
	...

0802393c <__assert_func>:
 802393c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802393e:	4614      	mov	r4, r2
 8023940:	461a      	mov	r2, r3
 8023942:	4b09      	ldr	r3, [pc, #36]	; (8023968 <__assert_func+0x2c>)
 8023944:	681b      	ldr	r3, [r3, #0]
 8023946:	4605      	mov	r5, r0
 8023948:	68d8      	ldr	r0, [r3, #12]
 802394a:	b14c      	cbz	r4, 8023960 <__assert_func+0x24>
 802394c:	4b07      	ldr	r3, [pc, #28]	; (802396c <__assert_func+0x30>)
 802394e:	9100      	str	r1, [sp, #0]
 8023950:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023954:	4906      	ldr	r1, [pc, #24]	; (8023970 <__assert_func+0x34>)
 8023956:	462b      	mov	r3, r5
 8023958:	f000 f820 	bl	802399c <fiprintf>
 802395c:	f7ff ffe6 	bl	802392c <abort>
 8023960:	4b04      	ldr	r3, [pc, #16]	; (8023974 <__assert_func+0x38>)
 8023962:	461c      	mov	r4, r3
 8023964:	e7f3      	b.n	802394e <__assert_func+0x12>
 8023966:	bf00      	nop
 8023968:	20000280 	.word	0x20000280
 802396c:	0802a210 	.word	0x0802a210
 8023970:	0802a21d 	.word	0x0802a21d
 8023974:	0802a24b 	.word	0x0802a24b

08023978 <atof>:
 8023978:	2100      	movs	r1, #0
 802397a:	f001 bdcf 	b.w	802551c <strtod>
	...

08023980 <calloc>:
 8023980:	4b02      	ldr	r3, [pc, #8]	; (802398c <calloc+0xc>)
 8023982:	460a      	mov	r2, r1
 8023984:	4601      	mov	r1, r0
 8023986:	6818      	ldr	r0, [r3, #0]
 8023988:	f000 b882 	b.w	8023a90 <_calloc_r>
 802398c:	20000280 	.word	0x20000280

08023990 <__errno>:
 8023990:	4b01      	ldr	r3, [pc, #4]	; (8023998 <__errno+0x8>)
 8023992:	6818      	ldr	r0, [r3, #0]
 8023994:	4770      	bx	lr
 8023996:	bf00      	nop
 8023998:	20000280 	.word	0x20000280

0802399c <fiprintf>:
 802399c:	b40e      	push	{r1, r2, r3}
 802399e:	b503      	push	{r0, r1, lr}
 80239a0:	4601      	mov	r1, r0
 80239a2:	ab03      	add	r3, sp, #12
 80239a4:	4805      	ldr	r0, [pc, #20]	; (80239bc <fiprintf+0x20>)
 80239a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80239aa:	6800      	ldr	r0, [r0, #0]
 80239ac:	9301      	str	r3, [sp, #4]
 80239ae:	f000 f98f 	bl	8023cd0 <_vfiprintf_r>
 80239b2:	b002      	add	sp, #8
 80239b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80239b8:	b003      	add	sp, #12
 80239ba:	4770      	bx	lr
 80239bc:	20000280 	.word	0x20000280

080239c0 <__libc_init_array>:
 80239c0:	b570      	push	{r4, r5, r6, lr}
 80239c2:	4d0d      	ldr	r5, [pc, #52]	; (80239f8 <__libc_init_array+0x38>)
 80239c4:	4c0d      	ldr	r4, [pc, #52]	; (80239fc <__libc_init_array+0x3c>)
 80239c6:	1b64      	subs	r4, r4, r5
 80239c8:	10a4      	asrs	r4, r4, #2
 80239ca:	2600      	movs	r6, #0
 80239cc:	42a6      	cmp	r6, r4
 80239ce:	d109      	bne.n	80239e4 <__libc_init_array+0x24>
 80239d0:	4d0b      	ldr	r5, [pc, #44]	; (8023a00 <__libc_init_array+0x40>)
 80239d2:	4c0c      	ldr	r4, [pc, #48]	; (8023a04 <__libc_init_array+0x44>)
 80239d4:	f004 f9c4 	bl	8027d60 <_init>
 80239d8:	1b64      	subs	r4, r4, r5
 80239da:	10a4      	asrs	r4, r4, #2
 80239dc:	2600      	movs	r6, #0
 80239de:	42a6      	cmp	r6, r4
 80239e0:	d105      	bne.n	80239ee <__libc_init_array+0x2e>
 80239e2:	bd70      	pop	{r4, r5, r6, pc}
 80239e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80239e8:	4798      	blx	r3
 80239ea:	3601      	adds	r6, #1
 80239ec:	e7ee      	b.n	80239cc <__libc_init_array+0xc>
 80239ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80239f2:	4798      	blx	r3
 80239f4:	3601      	adds	r6, #1
 80239f6:	e7f2      	b.n	80239de <__libc_init_array+0x1e>
 80239f8:	0802a6bc 	.word	0x0802a6bc
 80239fc:	0802a6bc 	.word	0x0802a6bc
 8023a00:	0802a6bc 	.word	0x0802a6bc
 8023a04:	0802a6c4 	.word	0x0802a6c4

08023a08 <__retarget_lock_init_recursive>:
 8023a08:	4770      	bx	lr

08023a0a <__retarget_lock_acquire_recursive>:
 8023a0a:	4770      	bx	lr

08023a0c <__retarget_lock_release_recursive>:
 8023a0c:	4770      	bx	lr
	...

08023a10 <malloc>:
 8023a10:	4b02      	ldr	r3, [pc, #8]	; (8023a1c <malloc+0xc>)
 8023a12:	4601      	mov	r1, r0
 8023a14:	6818      	ldr	r0, [r3, #0]
 8023a16:	f000 b8bd 	b.w	8023b94 <_malloc_r>
 8023a1a:	bf00      	nop
 8023a1c:	20000280 	.word	0x20000280

08023a20 <free>:
 8023a20:	4b02      	ldr	r3, [pc, #8]	; (8023a2c <free+0xc>)
 8023a22:	4601      	mov	r1, r0
 8023a24:	6818      	ldr	r0, [r3, #0]
 8023a26:	f000 b849 	b.w	8023abc <_free_r>
 8023a2a:	bf00      	nop
 8023a2c:	20000280 	.word	0x20000280

08023a30 <memcpy>:
 8023a30:	440a      	add	r2, r1
 8023a32:	4291      	cmp	r1, r2
 8023a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8023a38:	d100      	bne.n	8023a3c <memcpy+0xc>
 8023a3a:	4770      	bx	lr
 8023a3c:	b510      	push	{r4, lr}
 8023a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023a46:	4291      	cmp	r1, r2
 8023a48:	d1f9      	bne.n	8023a3e <memcpy+0xe>
 8023a4a:	bd10      	pop	{r4, pc}

08023a4c <memmove>:
 8023a4c:	4288      	cmp	r0, r1
 8023a4e:	b510      	push	{r4, lr}
 8023a50:	eb01 0402 	add.w	r4, r1, r2
 8023a54:	d902      	bls.n	8023a5c <memmove+0x10>
 8023a56:	4284      	cmp	r4, r0
 8023a58:	4623      	mov	r3, r4
 8023a5a:	d807      	bhi.n	8023a6c <memmove+0x20>
 8023a5c:	1e43      	subs	r3, r0, #1
 8023a5e:	42a1      	cmp	r1, r4
 8023a60:	d008      	beq.n	8023a74 <memmove+0x28>
 8023a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023a6a:	e7f8      	b.n	8023a5e <memmove+0x12>
 8023a6c:	4402      	add	r2, r0
 8023a6e:	4601      	mov	r1, r0
 8023a70:	428a      	cmp	r2, r1
 8023a72:	d100      	bne.n	8023a76 <memmove+0x2a>
 8023a74:	bd10      	pop	{r4, pc}
 8023a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023a7e:	e7f7      	b.n	8023a70 <memmove+0x24>

08023a80 <memset>:
 8023a80:	4402      	add	r2, r0
 8023a82:	4603      	mov	r3, r0
 8023a84:	4293      	cmp	r3, r2
 8023a86:	d100      	bne.n	8023a8a <memset+0xa>
 8023a88:	4770      	bx	lr
 8023a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8023a8e:	e7f9      	b.n	8023a84 <memset+0x4>

08023a90 <_calloc_r>:
 8023a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023a92:	fba1 2402 	umull	r2, r4, r1, r2
 8023a96:	b94c      	cbnz	r4, 8023aac <_calloc_r+0x1c>
 8023a98:	4611      	mov	r1, r2
 8023a9a:	9201      	str	r2, [sp, #4]
 8023a9c:	f000 f87a 	bl	8023b94 <_malloc_r>
 8023aa0:	9a01      	ldr	r2, [sp, #4]
 8023aa2:	4605      	mov	r5, r0
 8023aa4:	b930      	cbnz	r0, 8023ab4 <_calloc_r+0x24>
 8023aa6:	4628      	mov	r0, r5
 8023aa8:	b003      	add	sp, #12
 8023aaa:	bd30      	pop	{r4, r5, pc}
 8023aac:	220c      	movs	r2, #12
 8023aae:	6002      	str	r2, [r0, #0]
 8023ab0:	2500      	movs	r5, #0
 8023ab2:	e7f8      	b.n	8023aa6 <_calloc_r+0x16>
 8023ab4:	4621      	mov	r1, r4
 8023ab6:	f7ff ffe3 	bl	8023a80 <memset>
 8023aba:	e7f4      	b.n	8023aa6 <_calloc_r+0x16>

08023abc <_free_r>:
 8023abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023abe:	2900      	cmp	r1, #0
 8023ac0:	d044      	beq.n	8023b4c <_free_r+0x90>
 8023ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023ac6:	9001      	str	r0, [sp, #4]
 8023ac8:	2b00      	cmp	r3, #0
 8023aca:	f1a1 0404 	sub.w	r4, r1, #4
 8023ace:	bfb8      	it	lt
 8023ad0:	18e4      	addlt	r4, r4, r3
 8023ad2:	f003 fa2d 	bl	8026f30 <__malloc_lock>
 8023ad6:	4a1e      	ldr	r2, [pc, #120]	; (8023b50 <_free_r+0x94>)
 8023ad8:	9801      	ldr	r0, [sp, #4]
 8023ada:	6813      	ldr	r3, [r2, #0]
 8023adc:	b933      	cbnz	r3, 8023aec <_free_r+0x30>
 8023ade:	6063      	str	r3, [r4, #4]
 8023ae0:	6014      	str	r4, [r2, #0]
 8023ae2:	b003      	add	sp, #12
 8023ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023ae8:	f003 ba28 	b.w	8026f3c <__malloc_unlock>
 8023aec:	42a3      	cmp	r3, r4
 8023aee:	d908      	bls.n	8023b02 <_free_r+0x46>
 8023af0:	6825      	ldr	r5, [r4, #0]
 8023af2:	1961      	adds	r1, r4, r5
 8023af4:	428b      	cmp	r3, r1
 8023af6:	bf01      	itttt	eq
 8023af8:	6819      	ldreq	r1, [r3, #0]
 8023afa:	685b      	ldreq	r3, [r3, #4]
 8023afc:	1949      	addeq	r1, r1, r5
 8023afe:	6021      	streq	r1, [r4, #0]
 8023b00:	e7ed      	b.n	8023ade <_free_r+0x22>
 8023b02:	461a      	mov	r2, r3
 8023b04:	685b      	ldr	r3, [r3, #4]
 8023b06:	b10b      	cbz	r3, 8023b0c <_free_r+0x50>
 8023b08:	42a3      	cmp	r3, r4
 8023b0a:	d9fa      	bls.n	8023b02 <_free_r+0x46>
 8023b0c:	6811      	ldr	r1, [r2, #0]
 8023b0e:	1855      	adds	r5, r2, r1
 8023b10:	42a5      	cmp	r5, r4
 8023b12:	d10b      	bne.n	8023b2c <_free_r+0x70>
 8023b14:	6824      	ldr	r4, [r4, #0]
 8023b16:	4421      	add	r1, r4
 8023b18:	1854      	adds	r4, r2, r1
 8023b1a:	42a3      	cmp	r3, r4
 8023b1c:	6011      	str	r1, [r2, #0]
 8023b1e:	d1e0      	bne.n	8023ae2 <_free_r+0x26>
 8023b20:	681c      	ldr	r4, [r3, #0]
 8023b22:	685b      	ldr	r3, [r3, #4]
 8023b24:	6053      	str	r3, [r2, #4]
 8023b26:	4421      	add	r1, r4
 8023b28:	6011      	str	r1, [r2, #0]
 8023b2a:	e7da      	b.n	8023ae2 <_free_r+0x26>
 8023b2c:	d902      	bls.n	8023b34 <_free_r+0x78>
 8023b2e:	230c      	movs	r3, #12
 8023b30:	6003      	str	r3, [r0, #0]
 8023b32:	e7d6      	b.n	8023ae2 <_free_r+0x26>
 8023b34:	6825      	ldr	r5, [r4, #0]
 8023b36:	1961      	adds	r1, r4, r5
 8023b38:	428b      	cmp	r3, r1
 8023b3a:	bf04      	itt	eq
 8023b3c:	6819      	ldreq	r1, [r3, #0]
 8023b3e:	685b      	ldreq	r3, [r3, #4]
 8023b40:	6063      	str	r3, [r4, #4]
 8023b42:	bf04      	itt	eq
 8023b44:	1949      	addeq	r1, r1, r5
 8023b46:	6021      	streq	r1, [r4, #0]
 8023b48:	6054      	str	r4, [r2, #4]
 8023b4a:	e7ca      	b.n	8023ae2 <_free_r+0x26>
 8023b4c:	b003      	add	sp, #12
 8023b4e:	bd30      	pop	{r4, r5, pc}
 8023b50:	20004cec 	.word	0x20004cec

08023b54 <sbrk_aligned>:
 8023b54:	b570      	push	{r4, r5, r6, lr}
 8023b56:	4e0e      	ldr	r6, [pc, #56]	; (8023b90 <sbrk_aligned+0x3c>)
 8023b58:	460c      	mov	r4, r1
 8023b5a:	6831      	ldr	r1, [r6, #0]
 8023b5c:	4605      	mov	r5, r0
 8023b5e:	b911      	cbnz	r1, 8023b66 <sbrk_aligned+0x12>
 8023b60:	f000 fe50 	bl	8024804 <_sbrk_r>
 8023b64:	6030      	str	r0, [r6, #0]
 8023b66:	4621      	mov	r1, r4
 8023b68:	4628      	mov	r0, r5
 8023b6a:	f000 fe4b 	bl	8024804 <_sbrk_r>
 8023b6e:	1c43      	adds	r3, r0, #1
 8023b70:	d00a      	beq.n	8023b88 <sbrk_aligned+0x34>
 8023b72:	1cc4      	adds	r4, r0, #3
 8023b74:	f024 0403 	bic.w	r4, r4, #3
 8023b78:	42a0      	cmp	r0, r4
 8023b7a:	d007      	beq.n	8023b8c <sbrk_aligned+0x38>
 8023b7c:	1a21      	subs	r1, r4, r0
 8023b7e:	4628      	mov	r0, r5
 8023b80:	f000 fe40 	bl	8024804 <_sbrk_r>
 8023b84:	3001      	adds	r0, #1
 8023b86:	d101      	bne.n	8023b8c <sbrk_aligned+0x38>
 8023b88:	f04f 34ff 	mov.w	r4, #4294967295
 8023b8c:	4620      	mov	r0, r4
 8023b8e:	bd70      	pop	{r4, r5, r6, pc}
 8023b90:	20004cf0 	.word	0x20004cf0

08023b94 <_malloc_r>:
 8023b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b98:	1ccd      	adds	r5, r1, #3
 8023b9a:	f025 0503 	bic.w	r5, r5, #3
 8023b9e:	3508      	adds	r5, #8
 8023ba0:	2d0c      	cmp	r5, #12
 8023ba2:	bf38      	it	cc
 8023ba4:	250c      	movcc	r5, #12
 8023ba6:	2d00      	cmp	r5, #0
 8023ba8:	4607      	mov	r7, r0
 8023baa:	db01      	blt.n	8023bb0 <_malloc_r+0x1c>
 8023bac:	42a9      	cmp	r1, r5
 8023bae:	d905      	bls.n	8023bbc <_malloc_r+0x28>
 8023bb0:	230c      	movs	r3, #12
 8023bb2:	603b      	str	r3, [r7, #0]
 8023bb4:	2600      	movs	r6, #0
 8023bb6:	4630      	mov	r0, r6
 8023bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023bbc:	4e2e      	ldr	r6, [pc, #184]	; (8023c78 <_malloc_r+0xe4>)
 8023bbe:	f003 f9b7 	bl	8026f30 <__malloc_lock>
 8023bc2:	6833      	ldr	r3, [r6, #0]
 8023bc4:	461c      	mov	r4, r3
 8023bc6:	bb34      	cbnz	r4, 8023c16 <_malloc_r+0x82>
 8023bc8:	4629      	mov	r1, r5
 8023bca:	4638      	mov	r0, r7
 8023bcc:	f7ff ffc2 	bl	8023b54 <sbrk_aligned>
 8023bd0:	1c43      	adds	r3, r0, #1
 8023bd2:	4604      	mov	r4, r0
 8023bd4:	d14d      	bne.n	8023c72 <_malloc_r+0xde>
 8023bd6:	6834      	ldr	r4, [r6, #0]
 8023bd8:	4626      	mov	r6, r4
 8023bda:	2e00      	cmp	r6, #0
 8023bdc:	d140      	bne.n	8023c60 <_malloc_r+0xcc>
 8023bde:	6823      	ldr	r3, [r4, #0]
 8023be0:	4631      	mov	r1, r6
 8023be2:	4638      	mov	r0, r7
 8023be4:	eb04 0803 	add.w	r8, r4, r3
 8023be8:	f000 fe0c 	bl	8024804 <_sbrk_r>
 8023bec:	4580      	cmp	r8, r0
 8023bee:	d13a      	bne.n	8023c66 <_malloc_r+0xd2>
 8023bf0:	6821      	ldr	r1, [r4, #0]
 8023bf2:	3503      	adds	r5, #3
 8023bf4:	1a6d      	subs	r5, r5, r1
 8023bf6:	f025 0503 	bic.w	r5, r5, #3
 8023bfa:	3508      	adds	r5, #8
 8023bfc:	2d0c      	cmp	r5, #12
 8023bfe:	bf38      	it	cc
 8023c00:	250c      	movcc	r5, #12
 8023c02:	4629      	mov	r1, r5
 8023c04:	4638      	mov	r0, r7
 8023c06:	f7ff ffa5 	bl	8023b54 <sbrk_aligned>
 8023c0a:	3001      	adds	r0, #1
 8023c0c:	d02b      	beq.n	8023c66 <_malloc_r+0xd2>
 8023c0e:	6823      	ldr	r3, [r4, #0]
 8023c10:	442b      	add	r3, r5
 8023c12:	6023      	str	r3, [r4, #0]
 8023c14:	e00e      	b.n	8023c34 <_malloc_r+0xa0>
 8023c16:	6822      	ldr	r2, [r4, #0]
 8023c18:	1b52      	subs	r2, r2, r5
 8023c1a:	d41e      	bmi.n	8023c5a <_malloc_r+0xc6>
 8023c1c:	2a0b      	cmp	r2, #11
 8023c1e:	d916      	bls.n	8023c4e <_malloc_r+0xba>
 8023c20:	1961      	adds	r1, r4, r5
 8023c22:	42a3      	cmp	r3, r4
 8023c24:	6025      	str	r5, [r4, #0]
 8023c26:	bf18      	it	ne
 8023c28:	6059      	strne	r1, [r3, #4]
 8023c2a:	6863      	ldr	r3, [r4, #4]
 8023c2c:	bf08      	it	eq
 8023c2e:	6031      	streq	r1, [r6, #0]
 8023c30:	5162      	str	r2, [r4, r5]
 8023c32:	604b      	str	r3, [r1, #4]
 8023c34:	4638      	mov	r0, r7
 8023c36:	f104 060b 	add.w	r6, r4, #11
 8023c3a:	f003 f97f 	bl	8026f3c <__malloc_unlock>
 8023c3e:	f026 0607 	bic.w	r6, r6, #7
 8023c42:	1d23      	adds	r3, r4, #4
 8023c44:	1af2      	subs	r2, r6, r3
 8023c46:	d0b6      	beq.n	8023bb6 <_malloc_r+0x22>
 8023c48:	1b9b      	subs	r3, r3, r6
 8023c4a:	50a3      	str	r3, [r4, r2]
 8023c4c:	e7b3      	b.n	8023bb6 <_malloc_r+0x22>
 8023c4e:	6862      	ldr	r2, [r4, #4]
 8023c50:	42a3      	cmp	r3, r4
 8023c52:	bf0c      	ite	eq
 8023c54:	6032      	streq	r2, [r6, #0]
 8023c56:	605a      	strne	r2, [r3, #4]
 8023c58:	e7ec      	b.n	8023c34 <_malloc_r+0xa0>
 8023c5a:	4623      	mov	r3, r4
 8023c5c:	6864      	ldr	r4, [r4, #4]
 8023c5e:	e7b2      	b.n	8023bc6 <_malloc_r+0x32>
 8023c60:	4634      	mov	r4, r6
 8023c62:	6876      	ldr	r6, [r6, #4]
 8023c64:	e7b9      	b.n	8023bda <_malloc_r+0x46>
 8023c66:	230c      	movs	r3, #12
 8023c68:	603b      	str	r3, [r7, #0]
 8023c6a:	4638      	mov	r0, r7
 8023c6c:	f003 f966 	bl	8026f3c <__malloc_unlock>
 8023c70:	e7a1      	b.n	8023bb6 <_malloc_r+0x22>
 8023c72:	6025      	str	r5, [r4, #0]
 8023c74:	e7de      	b.n	8023c34 <_malloc_r+0xa0>
 8023c76:	bf00      	nop
 8023c78:	20004cec 	.word	0x20004cec

08023c7c <__sfputc_r>:
 8023c7c:	6893      	ldr	r3, [r2, #8]
 8023c7e:	3b01      	subs	r3, #1
 8023c80:	2b00      	cmp	r3, #0
 8023c82:	b410      	push	{r4}
 8023c84:	6093      	str	r3, [r2, #8]
 8023c86:	da08      	bge.n	8023c9a <__sfputc_r+0x1e>
 8023c88:	6994      	ldr	r4, [r2, #24]
 8023c8a:	42a3      	cmp	r3, r4
 8023c8c:	db01      	blt.n	8023c92 <__sfputc_r+0x16>
 8023c8e:	290a      	cmp	r1, #10
 8023c90:	d103      	bne.n	8023c9a <__sfputc_r+0x1e>
 8023c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023c96:	f001 bc6d 	b.w	8025574 <__swbuf_r>
 8023c9a:	6813      	ldr	r3, [r2, #0]
 8023c9c:	1c58      	adds	r0, r3, #1
 8023c9e:	6010      	str	r0, [r2, #0]
 8023ca0:	7019      	strb	r1, [r3, #0]
 8023ca2:	4608      	mov	r0, r1
 8023ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023ca8:	4770      	bx	lr

08023caa <__sfputs_r>:
 8023caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023cac:	4606      	mov	r6, r0
 8023cae:	460f      	mov	r7, r1
 8023cb0:	4614      	mov	r4, r2
 8023cb2:	18d5      	adds	r5, r2, r3
 8023cb4:	42ac      	cmp	r4, r5
 8023cb6:	d101      	bne.n	8023cbc <__sfputs_r+0x12>
 8023cb8:	2000      	movs	r0, #0
 8023cba:	e007      	b.n	8023ccc <__sfputs_r+0x22>
 8023cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023cc0:	463a      	mov	r2, r7
 8023cc2:	4630      	mov	r0, r6
 8023cc4:	f7ff ffda 	bl	8023c7c <__sfputc_r>
 8023cc8:	1c43      	adds	r3, r0, #1
 8023cca:	d1f3      	bne.n	8023cb4 <__sfputs_r+0xa>
 8023ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023cd0 <_vfiprintf_r>:
 8023cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cd4:	460d      	mov	r5, r1
 8023cd6:	b09d      	sub	sp, #116	; 0x74
 8023cd8:	4614      	mov	r4, r2
 8023cda:	4698      	mov	r8, r3
 8023cdc:	4606      	mov	r6, r0
 8023cde:	b118      	cbz	r0, 8023ce8 <_vfiprintf_r+0x18>
 8023ce0:	6983      	ldr	r3, [r0, #24]
 8023ce2:	b90b      	cbnz	r3, 8023ce8 <_vfiprintf_r+0x18>
 8023ce4:	f002 fc9c 	bl	8026620 <__sinit>
 8023ce8:	4b89      	ldr	r3, [pc, #548]	; (8023f10 <_vfiprintf_r+0x240>)
 8023cea:	429d      	cmp	r5, r3
 8023cec:	d11b      	bne.n	8023d26 <_vfiprintf_r+0x56>
 8023cee:	6875      	ldr	r5, [r6, #4]
 8023cf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023cf2:	07d9      	lsls	r1, r3, #31
 8023cf4:	d405      	bmi.n	8023d02 <_vfiprintf_r+0x32>
 8023cf6:	89ab      	ldrh	r3, [r5, #12]
 8023cf8:	059a      	lsls	r2, r3, #22
 8023cfa:	d402      	bmi.n	8023d02 <_vfiprintf_r+0x32>
 8023cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023cfe:	f7ff fe84 	bl	8023a0a <__retarget_lock_acquire_recursive>
 8023d02:	89ab      	ldrh	r3, [r5, #12]
 8023d04:	071b      	lsls	r3, r3, #28
 8023d06:	d501      	bpl.n	8023d0c <_vfiprintf_r+0x3c>
 8023d08:	692b      	ldr	r3, [r5, #16]
 8023d0a:	b9eb      	cbnz	r3, 8023d48 <_vfiprintf_r+0x78>
 8023d0c:	4629      	mov	r1, r5
 8023d0e:	4630      	mov	r0, r6
 8023d10:	f001 fc82 	bl	8025618 <__swsetup_r>
 8023d14:	b1c0      	cbz	r0, 8023d48 <_vfiprintf_r+0x78>
 8023d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023d18:	07dc      	lsls	r4, r3, #31
 8023d1a:	d50e      	bpl.n	8023d3a <_vfiprintf_r+0x6a>
 8023d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8023d20:	b01d      	add	sp, #116	; 0x74
 8023d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d26:	4b7b      	ldr	r3, [pc, #492]	; (8023f14 <_vfiprintf_r+0x244>)
 8023d28:	429d      	cmp	r5, r3
 8023d2a:	d101      	bne.n	8023d30 <_vfiprintf_r+0x60>
 8023d2c:	68b5      	ldr	r5, [r6, #8]
 8023d2e:	e7df      	b.n	8023cf0 <_vfiprintf_r+0x20>
 8023d30:	4b79      	ldr	r3, [pc, #484]	; (8023f18 <_vfiprintf_r+0x248>)
 8023d32:	429d      	cmp	r5, r3
 8023d34:	bf08      	it	eq
 8023d36:	68f5      	ldreq	r5, [r6, #12]
 8023d38:	e7da      	b.n	8023cf0 <_vfiprintf_r+0x20>
 8023d3a:	89ab      	ldrh	r3, [r5, #12]
 8023d3c:	0598      	lsls	r0, r3, #22
 8023d3e:	d4ed      	bmi.n	8023d1c <_vfiprintf_r+0x4c>
 8023d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023d42:	f7ff fe63 	bl	8023a0c <__retarget_lock_release_recursive>
 8023d46:	e7e9      	b.n	8023d1c <_vfiprintf_r+0x4c>
 8023d48:	2300      	movs	r3, #0
 8023d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8023d4c:	2320      	movs	r3, #32
 8023d4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8023d56:	2330      	movs	r3, #48	; 0x30
 8023d58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023f1c <_vfiprintf_r+0x24c>
 8023d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023d60:	f04f 0901 	mov.w	r9, #1
 8023d64:	4623      	mov	r3, r4
 8023d66:	469a      	mov	sl, r3
 8023d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023d6c:	b10a      	cbz	r2, 8023d72 <_vfiprintf_r+0xa2>
 8023d6e:	2a25      	cmp	r2, #37	; 0x25
 8023d70:	d1f9      	bne.n	8023d66 <_vfiprintf_r+0x96>
 8023d72:	ebba 0b04 	subs.w	fp, sl, r4
 8023d76:	d00b      	beq.n	8023d90 <_vfiprintf_r+0xc0>
 8023d78:	465b      	mov	r3, fp
 8023d7a:	4622      	mov	r2, r4
 8023d7c:	4629      	mov	r1, r5
 8023d7e:	4630      	mov	r0, r6
 8023d80:	f7ff ff93 	bl	8023caa <__sfputs_r>
 8023d84:	3001      	adds	r0, #1
 8023d86:	f000 80aa 	beq.w	8023ede <_vfiprintf_r+0x20e>
 8023d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023d8c:	445a      	add	r2, fp
 8023d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8023d90:	f89a 3000 	ldrb.w	r3, [sl]
 8023d94:	2b00      	cmp	r3, #0
 8023d96:	f000 80a2 	beq.w	8023ede <_vfiprintf_r+0x20e>
 8023d9a:	2300      	movs	r3, #0
 8023d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8023da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023da4:	f10a 0a01 	add.w	sl, sl, #1
 8023da8:	9304      	str	r3, [sp, #16]
 8023daa:	9307      	str	r3, [sp, #28]
 8023dac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023db0:	931a      	str	r3, [sp, #104]	; 0x68
 8023db2:	4654      	mov	r4, sl
 8023db4:	2205      	movs	r2, #5
 8023db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023dba:	4858      	ldr	r0, [pc, #352]	; (8023f1c <_vfiprintf_r+0x24c>)
 8023dbc:	f7dc fa08 	bl	80001d0 <memchr>
 8023dc0:	9a04      	ldr	r2, [sp, #16]
 8023dc2:	b9d8      	cbnz	r0, 8023dfc <_vfiprintf_r+0x12c>
 8023dc4:	06d1      	lsls	r1, r2, #27
 8023dc6:	bf44      	itt	mi
 8023dc8:	2320      	movmi	r3, #32
 8023dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023dce:	0713      	lsls	r3, r2, #28
 8023dd0:	bf44      	itt	mi
 8023dd2:	232b      	movmi	r3, #43	; 0x2b
 8023dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8023ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8023dde:	d015      	beq.n	8023e0c <_vfiprintf_r+0x13c>
 8023de0:	9a07      	ldr	r2, [sp, #28]
 8023de2:	4654      	mov	r4, sl
 8023de4:	2000      	movs	r0, #0
 8023de6:	f04f 0c0a 	mov.w	ip, #10
 8023dea:	4621      	mov	r1, r4
 8023dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023df0:	3b30      	subs	r3, #48	; 0x30
 8023df2:	2b09      	cmp	r3, #9
 8023df4:	d94e      	bls.n	8023e94 <_vfiprintf_r+0x1c4>
 8023df6:	b1b0      	cbz	r0, 8023e26 <_vfiprintf_r+0x156>
 8023df8:	9207      	str	r2, [sp, #28]
 8023dfa:	e014      	b.n	8023e26 <_vfiprintf_r+0x156>
 8023dfc:	eba0 0308 	sub.w	r3, r0, r8
 8023e00:	fa09 f303 	lsl.w	r3, r9, r3
 8023e04:	4313      	orrs	r3, r2
 8023e06:	9304      	str	r3, [sp, #16]
 8023e08:	46a2      	mov	sl, r4
 8023e0a:	e7d2      	b.n	8023db2 <_vfiprintf_r+0xe2>
 8023e0c:	9b03      	ldr	r3, [sp, #12]
 8023e0e:	1d19      	adds	r1, r3, #4
 8023e10:	681b      	ldr	r3, [r3, #0]
 8023e12:	9103      	str	r1, [sp, #12]
 8023e14:	2b00      	cmp	r3, #0
 8023e16:	bfbb      	ittet	lt
 8023e18:	425b      	neglt	r3, r3
 8023e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8023e1e:	9307      	strge	r3, [sp, #28]
 8023e20:	9307      	strlt	r3, [sp, #28]
 8023e22:	bfb8      	it	lt
 8023e24:	9204      	strlt	r2, [sp, #16]
 8023e26:	7823      	ldrb	r3, [r4, #0]
 8023e28:	2b2e      	cmp	r3, #46	; 0x2e
 8023e2a:	d10c      	bne.n	8023e46 <_vfiprintf_r+0x176>
 8023e2c:	7863      	ldrb	r3, [r4, #1]
 8023e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8023e30:	d135      	bne.n	8023e9e <_vfiprintf_r+0x1ce>
 8023e32:	9b03      	ldr	r3, [sp, #12]
 8023e34:	1d1a      	adds	r2, r3, #4
 8023e36:	681b      	ldr	r3, [r3, #0]
 8023e38:	9203      	str	r2, [sp, #12]
 8023e3a:	2b00      	cmp	r3, #0
 8023e3c:	bfb8      	it	lt
 8023e3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8023e42:	3402      	adds	r4, #2
 8023e44:	9305      	str	r3, [sp, #20]
 8023e46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023f2c <_vfiprintf_r+0x25c>
 8023e4a:	7821      	ldrb	r1, [r4, #0]
 8023e4c:	2203      	movs	r2, #3
 8023e4e:	4650      	mov	r0, sl
 8023e50:	f7dc f9be 	bl	80001d0 <memchr>
 8023e54:	b140      	cbz	r0, 8023e68 <_vfiprintf_r+0x198>
 8023e56:	2340      	movs	r3, #64	; 0x40
 8023e58:	eba0 000a 	sub.w	r0, r0, sl
 8023e5c:	fa03 f000 	lsl.w	r0, r3, r0
 8023e60:	9b04      	ldr	r3, [sp, #16]
 8023e62:	4303      	orrs	r3, r0
 8023e64:	3401      	adds	r4, #1
 8023e66:	9304      	str	r3, [sp, #16]
 8023e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023e6c:	482c      	ldr	r0, [pc, #176]	; (8023f20 <_vfiprintf_r+0x250>)
 8023e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023e72:	2206      	movs	r2, #6
 8023e74:	f7dc f9ac 	bl	80001d0 <memchr>
 8023e78:	2800      	cmp	r0, #0
 8023e7a:	d03f      	beq.n	8023efc <_vfiprintf_r+0x22c>
 8023e7c:	4b29      	ldr	r3, [pc, #164]	; (8023f24 <_vfiprintf_r+0x254>)
 8023e7e:	bb1b      	cbnz	r3, 8023ec8 <_vfiprintf_r+0x1f8>
 8023e80:	9b03      	ldr	r3, [sp, #12]
 8023e82:	3307      	adds	r3, #7
 8023e84:	f023 0307 	bic.w	r3, r3, #7
 8023e88:	3308      	adds	r3, #8
 8023e8a:	9303      	str	r3, [sp, #12]
 8023e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e8e:	443b      	add	r3, r7
 8023e90:	9309      	str	r3, [sp, #36]	; 0x24
 8023e92:	e767      	b.n	8023d64 <_vfiprintf_r+0x94>
 8023e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8023e98:	460c      	mov	r4, r1
 8023e9a:	2001      	movs	r0, #1
 8023e9c:	e7a5      	b.n	8023dea <_vfiprintf_r+0x11a>
 8023e9e:	2300      	movs	r3, #0
 8023ea0:	3401      	adds	r4, #1
 8023ea2:	9305      	str	r3, [sp, #20]
 8023ea4:	4619      	mov	r1, r3
 8023ea6:	f04f 0c0a 	mov.w	ip, #10
 8023eaa:	4620      	mov	r0, r4
 8023eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023eb0:	3a30      	subs	r2, #48	; 0x30
 8023eb2:	2a09      	cmp	r2, #9
 8023eb4:	d903      	bls.n	8023ebe <_vfiprintf_r+0x1ee>
 8023eb6:	2b00      	cmp	r3, #0
 8023eb8:	d0c5      	beq.n	8023e46 <_vfiprintf_r+0x176>
 8023eba:	9105      	str	r1, [sp, #20]
 8023ebc:	e7c3      	b.n	8023e46 <_vfiprintf_r+0x176>
 8023ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8023ec2:	4604      	mov	r4, r0
 8023ec4:	2301      	movs	r3, #1
 8023ec6:	e7f0      	b.n	8023eaa <_vfiprintf_r+0x1da>
 8023ec8:	ab03      	add	r3, sp, #12
 8023eca:	9300      	str	r3, [sp, #0]
 8023ecc:	462a      	mov	r2, r5
 8023ece:	4b16      	ldr	r3, [pc, #88]	; (8023f28 <_vfiprintf_r+0x258>)
 8023ed0:	a904      	add	r1, sp, #16
 8023ed2:	4630      	mov	r0, r6
 8023ed4:	f000 f8cc 	bl	8024070 <_printf_float>
 8023ed8:	4607      	mov	r7, r0
 8023eda:	1c78      	adds	r0, r7, #1
 8023edc:	d1d6      	bne.n	8023e8c <_vfiprintf_r+0x1bc>
 8023ede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023ee0:	07d9      	lsls	r1, r3, #31
 8023ee2:	d405      	bmi.n	8023ef0 <_vfiprintf_r+0x220>
 8023ee4:	89ab      	ldrh	r3, [r5, #12]
 8023ee6:	059a      	lsls	r2, r3, #22
 8023ee8:	d402      	bmi.n	8023ef0 <_vfiprintf_r+0x220>
 8023eea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023eec:	f7ff fd8e 	bl	8023a0c <__retarget_lock_release_recursive>
 8023ef0:	89ab      	ldrh	r3, [r5, #12]
 8023ef2:	065b      	lsls	r3, r3, #25
 8023ef4:	f53f af12 	bmi.w	8023d1c <_vfiprintf_r+0x4c>
 8023ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023efa:	e711      	b.n	8023d20 <_vfiprintf_r+0x50>
 8023efc:	ab03      	add	r3, sp, #12
 8023efe:	9300      	str	r3, [sp, #0]
 8023f00:	462a      	mov	r2, r5
 8023f02:	4b09      	ldr	r3, [pc, #36]	; (8023f28 <_vfiprintf_r+0x258>)
 8023f04:	a904      	add	r1, sp, #16
 8023f06:	4630      	mov	r0, r6
 8023f08:	f000 fb56 	bl	80245b8 <_printf_i>
 8023f0c:	e7e4      	b.n	8023ed8 <_vfiprintf_r+0x208>
 8023f0e:	bf00      	nop
 8023f10:	0802a49c 	.word	0x0802a49c
 8023f14:	0802a4bc 	.word	0x0802a4bc
 8023f18:	0802a47c 	.word	0x0802a47c
 8023f1c:	0802a250 	.word	0x0802a250
 8023f20:	0802a25a 	.word	0x0802a25a
 8023f24:	08024071 	.word	0x08024071
 8023f28:	08023cab 	.word	0x08023cab
 8023f2c:	0802a256 	.word	0x0802a256

08023f30 <__cvt>:
 8023f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023f34:	ec55 4b10 	vmov	r4, r5, d0
 8023f38:	2d00      	cmp	r5, #0
 8023f3a:	460e      	mov	r6, r1
 8023f3c:	4619      	mov	r1, r3
 8023f3e:	462b      	mov	r3, r5
 8023f40:	bfbb      	ittet	lt
 8023f42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8023f46:	461d      	movlt	r5, r3
 8023f48:	2300      	movge	r3, #0
 8023f4a:	232d      	movlt	r3, #45	; 0x2d
 8023f4c:	700b      	strb	r3, [r1, #0]
 8023f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023f50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8023f54:	4691      	mov	r9, r2
 8023f56:	f023 0820 	bic.w	r8, r3, #32
 8023f5a:	bfbc      	itt	lt
 8023f5c:	4622      	movlt	r2, r4
 8023f5e:	4614      	movlt	r4, r2
 8023f60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023f64:	d005      	beq.n	8023f72 <__cvt+0x42>
 8023f66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8023f6a:	d100      	bne.n	8023f6e <__cvt+0x3e>
 8023f6c:	3601      	adds	r6, #1
 8023f6e:	2102      	movs	r1, #2
 8023f70:	e000      	b.n	8023f74 <__cvt+0x44>
 8023f72:	2103      	movs	r1, #3
 8023f74:	ab03      	add	r3, sp, #12
 8023f76:	9301      	str	r3, [sp, #4]
 8023f78:	ab02      	add	r3, sp, #8
 8023f7a:	9300      	str	r3, [sp, #0]
 8023f7c:	ec45 4b10 	vmov	d0, r4, r5
 8023f80:	4653      	mov	r3, sl
 8023f82:	4632      	mov	r2, r6
 8023f84:	f001 fc44 	bl	8025810 <_dtoa_r>
 8023f88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8023f8c:	4607      	mov	r7, r0
 8023f8e:	d102      	bne.n	8023f96 <__cvt+0x66>
 8023f90:	f019 0f01 	tst.w	r9, #1
 8023f94:	d022      	beq.n	8023fdc <__cvt+0xac>
 8023f96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023f9a:	eb07 0906 	add.w	r9, r7, r6
 8023f9e:	d110      	bne.n	8023fc2 <__cvt+0x92>
 8023fa0:	783b      	ldrb	r3, [r7, #0]
 8023fa2:	2b30      	cmp	r3, #48	; 0x30
 8023fa4:	d10a      	bne.n	8023fbc <__cvt+0x8c>
 8023fa6:	2200      	movs	r2, #0
 8023fa8:	2300      	movs	r3, #0
 8023faa:	4620      	mov	r0, r4
 8023fac:	4629      	mov	r1, r5
 8023fae:	f7dc fd95 	bl	8000adc <__aeabi_dcmpeq>
 8023fb2:	b918      	cbnz	r0, 8023fbc <__cvt+0x8c>
 8023fb4:	f1c6 0601 	rsb	r6, r6, #1
 8023fb8:	f8ca 6000 	str.w	r6, [sl]
 8023fbc:	f8da 3000 	ldr.w	r3, [sl]
 8023fc0:	4499      	add	r9, r3
 8023fc2:	2200      	movs	r2, #0
 8023fc4:	2300      	movs	r3, #0
 8023fc6:	4620      	mov	r0, r4
 8023fc8:	4629      	mov	r1, r5
 8023fca:	f7dc fd87 	bl	8000adc <__aeabi_dcmpeq>
 8023fce:	b108      	cbz	r0, 8023fd4 <__cvt+0xa4>
 8023fd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8023fd4:	2230      	movs	r2, #48	; 0x30
 8023fd6:	9b03      	ldr	r3, [sp, #12]
 8023fd8:	454b      	cmp	r3, r9
 8023fda:	d307      	bcc.n	8023fec <__cvt+0xbc>
 8023fdc:	9b03      	ldr	r3, [sp, #12]
 8023fde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023fe0:	1bdb      	subs	r3, r3, r7
 8023fe2:	4638      	mov	r0, r7
 8023fe4:	6013      	str	r3, [r2, #0]
 8023fe6:	b004      	add	sp, #16
 8023fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023fec:	1c59      	adds	r1, r3, #1
 8023fee:	9103      	str	r1, [sp, #12]
 8023ff0:	701a      	strb	r2, [r3, #0]
 8023ff2:	e7f0      	b.n	8023fd6 <__cvt+0xa6>

08023ff4 <__exponent>:
 8023ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023ff6:	4603      	mov	r3, r0
 8023ff8:	2900      	cmp	r1, #0
 8023ffa:	bfb8      	it	lt
 8023ffc:	4249      	neglt	r1, r1
 8023ffe:	f803 2b02 	strb.w	r2, [r3], #2
 8024002:	bfb4      	ite	lt
 8024004:	222d      	movlt	r2, #45	; 0x2d
 8024006:	222b      	movge	r2, #43	; 0x2b
 8024008:	2909      	cmp	r1, #9
 802400a:	7042      	strb	r2, [r0, #1]
 802400c:	dd2a      	ble.n	8024064 <__exponent+0x70>
 802400e:	f10d 0407 	add.w	r4, sp, #7
 8024012:	46a4      	mov	ip, r4
 8024014:	270a      	movs	r7, #10
 8024016:	46a6      	mov	lr, r4
 8024018:	460a      	mov	r2, r1
 802401a:	fb91 f6f7 	sdiv	r6, r1, r7
 802401e:	fb07 1516 	mls	r5, r7, r6, r1
 8024022:	3530      	adds	r5, #48	; 0x30
 8024024:	2a63      	cmp	r2, #99	; 0x63
 8024026:	f104 34ff 	add.w	r4, r4, #4294967295
 802402a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802402e:	4631      	mov	r1, r6
 8024030:	dcf1      	bgt.n	8024016 <__exponent+0x22>
 8024032:	3130      	adds	r1, #48	; 0x30
 8024034:	f1ae 0502 	sub.w	r5, lr, #2
 8024038:	f804 1c01 	strb.w	r1, [r4, #-1]
 802403c:	1c44      	adds	r4, r0, #1
 802403e:	4629      	mov	r1, r5
 8024040:	4561      	cmp	r1, ip
 8024042:	d30a      	bcc.n	802405a <__exponent+0x66>
 8024044:	f10d 0209 	add.w	r2, sp, #9
 8024048:	eba2 020e 	sub.w	r2, r2, lr
 802404c:	4565      	cmp	r5, ip
 802404e:	bf88      	it	hi
 8024050:	2200      	movhi	r2, #0
 8024052:	4413      	add	r3, r2
 8024054:	1a18      	subs	r0, r3, r0
 8024056:	b003      	add	sp, #12
 8024058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802405a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802405e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8024062:	e7ed      	b.n	8024040 <__exponent+0x4c>
 8024064:	2330      	movs	r3, #48	; 0x30
 8024066:	3130      	adds	r1, #48	; 0x30
 8024068:	7083      	strb	r3, [r0, #2]
 802406a:	70c1      	strb	r1, [r0, #3]
 802406c:	1d03      	adds	r3, r0, #4
 802406e:	e7f1      	b.n	8024054 <__exponent+0x60>

08024070 <_printf_float>:
 8024070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024074:	ed2d 8b02 	vpush	{d8}
 8024078:	b08d      	sub	sp, #52	; 0x34
 802407a:	460c      	mov	r4, r1
 802407c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8024080:	4616      	mov	r6, r2
 8024082:	461f      	mov	r7, r3
 8024084:	4605      	mov	r5, r0
 8024086:	f002 fed7 	bl	8026e38 <_localeconv_r>
 802408a:	f8d0 a000 	ldr.w	sl, [r0]
 802408e:	4650      	mov	r0, sl
 8024090:	f7dc f8f8 	bl	8000284 <strlen>
 8024094:	2300      	movs	r3, #0
 8024096:	930a      	str	r3, [sp, #40]	; 0x28
 8024098:	6823      	ldr	r3, [r4, #0]
 802409a:	9305      	str	r3, [sp, #20]
 802409c:	f8d8 3000 	ldr.w	r3, [r8]
 80240a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80240a4:	3307      	adds	r3, #7
 80240a6:	f023 0307 	bic.w	r3, r3, #7
 80240aa:	f103 0208 	add.w	r2, r3, #8
 80240ae:	f8c8 2000 	str.w	r2, [r8]
 80240b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80240ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80240be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80240c2:	9307      	str	r3, [sp, #28]
 80240c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80240c8:	ee08 0a10 	vmov	s16, r0
 80240cc:	4b9f      	ldr	r3, [pc, #636]	; (802434c <_printf_float+0x2dc>)
 80240ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80240d2:	f04f 32ff 	mov.w	r2, #4294967295
 80240d6:	f7dc fd33 	bl	8000b40 <__aeabi_dcmpun>
 80240da:	bb88      	cbnz	r0, 8024140 <_printf_float+0xd0>
 80240dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80240e0:	4b9a      	ldr	r3, [pc, #616]	; (802434c <_printf_float+0x2dc>)
 80240e2:	f04f 32ff 	mov.w	r2, #4294967295
 80240e6:	f7dc fd0d 	bl	8000b04 <__aeabi_dcmple>
 80240ea:	bb48      	cbnz	r0, 8024140 <_printf_float+0xd0>
 80240ec:	2200      	movs	r2, #0
 80240ee:	2300      	movs	r3, #0
 80240f0:	4640      	mov	r0, r8
 80240f2:	4649      	mov	r1, r9
 80240f4:	f7dc fcfc 	bl	8000af0 <__aeabi_dcmplt>
 80240f8:	b110      	cbz	r0, 8024100 <_printf_float+0x90>
 80240fa:	232d      	movs	r3, #45	; 0x2d
 80240fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024100:	4b93      	ldr	r3, [pc, #588]	; (8024350 <_printf_float+0x2e0>)
 8024102:	4894      	ldr	r0, [pc, #592]	; (8024354 <_printf_float+0x2e4>)
 8024104:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8024108:	bf94      	ite	ls
 802410a:	4698      	movls	r8, r3
 802410c:	4680      	movhi	r8, r0
 802410e:	2303      	movs	r3, #3
 8024110:	6123      	str	r3, [r4, #16]
 8024112:	9b05      	ldr	r3, [sp, #20]
 8024114:	f023 0204 	bic.w	r2, r3, #4
 8024118:	6022      	str	r2, [r4, #0]
 802411a:	f04f 0900 	mov.w	r9, #0
 802411e:	9700      	str	r7, [sp, #0]
 8024120:	4633      	mov	r3, r6
 8024122:	aa0b      	add	r2, sp, #44	; 0x2c
 8024124:	4621      	mov	r1, r4
 8024126:	4628      	mov	r0, r5
 8024128:	f000 f9d8 	bl	80244dc <_printf_common>
 802412c:	3001      	adds	r0, #1
 802412e:	f040 8090 	bne.w	8024252 <_printf_float+0x1e2>
 8024132:	f04f 30ff 	mov.w	r0, #4294967295
 8024136:	b00d      	add	sp, #52	; 0x34
 8024138:	ecbd 8b02 	vpop	{d8}
 802413c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024140:	4642      	mov	r2, r8
 8024142:	464b      	mov	r3, r9
 8024144:	4640      	mov	r0, r8
 8024146:	4649      	mov	r1, r9
 8024148:	f7dc fcfa 	bl	8000b40 <__aeabi_dcmpun>
 802414c:	b140      	cbz	r0, 8024160 <_printf_float+0xf0>
 802414e:	464b      	mov	r3, r9
 8024150:	2b00      	cmp	r3, #0
 8024152:	bfbc      	itt	lt
 8024154:	232d      	movlt	r3, #45	; 0x2d
 8024156:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802415a:	487f      	ldr	r0, [pc, #508]	; (8024358 <_printf_float+0x2e8>)
 802415c:	4b7f      	ldr	r3, [pc, #508]	; (802435c <_printf_float+0x2ec>)
 802415e:	e7d1      	b.n	8024104 <_printf_float+0x94>
 8024160:	6863      	ldr	r3, [r4, #4]
 8024162:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8024166:	9206      	str	r2, [sp, #24]
 8024168:	1c5a      	adds	r2, r3, #1
 802416a:	d13f      	bne.n	80241ec <_printf_float+0x17c>
 802416c:	2306      	movs	r3, #6
 802416e:	6063      	str	r3, [r4, #4]
 8024170:	9b05      	ldr	r3, [sp, #20]
 8024172:	6861      	ldr	r1, [r4, #4]
 8024174:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8024178:	2300      	movs	r3, #0
 802417a:	9303      	str	r3, [sp, #12]
 802417c:	ab0a      	add	r3, sp, #40	; 0x28
 802417e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8024182:	ab09      	add	r3, sp, #36	; 0x24
 8024184:	ec49 8b10 	vmov	d0, r8, r9
 8024188:	9300      	str	r3, [sp, #0]
 802418a:	6022      	str	r2, [r4, #0]
 802418c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8024190:	4628      	mov	r0, r5
 8024192:	f7ff fecd 	bl	8023f30 <__cvt>
 8024196:	9b06      	ldr	r3, [sp, #24]
 8024198:	9909      	ldr	r1, [sp, #36]	; 0x24
 802419a:	2b47      	cmp	r3, #71	; 0x47
 802419c:	4680      	mov	r8, r0
 802419e:	d108      	bne.n	80241b2 <_printf_float+0x142>
 80241a0:	1cc8      	adds	r0, r1, #3
 80241a2:	db02      	blt.n	80241aa <_printf_float+0x13a>
 80241a4:	6863      	ldr	r3, [r4, #4]
 80241a6:	4299      	cmp	r1, r3
 80241a8:	dd41      	ble.n	802422e <_printf_float+0x1be>
 80241aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80241ae:	fa5f fb8b 	uxtb.w	fp, fp
 80241b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80241b6:	d820      	bhi.n	80241fa <_printf_float+0x18a>
 80241b8:	3901      	subs	r1, #1
 80241ba:	465a      	mov	r2, fp
 80241bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80241c0:	9109      	str	r1, [sp, #36]	; 0x24
 80241c2:	f7ff ff17 	bl	8023ff4 <__exponent>
 80241c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80241c8:	1813      	adds	r3, r2, r0
 80241ca:	2a01      	cmp	r2, #1
 80241cc:	4681      	mov	r9, r0
 80241ce:	6123      	str	r3, [r4, #16]
 80241d0:	dc02      	bgt.n	80241d8 <_printf_float+0x168>
 80241d2:	6822      	ldr	r2, [r4, #0]
 80241d4:	07d2      	lsls	r2, r2, #31
 80241d6:	d501      	bpl.n	80241dc <_printf_float+0x16c>
 80241d8:	3301      	adds	r3, #1
 80241da:	6123      	str	r3, [r4, #16]
 80241dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80241e0:	2b00      	cmp	r3, #0
 80241e2:	d09c      	beq.n	802411e <_printf_float+0xae>
 80241e4:	232d      	movs	r3, #45	; 0x2d
 80241e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80241ea:	e798      	b.n	802411e <_printf_float+0xae>
 80241ec:	9a06      	ldr	r2, [sp, #24]
 80241ee:	2a47      	cmp	r2, #71	; 0x47
 80241f0:	d1be      	bne.n	8024170 <_printf_float+0x100>
 80241f2:	2b00      	cmp	r3, #0
 80241f4:	d1bc      	bne.n	8024170 <_printf_float+0x100>
 80241f6:	2301      	movs	r3, #1
 80241f8:	e7b9      	b.n	802416e <_printf_float+0xfe>
 80241fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80241fe:	d118      	bne.n	8024232 <_printf_float+0x1c2>
 8024200:	2900      	cmp	r1, #0
 8024202:	6863      	ldr	r3, [r4, #4]
 8024204:	dd0b      	ble.n	802421e <_printf_float+0x1ae>
 8024206:	6121      	str	r1, [r4, #16]
 8024208:	b913      	cbnz	r3, 8024210 <_printf_float+0x1a0>
 802420a:	6822      	ldr	r2, [r4, #0]
 802420c:	07d0      	lsls	r0, r2, #31
 802420e:	d502      	bpl.n	8024216 <_printf_float+0x1a6>
 8024210:	3301      	adds	r3, #1
 8024212:	440b      	add	r3, r1
 8024214:	6123      	str	r3, [r4, #16]
 8024216:	65a1      	str	r1, [r4, #88]	; 0x58
 8024218:	f04f 0900 	mov.w	r9, #0
 802421c:	e7de      	b.n	80241dc <_printf_float+0x16c>
 802421e:	b913      	cbnz	r3, 8024226 <_printf_float+0x1b6>
 8024220:	6822      	ldr	r2, [r4, #0]
 8024222:	07d2      	lsls	r2, r2, #31
 8024224:	d501      	bpl.n	802422a <_printf_float+0x1ba>
 8024226:	3302      	adds	r3, #2
 8024228:	e7f4      	b.n	8024214 <_printf_float+0x1a4>
 802422a:	2301      	movs	r3, #1
 802422c:	e7f2      	b.n	8024214 <_printf_float+0x1a4>
 802422e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8024232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024234:	4299      	cmp	r1, r3
 8024236:	db05      	blt.n	8024244 <_printf_float+0x1d4>
 8024238:	6823      	ldr	r3, [r4, #0]
 802423a:	6121      	str	r1, [r4, #16]
 802423c:	07d8      	lsls	r0, r3, #31
 802423e:	d5ea      	bpl.n	8024216 <_printf_float+0x1a6>
 8024240:	1c4b      	adds	r3, r1, #1
 8024242:	e7e7      	b.n	8024214 <_printf_float+0x1a4>
 8024244:	2900      	cmp	r1, #0
 8024246:	bfd4      	ite	le
 8024248:	f1c1 0202 	rsble	r2, r1, #2
 802424c:	2201      	movgt	r2, #1
 802424e:	4413      	add	r3, r2
 8024250:	e7e0      	b.n	8024214 <_printf_float+0x1a4>
 8024252:	6823      	ldr	r3, [r4, #0]
 8024254:	055a      	lsls	r2, r3, #21
 8024256:	d407      	bmi.n	8024268 <_printf_float+0x1f8>
 8024258:	6923      	ldr	r3, [r4, #16]
 802425a:	4642      	mov	r2, r8
 802425c:	4631      	mov	r1, r6
 802425e:	4628      	mov	r0, r5
 8024260:	47b8      	blx	r7
 8024262:	3001      	adds	r0, #1
 8024264:	d12c      	bne.n	80242c0 <_printf_float+0x250>
 8024266:	e764      	b.n	8024132 <_printf_float+0xc2>
 8024268:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802426c:	f240 80e0 	bls.w	8024430 <_printf_float+0x3c0>
 8024270:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8024274:	2200      	movs	r2, #0
 8024276:	2300      	movs	r3, #0
 8024278:	f7dc fc30 	bl	8000adc <__aeabi_dcmpeq>
 802427c:	2800      	cmp	r0, #0
 802427e:	d034      	beq.n	80242ea <_printf_float+0x27a>
 8024280:	4a37      	ldr	r2, [pc, #220]	; (8024360 <_printf_float+0x2f0>)
 8024282:	2301      	movs	r3, #1
 8024284:	4631      	mov	r1, r6
 8024286:	4628      	mov	r0, r5
 8024288:	47b8      	blx	r7
 802428a:	3001      	adds	r0, #1
 802428c:	f43f af51 	beq.w	8024132 <_printf_float+0xc2>
 8024290:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024294:	429a      	cmp	r2, r3
 8024296:	db02      	blt.n	802429e <_printf_float+0x22e>
 8024298:	6823      	ldr	r3, [r4, #0]
 802429a:	07d8      	lsls	r0, r3, #31
 802429c:	d510      	bpl.n	80242c0 <_printf_float+0x250>
 802429e:	ee18 3a10 	vmov	r3, s16
 80242a2:	4652      	mov	r2, sl
 80242a4:	4631      	mov	r1, r6
 80242a6:	4628      	mov	r0, r5
 80242a8:	47b8      	blx	r7
 80242aa:	3001      	adds	r0, #1
 80242ac:	f43f af41 	beq.w	8024132 <_printf_float+0xc2>
 80242b0:	f04f 0800 	mov.w	r8, #0
 80242b4:	f104 091a 	add.w	r9, r4, #26
 80242b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80242ba:	3b01      	subs	r3, #1
 80242bc:	4543      	cmp	r3, r8
 80242be:	dc09      	bgt.n	80242d4 <_printf_float+0x264>
 80242c0:	6823      	ldr	r3, [r4, #0]
 80242c2:	079b      	lsls	r3, r3, #30
 80242c4:	f100 8105 	bmi.w	80244d2 <_printf_float+0x462>
 80242c8:	68e0      	ldr	r0, [r4, #12]
 80242ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80242cc:	4298      	cmp	r0, r3
 80242ce:	bfb8      	it	lt
 80242d0:	4618      	movlt	r0, r3
 80242d2:	e730      	b.n	8024136 <_printf_float+0xc6>
 80242d4:	2301      	movs	r3, #1
 80242d6:	464a      	mov	r2, r9
 80242d8:	4631      	mov	r1, r6
 80242da:	4628      	mov	r0, r5
 80242dc:	47b8      	blx	r7
 80242de:	3001      	adds	r0, #1
 80242e0:	f43f af27 	beq.w	8024132 <_printf_float+0xc2>
 80242e4:	f108 0801 	add.w	r8, r8, #1
 80242e8:	e7e6      	b.n	80242b8 <_printf_float+0x248>
 80242ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242ec:	2b00      	cmp	r3, #0
 80242ee:	dc39      	bgt.n	8024364 <_printf_float+0x2f4>
 80242f0:	4a1b      	ldr	r2, [pc, #108]	; (8024360 <_printf_float+0x2f0>)
 80242f2:	2301      	movs	r3, #1
 80242f4:	4631      	mov	r1, r6
 80242f6:	4628      	mov	r0, r5
 80242f8:	47b8      	blx	r7
 80242fa:	3001      	adds	r0, #1
 80242fc:	f43f af19 	beq.w	8024132 <_printf_float+0xc2>
 8024300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024304:	4313      	orrs	r3, r2
 8024306:	d102      	bne.n	802430e <_printf_float+0x29e>
 8024308:	6823      	ldr	r3, [r4, #0]
 802430a:	07d9      	lsls	r1, r3, #31
 802430c:	d5d8      	bpl.n	80242c0 <_printf_float+0x250>
 802430e:	ee18 3a10 	vmov	r3, s16
 8024312:	4652      	mov	r2, sl
 8024314:	4631      	mov	r1, r6
 8024316:	4628      	mov	r0, r5
 8024318:	47b8      	blx	r7
 802431a:	3001      	adds	r0, #1
 802431c:	f43f af09 	beq.w	8024132 <_printf_float+0xc2>
 8024320:	f04f 0900 	mov.w	r9, #0
 8024324:	f104 0a1a 	add.w	sl, r4, #26
 8024328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802432a:	425b      	negs	r3, r3
 802432c:	454b      	cmp	r3, r9
 802432e:	dc01      	bgt.n	8024334 <_printf_float+0x2c4>
 8024330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024332:	e792      	b.n	802425a <_printf_float+0x1ea>
 8024334:	2301      	movs	r3, #1
 8024336:	4652      	mov	r2, sl
 8024338:	4631      	mov	r1, r6
 802433a:	4628      	mov	r0, r5
 802433c:	47b8      	blx	r7
 802433e:	3001      	adds	r0, #1
 8024340:	f43f aef7 	beq.w	8024132 <_printf_float+0xc2>
 8024344:	f109 0901 	add.w	r9, r9, #1
 8024348:	e7ee      	b.n	8024328 <_printf_float+0x2b8>
 802434a:	bf00      	nop
 802434c:	7fefffff 	.word	0x7fefffff
 8024350:	0802a261 	.word	0x0802a261
 8024354:	0802a265 	.word	0x0802a265
 8024358:	0802a26d 	.word	0x0802a26d
 802435c:	0802a269 	.word	0x0802a269
 8024360:	0802a271 	.word	0x0802a271
 8024364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024366:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024368:	429a      	cmp	r2, r3
 802436a:	bfa8      	it	ge
 802436c:	461a      	movge	r2, r3
 802436e:	2a00      	cmp	r2, #0
 8024370:	4691      	mov	r9, r2
 8024372:	dc37      	bgt.n	80243e4 <_printf_float+0x374>
 8024374:	f04f 0b00 	mov.w	fp, #0
 8024378:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802437c:	f104 021a 	add.w	r2, r4, #26
 8024380:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024382:	9305      	str	r3, [sp, #20]
 8024384:	eba3 0309 	sub.w	r3, r3, r9
 8024388:	455b      	cmp	r3, fp
 802438a:	dc33      	bgt.n	80243f4 <_printf_float+0x384>
 802438c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024390:	429a      	cmp	r2, r3
 8024392:	db3b      	blt.n	802440c <_printf_float+0x39c>
 8024394:	6823      	ldr	r3, [r4, #0]
 8024396:	07da      	lsls	r2, r3, #31
 8024398:	d438      	bmi.n	802440c <_printf_float+0x39c>
 802439a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802439c:	9a05      	ldr	r2, [sp, #20]
 802439e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80243a0:	1a9a      	subs	r2, r3, r2
 80243a2:	eba3 0901 	sub.w	r9, r3, r1
 80243a6:	4591      	cmp	r9, r2
 80243a8:	bfa8      	it	ge
 80243aa:	4691      	movge	r9, r2
 80243ac:	f1b9 0f00 	cmp.w	r9, #0
 80243b0:	dc35      	bgt.n	802441e <_printf_float+0x3ae>
 80243b2:	f04f 0800 	mov.w	r8, #0
 80243b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80243ba:	f104 0a1a 	add.w	sl, r4, #26
 80243be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80243c2:	1a9b      	subs	r3, r3, r2
 80243c4:	eba3 0309 	sub.w	r3, r3, r9
 80243c8:	4543      	cmp	r3, r8
 80243ca:	f77f af79 	ble.w	80242c0 <_printf_float+0x250>
 80243ce:	2301      	movs	r3, #1
 80243d0:	4652      	mov	r2, sl
 80243d2:	4631      	mov	r1, r6
 80243d4:	4628      	mov	r0, r5
 80243d6:	47b8      	blx	r7
 80243d8:	3001      	adds	r0, #1
 80243da:	f43f aeaa 	beq.w	8024132 <_printf_float+0xc2>
 80243de:	f108 0801 	add.w	r8, r8, #1
 80243e2:	e7ec      	b.n	80243be <_printf_float+0x34e>
 80243e4:	4613      	mov	r3, r2
 80243e6:	4631      	mov	r1, r6
 80243e8:	4642      	mov	r2, r8
 80243ea:	4628      	mov	r0, r5
 80243ec:	47b8      	blx	r7
 80243ee:	3001      	adds	r0, #1
 80243f0:	d1c0      	bne.n	8024374 <_printf_float+0x304>
 80243f2:	e69e      	b.n	8024132 <_printf_float+0xc2>
 80243f4:	2301      	movs	r3, #1
 80243f6:	4631      	mov	r1, r6
 80243f8:	4628      	mov	r0, r5
 80243fa:	9205      	str	r2, [sp, #20]
 80243fc:	47b8      	blx	r7
 80243fe:	3001      	adds	r0, #1
 8024400:	f43f ae97 	beq.w	8024132 <_printf_float+0xc2>
 8024404:	9a05      	ldr	r2, [sp, #20]
 8024406:	f10b 0b01 	add.w	fp, fp, #1
 802440a:	e7b9      	b.n	8024380 <_printf_float+0x310>
 802440c:	ee18 3a10 	vmov	r3, s16
 8024410:	4652      	mov	r2, sl
 8024412:	4631      	mov	r1, r6
 8024414:	4628      	mov	r0, r5
 8024416:	47b8      	blx	r7
 8024418:	3001      	adds	r0, #1
 802441a:	d1be      	bne.n	802439a <_printf_float+0x32a>
 802441c:	e689      	b.n	8024132 <_printf_float+0xc2>
 802441e:	9a05      	ldr	r2, [sp, #20]
 8024420:	464b      	mov	r3, r9
 8024422:	4442      	add	r2, r8
 8024424:	4631      	mov	r1, r6
 8024426:	4628      	mov	r0, r5
 8024428:	47b8      	blx	r7
 802442a:	3001      	adds	r0, #1
 802442c:	d1c1      	bne.n	80243b2 <_printf_float+0x342>
 802442e:	e680      	b.n	8024132 <_printf_float+0xc2>
 8024430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024432:	2a01      	cmp	r2, #1
 8024434:	dc01      	bgt.n	802443a <_printf_float+0x3ca>
 8024436:	07db      	lsls	r3, r3, #31
 8024438:	d538      	bpl.n	80244ac <_printf_float+0x43c>
 802443a:	2301      	movs	r3, #1
 802443c:	4642      	mov	r2, r8
 802443e:	4631      	mov	r1, r6
 8024440:	4628      	mov	r0, r5
 8024442:	47b8      	blx	r7
 8024444:	3001      	adds	r0, #1
 8024446:	f43f ae74 	beq.w	8024132 <_printf_float+0xc2>
 802444a:	ee18 3a10 	vmov	r3, s16
 802444e:	4652      	mov	r2, sl
 8024450:	4631      	mov	r1, r6
 8024452:	4628      	mov	r0, r5
 8024454:	47b8      	blx	r7
 8024456:	3001      	adds	r0, #1
 8024458:	f43f ae6b 	beq.w	8024132 <_printf_float+0xc2>
 802445c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8024460:	2200      	movs	r2, #0
 8024462:	2300      	movs	r3, #0
 8024464:	f7dc fb3a 	bl	8000adc <__aeabi_dcmpeq>
 8024468:	b9d8      	cbnz	r0, 80244a2 <_printf_float+0x432>
 802446a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802446c:	f108 0201 	add.w	r2, r8, #1
 8024470:	3b01      	subs	r3, #1
 8024472:	4631      	mov	r1, r6
 8024474:	4628      	mov	r0, r5
 8024476:	47b8      	blx	r7
 8024478:	3001      	adds	r0, #1
 802447a:	d10e      	bne.n	802449a <_printf_float+0x42a>
 802447c:	e659      	b.n	8024132 <_printf_float+0xc2>
 802447e:	2301      	movs	r3, #1
 8024480:	4652      	mov	r2, sl
 8024482:	4631      	mov	r1, r6
 8024484:	4628      	mov	r0, r5
 8024486:	47b8      	blx	r7
 8024488:	3001      	adds	r0, #1
 802448a:	f43f ae52 	beq.w	8024132 <_printf_float+0xc2>
 802448e:	f108 0801 	add.w	r8, r8, #1
 8024492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024494:	3b01      	subs	r3, #1
 8024496:	4543      	cmp	r3, r8
 8024498:	dcf1      	bgt.n	802447e <_printf_float+0x40e>
 802449a:	464b      	mov	r3, r9
 802449c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80244a0:	e6dc      	b.n	802425c <_printf_float+0x1ec>
 80244a2:	f04f 0800 	mov.w	r8, #0
 80244a6:	f104 0a1a 	add.w	sl, r4, #26
 80244aa:	e7f2      	b.n	8024492 <_printf_float+0x422>
 80244ac:	2301      	movs	r3, #1
 80244ae:	4642      	mov	r2, r8
 80244b0:	e7df      	b.n	8024472 <_printf_float+0x402>
 80244b2:	2301      	movs	r3, #1
 80244b4:	464a      	mov	r2, r9
 80244b6:	4631      	mov	r1, r6
 80244b8:	4628      	mov	r0, r5
 80244ba:	47b8      	blx	r7
 80244bc:	3001      	adds	r0, #1
 80244be:	f43f ae38 	beq.w	8024132 <_printf_float+0xc2>
 80244c2:	f108 0801 	add.w	r8, r8, #1
 80244c6:	68e3      	ldr	r3, [r4, #12]
 80244c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80244ca:	1a5b      	subs	r3, r3, r1
 80244cc:	4543      	cmp	r3, r8
 80244ce:	dcf0      	bgt.n	80244b2 <_printf_float+0x442>
 80244d0:	e6fa      	b.n	80242c8 <_printf_float+0x258>
 80244d2:	f04f 0800 	mov.w	r8, #0
 80244d6:	f104 0919 	add.w	r9, r4, #25
 80244da:	e7f4      	b.n	80244c6 <_printf_float+0x456>

080244dc <_printf_common>:
 80244dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80244e0:	4616      	mov	r6, r2
 80244e2:	4699      	mov	r9, r3
 80244e4:	688a      	ldr	r2, [r1, #8]
 80244e6:	690b      	ldr	r3, [r1, #16]
 80244e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80244ec:	4293      	cmp	r3, r2
 80244ee:	bfb8      	it	lt
 80244f0:	4613      	movlt	r3, r2
 80244f2:	6033      	str	r3, [r6, #0]
 80244f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80244f8:	4607      	mov	r7, r0
 80244fa:	460c      	mov	r4, r1
 80244fc:	b10a      	cbz	r2, 8024502 <_printf_common+0x26>
 80244fe:	3301      	adds	r3, #1
 8024500:	6033      	str	r3, [r6, #0]
 8024502:	6823      	ldr	r3, [r4, #0]
 8024504:	0699      	lsls	r1, r3, #26
 8024506:	bf42      	ittt	mi
 8024508:	6833      	ldrmi	r3, [r6, #0]
 802450a:	3302      	addmi	r3, #2
 802450c:	6033      	strmi	r3, [r6, #0]
 802450e:	6825      	ldr	r5, [r4, #0]
 8024510:	f015 0506 	ands.w	r5, r5, #6
 8024514:	d106      	bne.n	8024524 <_printf_common+0x48>
 8024516:	f104 0a19 	add.w	sl, r4, #25
 802451a:	68e3      	ldr	r3, [r4, #12]
 802451c:	6832      	ldr	r2, [r6, #0]
 802451e:	1a9b      	subs	r3, r3, r2
 8024520:	42ab      	cmp	r3, r5
 8024522:	dc26      	bgt.n	8024572 <_printf_common+0x96>
 8024524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024528:	1e13      	subs	r3, r2, #0
 802452a:	6822      	ldr	r2, [r4, #0]
 802452c:	bf18      	it	ne
 802452e:	2301      	movne	r3, #1
 8024530:	0692      	lsls	r2, r2, #26
 8024532:	d42b      	bmi.n	802458c <_printf_common+0xb0>
 8024534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024538:	4649      	mov	r1, r9
 802453a:	4638      	mov	r0, r7
 802453c:	47c0      	blx	r8
 802453e:	3001      	adds	r0, #1
 8024540:	d01e      	beq.n	8024580 <_printf_common+0xa4>
 8024542:	6823      	ldr	r3, [r4, #0]
 8024544:	68e5      	ldr	r5, [r4, #12]
 8024546:	6832      	ldr	r2, [r6, #0]
 8024548:	f003 0306 	and.w	r3, r3, #6
 802454c:	2b04      	cmp	r3, #4
 802454e:	bf08      	it	eq
 8024550:	1aad      	subeq	r5, r5, r2
 8024552:	68a3      	ldr	r3, [r4, #8]
 8024554:	6922      	ldr	r2, [r4, #16]
 8024556:	bf0c      	ite	eq
 8024558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802455c:	2500      	movne	r5, #0
 802455e:	4293      	cmp	r3, r2
 8024560:	bfc4      	itt	gt
 8024562:	1a9b      	subgt	r3, r3, r2
 8024564:	18ed      	addgt	r5, r5, r3
 8024566:	2600      	movs	r6, #0
 8024568:	341a      	adds	r4, #26
 802456a:	42b5      	cmp	r5, r6
 802456c:	d11a      	bne.n	80245a4 <_printf_common+0xc8>
 802456e:	2000      	movs	r0, #0
 8024570:	e008      	b.n	8024584 <_printf_common+0xa8>
 8024572:	2301      	movs	r3, #1
 8024574:	4652      	mov	r2, sl
 8024576:	4649      	mov	r1, r9
 8024578:	4638      	mov	r0, r7
 802457a:	47c0      	blx	r8
 802457c:	3001      	adds	r0, #1
 802457e:	d103      	bne.n	8024588 <_printf_common+0xac>
 8024580:	f04f 30ff 	mov.w	r0, #4294967295
 8024584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024588:	3501      	adds	r5, #1
 802458a:	e7c6      	b.n	802451a <_printf_common+0x3e>
 802458c:	18e1      	adds	r1, r4, r3
 802458e:	1c5a      	adds	r2, r3, #1
 8024590:	2030      	movs	r0, #48	; 0x30
 8024592:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024596:	4422      	add	r2, r4
 8024598:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802459c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80245a0:	3302      	adds	r3, #2
 80245a2:	e7c7      	b.n	8024534 <_printf_common+0x58>
 80245a4:	2301      	movs	r3, #1
 80245a6:	4622      	mov	r2, r4
 80245a8:	4649      	mov	r1, r9
 80245aa:	4638      	mov	r0, r7
 80245ac:	47c0      	blx	r8
 80245ae:	3001      	adds	r0, #1
 80245b0:	d0e6      	beq.n	8024580 <_printf_common+0xa4>
 80245b2:	3601      	adds	r6, #1
 80245b4:	e7d9      	b.n	802456a <_printf_common+0x8e>
	...

080245b8 <_printf_i>:
 80245b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80245bc:	7e0f      	ldrb	r7, [r1, #24]
 80245be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80245c0:	2f78      	cmp	r7, #120	; 0x78
 80245c2:	4691      	mov	r9, r2
 80245c4:	4680      	mov	r8, r0
 80245c6:	460c      	mov	r4, r1
 80245c8:	469a      	mov	sl, r3
 80245ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80245ce:	d807      	bhi.n	80245e0 <_printf_i+0x28>
 80245d0:	2f62      	cmp	r7, #98	; 0x62
 80245d2:	d80a      	bhi.n	80245ea <_printf_i+0x32>
 80245d4:	2f00      	cmp	r7, #0
 80245d6:	f000 80d8 	beq.w	802478a <_printf_i+0x1d2>
 80245da:	2f58      	cmp	r7, #88	; 0x58
 80245dc:	f000 80a3 	beq.w	8024726 <_printf_i+0x16e>
 80245e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80245e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80245e8:	e03a      	b.n	8024660 <_printf_i+0xa8>
 80245ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80245ee:	2b15      	cmp	r3, #21
 80245f0:	d8f6      	bhi.n	80245e0 <_printf_i+0x28>
 80245f2:	a101      	add	r1, pc, #4	; (adr r1, 80245f8 <_printf_i+0x40>)
 80245f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80245f8:	08024651 	.word	0x08024651
 80245fc:	08024665 	.word	0x08024665
 8024600:	080245e1 	.word	0x080245e1
 8024604:	080245e1 	.word	0x080245e1
 8024608:	080245e1 	.word	0x080245e1
 802460c:	080245e1 	.word	0x080245e1
 8024610:	08024665 	.word	0x08024665
 8024614:	080245e1 	.word	0x080245e1
 8024618:	080245e1 	.word	0x080245e1
 802461c:	080245e1 	.word	0x080245e1
 8024620:	080245e1 	.word	0x080245e1
 8024624:	08024771 	.word	0x08024771
 8024628:	08024695 	.word	0x08024695
 802462c:	08024753 	.word	0x08024753
 8024630:	080245e1 	.word	0x080245e1
 8024634:	080245e1 	.word	0x080245e1
 8024638:	08024793 	.word	0x08024793
 802463c:	080245e1 	.word	0x080245e1
 8024640:	08024695 	.word	0x08024695
 8024644:	080245e1 	.word	0x080245e1
 8024648:	080245e1 	.word	0x080245e1
 802464c:	0802475b 	.word	0x0802475b
 8024650:	682b      	ldr	r3, [r5, #0]
 8024652:	1d1a      	adds	r2, r3, #4
 8024654:	681b      	ldr	r3, [r3, #0]
 8024656:	602a      	str	r2, [r5, #0]
 8024658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802465c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024660:	2301      	movs	r3, #1
 8024662:	e0a3      	b.n	80247ac <_printf_i+0x1f4>
 8024664:	6820      	ldr	r0, [r4, #0]
 8024666:	6829      	ldr	r1, [r5, #0]
 8024668:	0606      	lsls	r6, r0, #24
 802466a:	f101 0304 	add.w	r3, r1, #4
 802466e:	d50a      	bpl.n	8024686 <_printf_i+0xce>
 8024670:	680e      	ldr	r6, [r1, #0]
 8024672:	602b      	str	r3, [r5, #0]
 8024674:	2e00      	cmp	r6, #0
 8024676:	da03      	bge.n	8024680 <_printf_i+0xc8>
 8024678:	232d      	movs	r3, #45	; 0x2d
 802467a:	4276      	negs	r6, r6
 802467c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024680:	485e      	ldr	r0, [pc, #376]	; (80247fc <_printf_i+0x244>)
 8024682:	230a      	movs	r3, #10
 8024684:	e019      	b.n	80246ba <_printf_i+0x102>
 8024686:	680e      	ldr	r6, [r1, #0]
 8024688:	602b      	str	r3, [r5, #0]
 802468a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802468e:	bf18      	it	ne
 8024690:	b236      	sxthne	r6, r6
 8024692:	e7ef      	b.n	8024674 <_printf_i+0xbc>
 8024694:	682b      	ldr	r3, [r5, #0]
 8024696:	6820      	ldr	r0, [r4, #0]
 8024698:	1d19      	adds	r1, r3, #4
 802469a:	6029      	str	r1, [r5, #0]
 802469c:	0601      	lsls	r1, r0, #24
 802469e:	d501      	bpl.n	80246a4 <_printf_i+0xec>
 80246a0:	681e      	ldr	r6, [r3, #0]
 80246a2:	e002      	b.n	80246aa <_printf_i+0xf2>
 80246a4:	0646      	lsls	r6, r0, #25
 80246a6:	d5fb      	bpl.n	80246a0 <_printf_i+0xe8>
 80246a8:	881e      	ldrh	r6, [r3, #0]
 80246aa:	4854      	ldr	r0, [pc, #336]	; (80247fc <_printf_i+0x244>)
 80246ac:	2f6f      	cmp	r7, #111	; 0x6f
 80246ae:	bf0c      	ite	eq
 80246b0:	2308      	moveq	r3, #8
 80246b2:	230a      	movne	r3, #10
 80246b4:	2100      	movs	r1, #0
 80246b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80246ba:	6865      	ldr	r5, [r4, #4]
 80246bc:	60a5      	str	r5, [r4, #8]
 80246be:	2d00      	cmp	r5, #0
 80246c0:	bfa2      	ittt	ge
 80246c2:	6821      	ldrge	r1, [r4, #0]
 80246c4:	f021 0104 	bicge.w	r1, r1, #4
 80246c8:	6021      	strge	r1, [r4, #0]
 80246ca:	b90e      	cbnz	r6, 80246d0 <_printf_i+0x118>
 80246cc:	2d00      	cmp	r5, #0
 80246ce:	d04d      	beq.n	802476c <_printf_i+0x1b4>
 80246d0:	4615      	mov	r5, r2
 80246d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80246d6:	fb03 6711 	mls	r7, r3, r1, r6
 80246da:	5dc7      	ldrb	r7, [r0, r7]
 80246dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80246e0:	4637      	mov	r7, r6
 80246e2:	42bb      	cmp	r3, r7
 80246e4:	460e      	mov	r6, r1
 80246e6:	d9f4      	bls.n	80246d2 <_printf_i+0x11a>
 80246e8:	2b08      	cmp	r3, #8
 80246ea:	d10b      	bne.n	8024704 <_printf_i+0x14c>
 80246ec:	6823      	ldr	r3, [r4, #0]
 80246ee:	07de      	lsls	r6, r3, #31
 80246f0:	d508      	bpl.n	8024704 <_printf_i+0x14c>
 80246f2:	6923      	ldr	r3, [r4, #16]
 80246f4:	6861      	ldr	r1, [r4, #4]
 80246f6:	4299      	cmp	r1, r3
 80246f8:	bfde      	ittt	le
 80246fa:	2330      	movle	r3, #48	; 0x30
 80246fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024700:	f105 35ff 	addle.w	r5, r5, #4294967295
 8024704:	1b52      	subs	r2, r2, r5
 8024706:	6122      	str	r2, [r4, #16]
 8024708:	f8cd a000 	str.w	sl, [sp]
 802470c:	464b      	mov	r3, r9
 802470e:	aa03      	add	r2, sp, #12
 8024710:	4621      	mov	r1, r4
 8024712:	4640      	mov	r0, r8
 8024714:	f7ff fee2 	bl	80244dc <_printf_common>
 8024718:	3001      	adds	r0, #1
 802471a:	d14c      	bne.n	80247b6 <_printf_i+0x1fe>
 802471c:	f04f 30ff 	mov.w	r0, #4294967295
 8024720:	b004      	add	sp, #16
 8024722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024726:	4835      	ldr	r0, [pc, #212]	; (80247fc <_printf_i+0x244>)
 8024728:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802472c:	6829      	ldr	r1, [r5, #0]
 802472e:	6823      	ldr	r3, [r4, #0]
 8024730:	f851 6b04 	ldr.w	r6, [r1], #4
 8024734:	6029      	str	r1, [r5, #0]
 8024736:	061d      	lsls	r5, r3, #24
 8024738:	d514      	bpl.n	8024764 <_printf_i+0x1ac>
 802473a:	07df      	lsls	r7, r3, #31
 802473c:	bf44      	itt	mi
 802473e:	f043 0320 	orrmi.w	r3, r3, #32
 8024742:	6023      	strmi	r3, [r4, #0]
 8024744:	b91e      	cbnz	r6, 802474e <_printf_i+0x196>
 8024746:	6823      	ldr	r3, [r4, #0]
 8024748:	f023 0320 	bic.w	r3, r3, #32
 802474c:	6023      	str	r3, [r4, #0]
 802474e:	2310      	movs	r3, #16
 8024750:	e7b0      	b.n	80246b4 <_printf_i+0xfc>
 8024752:	6823      	ldr	r3, [r4, #0]
 8024754:	f043 0320 	orr.w	r3, r3, #32
 8024758:	6023      	str	r3, [r4, #0]
 802475a:	2378      	movs	r3, #120	; 0x78
 802475c:	4828      	ldr	r0, [pc, #160]	; (8024800 <_printf_i+0x248>)
 802475e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024762:	e7e3      	b.n	802472c <_printf_i+0x174>
 8024764:	0659      	lsls	r1, r3, #25
 8024766:	bf48      	it	mi
 8024768:	b2b6      	uxthmi	r6, r6
 802476a:	e7e6      	b.n	802473a <_printf_i+0x182>
 802476c:	4615      	mov	r5, r2
 802476e:	e7bb      	b.n	80246e8 <_printf_i+0x130>
 8024770:	682b      	ldr	r3, [r5, #0]
 8024772:	6826      	ldr	r6, [r4, #0]
 8024774:	6961      	ldr	r1, [r4, #20]
 8024776:	1d18      	adds	r0, r3, #4
 8024778:	6028      	str	r0, [r5, #0]
 802477a:	0635      	lsls	r5, r6, #24
 802477c:	681b      	ldr	r3, [r3, #0]
 802477e:	d501      	bpl.n	8024784 <_printf_i+0x1cc>
 8024780:	6019      	str	r1, [r3, #0]
 8024782:	e002      	b.n	802478a <_printf_i+0x1d2>
 8024784:	0670      	lsls	r0, r6, #25
 8024786:	d5fb      	bpl.n	8024780 <_printf_i+0x1c8>
 8024788:	8019      	strh	r1, [r3, #0]
 802478a:	2300      	movs	r3, #0
 802478c:	6123      	str	r3, [r4, #16]
 802478e:	4615      	mov	r5, r2
 8024790:	e7ba      	b.n	8024708 <_printf_i+0x150>
 8024792:	682b      	ldr	r3, [r5, #0]
 8024794:	1d1a      	adds	r2, r3, #4
 8024796:	602a      	str	r2, [r5, #0]
 8024798:	681d      	ldr	r5, [r3, #0]
 802479a:	6862      	ldr	r2, [r4, #4]
 802479c:	2100      	movs	r1, #0
 802479e:	4628      	mov	r0, r5
 80247a0:	f7db fd16 	bl	80001d0 <memchr>
 80247a4:	b108      	cbz	r0, 80247aa <_printf_i+0x1f2>
 80247a6:	1b40      	subs	r0, r0, r5
 80247a8:	6060      	str	r0, [r4, #4]
 80247aa:	6863      	ldr	r3, [r4, #4]
 80247ac:	6123      	str	r3, [r4, #16]
 80247ae:	2300      	movs	r3, #0
 80247b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80247b4:	e7a8      	b.n	8024708 <_printf_i+0x150>
 80247b6:	6923      	ldr	r3, [r4, #16]
 80247b8:	462a      	mov	r2, r5
 80247ba:	4649      	mov	r1, r9
 80247bc:	4640      	mov	r0, r8
 80247be:	47d0      	blx	sl
 80247c0:	3001      	adds	r0, #1
 80247c2:	d0ab      	beq.n	802471c <_printf_i+0x164>
 80247c4:	6823      	ldr	r3, [r4, #0]
 80247c6:	079b      	lsls	r3, r3, #30
 80247c8:	d413      	bmi.n	80247f2 <_printf_i+0x23a>
 80247ca:	68e0      	ldr	r0, [r4, #12]
 80247cc:	9b03      	ldr	r3, [sp, #12]
 80247ce:	4298      	cmp	r0, r3
 80247d0:	bfb8      	it	lt
 80247d2:	4618      	movlt	r0, r3
 80247d4:	e7a4      	b.n	8024720 <_printf_i+0x168>
 80247d6:	2301      	movs	r3, #1
 80247d8:	4632      	mov	r2, r6
 80247da:	4649      	mov	r1, r9
 80247dc:	4640      	mov	r0, r8
 80247de:	47d0      	blx	sl
 80247e0:	3001      	adds	r0, #1
 80247e2:	d09b      	beq.n	802471c <_printf_i+0x164>
 80247e4:	3501      	adds	r5, #1
 80247e6:	68e3      	ldr	r3, [r4, #12]
 80247e8:	9903      	ldr	r1, [sp, #12]
 80247ea:	1a5b      	subs	r3, r3, r1
 80247ec:	42ab      	cmp	r3, r5
 80247ee:	dcf2      	bgt.n	80247d6 <_printf_i+0x21e>
 80247f0:	e7eb      	b.n	80247ca <_printf_i+0x212>
 80247f2:	2500      	movs	r5, #0
 80247f4:	f104 0619 	add.w	r6, r4, #25
 80247f8:	e7f5      	b.n	80247e6 <_printf_i+0x22e>
 80247fa:	bf00      	nop
 80247fc:	0802a273 	.word	0x0802a273
 8024800:	0802a284 	.word	0x0802a284

08024804 <_sbrk_r>:
 8024804:	b538      	push	{r3, r4, r5, lr}
 8024806:	4d06      	ldr	r5, [pc, #24]	; (8024820 <_sbrk_r+0x1c>)
 8024808:	2300      	movs	r3, #0
 802480a:	4604      	mov	r4, r0
 802480c:	4608      	mov	r0, r1
 802480e:	602b      	str	r3, [r5, #0]
 8024810:	f7e4 fccc 	bl	80091ac <_sbrk>
 8024814:	1c43      	adds	r3, r0, #1
 8024816:	d102      	bne.n	802481e <_sbrk_r+0x1a>
 8024818:	682b      	ldr	r3, [r5, #0]
 802481a:	b103      	cbz	r3, 802481e <_sbrk_r+0x1a>
 802481c:	6023      	str	r3, [r4, #0]
 802481e:	bd38      	pop	{r3, r4, r5, pc}
 8024820:	20004cf4 	.word	0x20004cf4

08024824 <_raise_r>:
 8024824:	291f      	cmp	r1, #31
 8024826:	b538      	push	{r3, r4, r5, lr}
 8024828:	4604      	mov	r4, r0
 802482a:	460d      	mov	r5, r1
 802482c:	d904      	bls.n	8024838 <_raise_r+0x14>
 802482e:	2316      	movs	r3, #22
 8024830:	6003      	str	r3, [r0, #0]
 8024832:	f04f 30ff 	mov.w	r0, #4294967295
 8024836:	bd38      	pop	{r3, r4, r5, pc}
 8024838:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802483a:	b112      	cbz	r2, 8024842 <_raise_r+0x1e>
 802483c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024840:	b94b      	cbnz	r3, 8024856 <_raise_r+0x32>
 8024842:	4620      	mov	r0, r4
 8024844:	f000 f830 	bl	80248a8 <_getpid_r>
 8024848:	462a      	mov	r2, r5
 802484a:	4601      	mov	r1, r0
 802484c:	4620      	mov	r0, r4
 802484e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024852:	f000 b817 	b.w	8024884 <_kill_r>
 8024856:	2b01      	cmp	r3, #1
 8024858:	d00a      	beq.n	8024870 <_raise_r+0x4c>
 802485a:	1c59      	adds	r1, r3, #1
 802485c:	d103      	bne.n	8024866 <_raise_r+0x42>
 802485e:	2316      	movs	r3, #22
 8024860:	6003      	str	r3, [r0, #0]
 8024862:	2001      	movs	r0, #1
 8024864:	e7e7      	b.n	8024836 <_raise_r+0x12>
 8024866:	2400      	movs	r4, #0
 8024868:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802486c:	4628      	mov	r0, r5
 802486e:	4798      	blx	r3
 8024870:	2000      	movs	r0, #0
 8024872:	e7e0      	b.n	8024836 <_raise_r+0x12>

08024874 <raise>:
 8024874:	4b02      	ldr	r3, [pc, #8]	; (8024880 <raise+0xc>)
 8024876:	4601      	mov	r1, r0
 8024878:	6818      	ldr	r0, [r3, #0]
 802487a:	f7ff bfd3 	b.w	8024824 <_raise_r>
 802487e:	bf00      	nop
 8024880:	20000280 	.word	0x20000280

08024884 <_kill_r>:
 8024884:	b538      	push	{r3, r4, r5, lr}
 8024886:	4d07      	ldr	r5, [pc, #28]	; (80248a4 <_kill_r+0x20>)
 8024888:	2300      	movs	r3, #0
 802488a:	4604      	mov	r4, r0
 802488c:	4608      	mov	r0, r1
 802488e:	4611      	mov	r1, r2
 8024890:	602b      	str	r3, [r5, #0]
 8024892:	f7e4 fc03 	bl	800909c <_kill>
 8024896:	1c43      	adds	r3, r0, #1
 8024898:	d102      	bne.n	80248a0 <_kill_r+0x1c>
 802489a:	682b      	ldr	r3, [r5, #0]
 802489c:	b103      	cbz	r3, 80248a0 <_kill_r+0x1c>
 802489e:	6023      	str	r3, [r4, #0]
 80248a0:	bd38      	pop	{r3, r4, r5, pc}
 80248a2:	bf00      	nop
 80248a4:	20004cf4 	.word	0x20004cf4

080248a8 <_getpid_r>:
 80248a8:	f7e4 bbf0 	b.w	800908c <_getpid>

080248ac <strncmp>:
 80248ac:	b510      	push	{r4, lr}
 80248ae:	b17a      	cbz	r2, 80248d0 <strncmp+0x24>
 80248b0:	4603      	mov	r3, r0
 80248b2:	3901      	subs	r1, #1
 80248b4:	1884      	adds	r4, r0, r2
 80248b6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80248ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80248be:	4290      	cmp	r0, r2
 80248c0:	d101      	bne.n	80248c6 <strncmp+0x1a>
 80248c2:	42a3      	cmp	r3, r4
 80248c4:	d101      	bne.n	80248ca <strncmp+0x1e>
 80248c6:	1a80      	subs	r0, r0, r2
 80248c8:	bd10      	pop	{r4, pc}
 80248ca:	2800      	cmp	r0, #0
 80248cc:	d1f3      	bne.n	80248b6 <strncmp+0xa>
 80248ce:	e7fa      	b.n	80248c6 <strncmp+0x1a>
 80248d0:	4610      	mov	r0, r2
 80248d2:	e7f9      	b.n	80248c8 <strncmp+0x1c>

080248d4 <sulp>:
 80248d4:	b570      	push	{r4, r5, r6, lr}
 80248d6:	4604      	mov	r4, r0
 80248d8:	460d      	mov	r5, r1
 80248da:	ec45 4b10 	vmov	d0, r4, r5
 80248de:	4616      	mov	r6, r2
 80248e0:	f002 fea4 	bl	802762c <__ulp>
 80248e4:	ec51 0b10 	vmov	r0, r1, d0
 80248e8:	b17e      	cbz	r6, 802490a <sulp+0x36>
 80248ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80248ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80248f2:	2b00      	cmp	r3, #0
 80248f4:	dd09      	ble.n	802490a <sulp+0x36>
 80248f6:	051b      	lsls	r3, r3, #20
 80248f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80248fc:	2400      	movs	r4, #0
 80248fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8024902:	4622      	mov	r2, r4
 8024904:	462b      	mov	r3, r5
 8024906:	f7db fe81 	bl	800060c <__aeabi_dmul>
 802490a:	bd70      	pop	{r4, r5, r6, pc}
 802490c:	0000      	movs	r0, r0
	...

08024910 <_strtod_l>:
 8024910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024914:	ed2d 8b02 	vpush	{d8}
 8024918:	b09d      	sub	sp, #116	; 0x74
 802491a:	461f      	mov	r7, r3
 802491c:	2300      	movs	r3, #0
 802491e:	9318      	str	r3, [sp, #96]	; 0x60
 8024920:	4ba2      	ldr	r3, [pc, #648]	; (8024bac <_strtod_l+0x29c>)
 8024922:	9213      	str	r2, [sp, #76]	; 0x4c
 8024924:	681b      	ldr	r3, [r3, #0]
 8024926:	9305      	str	r3, [sp, #20]
 8024928:	4604      	mov	r4, r0
 802492a:	4618      	mov	r0, r3
 802492c:	4688      	mov	r8, r1
 802492e:	f7db fca9 	bl	8000284 <strlen>
 8024932:	f04f 0a00 	mov.w	sl, #0
 8024936:	4605      	mov	r5, r0
 8024938:	f04f 0b00 	mov.w	fp, #0
 802493c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8024940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024942:	781a      	ldrb	r2, [r3, #0]
 8024944:	2a2b      	cmp	r2, #43	; 0x2b
 8024946:	d04e      	beq.n	80249e6 <_strtod_l+0xd6>
 8024948:	d83b      	bhi.n	80249c2 <_strtod_l+0xb2>
 802494a:	2a0d      	cmp	r2, #13
 802494c:	d834      	bhi.n	80249b8 <_strtod_l+0xa8>
 802494e:	2a08      	cmp	r2, #8
 8024950:	d834      	bhi.n	80249bc <_strtod_l+0xac>
 8024952:	2a00      	cmp	r2, #0
 8024954:	d03e      	beq.n	80249d4 <_strtod_l+0xc4>
 8024956:	2300      	movs	r3, #0
 8024958:	930a      	str	r3, [sp, #40]	; 0x28
 802495a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802495c:	7833      	ldrb	r3, [r6, #0]
 802495e:	2b30      	cmp	r3, #48	; 0x30
 8024960:	f040 80b0 	bne.w	8024ac4 <_strtod_l+0x1b4>
 8024964:	7873      	ldrb	r3, [r6, #1]
 8024966:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802496a:	2b58      	cmp	r3, #88	; 0x58
 802496c:	d168      	bne.n	8024a40 <_strtod_l+0x130>
 802496e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024970:	9301      	str	r3, [sp, #4]
 8024972:	ab18      	add	r3, sp, #96	; 0x60
 8024974:	9702      	str	r7, [sp, #8]
 8024976:	9300      	str	r3, [sp, #0]
 8024978:	4a8d      	ldr	r2, [pc, #564]	; (8024bb0 <_strtod_l+0x2a0>)
 802497a:	ab19      	add	r3, sp, #100	; 0x64
 802497c:	a917      	add	r1, sp, #92	; 0x5c
 802497e:	4620      	mov	r0, r4
 8024980:	f001 ff52 	bl	8026828 <__gethex>
 8024984:	f010 0707 	ands.w	r7, r0, #7
 8024988:	4605      	mov	r5, r0
 802498a:	d005      	beq.n	8024998 <_strtod_l+0x88>
 802498c:	2f06      	cmp	r7, #6
 802498e:	d12c      	bne.n	80249ea <_strtod_l+0xda>
 8024990:	3601      	adds	r6, #1
 8024992:	2300      	movs	r3, #0
 8024994:	9617      	str	r6, [sp, #92]	; 0x5c
 8024996:	930a      	str	r3, [sp, #40]	; 0x28
 8024998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802499a:	2b00      	cmp	r3, #0
 802499c:	f040 8590 	bne.w	80254c0 <_strtod_l+0xbb0>
 80249a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80249a2:	b1eb      	cbz	r3, 80249e0 <_strtod_l+0xd0>
 80249a4:	4652      	mov	r2, sl
 80249a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80249aa:	ec43 2b10 	vmov	d0, r2, r3
 80249ae:	b01d      	add	sp, #116	; 0x74
 80249b0:	ecbd 8b02 	vpop	{d8}
 80249b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249b8:	2a20      	cmp	r2, #32
 80249ba:	d1cc      	bne.n	8024956 <_strtod_l+0x46>
 80249bc:	3301      	adds	r3, #1
 80249be:	9317      	str	r3, [sp, #92]	; 0x5c
 80249c0:	e7be      	b.n	8024940 <_strtod_l+0x30>
 80249c2:	2a2d      	cmp	r2, #45	; 0x2d
 80249c4:	d1c7      	bne.n	8024956 <_strtod_l+0x46>
 80249c6:	2201      	movs	r2, #1
 80249c8:	920a      	str	r2, [sp, #40]	; 0x28
 80249ca:	1c5a      	adds	r2, r3, #1
 80249cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80249ce:	785b      	ldrb	r3, [r3, #1]
 80249d0:	2b00      	cmp	r3, #0
 80249d2:	d1c2      	bne.n	802495a <_strtod_l+0x4a>
 80249d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80249d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80249da:	2b00      	cmp	r3, #0
 80249dc:	f040 856e 	bne.w	80254bc <_strtod_l+0xbac>
 80249e0:	4652      	mov	r2, sl
 80249e2:	465b      	mov	r3, fp
 80249e4:	e7e1      	b.n	80249aa <_strtod_l+0x9a>
 80249e6:	2200      	movs	r2, #0
 80249e8:	e7ee      	b.n	80249c8 <_strtod_l+0xb8>
 80249ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80249ec:	b13a      	cbz	r2, 80249fe <_strtod_l+0xee>
 80249ee:	2135      	movs	r1, #53	; 0x35
 80249f0:	a81a      	add	r0, sp, #104	; 0x68
 80249f2:	f002 ff26 	bl	8027842 <__copybits>
 80249f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80249f8:	4620      	mov	r0, r4
 80249fa:	f002 fae5 	bl	8026fc8 <_Bfree>
 80249fe:	3f01      	subs	r7, #1
 8024a00:	2f04      	cmp	r7, #4
 8024a02:	d806      	bhi.n	8024a12 <_strtod_l+0x102>
 8024a04:	e8df f007 	tbb	[pc, r7]
 8024a08:	1714030a 	.word	0x1714030a
 8024a0c:	0a          	.byte	0x0a
 8024a0d:	00          	.byte	0x00
 8024a0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8024a12:	0728      	lsls	r0, r5, #28
 8024a14:	d5c0      	bpl.n	8024998 <_strtod_l+0x88>
 8024a16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8024a1a:	e7bd      	b.n	8024998 <_strtod_l+0x88>
 8024a1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8024a20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024a22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8024a26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8024a2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8024a2e:	e7f0      	b.n	8024a12 <_strtod_l+0x102>
 8024a30:	f8df b180 	ldr.w	fp, [pc, #384]	; 8024bb4 <_strtod_l+0x2a4>
 8024a34:	e7ed      	b.n	8024a12 <_strtod_l+0x102>
 8024a36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8024a3a:	f04f 3aff 	mov.w	sl, #4294967295
 8024a3e:	e7e8      	b.n	8024a12 <_strtod_l+0x102>
 8024a40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024a42:	1c5a      	adds	r2, r3, #1
 8024a44:	9217      	str	r2, [sp, #92]	; 0x5c
 8024a46:	785b      	ldrb	r3, [r3, #1]
 8024a48:	2b30      	cmp	r3, #48	; 0x30
 8024a4a:	d0f9      	beq.n	8024a40 <_strtod_l+0x130>
 8024a4c:	2b00      	cmp	r3, #0
 8024a4e:	d0a3      	beq.n	8024998 <_strtod_l+0x88>
 8024a50:	2301      	movs	r3, #1
 8024a52:	f04f 0900 	mov.w	r9, #0
 8024a56:	9304      	str	r3, [sp, #16]
 8024a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024a5a:	9308      	str	r3, [sp, #32]
 8024a5c:	f8cd 901c 	str.w	r9, [sp, #28]
 8024a60:	464f      	mov	r7, r9
 8024a62:	220a      	movs	r2, #10
 8024a64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024a66:	7806      	ldrb	r6, [r0, #0]
 8024a68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8024a6c:	b2d9      	uxtb	r1, r3
 8024a6e:	2909      	cmp	r1, #9
 8024a70:	d92a      	bls.n	8024ac8 <_strtod_l+0x1b8>
 8024a72:	9905      	ldr	r1, [sp, #20]
 8024a74:	462a      	mov	r2, r5
 8024a76:	f7ff ff19 	bl	80248ac <strncmp>
 8024a7a:	b398      	cbz	r0, 8024ae4 <_strtod_l+0x1d4>
 8024a7c:	2000      	movs	r0, #0
 8024a7e:	4632      	mov	r2, r6
 8024a80:	463d      	mov	r5, r7
 8024a82:	9005      	str	r0, [sp, #20]
 8024a84:	4603      	mov	r3, r0
 8024a86:	2a65      	cmp	r2, #101	; 0x65
 8024a88:	d001      	beq.n	8024a8e <_strtod_l+0x17e>
 8024a8a:	2a45      	cmp	r2, #69	; 0x45
 8024a8c:	d118      	bne.n	8024ac0 <_strtod_l+0x1b0>
 8024a8e:	b91d      	cbnz	r5, 8024a98 <_strtod_l+0x188>
 8024a90:	9a04      	ldr	r2, [sp, #16]
 8024a92:	4302      	orrs	r2, r0
 8024a94:	d09e      	beq.n	80249d4 <_strtod_l+0xc4>
 8024a96:	2500      	movs	r5, #0
 8024a98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8024a9c:	f108 0201 	add.w	r2, r8, #1
 8024aa0:	9217      	str	r2, [sp, #92]	; 0x5c
 8024aa2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024aa6:	2a2b      	cmp	r2, #43	; 0x2b
 8024aa8:	d075      	beq.n	8024b96 <_strtod_l+0x286>
 8024aaa:	2a2d      	cmp	r2, #45	; 0x2d
 8024aac:	d07b      	beq.n	8024ba6 <_strtod_l+0x296>
 8024aae:	f04f 0c00 	mov.w	ip, #0
 8024ab2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8024ab6:	2909      	cmp	r1, #9
 8024ab8:	f240 8082 	bls.w	8024bc0 <_strtod_l+0x2b0>
 8024abc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8024ac0:	2600      	movs	r6, #0
 8024ac2:	e09d      	b.n	8024c00 <_strtod_l+0x2f0>
 8024ac4:	2300      	movs	r3, #0
 8024ac6:	e7c4      	b.n	8024a52 <_strtod_l+0x142>
 8024ac8:	2f08      	cmp	r7, #8
 8024aca:	bfd8      	it	le
 8024acc:	9907      	ldrle	r1, [sp, #28]
 8024ace:	f100 0001 	add.w	r0, r0, #1
 8024ad2:	bfda      	itte	le
 8024ad4:	fb02 3301 	mlale	r3, r2, r1, r3
 8024ad8:	9307      	strle	r3, [sp, #28]
 8024ada:	fb02 3909 	mlagt	r9, r2, r9, r3
 8024ade:	3701      	adds	r7, #1
 8024ae0:	9017      	str	r0, [sp, #92]	; 0x5c
 8024ae2:	e7bf      	b.n	8024a64 <_strtod_l+0x154>
 8024ae4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024ae6:	195a      	adds	r2, r3, r5
 8024ae8:	9217      	str	r2, [sp, #92]	; 0x5c
 8024aea:	5d5a      	ldrb	r2, [r3, r5]
 8024aec:	2f00      	cmp	r7, #0
 8024aee:	d037      	beq.n	8024b60 <_strtod_l+0x250>
 8024af0:	9005      	str	r0, [sp, #20]
 8024af2:	463d      	mov	r5, r7
 8024af4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8024af8:	2b09      	cmp	r3, #9
 8024afa:	d912      	bls.n	8024b22 <_strtod_l+0x212>
 8024afc:	2301      	movs	r3, #1
 8024afe:	e7c2      	b.n	8024a86 <_strtod_l+0x176>
 8024b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024b02:	1c5a      	adds	r2, r3, #1
 8024b04:	9217      	str	r2, [sp, #92]	; 0x5c
 8024b06:	785a      	ldrb	r2, [r3, #1]
 8024b08:	3001      	adds	r0, #1
 8024b0a:	2a30      	cmp	r2, #48	; 0x30
 8024b0c:	d0f8      	beq.n	8024b00 <_strtod_l+0x1f0>
 8024b0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8024b12:	2b08      	cmp	r3, #8
 8024b14:	f200 84d9 	bhi.w	80254ca <_strtod_l+0xbba>
 8024b18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024b1a:	9005      	str	r0, [sp, #20]
 8024b1c:	2000      	movs	r0, #0
 8024b1e:	9308      	str	r3, [sp, #32]
 8024b20:	4605      	mov	r5, r0
 8024b22:	3a30      	subs	r2, #48	; 0x30
 8024b24:	f100 0301 	add.w	r3, r0, #1
 8024b28:	d014      	beq.n	8024b54 <_strtod_l+0x244>
 8024b2a:	9905      	ldr	r1, [sp, #20]
 8024b2c:	4419      	add	r1, r3
 8024b2e:	9105      	str	r1, [sp, #20]
 8024b30:	462b      	mov	r3, r5
 8024b32:	eb00 0e05 	add.w	lr, r0, r5
 8024b36:	210a      	movs	r1, #10
 8024b38:	4573      	cmp	r3, lr
 8024b3a:	d113      	bne.n	8024b64 <_strtod_l+0x254>
 8024b3c:	182b      	adds	r3, r5, r0
 8024b3e:	2b08      	cmp	r3, #8
 8024b40:	f105 0501 	add.w	r5, r5, #1
 8024b44:	4405      	add	r5, r0
 8024b46:	dc1c      	bgt.n	8024b82 <_strtod_l+0x272>
 8024b48:	9907      	ldr	r1, [sp, #28]
 8024b4a:	230a      	movs	r3, #10
 8024b4c:	fb03 2301 	mla	r3, r3, r1, r2
 8024b50:	9307      	str	r3, [sp, #28]
 8024b52:	2300      	movs	r3, #0
 8024b54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024b56:	1c51      	adds	r1, r2, #1
 8024b58:	9117      	str	r1, [sp, #92]	; 0x5c
 8024b5a:	7852      	ldrb	r2, [r2, #1]
 8024b5c:	4618      	mov	r0, r3
 8024b5e:	e7c9      	b.n	8024af4 <_strtod_l+0x1e4>
 8024b60:	4638      	mov	r0, r7
 8024b62:	e7d2      	b.n	8024b0a <_strtod_l+0x1fa>
 8024b64:	2b08      	cmp	r3, #8
 8024b66:	dc04      	bgt.n	8024b72 <_strtod_l+0x262>
 8024b68:	9e07      	ldr	r6, [sp, #28]
 8024b6a:	434e      	muls	r6, r1
 8024b6c:	9607      	str	r6, [sp, #28]
 8024b6e:	3301      	adds	r3, #1
 8024b70:	e7e2      	b.n	8024b38 <_strtod_l+0x228>
 8024b72:	f103 0c01 	add.w	ip, r3, #1
 8024b76:	f1bc 0f10 	cmp.w	ip, #16
 8024b7a:	bfd8      	it	le
 8024b7c:	fb01 f909 	mulle.w	r9, r1, r9
 8024b80:	e7f5      	b.n	8024b6e <_strtod_l+0x25e>
 8024b82:	2d10      	cmp	r5, #16
 8024b84:	bfdc      	itt	le
 8024b86:	230a      	movle	r3, #10
 8024b88:	fb03 2909 	mlale	r9, r3, r9, r2
 8024b8c:	e7e1      	b.n	8024b52 <_strtod_l+0x242>
 8024b8e:	2300      	movs	r3, #0
 8024b90:	9305      	str	r3, [sp, #20]
 8024b92:	2301      	movs	r3, #1
 8024b94:	e77c      	b.n	8024a90 <_strtod_l+0x180>
 8024b96:	f04f 0c00 	mov.w	ip, #0
 8024b9a:	f108 0202 	add.w	r2, r8, #2
 8024b9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8024ba0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8024ba4:	e785      	b.n	8024ab2 <_strtod_l+0x1a2>
 8024ba6:	f04f 0c01 	mov.w	ip, #1
 8024baa:	e7f6      	b.n	8024b9a <_strtod_l+0x28a>
 8024bac:	0802a544 	.word	0x0802a544
 8024bb0:	0802a298 	.word	0x0802a298
 8024bb4:	7ff00000 	.word	0x7ff00000
 8024bb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024bba:	1c51      	adds	r1, r2, #1
 8024bbc:	9117      	str	r1, [sp, #92]	; 0x5c
 8024bbe:	7852      	ldrb	r2, [r2, #1]
 8024bc0:	2a30      	cmp	r2, #48	; 0x30
 8024bc2:	d0f9      	beq.n	8024bb8 <_strtod_l+0x2a8>
 8024bc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8024bc8:	2908      	cmp	r1, #8
 8024bca:	f63f af79 	bhi.w	8024ac0 <_strtod_l+0x1b0>
 8024bce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8024bd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024bd4:	9206      	str	r2, [sp, #24]
 8024bd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024bd8:	1c51      	adds	r1, r2, #1
 8024bda:	9117      	str	r1, [sp, #92]	; 0x5c
 8024bdc:	7852      	ldrb	r2, [r2, #1]
 8024bde:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8024be2:	2e09      	cmp	r6, #9
 8024be4:	d937      	bls.n	8024c56 <_strtod_l+0x346>
 8024be6:	9e06      	ldr	r6, [sp, #24]
 8024be8:	1b89      	subs	r1, r1, r6
 8024bea:	2908      	cmp	r1, #8
 8024bec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8024bf0:	dc02      	bgt.n	8024bf8 <_strtod_l+0x2e8>
 8024bf2:	4576      	cmp	r6, lr
 8024bf4:	bfa8      	it	ge
 8024bf6:	4676      	movge	r6, lr
 8024bf8:	f1bc 0f00 	cmp.w	ip, #0
 8024bfc:	d000      	beq.n	8024c00 <_strtod_l+0x2f0>
 8024bfe:	4276      	negs	r6, r6
 8024c00:	2d00      	cmp	r5, #0
 8024c02:	d14d      	bne.n	8024ca0 <_strtod_l+0x390>
 8024c04:	9904      	ldr	r1, [sp, #16]
 8024c06:	4301      	orrs	r1, r0
 8024c08:	f47f aec6 	bne.w	8024998 <_strtod_l+0x88>
 8024c0c:	2b00      	cmp	r3, #0
 8024c0e:	f47f aee1 	bne.w	80249d4 <_strtod_l+0xc4>
 8024c12:	2a69      	cmp	r2, #105	; 0x69
 8024c14:	d027      	beq.n	8024c66 <_strtod_l+0x356>
 8024c16:	dc24      	bgt.n	8024c62 <_strtod_l+0x352>
 8024c18:	2a49      	cmp	r2, #73	; 0x49
 8024c1a:	d024      	beq.n	8024c66 <_strtod_l+0x356>
 8024c1c:	2a4e      	cmp	r2, #78	; 0x4e
 8024c1e:	f47f aed9 	bne.w	80249d4 <_strtod_l+0xc4>
 8024c22:	499f      	ldr	r1, [pc, #636]	; (8024ea0 <_strtod_l+0x590>)
 8024c24:	a817      	add	r0, sp, #92	; 0x5c
 8024c26:	f002 f857 	bl	8026cd8 <__match>
 8024c2a:	2800      	cmp	r0, #0
 8024c2c:	f43f aed2 	beq.w	80249d4 <_strtod_l+0xc4>
 8024c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024c32:	781b      	ldrb	r3, [r3, #0]
 8024c34:	2b28      	cmp	r3, #40	; 0x28
 8024c36:	d12d      	bne.n	8024c94 <_strtod_l+0x384>
 8024c38:	499a      	ldr	r1, [pc, #616]	; (8024ea4 <_strtod_l+0x594>)
 8024c3a:	aa1a      	add	r2, sp, #104	; 0x68
 8024c3c:	a817      	add	r0, sp, #92	; 0x5c
 8024c3e:	f002 f85f 	bl	8026d00 <__hexnan>
 8024c42:	2805      	cmp	r0, #5
 8024c44:	d126      	bne.n	8024c94 <_strtod_l+0x384>
 8024c46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024c48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8024c4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8024c50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8024c54:	e6a0      	b.n	8024998 <_strtod_l+0x88>
 8024c56:	210a      	movs	r1, #10
 8024c58:	fb01 2e0e 	mla	lr, r1, lr, r2
 8024c5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8024c60:	e7b9      	b.n	8024bd6 <_strtod_l+0x2c6>
 8024c62:	2a6e      	cmp	r2, #110	; 0x6e
 8024c64:	e7db      	b.n	8024c1e <_strtod_l+0x30e>
 8024c66:	4990      	ldr	r1, [pc, #576]	; (8024ea8 <_strtod_l+0x598>)
 8024c68:	a817      	add	r0, sp, #92	; 0x5c
 8024c6a:	f002 f835 	bl	8026cd8 <__match>
 8024c6e:	2800      	cmp	r0, #0
 8024c70:	f43f aeb0 	beq.w	80249d4 <_strtod_l+0xc4>
 8024c74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024c76:	498d      	ldr	r1, [pc, #564]	; (8024eac <_strtod_l+0x59c>)
 8024c78:	3b01      	subs	r3, #1
 8024c7a:	a817      	add	r0, sp, #92	; 0x5c
 8024c7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8024c7e:	f002 f82b 	bl	8026cd8 <__match>
 8024c82:	b910      	cbnz	r0, 8024c8a <_strtod_l+0x37a>
 8024c84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024c86:	3301      	adds	r3, #1
 8024c88:	9317      	str	r3, [sp, #92]	; 0x5c
 8024c8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8024ebc <_strtod_l+0x5ac>
 8024c8e:	f04f 0a00 	mov.w	sl, #0
 8024c92:	e681      	b.n	8024998 <_strtod_l+0x88>
 8024c94:	4886      	ldr	r0, [pc, #536]	; (8024eb0 <_strtod_l+0x5a0>)
 8024c96:	f7fe fda7 	bl	80237e8 <nan>
 8024c9a:	ec5b ab10 	vmov	sl, fp, d0
 8024c9e:	e67b      	b.n	8024998 <_strtod_l+0x88>
 8024ca0:	9b05      	ldr	r3, [sp, #20]
 8024ca2:	9807      	ldr	r0, [sp, #28]
 8024ca4:	1af3      	subs	r3, r6, r3
 8024ca6:	2f00      	cmp	r7, #0
 8024ca8:	bf08      	it	eq
 8024caa:	462f      	moveq	r7, r5
 8024cac:	2d10      	cmp	r5, #16
 8024cae:	9306      	str	r3, [sp, #24]
 8024cb0:	46a8      	mov	r8, r5
 8024cb2:	bfa8      	it	ge
 8024cb4:	f04f 0810 	movge.w	r8, #16
 8024cb8:	f7db fc2e 	bl	8000518 <__aeabi_ui2d>
 8024cbc:	2d09      	cmp	r5, #9
 8024cbe:	4682      	mov	sl, r0
 8024cc0:	468b      	mov	fp, r1
 8024cc2:	dd13      	ble.n	8024cec <_strtod_l+0x3dc>
 8024cc4:	4b7b      	ldr	r3, [pc, #492]	; (8024eb4 <_strtod_l+0x5a4>)
 8024cc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8024cca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8024cce:	f7db fc9d 	bl	800060c <__aeabi_dmul>
 8024cd2:	4682      	mov	sl, r0
 8024cd4:	4648      	mov	r0, r9
 8024cd6:	468b      	mov	fp, r1
 8024cd8:	f7db fc1e 	bl	8000518 <__aeabi_ui2d>
 8024cdc:	4602      	mov	r2, r0
 8024cde:	460b      	mov	r3, r1
 8024ce0:	4650      	mov	r0, sl
 8024ce2:	4659      	mov	r1, fp
 8024ce4:	f7db fadc 	bl	80002a0 <__adddf3>
 8024ce8:	4682      	mov	sl, r0
 8024cea:	468b      	mov	fp, r1
 8024cec:	2d0f      	cmp	r5, #15
 8024cee:	dc38      	bgt.n	8024d62 <_strtod_l+0x452>
 8024cf0:	9b06      	ldr	r3, [sp, #24]
 8024cf2:	2b00      	cmp	r3, #0
 8024cf4:	f43f ae50 	beq.w	8024998 <_strtod_l+0x88>
 8024cf8:	dd24      	ble.n	8024d44 <_strtod_l+0x434>
 8024cfa:	2b16      	cmp	r3, #22
 8024cfc:	dc0b      	bgt.n	8024d16 <_strtod_l+0x406>
 8024cfe:	496d      	ldr	r1, [pc, #436]	; (8024eb4 <_strtod_l+0x5a4>)
 8024d00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8024d04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024d08:	4652      	mov	r2, sl
 8024d0a:	465b      	mov	r3, fp
 8024d0c:	f7db fc7e 	bl	800060c <__aeabi_dmul>
 8024d10:	4682      	mov	sl, r0
 8024d12:	468b      	mov	fp, r1
 8024d14:	e640      	b.n	8024998 <_strtod_l+0x88>
 8024d16:	9a06      	ldr	r2, [sp, #24]
 8024d18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8024d1c:	4293      	cmp	r3, r2
 8024d1e:	db20      	blt.n	8024d62 <_strtod_l+0x452>
 8024d20:	4c64      	ldr	r4, [pc, #400]	; (8024eb4 <_strtod_l+0x5a4>)
 8024d22:	f1c5 050f 	rsb	r5, r5, #15
 8024d26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8024d2a:	4652      	mov	r2, sl
 8024d2c:	465b      	mov	r3, fp
 8024d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024d32:	f7db fc6b 	bl	800060c <__aeabi_dmul>
 8024d36:	9b06      	ldr	r3, [sp, #24]
 8024d38:	1b5d      	subs	r5, r3, r5
 8024d3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8024d3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8024d42:	e7e3      	b.n	8024d0c <_strtod_l+0x3fc>
 8024d44:	9b06      	ldr	r3, [sp, #24]
 8024d46:	3316      	adds	r3, #22
 8024d48:	db0b      	blt.n	8024d62 <_strtod_l+0x452>
 8024d4a:	9b05      	ldr	r3, [sp, #20]
 8024d4c:	1b9e      	subs	r6, r3, r6
 8024d4e:	4b59      	ldr	r3, [pc, #356]	; (8024eb4 <_strtod_l+0x5a4>)
 8024d50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8024d54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8024d58:	4650      	mov	r0, sl
 8024d5a:	4659      	mov	r1, fp
 8024d5c:	f7db fd80 	bl	8000860 <__aeabi_ddiv>
 8024d60:	e7d6      	b.n	8024d10 <_strtod_l+0x400>
 8024d62:	9b06      	ldr	r3, [sp, #24]
 8024d64:	eba5 0808 	sub.w	r8, r5, r8
 8024d68:	4498      	add	r8, r3
 8024d6a:	f1b8 0f00 	cmp.w	r8, #0
 8024d6e:	dd74      	ble.n	8024e5a <_strtod_l+0x54a>
 8024d70:	f018 030f 	ands.w	r3, r8, #15
 8024d74:	d00a      	beq.n	8024d8c <_strtod_l+0x47c>
 8024d76:	494f      	ldr	r1, [pc, #316]	; (8024eb4 <_strtod_l+0x5a4>)
 8024d78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8024d7c:	4652      	mov	r2, sl
 8024d7e:	465b      	mov	r3, fp
 8024d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024d84:	f7db fc42 	bl	800060c <__aeabi_dmul>
 8024d88:	4682      	mov	sl, r0
 8024d8a:	468b      	mov	fp, r1
 8024d8c:	f038 080f 	bics.w	r8, r8, #15
 8024d90:	d04f      	beq.n	8024e32 <_strtod_l+0x522>
 8024d92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8024d96:	dd22      	ble.n	8024dde <_strtod_l+0x4ce>
 8024d98:	2500      	movs	r5, #0
 8024d9a:	462e      	mov	r6, r5
 8024d9c:	9507      	str	r5, [sp, #28]
 8024d9e:	9505      	str	r5, [sp, #20]
 8024da0:	2322      	movs	r3, #34	; 0x22
 8024da2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8024ebc <_strtod_l+0x5ac>
 8024da6:	6023      	str	r3, [r4, #0]
 8024da8:	f04f 0a00 	mov.w	sl, #0
 8024dac:	9b07      	ldr	r3, [sp, #28]
 8024dae:	2b00      	cmp	r3, #0
 8024db0:	f43f adf2 	beq.w	8024998 <_strtod_l+0x88>
 8024db4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024db6:	4620      	mov	r0, r4
 8024db8:	f002 f906 	bl	8026fc8 <_Bfree>
 8024dbc:	9905      	ldr	r1, [sp, #20]
 8024dbe:	4620      	mov	r0, r4
 8024dc0:	f002 f902 	bl	8026fc8 <_Bfree>
 8024dc4:	4631      	mov	r1, r6
 8024dc6:	4620      	mov	r0, r4
 8024dc8:	f002 f8fe 	bl	8026fc8 <_Bfree>
 8024dcc:	9907      	ldr	r1, [sp, #28]
 8024dce:	4620      	mov	r0, r4
 8024dd0:	f002 f8fa 	bl	8026fc8 <_Bfree>
 8024dd4:	4629      	mov	r1, r5
 8024dd6:	4620      	mov	r0, r4
 8024dd8:	f002 f8f6 	bl	8026fc8 <_Bfree>
 8024ddc:	e5dc      	b.n	8024998 <_strtod_l+0x88>
 8024dde:	4b36      	ldr	r3, [pc, #216]	; (8024eb8 <_strtod_l+0x5a8>)
 8024de0:	9304      	str	r3, [sp, #16]
 8024de2:	2300      	movs	r3, #0
 8024de4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8024de8:	4650      	mov	r0, sl
 8024dea:	4659      	mov	r1, fp
 8024dec:	4699      	mov	r9, r3
 8024dee:	f1b8 0f01 	cmp.w	r8, #1
 8024df2:	dc21      	bgt.n	8024e38 <_strtod_l+0x528>
 8024df4:	b10b      	cbz	r3, 8024dfa <_strtod_l+0x4ea>
 8024df6:	4682      	mov	sl, r0
 8024df8:	468b      	mov	fp, r1
 8024dfa:	4b2f      	ldr	r3, [pc, #188]	; (8024eb8 <_strtod_l+0x5a8>)
 8024dfc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8024e00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8024e04:	4652      	mov	r2, sl
 8024e06:	465b      	mov	r3, fp
 8024e08:	e9d9 0100 	ldrd	r0, r1, [r9]
 8024e0c:	f7db fbfe 	bl	800060c <__aeabi_dmul>
 8024e10:	4b2a      	ldr	r3, [pc, #168]	; (8024ebc <_strtod_l+0x5ac>)
 8024e12:	460a      	mov	r2, r1
 8024e14:	400b      	ands	r3, r1
 8024e16:	492a      	ldr	r1, [pc, #168]	; (8024ec0 <_strtod_l+0x5b0>)
 8024e18:	428b      	cmp	r3, r1
 8024e1a:	4682      	mov	sl, r0
 8024e1c:	d8bc      	bhi.n	8024d98 <_strtod_l+0x488>
 8024e1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8024e22:	428b      	cmp	r3, r1
 8024e24:	bf86      	itte	hi
 8024e26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8024ec4 <_strtod_l+0x5b4>
 8024e2a:	f04f 3aff 	movhi.w	sl, #4294967295
 8024e2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8024e32:	2300      	movs	r3, #0
 8024e34:	9304      	str	r3, [sp, #16]
 8024e36:	e084      	b.n	8024f42 <_strtod_l+0x632>
 8024e38:	f018 0f01 	tst.w	r8, #1
 8024e3c:	d005      	beq.n	8024e4a <_strtod_l+0x53a>
 8024e3e:	9b04      	ldr	r3, [sp, #16]
 8024e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e44:	f7db fbe2 	bl	800060c <__aeabi_dmul>
 8024e48:	2301      	movs	r3, #1
 8024e4a:	9a04      	ldr	r2, [sp, #16]
 8024e4c:	3208      	adds	r2, #8
 8024e4e:	f109 0901 	add.w	r9, r9, #1
 8024e52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8024e56:	9204      	str	r2, [sp, #16]
 8024e58:	e7c9      	b.n	8024dee <_strtod_l+0x4de>
 8024e5a:	d0ea      	beq.n	8024e32 <_strtod_l+0x522>
 8024e5c:	f1c8 0800 	rsb	r8, r8, #0
 8024e60:	f018 020f 	ands.w	r2, r8, #15
 8024e64:	d00a      	beq.n	8024e7c <_strtod_l+0x56c>
 8024e66:	4b13      	ldr	r3, [pc, #76]	; (8024eb4 <_strtod_l+0x5a4>)
 8024e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024e6c:	4650      	mov	r0, sl
 8024e6e:	4659      	mov	r1, fp
 8024e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e74:	f7db fcf4 	bl	8000860 <__aeabi_ddiv>
 8024e78:	4682      	mov	sl, r0
 8024e7a:	468b      	mov	fp, r1
 8024e7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8024e80:	d0d7      	beq.n	8024e32 <_strtod_l+0x522>
 8024e82:	f1b8 0f1f 	cmp.w	r8, #31
 8024e86:	dd1f      	ble.n	8024ec8 <_strtod_l+0x5b8>
 8024e88:	2500      	movs	r5, #0
 8024e8a:	462e      	mov	r6, r5
 8024e8c:	9507      	str	r5, [sp, #28]
 8024e8e:	9505      	str	r5, [sp, #20]
 8024e90:	2322      	movs	r3, #34	; 0x22
 8024e92:	f04f 0a00 	mov.w	sl, #0
 8024e96:	f04f 0b00 	mov.w	fp, #0
 8024e9a:	6023      	str	r3, [r4, #0]
 8024e9c:	e786      	b.n	8024dac <_strtod_l+0x49c>
 8024e9e:	bf00      	nop
 8024ea0:	0802a26e 	.word	0x0802a26e
 8024ea4:	0802a2ac 	.word	0x0802a2ac
 8024ea8:	0802a266 	.word	0x0802a266
 8024eac:	0802a3ec 	.word	0x0802a3ec
 8024eb0:	0802a24b 	.word	0x0802a24b
 8024eb4:	0802a5e0 	.word	0x0802a5e0
 8024eb8:	0802a5b8 	.word	0x0802a5b8
 8024ebc:	7ff00000 	.word	0x7ff00000
 8024ec0:	7ca00000 	.word	0x7ca00000
 8024ec4:	7fefffff 	.word	0x7fefffff
 8024ec8:	f018 0310 	ands.w	r3, r8, #16
 8024ecc:	bf18      	it	ne
 8024ece:	236a      	movne	r3, #106	; 0x6a
 8024ed0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8025280 <_strtod_l+0x970>
 8024ed4:	9304      	str	r3, [sp, #16]
 8024ed6:	4650      	mov	r0, sl
 8024ed8:	4659      	mov	r1, fp
 8024eda:	2300      	movs	r3, #0
 8024edc:	f018 0f01 	tst.w	r8, #1
 8024ee0:	d004      	beq.n	8024eec <_strtod_l+0x5dc>
 8024ee2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8024ee6:	f7db fb91 	bl	800060c <__aeabi_dmul>
 8024eea:	2301      	movs	r3, #1
 8024eec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8024ef0:	f109 0908 	add.w	r9, r9, #8
 8024ef4:	d1f2      	bne.n	8024edc <_strtod_l+0x5cc>
 8024ef6:	b10b      	cbz	r3, 8024efc <_strtod_l+0x5ec>
 8024ef8:	4682      	mov	sl, r0
 8024efa:	468b      	mov	fp, r1
 8024efc:	9b04      	ldr	r3, [sp, #16]
 8024efe:	b1c3      	cbz	r3, 8024f32 <_strtod_l+0x622>
 8024f00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8024f04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8024f08:	2b00      	cmp	r3, #0
 8024f0a:	4659      	mov	r1, fp
 8024f0c:	dd11      	ble.n	8024f32 <_strtod_l+0x622>
 8024f0e:	2b1f      	cmp	r3, #31
 8024f10:	f340 8124 	ble.w	802515c <_strtod_l+0x84c>
 8024f14:	2b34      	cmp	r3, #52	; 0x34
 8024f16:	bfde      	ittt	le
 8024f18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8024f1c:	f04f 33ff 	movle.w	r3, #4294967295
 8024f20:	fa03 f202 	lslle.w	r2, r3, r2
 8024f24:	f04f 0a00 	mov.w	sl, #0
 8024f28:	bfcc      	ite	gt
 8024f2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8024f2e:	ea02 0b01 	andle.w	fp, r2, r1
 8024f32:	2200      	movs	r2, #0
 8024f34:	2300      	movs	r3, #0
 8024f36:	4650      	mov	r0, sl
 8024f38:	4659      	mov	r1, fp
 8024f3a:	f7db fdcf 	bl	8000adc <__aeabi_dcmpeq>
 8024f3e:	2800      	cmp	r0, #0
 8024f40:	d1a2      	bne.n	8024e88 <_strtod_l+0x578>
 8024f42:	9b07      	ldr	r3, [sp, #28]
 8024f44:	9300      	str	r3, [sp, #0]
 8024f46:	9908      	ldr	r1, [sp, #32]
 8024f48:	462b      	mov	r3, r5
 8024f4a:	463a      	mov	r2, r7
 8024f4c:	4620      	mov	r0, r4
 8024f4e:	f002 f8a3 	bl	8027098 <__s2b>
 8024f52:	9007      	str	r0, [sp, #28]
 8024f54:	2800      	cmp	r0, #0
 8024f56:	f43f af1f 	beq.w	8024d98 <_strtod_l+0x488>
 8024f5a:	9b05      	ldr	r3, [sp, #20]
 8024f5c:	1b9e      	subs	r6, r3, r6
 8024f5e:	9b06      	ldr	r3, [sp, #24]
 8024f60:	2b00      	cmp	r3, #0
 8024f62:	bfb4      	ite	lt
 8024f64:	4633      	movlt	r3, r6
 8024f66:	2300      	movge	r3, #0
 8024f68:	930c      	str	r3, [sp, #48]	; 0x30
 8024f6a:	9b06      	ldr	r3, [sp, #24]
 8024f6c:	2500      	movs	r5, #0
 8024f6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024f72:	9312      	str	r3, [sp, #72]	; 0x48
 8024f74:	462e      	mov	r6, r5
 8024f76:	9b07      	ldr	r3, [sp, #28]
 8024f78:	4620      	mov	r0, r4
 8024f7a:	6859      	ldr	r1, [r3, #4]
 8024f7c:	f001 ffe4 	bl	8026f48 <_Balloc>
 8024f80:	9005      	str	r0, [sp, #20]
 8024f82:	2800      	cmp	r0, #0
 8024f84:	f43f af0c 	beq.w	8024da0 <_strtod_l+0x490>
 8024f88:	9b07      	ldr	r3, [sp, #28]
 8024f8a:	691a      	ldr	r2, [r3, #16]
 8024f8c:	3202      	adds	r2, #2
 8024f8e:	f103 010c 	add.w	r1, r3, #12
 8024f92:	0092      	lsls	r2, r2, #2
 8024f94:	300c      	adds	r0, #12
 8024f96:	f7fe fd4b 	bl	8023a30 <memcpy>
 8024f9a:	ec4b ab10 	vmov	d0, sl, fp
 8024f9e:	aa1a      	add	r2, sp, #104	; 0x68
 8024fa0:	a919      	add	r1, sp, #100	; 0x64
 8024fa2:	4620      	mov	r0, r4
 8024fa4:	f002 fbbe 	bl	8027724 <__d2b>
 8024fa8:	ec4b ab18 	vmov	d8, sl, fp
 8024fac:	9018      	str	r0, [sp, #96]	; 0x60
 8024fae:	2800      	cmp	r0, #0
 8024fb0:	f43f aef6 	beq.w	8024da0 <_strtod_l+0x490>
 8024fb4:	2101      	movs	r1, #1
 8024fb6:	4620      	mov	r0, r4
 8024fb8:	f002 f908 	bl	80271cc <__i2b>
 8024fbc:	4606      	mov	r6, r0
 8024fbe:	2800      	cmp	r0, #0
 8024fc0:	f43f aeee 	beq.w	8024da0 <_strtod_l+0x490>
 8024fc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024fc6:	9904      	ldr	r1, [sp, #16]
 8024fc8:	2b00      	cmp	r3, #0
 8024fca:	bfab      	itete	ge
 8024fcc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8024fce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8024fd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8024fd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8024fd6:	bfac      	ite	ge
 8024fd8:	eb03 0902 	addge.w	r9, r3, r2
 8024fdc:	1ad7      	sublt	r7, r2, r3
 8024fde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8024fe0:	eba3 0801 	sub.w	r8, r3, r1
 8024fe4:	4490      	add	r8, r2
 8024fe6:	4ba1      	ldr	r3, [pc, #644]	; (802526c <_strtod_l+0x95c>)
 8024fe8:	f108 38ff 	add.w	r8, r8, #4294967295
 8024fec:	4598      	cmp	r8, r3
 8024fee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8024ff2:	f280 80c7 	bge.w	8025184 <_strtod_l+0x874>
 8024ff6:	eba3 0308 	sub.w	r3, r3, r8
 8024ffa:	2b1f      	cmp	r3, #31
 8024ffc:	eba2 0203 	sub.w	r2, r2, r3
 8025000:	f04f 0101 	mov.w	r1, #1
 8025004:	f300 80b1 	bgt.w	802516a <_strtod_l+0x85a>
 8025008:	fa01 f303 	lsl.w	r3, r1, r3
 802500c:	930d      	str	r3, [sp, #52]	; 0x34
 802500e:	2300      	movs	r3, #0
 8025010:	9308      	str	r3, [sp, #32]
 8025012:	eb09 0802 	add.w	r8, r9, r2
 8025016:	9b04      	ldr	r3, [sp, #16]
 8025018:	45c1      	cmp	r9, r8
 802501a:	4417      	add	r7, r2
 802501c:	441f      	add	r7, r3
 802501e:	464b      	mov	r3, r9
 8025020:	bfa8      	it	ge
 8025022:	4643      	movge	r3, r8
 8025024:	42bb      	cmp	r3, r7
 8025026:	bfa8      	it	ge
 8025028:	463b      	movge	r3, r7
 802502a:	2b00      	cmp	r3, #0
 802502c:	bfc2      	ittt	gt
 802502e:	eba8 0803 	subgt.w	r8, r8, r3
 8025032:	1aff      	subgt	r7, r7, r3
 8025034:	eba9 0903 	subgt.w	r9, r9, r3
 8025038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802503a:	2b00      	cmp	r3, #0
 802503c:	dd17      	ble.n	802506e <_strtod_l+0x75e>
 802503e:	4631      	mov	r1, r6
 8025040:	461a      	mov	r2, r3
 8025042:	4620      	mov	r0, r4
 8025044:	f002 f982 	bl	802734c <__pow5mult>
 8025048:	4606      	mov	r6, r0
 802504a:	2800      	cmp	r0, #0
 802504c:	f43f aea8 	beq.w	8024da0 <_strtod_l+0x490>
 8025050:	4601      	mov	r1, r0
 8025052:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025054:	4620      	mov	r0, r4
 8025056:	f002 f8cf 	bl	80271f8 <__multiply>
 802505a:	900b      	str	r0, [sp, #44]	; 0x2c
 802505c:	2800      	cmp	r0, #0
 802505e:	f43f ae9f 	beq.w	8024da0 <_strtod_l+0x490>
 8025062:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025064:	4620      	mov	r0, r4
 8025066:	f001 ffaf 	bl	8026fc8 <_Bfree>
 802506a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802506c:	9318      	str	r3, [sp, #96]	; 0x60
 802506e:	f1b8 0f00 	cmp.w	r8, #0
 8025072:	f300 808c 	bgt.w	802518e <_strtod_l+0x87e>
 8025076:	9b06      	ldr	r3, [sp, #24]
 8025078:	2b00      	cmp	r3, #0
 802507a:	dd08      	ble.n	802508e <_strtod_l+0x77e>
 802507c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802507e:	9905      	ldr	r1, [sp, #20]
 8025080:	4620      	mov	r0, r4
 8025082:	f002 f963 	bl	802734c <__pow5mult>
 8025086:	9005      	str	r0, [sp, #20]
 8025088:	2800      	cmp	r0, #0
 802508a:	f43f ae89 	beq.w	8024da0 <_strtod_l+0x490>
 802508e:	2f00      	cmp	r7, #0
 8025090:	dd08      	ble.n	80250a4 <_strtod_l+0x794>
 8025092:	9905      	ldr	r1, [sp, #20]
 8025094:	463a      	mov	r2, r7
 8025096:	4620      	mov	r0, r4
 8025098:	f002 f9b2 	bl	8027400 <__lshift>
 802509c:	9005      	str	r0, [sp, #20]
 802509e:	2800      	cmp	r0, #0
 80250a0:	f43f ae7e 	beq.w	8024da0 <_strtod_l+0x490>
 80250a4:	f1b9 0f00 	cmp.w	r9, #0
 80250a8:	dd08      	ble.n	80250bc <_strtod_l+0x7ac>
 80250aa:	4631      	mov	r1, r6
 80250ac:	464a      	mov	r2, r9
 80250ae:	4620      	mov	r0, r4
 80250b0:	f002 f9a6 	bl	8027400 <__lshift>
 80250b4:	4606      	mov	r6, r0
 80250b6:	2800      	cmp	r0, #0
 80250b8:	f43f ae72 	beq.w	8024da0 <_strtod_l+0x490>
 80250bc:	9a05      	ldr	r2, [sp, #20]
 80250be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80250c0:	4620      	mov	r0, r4
 80250c2:	f002 fa29 	bl	8027518 <__mdiff>
 80250c6:	4605      	mov	r5, r0
 80250c8:	2800      	cmp	r0, #0
 80250ca:	f43f ae69 	beq.w	8024da0 <_strtod_l+0x490>
 80250ce:	68c3      	ldr	r3, [r0, #12]
 80250d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80250d2:	2300      	movs	r3, #0
 80250d4:	60c3      	str	r3, [r0, #12]
 80250d6:	4631      	mov	r1, r6
 80250d8:	f002 fa02 	bl	80274e0 <__mcmp>
 80250dc:	2800      	cmp	r0, #0
 80250de:	da60      	bge.n	80251a2 <_strtod_l+0x892>
 80250e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250e2:	ea53 030a 	orrs.w	r3, r3, sl
 80250e6:	f040 8082 	bne.w	80251ee <_strtod_l+0x8de>
 80250ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80250ee:	2b00      	cmp	r3, #0
 80250f0:	d17d      	bne.n	80251ee <_strtod_l+0x8de>
 80250f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80250f6:	0d1b      	lsrs	r3, r3, #20
 80250f8:	051b      	lsls	r3, r3, #20
 80250fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80250fe:	d976      	bls.n	80251ee <_strtod_l+0x8de>
 8025100:	696b      	ldr	r3, [r5, #20]
 8025102:	b913      	cbnz	r3, 802510a <_strtod_l+0x7fa>
 8025104:	692b      	ldr	r3, [r5, #16]
 8025106:	2b01      	cmp	r3, #1
 8025108:	dd71      	ble.n	80251ee <_strtod_l+0x8de>
 802510a:	4629      	mov	r1, r5
 802510c:	2201      	movs	r2, #1
 802510e:	4620      	mov	r0, r4
 8025110:	f002 f976 	bl	8027400 <__lshift>
 8025114:	4631      	mov	r1, r6
 8025116:	4605      	mov	r5, r0
 8025118:	f002 f9e2 	bl	80274e0 <__mcmp>
 802511c:	2800      	cmp	r0, #0
 802511e:	dd66      	ble.n	80251ee <_strtod_l+0x8de>
 8025120:	9904      	ldr	r1, [sp, #16]
 8025122:	4a53      	ldr	r2, [pc, #332]	; (8025270 <_strtod_l+0x960>)
 8025124:	465b      	mov	r3, fp
 8025126:	2900      	cmp	r1, #0
 8025128:	f000 8081 	beq.w	802522e <_strtod_l+0x91e>
 802512c:	ea02 010b 	and.w	r1, r2, fp
 8025130:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8025134:	dc7b      	bgt.n	802522e <_strtod_l+0x91e>
 8025136:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802513a:	f77f aea9 	ble.w	8024e90 <_strtod_l+0x580>
 802513e:	4b4d      	ldr	r3, [pc, #308]	; (8025274 <_strtod_l+0x964>)
 8025140:	4650      	mov	r0, sl
 8025142:	4659      	mov	r1, fp
 8025144:	2200      	movs	r2, #0
 8025146:	f7db fa61 	bl	800060c <__aeabi_dmul>
 802514a:	460b      	mov	r3, r1
 802514c:	4303      	orrs	r3, r0
 802514e:	bf08      	it	eq
 8025150:	2322      	moveq	r3, #34	; 0x22
 8025152:	4682      	mov	sl, r0
 8025154:	468b      	mov	fp, r1
 8025156:	bf08      	it	eq
 8025158:	6023      	streq	r3, [r4, #0]
 802515a:	e62b      	b.n	8024db4 <_strtod_l+0x4a4>
 802515c:	f04f 32ff 	mov.w	r2, #4294967295
 8025160:	fa02 f303 	lsl.w	r3, r2, r3
 8025164:	ea03 0a0a 	and.w	sl, r3, sl
 8025168:	e6e3      	b.n	8024f32 <_strtod_l+0x622>
 802516a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 802516e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8025172:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8025176:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 802517a:	fa01 f308 	lsl.w	r3, r1, r8
 802517e:	9308      	str	r3, [sp, #32]
 8025180:	910d      	str	r1, [sp, #52]	; 0x34
 8025182:	e746      	b.n	8025012 <_strtod_l+0x702>
 8025184:	2300      	movs	r3, #0
 8025186:	9308      	str	r3, [sp, #32]
 8025188:	2301      	movs	r3, #1
 802518a:	930d      	str	r3, [sp, #52]	; 0x34
 802518c:	e741      	b.n	8025012 <_strtod_l+0x702>
 802518e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025190:	4642      	mov	r2, r8
 8025192:	4620      	mov	r0, r4
 8025194:	f002 f934 	bl	8027400 <__lshift>
 8025198:	9018      	str	r0, [sp, #96]	; 0x60
 802519a:	2800      	cmp	r0, #0
 802519c:	f47f af6b 	bne.w	8025076 <_strtod_l+0x766>
 80251a0:	e5fe      	b.n	8024da0 <_strtod_l+0x490>
 80251a2:	465f      	mov	r7, fp
 80251a4:	d16e      	bne.n	8025284 <_strtod_l+0x974>
 80251a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80251a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80251ac:	b342      	cbz	r2, 8025200 <_strtod_l+0x8f0>
 80251ae:	4a32      	ldr	r2, [pc, #200]	; (8025278 <_strtod_l+0x968>)
 80251b0:	4293      	cmp	r3, r2
 80251b2:	d128      	bne.n	8025206 <_strtod_l+0x8f6>
 80251b4:	9b04      	ldr	r3, [sp, #16]
 80251b6:	4651      	mov	r1, sl
 80251b8:	b1eb      	cbz	r3, 80251f6 <_strtod_l+0x8e6>
 80251ba:	4b2d      	ldr	r3, [pc, #180]	; (8025270 <_strtod_l+0x960>)
 80251bc:	403b      	ands	r3, r7
 80251be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80251c2:	f04f 32ff 	mov.w	r2, #4294967295
 80251c6:	d819      	bhi.n	80251fc <_strtod_l+0x8ec>
 80251c8:	0d1b      	lsrs	r3, r3, #20
 80251ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80251ce:	fa02 f303 	lsl.w	r3, r2, r3
 80251d2:	4299      	cmp	r1, r3
 80251d4:	d117      	bne.n	8025206 <_strtod_l+0x8f6>
 80251d6:	4b29      	ldr	r3, [pc, #164]	; (802527c <_strtod_l+0x96c>)
 80251d8:	429f      	cmp	r7, r3
 80251da:	d102      	bne.n	80251e2 <_strtod_l+0x8d2>
 80251dc:	3101      	adds	r1, #1
 80251de:	f43f addf 	beq.w	8024da0 <_strtod_l+0x490>
 80251e2:	4b23      	ldr	r3, [pc, #140]	; (8025270 <_strtod_l+0x960>)
 80251e4:	403b      	ands	r3, r7
 80251e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80251ea:	f04f 0a00 	mov.w	sl, #0
 80251ee:	9b04      	ldr	r3, [sp, #16]
 80251f0:	2b00      	cmp	r3, #0
 80251f2:	d1a4      	bne.n	802513e <_strtod_l+0x82e>
 80251f4:	e5de      	b.n	8024db4 <_strtod_l+0x4a4>
 80251f6:	f04f 33ff 	mov.w	r3, #4294967295
 80251fa:	e7ea      	b.n	80251d2 <_strtod_l+0x8c2>
 80251fc:	4613      	mov	r3, r2
 80251fe:	e7e8      	b.n	80251d2 <_strtod_l+0x8c2>
 8025200:	ea53 030a 	orrs.w	r3, r3, sl
 8025204:	d08c      	beq.n	8025120 <_strtod_l+0x810>
 8025206:	9b08      	ldr	r3, [sp, #32]
 8025208:	b1db      	cbz	r3, 8025242 <_strtod_l+0x932>
 802520a:	423b      	tst	r3, r7
 802520c:	d0ef      	beq.n	80251ee <_strtod_l+0x8de>
 802520e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025210:	9a04      	ldr	r2, [sp, #16]
 8025212:	4650      	mov	r0, sl
 8025214:	4659      	mov	r1, fp
 8025216:	b1c3      	cbz	r3, 802524a <_strtod_l+0x93a>
 8025218:	f7ff fb5c 	bl	80248d4 <sulp>
 802521c:	4602      	mov	r2, r0
 802521e:	460b      	mov	r3, r1
 8025220:	ec51 0b18 	vmov	r0, r1, d8
 8025224:	f7db f83c 	bl	80002a0 <__adddf3>
 8025228:	4682      	mov	sl, r0
 802522a:	468b      	mov	fp, r1
 802522c:	e7df      	b.n	80251ee <_strtod_l+0x8de>
 802522e:	4013      	ands	r3, r2
 8025230:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8025234:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8025238:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802523c:	f04f 3aff 	mov.w	sl, #4294967295
 8025240:	e7d5      	b.n	80251ee <_strtod_l+0x8de>
 8025242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025244:	ea13 0f0a 	tst.w	r3, sl
 8025248:	e7e0      	b.n	802520c <_strtod_l+0x8fc>
 802524a:	f7ff fb43 	bl	80248d4 <sulp>
 802524e:	4602      	mov	r2, r0
 8025250:	460b      	mov	r3, r1
 8025252:	ec51 0b18 	vmov	r0, r1, d8
 8025256:	f7db f821 	bl	800029c <__aeabi_dsub>
 802525a:	2200      	movs	r2, #0
 802525c:	2300      	movs	r3, #0
 802525e:	4682      	mov	sl, r0
 8025260:	468b      	mov	fp, r1
 8025262:	f7db fc3b 	bl	8000adc <__aeabi_dcmpeq>
 8025266:	2800      	cmp	r0, #0
 8025268:	d0c1      	beq.n	80251ee <_strtod_l+0x8de>
 802526a:	e611      	b.n	8024e90 <_strtod_l+0x580>
 802526c:	fffffc02 	.word	0xfffffc02
 8025270:	7ff00000 	.word	0x7ff00000
 8025274:	39500000 	.word	0x39500000
 8025278:	000fffff 	.word	0x000fffff
 802527c:	7fefffff 	.word	0x7fefffff
 8025280:	0802a2c0 	.word	0x0802a2c0
 8025284:	4631      	mov	r1, r6
 8025286:	4628      	mov	r0, r5
 8025288:	f002 faa8 	bl	80277dc <__ratio>
 802528c:	ec59 8b10 	vmov	r8, r9, d0
 8025290:	ee10 0a10 	vmov	r0, s0
 8025294:	2200      	movs	r2, #0
 8025296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802529a:	4649      	mov	r1, r9
 802529c:	f7db fc32 	bl	8000b04 <__aeabi_dcmple>
 80252a0:	2800      	cmp	r0, #0
 80252a2:	d07a      	beq.n	802539a <_strtod_l+0xa8a>
 80252a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80252a6:	2b00      	cmp	r3, #0
 80252a8:	d04a      	beq.n	8025340 <_strtod_l+0xa30>
 80252aa:	4b95      	ldr	r3, [pc, #596]	; (8025500 <_strtod_l+0xbf0>)
 80252ac:	2200      	movs	r2, #0
 80252ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80252b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8025500 <_strtod_l+0xbf0>
 80252b6:	f04f 0800 	mov.w	r8, #0
 80252ba:	4b92      	ldr	r3, [pc, #584]	; (8025504 <_strtod_l+0xbf4>)
 80252bc:	403b      	ands	r3, r7
 80252be:	930d      	str	r3, [sp, #52]	; 0x34
 80252c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80252c2:	4b91      	ldr	r3, [pc, #580]	; (8025508 <_strtod_l+0xbf8>)
 80252c4:	429a      	cmp	r2, r3
 80252c6:	f040 80b0 	bne.w	802542a <_strtod_l+0xb1a>
 80252ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80252ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80252d2:	ec4b ab10 	vmov	d0, sl, fp
 80252d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80252da:	f002 f9a7 	bl	802762c <__ulp>
 80252de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80252e2:	ec53 2b10 	vmov	r2, r3, d0
 80252e6:	f7db f991 	bl	800060c <__aeabi_dmul>
 80252ea:	4652      	mov	r2, sl
 80252ec:	465b      	mov	r3, fp
 80252ee:	f7da ffd7 	bl	80002a0 <__adddf3>
 80252f2:	460b      	mov	r3, r1
 80252f4:	4983      	ldr	r1, [pc, #524]	; (8025504 <_strtod_l+0xbf4>)
 80252f6:	4a85      	ldr	r2, [pc, #532]	; (802550c <_strtod_l+0xbfc>)
 80252f8:	4019      	ands	r1, r3
 80252fa:	4291      	cmp	r1, r2
 80252fc:	4682      	mov	sl, r0
 80252fe:	d960      	bls.n	80253c2 <_strtod_l+0xab2>
 8025300:	ee18 3a90 	vmov	r3, s17
 8025304:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8025308:	4293      	cmp	r3, r2
 802530a:	d104      	bne.n	8025316 <_strtod_l+0xa06>
 802530c:	ee18 3a10 	vmov	r3, s16
 8025310:	3301      	adds	r3, #1
 8025312:	f43f ad45 	beq.w	8024da0 <_strtod_l+0x490>
 8025316:	f8df b200 	ldr.w	fp, [pc, #512]	; 8025518 <_strtod_l+0xc08>
 802531a:	f04f 3aff 	mov.w	sl, #4294967295
 802531e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025320:	4620      	mov	r0, r4
 8025322:	f001 fe51 	bl	8026fc8 <_Bfree>
 8025326:	9905      	ldr	r1, [sp, #20]
 8025328:	4620      	mov	r0, r4
 802532a:	f001 fe4d 	bl	8026fc8 <_Bfree>
 802532e:	4631      	mov	r1, r6
 8025330:	4620      	mov	r0, r4
 8025332:	f001 fe49 	bl	8026fc8 <_Bfree>
 8025336:	4629      	mov	r1, r5
 8025338:	4620      	mov	r0, r4
 802533a:	f001 fe45 	bl	8026fc8 <_Bfree>
 802533e:	e61a      	b.n	8024f76 <_strtod_l+0x666>
 8025340:	f1ba 0f00 	cmp.w	sl, #0
 8025344:	d11b      	bne.n	802537e <_strtod_l+0xa6e>
 8025346:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802534a:	b9f3      	cbnz	r3, 802538a <_strtod_l+0xa7a>
 802534c:	4b6c      	ldr	r3, [pc, #432]	; (8025500 <_strtod_l+0xbf0>)
 802534e:	2200      	movs	r2, #0
 8025350:	4640      	mov	r0, r8
 8025352:	4649      	mov	r1, r9
 8025354:	f7db fbcc 	bl	8000af0 <__aeabi_dcmplt>
 8025358:	b9d0      	cbnz	r0, 8025390 <_strtod_l+0xa80>
 802535a:	4640      	mov	r0, r8
 802535c:	4649      	mov	r1, r9
 802535e:	4b6c      	ldr	r3, [pc, #432]	; (8025510 <_strtod_l+0xc00>)
 8025360:	2200      	movs	r2, #0
 8025362:	f7db f953 	bl	800060c <__aeabi_dmul>
 8025366:	4680      	mov	r8, r0
 8025368:	4689      	mov	r9, r1
 802536a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802536e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8025372:	9315      	str	r3, [sp, #84]	; 0x54
 8025374:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8025378:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802537c:	e79d      	b.n	80252ba <_strtod_l+0x9aa>
 802537e:	f1ba 0f01 	cmp.w	sl, #1
 8025382:	d102      	bne.n	802538a <_strtod_l+0xa7a>
 8025384:	2f00      	cmp	r7, #0
 8025386:	f43f ad83 	beq.w	8024e90 <_strtod_l+0x580>
 802538a:	4b62      	ldr	r3, [pc, #392]	; (8025514 <_strtod_l+0xc04>)
 802538c:	2200      	movs	r2, #0
 802538e:	e78e      	b.n	80252ae <_strtod_l+0x99e>
 8025390:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8025510 <_strtod_l+0xc00>
 8025394:	f04f 0800 	mov.w	r8, #0
 8025398:	e7e7      	b.n	802536a <_strtod_l+0xa5a>
 802539a:	4b5d      	ldr	r3, [pc, #372]	; (8025510 <_strtod_l+0xc00>)
 802539c:	4640      	mov	r0, r8
 802539e:	4649      	mov	r1, r9
 80253a0:	2200      	movs	r2, #0
 80253a2:	f7db f933 	bl	800060c <__aeabi_dmul>
 80253a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80253a8:	4680      	mov	r8, r0
 80253aa:	4689      	mov	r9, r1
 80253ac:	b933      	cbnz	r3, 80253bc <_strtod_l+0xaac>
 80253ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80253b2:	900e      	str	r0, [sp, #56]	; 0x38
 80253b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80253b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80253ba:	e7dd      	b.n	8025378 <_strtod_l+0xa68>
 80253bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80253c0:	e7f9      	b.n	80253b6 <_strtod_l+0xaa6>
 80253c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80253c6:	9b04      	ldr	r3, [sp, #16]
 80253c8:	2b00      	cmp	r3, #0
 80253ca:	d1a8      	bne.n	802531e <_strtod_l+0xa0e>
 80253cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80253d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80253d2:	0d1b      	lsrs	r3, r3, #20
 80253d4:	051b      	lsls	r3, r3, #20
 80253d6:	429a      	cmp	r2, r3
 80253d8:	d1a1      	bne.n	802531e <_strtod_l+0xa0e>
 80253da:	4640      	mov	r0, r8
 80253dc:	4649      	mov	r1, r9
 80253de:	f7db fcc5 	bl	8000d6c <__aeabi_d2lz>
 80253e2:	f7db f8e5 	bl	80005b0 <__aeabi_l2d>
 80253e6:	4602      	mov	r2, r0
 80253e8:	460b      	mov	r3, r1
 80253ea:	4640      	mov	r0, r8
 80253ec:	4649      	mov	r1, r9
 80253ee:	f7da ff55 	bl	800029c <__aeabi_dsub>
 80253f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80253f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80253f8:	ea43 030a 	orr.w	r3, r3, sl
 80253fc:	4313      	orrs	r3, r2
 80253fe:	4680      	mov	r8, r0
 8025400:	4689      	mov	r9, r1
 8025402:	d055      	beq.n	80254b0 <_strtod_l+0xba0>
 8025404:	a336      	add	r3, pc, #216	; (adr r3, 80254e0 <_strtod_l+0xbd0>)
 8025406:	e9d3 2300 	ldrd	r2, r3, [r3]
 802540a:	f7db fb71 	bl	8000af0 <__aeabi_dcmplt>
 802540e:	2800      	cmp	r0, #0
 8025410:	f47f acd0 	bne.w	8024db4 <_strtod_l+0x4a4>
 8025414:	a334      	add	r3, pc, #208	; (adr r3, 80254e8 <_strtod_l+0xbd8>)
 8025416:	e9d3 2300 	ldrd	r2, r3, [r3]
 802541a:	4640      	mov	r0, r8
 802541c:	4649      	mov	r1, r9
 802541e:	f7db fb85 	bl	8000b2c <__aeabi_dcmpgt>
 8025422:	2800      	cmp	r0, #0
 8025424:	f43f af7b 	beq.w	802531e <_strtod_l+0xa0e>
 8025428:	e4c4      	b.n	8024db4 <_strtod_l+0x4a4>
 802542a:	9b04      	ldr	r3, [sp, #16]
 802542c:	b333      	cbz	r3, 802547c <_strtod_l+0xb6c>
 802542e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025430:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8025434:	d822      	bhi.n	802547c <_strtod_l+0xb6c>
 8025436:	a32e      	add	r3, pc, #184	; (adr r3, 80254f0 <_strtod_l+0xbe0>)
 8025438:	e9d3 2300 	ldrd	r2, r3, [r3]
 802543c:	4640      	mov	r0, r8
 802543e:	4649      	mov	r1, r9
 8025440:	f7db fb60 	bl	8000b04 <__aeabi_dcmple>
 8025444:	b1a0      	cbz	r0, 8025470 <_strtod_l+0xb60>
 8025446:	4649      	mov	r1, r9
 8025448:	4640      	mov	r0, r8
 802544a:	f7db fbb7 	bl	8000bbc <__aeabi_d2uiz>
 802544e:	2801      	cmp	r0, #1
 8025450:	bf38      	it	cc
 8025452:	2001      	movcc	r0, #1
 8025454:	f7db f860 	bl	8000518 <__aeabi_ui2d>
 8025458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802545a:	4680      	mov	r8, r0
 802545c:	4689      	mov	r9, r1
 802545e:	bb23      	cbnz	r3, 80254aa <_strtod_l+0xb9a>
 8025460:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025464:	9010      	str	r0, [sp, #64]	; 0x40
 8025466:	9311      	str	r3, [sp, #68]	; 0x44
 8025468:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802546c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025472:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025474:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8025478:	1a9b      	subs	r3, r3, r2
 802547a:	9309      	str	r3, [sp, #36]	; 0x24
 802547c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8025480:	eeb0 0a48 	vmov.f32	s0, s16
 8025484:	eef0 0a68 	vmov.f32	s1, s17
 8025488:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802548c:	f002 f8ce 	bl	802762c <__ulp>
 8025490:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8025494:	ec53 2b10 	vmov	r2, r3, d0
 8025498:	f7db f8b8 	bl	800060c <__aeabi_dmul>
 802549c:	ec53 2b18 	vmov	r2, r3, d8
 80254a0:	f7da fefe 	bl	80002a0 <__adddf3>
 80254a4:	4682      	mov	sl, r0
 80254a6:	468b      	mov	fp, r1
 80254a8:	e78d      	b.n	80253c6 <_strtod_l+0xab6>
 80254aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80254ae:	e7db      	b.n	8025468 <_strtod_l+0xb58>
 80254b0:	a311      	add	r3, pc, #68	; (adr r3, 80254f8 <_strtod_l+0xbe8>)
 80254b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254b6:	f7db fb1b 	bl	8000af0 <__aeabi_dcmplt>
 80254ba:	e7b2      	b.n	8025422 <_strtod_l+0xb12>
 80254bc:	2300      	movs	r3, #0
 80254be:	930a      	str	r3, [sp, #40]	; 0x28
 80254c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80254c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80254c4:	6013      	str	r3, [r2, #0]
 80254c6:	f7ff ba6b 	b.w	80249a0 <_strtod_l+0x90>
 80254ca:	2a65      	cmp	r2, #101	; 0x65
 80254cc:	f43f ab5f 	beq.w	8024b8e <_strtod_l+0x27e>
 80254d0:	2a45      	cmp	r2, #69	; 0x45
 80254d2:	f43f ab5c 	beq.w	8024b8e <_strtod_l+0x27e>
 80254d6:	2301      	movs	r3, #1
 80254d8:	f7ff bb94 	b.w	8024c04 <_strtod_l+0x2f4>
 80254dc:	f3af 8000 	nop.w
 80254e0:	94a03595 	.word	0x94a03595
 80254e4:	3fdfffff 	.word	0x3fdfffff
 80254e8:	35afe535 	.word	0x35afe535
 80254ec:	3fe00000 	.word	0x3fe00000
 80254f0:	ffc00000 	.word	0xffc00000
 80254f4:	41dfffff 	.word	0x41dfffff
 80254f8:	94a03595 	.word	0x94a03595
 80254fc:	3fcfffff 	.word	0x3fcfffff
 8025500:	3ff00000 	.word	0x3ff00000
 8025504:	7ff00000 	.word	0x7ff00000
 8025508:	7fe00000 	.word	0x7fe00000
 802550c:	7c9fffff 	.word	0x7c9fffff
 8025510:	3fe00000 	.word	0x3fe00000
 8025514:	bff00000 	.word	0xbff00000
 8025518:	7fefffff 	.word	0x7fefffff

0802551c <strtod>:
 802551c:	460a      	mov	r2, r1
 802551e:	4601      	mov	r1, r0
 8025520:	4802      	ldr	r0, [pc, #8]	; (802552c <strtod+0x10>)
 8025522:	4b03      	ldr	r3, [pc, #12]	; (8025530 <strtod+0x14>)
 8025524:	6800      	ldr	r0, [r0, #0]
 8025526:	f7ff b9f3 	b.w	8024910 <_strtod_l>
 802552a:	bf00      	nop
 802552c:	20000280 	.word	0x20000280
 8025530:	200002e8 	.word	0x200002e8

08025534 <_vsiprintf_r>:
 8025534:	b500      	push	{lr}
 8025536:	b09b      	sub	sp, #108	; 0x6c
 8025538:	9100      	str	r1, [sp, #0]
 802553a:	9104      	str	r1, [sp, #16]
 802553c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025540:	9105      	str	r1, [sp, #20]
 8025542:	9102      	str	r1, [sp, #8]
 8025544:	4905      	ldr	r1, [pc, #20]	; (802555c <_vsiprintf_r+0x28>)
 8025546:	9103      	str	r1, [sp, #12]
 8025548:	4669      	mov	r1, sp
 802554a:	f002 fa49 	bl	80279e0 <_svfiprintf_r>
 802554e:	9b00      	ldr	r3, [sp, #0]
 8025550:	2200      	movs	r2, #0
 8025552:	701a      	strb	r2, [r3, #0]
 8025554:	b01b      	add	sp, #108	; 0x6c
 8025556:	f85d fb04 	ldr.w	pc, [sp], #4
 802555a:	bf00      	nop
 802555c:	ffff0208 	.word	0xffff0208

08025560 <vsiprintf>:
 8025560:	4613      	mov	r3, r2
 8025562:	460a      	mov	r2, r1
 8025564:	4601      	mov	r1, r0
 8025566:	4802      	ldr	r0, [pc, #8]	; (8025570 <vsiprintf+0x10>)
 8025568:	6800      	ldr	r0, [r0, #0]
 802556a:	f7ff bfe3 	b.w	8025534 <_vsiprintf_r>
 802556e:	bf00      	nop
 8025570:	20000280 	.word	0x20000280

08025574 <__swbuf_r>:
 8025574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025576:	460e      	mov	r6, r1
 8025578:	4614      	mov	r4, r2
 802557a:	4605      	mov	r5, r0
 802557c:	b118      	cbz	r0, 8025586 <__swbuf_r+0x12>
 802557e:	6983      	ldr	r3, [r0, #24]
 8025580:	b90b      	cbnz	r3, 8025586 <__swbuf_r+0x12>
 8025582:	f001 f84d 	bl	8026620 <__sinit>
 8025586:	4b21      	ldr	r3, [pc, #132]	; (802560c <__swbuf_r+0x98>)
 8025588:	429c      	cmp	r4, r3
 802558a:	d12b      	bne.n	80255e4 <__swbuf_r+0x70>
 802558c:	686c      	ldr	r4, [r5, #4]
 802558e:	69a3      	ldr	r3, [r4, #24]
 8025590:	60a3      	str	r3, [r4, #8]
 8025592:	89a3      	ldrh	r3, [r4, #12]
 8025594:	071a      	lsls	r2, r3, #28
 8025596:	d52f      	bpl.n	80255f8 <__swbuf_r+0x84>
 8025598:	6923      	ldr	r3, [r4, #16]
 802559a:	b36b      	cbz	r3, 80255f8 <__swbuf_r+0x84>
 802559c:	6923      	ldr	r3, [r4, #16]
 802559e:	6820      	ldr	r0, [r4, #0]
 80255a0:	1ac0      	subs	r0, r0, r3
 80255a2:	6963      	ldr	r3, [r4, #20]
 80255a4:	b2f6      	uxtb	r6, r6
 80255a6:	4283      	cmp	r3, r0
 80255a8:	4637      	mov	r7, r6
 80255aa:	dc04      	bgt.n	80255b6 <__swbuf_r+0x42>
 80255ac:	4621      	mov	r1, r4
 80255ae:	4628      	mov	r0, r5
 80255b0:	f000 ffa2 	bl	80264f8 <_fflush_r>
 80255b4:	bb30      	cbnz	r0, 8025604 <__swbuf_r+0x90>
 80255b6:	68a3      	ldr	r3, [r4, #8]
 80255b8:	3b01      	subs	r3, #1
 80255ba:	60a3      	str	r3, [r4, #8]
 80255bc:	6823      	ldr	r3, [r4, #0]
 80255be:	1c5a      	adds	r2, r3, #1
 80255c0:	6022      	str	r2, [r4, #0]
 80255c2:	701e      	strb	r6, [r3, #0]
 80255c4:	6963      	ldr	r3, [r4, #20]
 80255c6:	3001      	adds	r0, #1
 80255c8:	4283      	cmp	r3, r0
 80255ca:	d004      	beq.n	80255d6 <__swbuf_r+0x62>
 80255cc:	89a3      	ldrh	r3, [r4, #12]
 80255ce:	07db      	lsls	r3, r3, #31
 80255d0:	d506      	bpl.n	80255e0 <__swbuf_r+0x6c>
 80255d2:	2e0a      	cmp	r6, #10
 80255d4:	d104      	bne.n	80255e0 <__swbuf_r+0x6c>
 80255d6:	4621      	mov	r1, r4
 80255d8:	4628      	mov	r0, r5
 80255da:	f000 ff8d 	bl	80264f8 <_fflush_r>
 80255de:	b988      	cbnz	r0, 8025604 <__swbuf_r+0x90>
 80255e0:	4638      	mov	r0, r7
 80255e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80255e4:	4b0a      	ldr	r3, [pc, #40]	; (8025610 <__swbuf_r+0x9c>)
 80255e6:	429c      	cmp	r4, r3
 80255e8:	d101      	bne.n	80255ee <__swbuf_r+0x7a>
 80255ea:	68ac      	ldr	r4, [r5, #8]
 80255ec:	e7cf      	b.n	802558e <__swbuf_r+0x1a>
 80255ee:	4b09      	ldr	r3, [pc, #36]	; (8025614 <__swbuf_r+0xa0>)
 80255f0:	429c      	cmp	r4, r3
 80255f2:	bf08      	it	eq
 80255f4:	68ec      	ldreq	r4, [r5, #12]
 80255f6:	e7ca      	b.n	802558e <__swbuf_r+0x1a>
 80255f8:	4621      	mov	r1, r4
 80255fa:	4628      	mov	r0, r5
 80255fc:	f000 f80c 	bl	8025618 <__swsetup_r>
 8025600:	2800      	cmp	r0, #0
 8025602:	d0cb      	beq.n	802559c <__swbuf_r+0x28>
 8025604:	f04f 37ff 	mov.w	r7, #4294967295
 8025608:	e7ea      	b.n	80255e0 <__swbuf_r+0x6c>
 802560a:	bf00      	nop
 802560c:	0802a49c 	.word	0x0802a49c
 8025610:	0802a4bc 	.word	0x0802a4bc
 8025614:	0802a47c 	.word	0x0802a47c

08025618 <__swsetup_r>:
 8025618:	4b32      	ldr	r3, [pc, #200]	; (80256e4 <__swsetup_r+0xcc>)
 802561a:	b570      	push	{r4, r5, r6, lr}
 802561c:	681d      	ldr	r5, [r3, #0]
 802561e:	4606      	mov	r6, r0
 8025620:	460c      	mov	r4, r1
 8025622:	b125      	cbz	r5, 802562e <__swsetup_r+0x16>
 8025624:	69ab      	ldr	r3, [r5, #24]
 8025626:	b913      	cbnz	r3, 802562e <__swsetup_r+0x16>
 8025628:	4628      	mov	r0, r5
 802562a:	f000 fff9 	bl	8026620 <__sinit>
 802562e:	4b2e      	ldr	r3, [pc, #184]	; (80256e8 <__swsetup_r+0xd0>)
 8025630:	429c      	cmp	r4, r3
 8025632:	d10f      	bne.n	8025654 <__swsetup_r+0x3c>
 8025634:	686c      	ldr	r4, [r5, #4]
 8025636:	89a3      	ldrh	r3, [r4, #12]
 8025638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802563c:	0719      	lsls	r1, r3, #28
 802563e:	d42c      	bmi.n	802569a <__swsetup_r+0x82>
 8025640:	06dd      	lsls	r5, r3, #27
 8025642:	d411      	bmi.n	8025668 <__swsetup_r+0x50>
 8025644:	2309      	movs	r3, #9
 8025646:	6033      	str	r3, [r6, #0]
 8025648:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802564c:	81a3      	strh	r3, [r4, #12]
 802564e:	f04f 30ff 	mov.w	r0, #4294967295
 8025652:	e03e      	b.n	80256d2 <__swsetup_r+0xba>
 8025654:	4b25      	ldr	r3, [pc, #148]	; (80256ec <__swsetup_r+0xd4>)
 8025656:	429c      	cmp	r4, r3
 8025658:	d101      	bne.n	802565e <__swsetup_r+0x46>
 802565a:	68ac      	ldr	r4, [r5, #8]
 802565c:	e7eb      	b.n	8025636 <__swsetup_r+0x1e>
 802565e:	4b24      	ldr	r3, [pc, #144]	; (80256f0 <__swsetup_r+0xd8>)
 8025660:	429c      	cmp	r4, r3
 8025662:	bf08      	it	eq
 8025664:	68ec      	ldreq	r4, [r5, #12]
 8025666:	e7e6      	b.n	8025636 <__swsetup_r+0x1e>
 8025668:	0758      	lsls	r0, r3, #29
 802566a:	d512      	bpl.n	8025692 <__swsetup_r+0x7a>
 802566c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802566e:	b141      	cbz	r1, 8025682 <__swsetup_r+0x6a>
 8025670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025674:	4299      	cmp	r1, r3
 8025676:	d002      	beq.n	802567e <__swsetup_r+0x66>
 8025678:	4630      	mov	r0, r6
 802567a:	f7fe fa1f 	bl	8023abc <_free_r>
 802567e:	2300      	movs	r3, #0
 8025680:	6363      	str	r3, [r4, #52]	; 0x34
 8025682:	89a3      	ldrh	r3, [r4, #12]
 8025684:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025688:	81a3      	strh	r3, [r4, #12]
 802568a:	2300      	movs	r3, #0
 802568c:	6063      	str	r3, [r4, #4]
 802568e:	6923      	ldr	r3, [r4, #16]
 8025690:	6023      	str	r3, [r4, #0]
 8025692:	89a3      	ldrh	r3, [r4, #12]
 8025694:	f043 0308 	orr.w	r3, r3, #8
 8025698:	81a3      	strh	r3, [r4, #12]
 802569a:	6923      	ldr	r3, [r4, #16]
 802569c:	b94b      	cbnz	r3, 80256b2 <__swsetup_r+0x9a>
 802569e:	89a3      	ldrh	r3, [r4, #12]
 80256a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80256a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80256a8:	d003      	beq.n	80256b2 <__swsetup_r+0x9a>
 80256aa:	4621      	mov	r1, r4
 80256ac:	4630      	mov	r0, r6
 80256ae:	f001 fbed 	bl	8026e8c <__smakebuf_r>
 80256b2:	89a0      	ldrh	r0, [r4, #12]
 80256b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80256b8:	f010 0301 	ands.w	r3, r0, #1
 80256bc:	d00a      	beq.n	80256d4 <__swsetup_r+0xbc>
 80256be:	2300      	movs	r3, #0
 80256c0:	60a3      	str	r3, [r4, #8]
 80256c2:	6963      	ldr	r3, [r4, #20]
 80256c4:	425b      	negs	r3, r3
 80256c6:	61a3      	str	r3, [r4, #24]
 80256c8:	6923      	ldr	r3, [r4, #16]
 80256ca:	b943      	cbnz	r3, 80256de <__swsetup_r+0xc6>
 80256cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80256d0:	d1ba      	bne.n	8025648 <__swsetup_r+0x30>
 80256d2:	bd70      	pop	{r4, r5, r6, pc}
 80256d4:	0781      	lsls	r1, r0, #30
 80256d6:	bf58      	it	pl
 80256d8:	6963      	ldrpl	r3, [r4, #20]
 80256da:	60a3      	str	r3, [r4, #8]
 80256dc:	e7f4      	b.n	80256c8 <__swsetup_r+0xb0>
 80256de:	2000      	movs	r0, #0
 80256e0:	e7f7      	b.n	80256d2 <__swsetup_r+0xba>
 80256e2:	bf00      	nop
 80256e4:	20000280 	.word	0x20000280
 80256e8:	0802a49c 	.word	0x0802a49c
 80256ec:	0802a4bc 	.word	0x0802a4bc
 80256f0:	0802a47c 	.word	0x0802a47c

080256f4 <quorem>:
 80256f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256f8:	6903      	ldr	r3, [r0, #16]
 80256fa:	690c      	ldr	r4, [r1, #16]
 80256fc:	42a3      	cmp	r3, r4
 80256fe:	4607      	mov	r7, r0
 8025700:	f2c0 8081 	blt.w	8025806 <quorem+0x112>
 8025704:	3c01      	subs	r4, #1
 8025706:	f101 0814 	add.w	r8, r1, #20
 802570a:	f100 0514 	add.w	r5, r0, #20
 802570e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025712:	9301      	str	r3, [sp, #4]
 8025714:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802571c:	3301      	adds	r3, #1
 802571e:	429a      	cmp	r2, r3
 8025720:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8025724:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025728:	fbb2 f6f3 	udiv	r6, r2, r3
 802572c:	d331      	bcc.n	8025792 <quorem+0x9e>
 802572e:	f04f 0e00 	mov.w	lr, #0
 8025732:	4640      	mov	r0, r8
 8025734:	46ac      	mov	ip, r5
 8025736:	46f2      	mov	sl, lr
 8025738:	f850 2b04 	ldr.w	r2, [r0], #4
 802573c:	b293      	uxth	r3, r2
 802573e:	fb06 e303 	mla	r3, r6, r3, lr
 8025742:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8025746:	b29b      	uxth	r3, r3
 8025748:	ebaa 0303 	sub.w	r3, sl, r3
 802574c:	f8dc a000 	ldr.w	sl, [ip]
 8025750:	0c12      	lsrs	r2, r2, #16
 8025752:	fa13 f38a 	uxtah	r3, r3, sl
 8025756:	fb06 e202 	mla	r2, r6, r2, lr
 802575a:	9300      	str	r3, [sp, #0]
 802575c:	9b00      	ldr	r3, [sp, #0]
 802575e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8025762:	b292      	uxth	r2, r2
 8025764:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8025768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802576c:	f8bd 3000 	ldrh.w	r3, [sp]
 8025770:	4581      	cmp	r9, r0
 8025772:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025776:	f84c 3b04 	str.w	r3, [ip], #4
 802577a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802577e:	d2db      	bcs.n	8025738 <quorem+0x44>
 8025780:	f855 300b 	ldr.w	r3, [r5, fp]
 8025784:	b92b      	cbnz	r3, 8025792 <quorem+0x9e>
 8025786:	9b01      	ldr	r3, [sp, #4]
 8025788:	3b04      	subs	r3, #4
 802578a:	429d      	cmp	r5, r3
 802578c:	461a      	mov	r2, r3
 802578e:	d32e      	bcc.n	80257ee <quorem+0xfa>
 8025790:	613c      	str	r4, [r7, #16]
 8025792:	4638      	mov	r0, r7
 8025794:	f001 fea4 	bl	80274e0 <__mcmp>
 8025798:	2800      	cmp	r0, #0
 802579a:	db24      	blt.n	80257e6 <quorem+0xf2>
 802579c:	3601      	adds	r6, #1
 802579e:	4628      	mov	r0, r5
 80257a0:	f04f 0c00 	mov.w	ip, #0
 80257a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80257a8:	f8d0 e000 	ldr.w	lr, [r0]
 80257ac:	b293      	uxth	r3, r2
 80257ae:	ebac 0303 	sub.w	r3, ip, r3
 80257b2:	0c12      	lsrs	r2, r2, #16
 80257b4:	fa13 f38e 	uxtah	r3, r3, lr
 80257b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80257bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80257c0:	b29b      	uxth	r3, r3
 80257c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80257c6:	45c1      	cmp	r9, r8
 80257c8:	f840 3b04 	str.w	r3, [r0], #4
 80257cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80257d0:	d2e8      	bcs.n	80257a4 <quorem+0xb0>
 80257d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80257d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80257da:	b922      	cbnz	r2, 80257e6 <quorem+0xf2>
 80257dc:	3b04      	subs	r3, #4
 80257de:	429d      	cmp	r5, r3
 80257e0:	461a      	mov	r2, r3
 80257e2:	d30a      	bcc.n	80257fa <quorem+0x106>
 80257e4:	613c      	str	r4, [r7, #16]
 80257e6:	4630      	mov	r0, r6
 80257e8:	b003      	add	sp, #12
 80257ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257ee:	6812      	ldr	r2, [r2, #0]
 80257f0:	3b04      	subs	r3, #4
 80257f2:	2a00      	cmp	r2, #0
 80257f4:	d1cc      	bne.n	8025790 <quorem+0x9c>
 80257f6:	3c01      	subs	r4, #1
 80257f8:	e7c7      	b.n	802578a <quorem+0x96>
 80257fa:	6812      	ldr	r2, [r2, #0]
 80257fc:	3b04      	subs	r3, #4
 80257fe:	2a00      	cmp	r2, #0
 8025800:	d1f0      	bne.n	80257e4 <quorem+0xf0>
 8025802:	3c01      	subs	r4, #1
 8025804:	e7eb      	b.n	80257de <quorem+0xea>
 8025806:	2000      	movs	r0, #0
 8025808:	e7ee      	b.n	80257e8 <quorem+0xf4>
 802580a:	0000      	movs	r0, r0
 802580c:	0000      	movs	r0, r0
	...

08025810 <_dtoa_r>:
 8025810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025814:	ed2d 8b04 	vpush	{d8-d9}
 8025818:	ec57 6b10 	vmov	r6, r7, d0
 802581c:	b093      	sub	sp, #76	; 0x4c
 802581e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8025820:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8025824:	9106      	str	r1, [sp, #24]
 8025826:	ee10 aa10 	vmov	sl, s0
 802582a:	4604      	mov	r4, r0
 802582c:	9209      	str	r2, [sp, #36]	; 0x24
 802582e:	930c      	str	r3, [sp, #48]	; 0x30
 8025830:	46bb      	mov	fp, r7
 8025832:	b975      	cbnz	r5, 8025852 <_dtoa_r+0x42>
 8025834:	2010      	movs	r0, #16
 8025836:	f7fe f8eb 	bl	8023a10 <malloc>
 802583a:	4602      	mov	r2, r0
 802583c:	6260      	str	r0, [r4, #36]	; 0x24
 802583e:	b920      	cbnz	r0, 802584a <_dtoa_r+0x3a>
 8025840:	4ba7      	ldr	r3, [pc, #668]	; (8025ae0 <_dtoa_r+0x2d0>)
 8025842:	21ea      	movs	r1, #234	; 0xea
 8025844:	48a7      	ldr	r0, [pc, #668]	; (8025ae4 <_dtoa_r+0x2d4>)
 8025846:	f7fe f879 	bl	802393c <__assert_func>
 802584a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802584e:	6005      	str	r5, [r0, #0]
 8025850:	60c5      	str	r5, [r0, #12]
 8025852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025854:	6819      	ldr	r1, [r3, #0]
 8025856:	b151      	cbz	r1, 802586e <_dtoa_r+0x5e>
 8025858:	685a      	ldr	r2, [r3, #4]
 802585a:	604a      	str	r2, [r1, #4]
 802585c:	2301      	movs	r3, #1
 802585e:	4093      	lsls	r3, r2
 8025860:	608b      	str	r3, [r1, #8]
 8025862:	4620      	mov	r0, r4
 8025864:	f001 fbb0 	bl	8026fc8 <_Bfree>
 8025868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802586a:	2200      	movs	r2, #0
 802586c:	601a      	str	r2, [r3, #0]
 802586e:	1e3b      	subs	r3, r7, #0
 8025870:	bfaa      	itet	ge
 8025872:	2300      	movge	r3, #0
 8025874:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8025878:	f8c8 3000 	strge.w	r3, [r8]
 802587c:	4b9a      	ldr	r3, [pc, #616]	; (8025ae8 <_dtoa_r+0x2d8>)
 802587e:	bfbc      	itt	lt
 8025880:	2201      	movlt	r2, #1
 8025882:	f8c8 2000 	strlt.w	r2, [r8]
 8025886:	ea33 030b 	bics.w	r3, r3, fp
 802588a:	d11b      	bne.n	80258c4 <_dtoa_r+0xb4>
 802588c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802588e:	f242 730f 	movw	r3, #9999	; 0x270f
 8025892:	6013      	str	r3, [r2, #0]
 8025894:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8025898:	4333      	orrs	r3, r6
 802589a:	f000 8592 	beq.w	80263c2 <_dtoa_r+0xbb2>
 802589e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80258a0:	b963      	cbnz	r3, 80258bc <_dtoa_r+0xac>
 80258a2:	4b92      	ldr	r3, [pc, #584]	; (8025aec <_dtoa_r+0x2dc>)
 80258a4:	e022      	b.n	80258ec <_dtoa_r+0xdc>
 80258a6:	4b92      	ldr	r3, [pc, #584]	; (8025af0 <_dtoa_r+0x2e0>)
 80258a8:	9301      	str	r3, [sp, #4]
 80258aa:	3308      	adds	r3, #8
 80258ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80258ae:	6013      	str	r3, [r2, #0]
 80258b0:	9801      	ldr	r0, [sp, #4]
 80258b2:	b013      	add	sp, #76	; 0x4c
 80258b4:	ecbd 8b04 	vpop	{d8-d9}
 80258b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80258bc:	4b8b      	ldr	r3, [pc, #556]	; (8025aec <_dtoa_r+0x2dc>)
 80258be:	9301      	str	r3, [sp, #4]
 80258c0:	3303      	adds	r3, #3
 80258c2:	e7f3      	b.n	80258ac <_dtoa_r+0x9c>
 80258c4:	2200      	movs	r2, #0
 80258c6:	2300      	movs	r3, #0
 80258c8:	4650      	mov	r0, sl
 80258ca:	4659      	mov	r1, fp
 80258cc:	f7db f906 	bl	8000adc <__aeabi_dcmpeq>
 80258d0:	ec4b ab19 	vmov	d9, sl, fp
 80258d4:	4680      	mov	r8, r0
 80258d6:	b158      	cbz	r0, 80258f0 <_dtoa_r+0xe0>
 80258d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80258da:	2301      	movs	r3, #1
 80258dc:	6013      	str	r3, [r2, #0]
 80258de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80258e0:	2b00      	cmp	r3, #0
 80258e2:	f000 856b 	beq.w	80263bc <_dtoa_r+0xbac>
 80258e6:	4883      	ldr	r0, [pc, #524]	; (8025af4 <_dtoa_r+0x2e4>)
 80258e8:	6018      	str	r0, [r3, #0]
 80258ea:	1e43      	subs	r3, r0, #1
 80258ec:	9301      	str	r3, [sp, #4]
 80258ee:	e7df      	b.n	80258b0 <_dtoa_r+0xa0>
 80258f0:	ec4b ab10 	vmov	d0, sl, fp
 80258f4:	aa10      	add	r2, sp, #64	; 0x40
 80258f6:	a911      	add	r1, sp, #68	; 0x44
 80258f8:	4620      	mov	r0, r4
 80258fa:	f001 ff13 	bl	8027724 <__d2b>
 80258fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8025902:	ee08 0a10 	vmov	s16, r0
 8025906:	2d00      	cmp	r5, #0
 8025908:	f000 8084 	beq.w	8025a14 <_dtoa_r+0x204>
 802590c:	ee19 3a90 	vmov	r3, s19
 8025910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025914:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8025918:	4656      	mov	r6, sl
 802591a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802591e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8025922:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8025926:	4b74      	ldr	r3, [pc, #464]	; (8025af8 <_dtoa_r+0x2e8>)
 8025928:	2200      	movs	r2, #0
 802592a:	4630      	mov	r0, r6
 802592c:	4639      	mov	r1, r7
 802592e:	f7da fcb5 	bl	800029c <__aeabi_dsub>
 8025932:	a365      	add	r3, pc, #404	; (adr r3, 8025ac8 <_dtoa_r+0x2b8>)
 8025934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025938:	f7da fe68 	bl	800060c <__aeabi_dmul>
 802593c:	a364      	add	r3, pc, #400	; (adr r3, 8025ad0 <_dtoa_r+0x2c0>)
 802593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025942:	f7da fcad 	bl	80002a0 <__adddf3>
 8025946:	4606      	mov	r6, r0
 8025948:	4628      	mov	r0, r5
 802594a:	460f      	mov	r7, r1
 802594c:	f7da fdf4 	bl	8000538 <__aeabi_i2d>
 8025950:	a361      	add	r3, pc, #388	; (adr r3, 8025ad8 <_dtoa_r+0x2c8>)
 8025952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025956:	f7da fe59 	bl	800060c <__aeabi_dmul>
 802595a:	4602      	mov	r2, r0
 802595c:	460b      	mov	r3, r1
 802595e:	4630      	mov	r0, r6
 8025960:	4639      	mov	r1, r7
 8025962:	f7da fc9d 	bl	80002a0 <__adddf3>
 8025966:	4606      	mov	r6, r0
 8025968:	460f      	mov	r7, r1
 802596a:	f7db f8ff 	bl	8000b6c <__aeabi_d2iz>
 802596e:	2200      	movs	r2, #0
 8025970:	9000      	str	r0, [sp, #0]
 8025972:	2300      	movs	r3, #0
 8025974:	4630      	mov	r0, r6
 8025976:	4639      	mov	r1, r7
 8025978:	f7db f8ba 	bl	8000af0 <__aeabi_dcmplt>
 802597c:	b150      	cbz	r0, 8025994 <_dtoa_r+0x184>
 802597e:	9800      	ldr	r0, [sp, #0]
 8025980:	f7da fdda 	bl	8000538 <__aeabi_i2d>
 8025984:	4632      	mov	r2, r6
 8025986:	463b      	mov	r3, r7
 8025988:	f7db f8a8 	bl	8000adc <__aeabi_dcmpeq>
 802598c:	b910      	cbnz	r0, 8025994 <_dtoa_r+0x184>
 802598e:	9b00      	ldr	r3, [sp, #0]
 8025990:	3b01      	subs	r3, #1
 8025992:	9300      	str	r3, [sp, #0]
 8025994:	9b00      	ldr	r3, [sp, #0]
 8025996:	2b16      	cmp	r3, #22
 8025998:	d85a      	bhi.n	8025a50 <_dtoa_r+0x240>
 802599a:	9a00      	ldr	r2, [sp, #0]
 802599c:	4b57      	ldr	r3, [pc, #348]	; (8025afc <_dtoa_r+0x2ec>)
 802599e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80259a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259a6:	ec51 0b19 	vmov	r0, r1, d9
 80259aa:	f7db f8a1 	bl	8000af0 <__aeabi_dcmplt>
 80259ae:	2800      	cmp	r0, #0
 80259b0:	d050      	beq.n	8025a54 <_dtoa_r+0x244>
 80259b2:	9b00      	ldr	r3, [sp, #0]
 80259b4:	3b01      	subs	r3, #1
 80259b6:	9300      	str	r3, [sp, #0]
 80259b8:	2300      	movs	r3, #0
 80259ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80259bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80259be:	1b5d      	subs	r5, r3, r5
 80259c0:	1e6b      	subs	r3, r5, #1
 80259c2:	9305      	str	r3, [sp, #20]
 80259c4:	bf45      	ittet	mi
 80259c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80259ca:	9304      	strmi	r3, [sp, #16]
 80259cc:	2300      	movpl	r3, #0
 80259ce:	2300      	movmi	r3, #0
 80259d0:	bf4c      	ite	mi
 80259d2:	9305      	strmi	r3, [sp, #20]
 80259d4:	9304      	strpl	r3, [sp, #16]
 80259d6:	9b00      	ldr	r3, [sp, #0]
 80259d8:	2b00      	cmp	r3, #0
 80259da:	db3d      	blt.n	8025a58 <_dtoa_r+0x248>
 80259dc:	9b05      	ldr	r3, [sp, #20]
 80259de:	9a00      	ldr	r2, [sp, #0]
 80259e0:	920a      	str	r2, [sp, #40]	; 0x28
 80259e2:	4413      	add	r3, r2
 80259e4:	9305      	str	r3, [sp, #20]
 80259e6:	2300      	movs	r3, #0
 80259e8:	9307      	str	r3, [sp, #28]
 80259ea:	9b06      	ldr	r3, [sp, #24]
 80259ec:	2b09      	cmp	r3, #9
 80259ee:	f200 8089 	bhi.w	8025b04 <_dtoa_r+0x2f4>
 80259f2:	2b05      	cmp	r3, #5
 80259f4:	bfc4      	itt	gt
 80259f6:	3b04      	subgt	r3, #4
 80259f8:	9306      	strgt	r3, [sp, #24]
 80259fa:	9b06      	ldr	r3, [sp, #24]
 80259fc:	f1a3 0302 	sub.w	r3, r3, #2
 8025a00:	bfcc      	ite	gt
 8025a02:	2500      	movgt	r5, #0
 8025a04:	2501      	movle	r5, #1
 8025a06:	2b03      	cmp	r3, #3
 8025a08:	f200 8087 	bhi.w	8025b1a <_dtoa_r+0x30a>
 8025a0c:	e8df f003 	tbb	[pc, r3]
 8025a10:	59383a2d 	.word	0x59383a2d
 8025a14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8025a18:	441d      	add	r5, r3
 8025a1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8025a1e:	2b20      	cmp	r3, #32
 8025a20:	bfc1      	itttt	gt
 8025a22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8025a26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8025a2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8025a2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8025a32:	bfda      	itte	le
 8025a34:	f1c3 0320 	rsble	r3, r3, #32
 8025a38:	fa06 f003 	lslle.w	r0, r6, r3
 8025a3c:	4318      	orrgt	r0, r3
 8025a3e:	f7da fd6b 	bl	8000518 <__aeabi_ui2d>
 8025a42:	2301      	movs	r3, #1
 8025a44:	4606      	mov	r6, r0
 8025a46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8025a4a:	3d01      	subs	r5, #1
 8025a4c:	930e      	str	r3, [sp, #56]	; 0x38
 8025a4e:	e76a      	b.n	8025926 <_dtoa_r+0x116>
 8025a50:	2301      	movs	r3, #1
 8025a52:	e7b2      	b.n	80259ba <_dtoa_r+0x1aa>
 8025a54:	900b      	str	r0, [sp, #44]	; 0x2c
 8025a56:	e7b1      	b.n	80259bc <_dtoa_r+0x1ac>
 8025a58:	9b04      	ldr	r3, [sp, #16]
 8025a5a:	9a00      	ldr	r2, [sp, #0]
 8025a5c:	1a9b      	subs	r3, r3, r2
 8025a5e:	9304      	str	r3, [sp, #16]
 8025a60:	4253      	negs	r3, r2
 8025a62:	9307      	str	r3, [sp, #28]
 8025a64:	2300      	movs	r3, #0
 8025a66:	930a      	str	r3, [sp, #40]	; 0x28
 8025a68:	e7bf      	b.n	80259ea <_dtoa_r+0x1da>
 8025a6a:	2300      	movs	r3, #0
 8025a6c:	9308      	str	r3, [sp, #32]
 8025a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a70:	2b00      	cmp	r3, #0
 8025a72:	dc55      	bgt.n	8025b20 <_dtoa_r+0x310>
 8025a74:	2301      	movs	r3, #1
 8025a76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8025a7a:	461a      	mov	r2, r3
 8025a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8025a7e:	e00c      	b.n	8025a9a <_dtoa_r+0x28a>
 8025a80:	2301      	movs	r3, #1
 8025a82:	e7f3      	b.n	8025a6c <_dtoa_r+0x25c>
 8025a84:	2300      	movs	r3, #0
 8025a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025a88:	9308      	str	r3, [sp, #32]
 8025a8a:	9b00      	ldr	r3, [sp, #0]
 8025a8c:	4413      	add	r3, r2
 8025a8e:	9302      	str	r3, [sp, #8]
 8025a90:	3301      	adds	r3, #1
 8025a92:	2b01      	cmp	r3, #1
 8025a94:	9303      	str	r3, [sp, #12]
 8025a96:	bfb8      	it	lt
 8025a98:	2301      	movlt	r3, #1
 8025a9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8025a9c:	2200      	movs	r2, #0
 8025a9e:	6042      	str	r2, [r0, #4]
 8025aa0:	2204      	movs	r2, #4
 8025aa2:	f102 0614 	add.w	r6, r2, #20
 8025aa6:	429e      	cmp	r6, r3
 8025aa8:	6841      	ldr	r1, [r0, #4]
 8025aaa:	d93d      	bls.n	8025b28 <_dtoa_r+0x318>
 8025aac:	4620      	mov	r0, r4
 8025aae:	f001 fa4b 	bl	8026f48 <_Balloc>
 8025ab2:	9001      	str	r0, [sp, #4]
 8025ab4:	2800      	cmp	r0, #0
 8025ab6:	d13b      	bne.n	8025b30 <_dtoa_r+0x320>
 8025ab8:	4b11      	ldr	r3, [pc, #68]	; (8025b00 <_dtoa_r+0x2f0>)
 8025aba:	4602      	mov	r2, r0
 8025abc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8025ac0:	e6c0      	b.n	8025844 <_dtoa_r+0x34>
 8025ac2:	2301      	movs	r3, #1
 8025ac4:	e7df      	b.n	8025a86 <_dtoa_r+0x276>
 8025ac6:	bf00      	nop
 8025ac8:	636f4361 	.word	0x636f4361
 8025acc:	3fd287a7 	.word	0x3fd287a7
 8025ad0:	8b60c8b3 	.word	0x8b60c8b3
 8025ad4:	3fc68a28 	.word	0x3fc68a28
 8025ad8:	509f79fb 	.word	0x509f79fb
 8025adc:	3fd34413 	.word	0x3fd34413
 8025ae0:	0802a3f6 	.word	0x0802a3f6
 8025ae4:	0802a40d 	.word	0x0802a40d
 8025ae8:	7ff00000 	.word	0x7ff00000
 8025aec:	0802a3f2 	.word	0x0802a3f2
 8025af0:	0802a3e9 	.word	0x0802a3e9
 8025af4:	0802a272 	.word	0x0802a272
 8025af8:	3ff80000 	.word	0x3ff80000
 8025afc:	0802a5e0 	.word	0x0802a5e0
 8025b00:	0802a468 	.word	0x0802a468
 8025b04:	2501      	movs	r5, #1
 8025b06:	2300      	movs	r3, #0
 8025b08:	9306      	str	r3, [sp, #24]
 8025b0a:	9508      	str	r5, [sp, #32]
 8025b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8025b10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8025b14:	2200      	movs	r2, #0
 8025b16:	2312      	movs	r3, #18
 8025b18:	e7b0      	b.n	8025a7c <_dtoa_r+0x26c>
 8025b1a:	2301      	movs	r3, #1
 8025b1c:	9308      	str	r3, [sp, #32]
 8025b1e:	e7f5      	b.n	8025b0c <_dtoa_r+0x2fc>
 8025b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8025b26:	e7b8      	b.n	8025a9a <_dtoa_r+0x28a>
 8025b28:	3101      	adds	r1, #1
 8025b2a:	6041      	str	r1, [r0, #4]
 8025b2c:	0052      	lsls	r2, r2, #1
 8025b2e:	e7b8      	b.n	8025aa2 <_dtoa_r+0x292>
 8025b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025b32:	9a01      	ldr	r2, [sp, #4]
 8025b34:	601a      	str	r2, [r3, #0]
 8025b36:	9b03      	ldr	r3, [sp, #12]
 8025b38:	2b0e      	cmp	r3, #14
 8025b3a:	f200 809d 	bhi.w	8025c78 <_dtoa_r+0x468>
 8025b3e:	2d00      	cmp	r5, #0
 8025b40:	f000 809a 	beq.w	8025c78 <_dtoa_r+0x468>
 8025b44:	9b00      	ldr	r3, [sp, #0]
 8025b46:	2b00      	cmp	r3, #0
 8025b48:	dd32      	ble.n	8025bb0 <_dtoa_r+0x3a0>
 8025b4a:	4ab7      	ldr	r2, [pc, #732]	; (8025e28 <_dtoa_r+0x618>)
 8025b4c:	f003 030f 	and.w	r3, r3, #15
 8025b50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8025b54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8025b58:	9b00      	ldr	r3, [sp, #0]
 8025b5a:	05d8      	lsls	r0, r3, #23
 8025b5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8025b60:	d516      	bpl.n	8025b90 <_dtoa_r+0x380>
 8025b62:	4bb2      	ldr	r3, [pc, #712]	; (8025e2c <_dtoa_r+0x61c>)
 8025b64:	ec51 0b19 	vmov	r0, r1, d9
 8025b68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8025b6c:	f7da fe78 	bl	8000860 <__aeabi_ddiv>
 8025b70:	f007 070f 	and.w	r7, r7, #15
 8025b74:	4682      	mov	sl, r0
 8025b76:	468b      	mov	fp, r1
 8025b78:	2503      	movs	r5, #3
 8025b7a:	4eac      	ldr	r6, [pc, #688]	; (8025e2c <_dtoa_r+0x61c>)
 8025b7c:	b957      	cbnz	r7, 8025b94 <_dtoa_r+0x384>
 8025b7e:	4642      	mov	r2, r8
 8025b80:	464b      	mov	r3, r9
 8025b82:	4650      	mov	r0, sl
 8025b84:	4659      	mov	r1, fp
 8025b86:	f7da fe6b 	bl	8000860 <__aeabi_ddiv>
 8025b8a:	4682      	mov	sl, r0
 8025b8c:	468b      	mov	fp, r1
 8025b8e:	e028      	b.n	8025be2 <_dtoa_r+0x3d2>
 8025b90:	2502      	movs	r5, #2
 8025b92:	e7f2      	b.n	8025b7a <_dtoa_r+0x36a>
 8025b94:	07f9      	lsls	r1, r7, #31
 8025b96:	d508      	bpl.n	8025baa <_dtoa_r+0x39a>
 8025b98:	4640      	mov	r0, r8
 8025b9a:	4649      	mov	r1, r9
 8025b9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8025ba0:	f7da fd34 	bl	800060c <__aeabi_dmul>
 8025ba4:	3501      	adds	r5, #1
 8025ba6:	4680      	mov	r8, r0
 8025ba8:	4689      	mov	r9, r1
 8025baa:	107f      	asrs	r7, r7, #1
 8025bac:	3608      	adds	r6, #8
 8025bae:	e7e5      	b.n	8025b7c <_dtoa_r+0x36c>
 8025bb0:	f000 809b 	beq.w	8025cea <_dtoa_r+0x4da>
 8025bb4:	9b00      	ldr	r3, [sp, #0]
 8025bb6:	4f9d      	ldr	r7, [pc, #628]	; (8025e2c <_dtoa_r+0x61c>)
 8025bb8:	425e      	negs	r6, r3
 8025bba:	4b9b      	ldr	r3, [pc, #620]	; (8025e28 <_dtoa_r+0x618>)
 8025bbc:	f006 020f 	and.w	r2, r6, #15
 8025bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025bc8:	ec51 0b19 	vmov	r0, r1, d9
 8025bcc:	f7da fd1e 	bl	800060c <__aeabi_dmul>
 8025bd0:	1136      	asrs	r6, r6, #4
 8025bd2:	4682      	mov	sl, r0
 8025bd4:	468b      	mov	fp, r1
 8025bd6:	2300      	movs	r3, #0
 8025bd8:	2502      	movs	r5, #2
 8025bda:	2e00      	cmp	r6, #0
 8025bdc:	d17a      	bne.n	8025cd4 <_dtoa_r+0x4c4>
 8025bde:	2b00      	cmp	r3, #0
 8025be0:	d1d3      	bne.n	8025b8a <_dtoa_r+0x37a>
 8025be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025be4:	2b00      	cmp	r3, #0
 8025be6:	f000 8082 	beq.w	8025cee <_dtoa_r+0x4de>
 8025bea:	4b91      	ldr	r3, [pc, #580]	; (8025e30 <_dtoa_r+0x620>)
 8025bec:	2200      	movs	r2, #0
 8025bee:	4650      	mov	r0, sl
 8025bf0:	4659      	mov	r1, fp
 8025bf2:	f7da ff7d 	bl	8000af0 <__aeabi_dcmplt>
 8025bf6:	2800      	cmp	r0, #0
 8025bf8:	d079      	beq.n	8025cee <_dtoa_r+0x4de>
 8025bfa:	9b03      	ldr	r3, [sp, #12]
 8025bfc:	2b00      	cmp	r3, #0
 8025bfe:	d076      	beq.n	8025cee <_dtoa_r+0x4de>
 8025c00:	9b02      	ldr	r3, [sp, #8]
 8025c02:	2b00      	cmp	r3, #0
 8025c04:	dd36      	ble.n	8025c74 <_dtoa_r+0x464>
 8025c06:	9b00      	ldr	r3, [sp, #0]
 8025c08:	4650      	mov	r0, sl
 8025c0a:	4659      	mov	r1, fp
 8025c0c:	1e5f      	subs	r7, r3, #1
 8025c0e:	2200      	movs	r2, #0
 8025c10:	4b88      	ldr	r3, [pc, #544]	; (8025e34 <_dtoa_r+0x624>)
 8025c12:	f7da fcfb 	bl	800060c <__aeabi_dmul>
 8025c16:	9e02      	ldr	r6, [sp, #8]
 8025c18:	4682      	mov	sl, r0
 8025c1a:	468b      	mov	fp, r1
 8025c1c:	3501      	adds	r5, #1
 8025c1e:	4628      	mov	r0, r5
 8025c20:	f7da fc8a 	bl	8000538 <__aeabi_i2d>
 8025c24:	4652      	mov	r2, sl
 8025c26:	465b      	mov	r3, fp
 8025c28:	f7da fcf0 	bl	800060c <__aeabi_dmul>
 8025c2c:	4b82      	ldr	r3, [pc, #520]	; (8025e38 <_dtoa_r+0x628>)
 8025c2e:	2200      	movs	r2, #0
 8025c30:	f7da fb36 	bl	80002a0 <__adddf3>
 8025c34:	46d0      	mov	r8, sl
 8025c36:	46d9      	mov	r9, fp
 8025c38:	4682      	mov	sl, r0
 8025c3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8025c3e:	2e00      	cmp	r6, #0
 8025c40:	d158      	bne.n	8025cf4 <_dtoa_r+0x4e4>
 8025c42:	4b7e      	ldr	r3, [pc, #504]	; (8025e3c <_dtoa_r+0x62c>)
 8025c44:	2200      	movs	r2, #0
 8025c46:	4640      	mov	r0, r8
 8025c48:	4649      	mov	r1, r9
 8025c4a:	f7da fb27 	bl	800029c <__aeabi_dsub>
 8025c4e:	4652      	mov	r2, sl
 8025c50:	465b      	mov	r3, fp
 8025c52:	4680      	mov	r8, r0
 8025c54:	4689      	mov	r9, r1
 8025c56:	f7da ff69 	bl	8000b2c <__aeabi_dcmpgt>
 8025c5a:	2800      	cmp	r0, #0
 8025c5c:	f040 8295 	bne.w	802618a <_dtoa_r+0x97a>
 8025c60:	4652      	mov	r2, sl
 8025c62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8025c66:	4640      	mov	r0, r8
 8025c68:	4649      	mov	r1, r9
 8025c6a:	f7da ff41 	bl	8000af0 <__aeabi_dcmplt>
 8025c6e:	2800      	cmp	r0, #0
 8025c70:	f040 8289 	bne.w	8026186 <_dtoa_r+0x976>
 8025c74:	ec5b ab19 	vmov	sl, fp, d9
 8025c78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025c7a:	2b00      	cmp	r3, #0
 8025c7c:	f2c0 8148 	blt.w	8025f10 <_dtoa_r+0x700>
 8025c80:	9a00      	ldr	r2, [sp, #0]
 8025c82:	2a0e      	cmp	r2, #14
 8025c84:	f300 8144 	bgt.w	8025f10 <_dtoa_r+0x700>
 8025c88:	4b67      	ldr	r3, [pc, #412]	; (8025e28 <_dtoa_r+0x618>)
 8025c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025c8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8025c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c94:	2b00      	cmp	r3, #0
 8025c96:	f280 80d5 	bge.w	8025e44 <_dtoa_r+0x634>
 8025c9a:	9b03      	ldr	r3, [sp, #12]
 8025c9c:	2b00      	cmp	r3, #0
 8025c9e:	f300 80d1 	bgt.w	8025e44 <_dtoa_r+0x634>
 8025ca2:	f040 826f 	bne.w	8026184 <_dtoa_r+0x974>
 8025ca6:	4b65      	ldr	r3, [pc, #404]	; (8025e3c <_dtoa_r+0x62c>)
 8025ca8:	2200      	movs	r2, #0
 8025caa:	4640      	mov	r0, r8
 8025cac:	4649      	mov	r1, r9
 8025cae:	f7da fcad 	bl	800060c <__aeabi_dmul>
 8025cb2:	4652      	mov	r2, sl
 8025cb4:	465b      	mov	r3, fp
 8025cb6:	f7da ff2f 	bl	8000b18 <__aeabi_dcmpge>
 8025cba:	9e03      	ldr	r6, [sp, #12]
 8025cbc:	4637      	mov	r7, r6
 8025cbe:	2800      	cmp	r0, #0
 8025cc0:	f040 8245 	bne.w	802614e <_dtoa_r+0x93e>
 8025cc4:	9d01      	ldr	r5, [sp, #4]
 8025cc6:	2331      	movs	r3, #49	; 0x31
 8025cc8:	f805 3b01 	strb.w	r3, [r5], #1
 8025ccc:	9b00      	ldr	r3, [sp, #0]
 8025cce:	3301      	adds	r3, #1
 8025cd0:	9300      	str	r3, [sp, #0]
 8025cd2:	e240      	b.n	8026156 <_dtoa_r+0x946>
 8025cd4:	07f2      	lsls	r2, r6, #31
 8025cd6:	d505      	bpl.n	8025ce4 <_dtoa_r+0x4d4>
 8025cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025cdc:	f7da fc96 	bl	800060c <__aeabi_dmul>
 8025ce0:	3501      	adds	r5, #1
 8025ce2:	2301      	movs	r3, #1
 8025ce4:	1076      	asrs	r6, r6, #1
 8025ce6:	3708      	adds	r7, #8
 8025ce8:	e777      	b.n	8025bda <_dtoa_r+0x3ca>
 8025cea:	2502      	movs	r5, #2
 8025cec:	e779      	b.n	8025be2 <_dtoa_r+0x3d2>
 8025cee:	9f00      	ldr	r7, [sp, #0]
 8025cf0:	9e03      	ldr	r6, [sp, #12]
 8025cf2:	e794      	b.n	8025c1e <_dtoa_r+0x40e>
 8025cf4:	9901      	ldr	r1, [sp, #4]
 8025cf6:	4b4c      	ldr	r3, [pc, #304]	; (8025e28 <_dtoa_r+0x618>)
 8025cf8:	4431      	add	r1, r6
 8025cfa:	910d      	str	r1, [sp, #52]	; 0x34
 8025cfc:	9908      	ldr	r1, [sp, #32]
 8025cfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8025d02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025d06:	2900      	cmp	r1, #0
 8025d08:	d043      	beq.n	8025d92 <_dtoa_r+0x582>
 8025d0a:	494d      	ldr	r1, [pc, #308]	; (8025e40 <_dtoa_r+0x630>)
 8025d0c:	2000      	movs	r0, #0
 8025d0e:	f7da fda7 	bl	8000860 <__aeabi_ddiv>
 8025d12:	4652      	mov	r2, sl
 8025d14:	465b      	mov	r3, fp
 8025d16:	f7da fac1 	bl	800029c <__aeabi_dsub>
 8025d1a:	9d01      	ldr	r5, [sp, #4]
 8025d1c:	4682      	mov	sl, r0
 8025d1e:	468b      	mov	fp, r1
 8025d20:	4649      	mov	r1, r9
 8025d22:	4640      	mov	r0, r8
 8025d24:	f7da ff22 	bl	8000b6c <__aeabi_d2iz>
 8025d28:	4606      	mov	r6, r0
 8025d2a:	f7da fc05 	bl	8000538 <__aeabi_i2d>
 8025d2e:	4602      	mov	r2, r0
 8025d30:	460b      	mov	r3, r1
 8025d32:	4640      	mov	r0, r8
 8025d34:	4649      	mov	r1, r9
 8025d36:	f7da fab1 	bl	800029c <__aeabi_dsub>
 8025d3a:	3630      	adds	r6, #48	; 0x30
 8025d3c:	f805 6b01 	strb.w	r6, [r5], #1
 8025d40:	4652      	mov	r2, sl
 8025d42:	465b      	mov	r3, fp
 8025d44:	4680      	mov	r8, r0
 8025d46:	4689      	mov	r9, r1
 8025d48:	f7da fed2 	bl	8000af0 <__aeabi_dcmplt>
 8025d4c:	2800      	cmp	r0, #0
 8025d4e:	d163      	bne.n	8025e18 <_dtoa_r+0x608>
 8025d50:	4642      	mov	r2, r8
 8025d52:	464b      	mov	r3, r9
 8025d54:	4936      	ldr	r1, [pc, #216]	; (8025e30 <_dtoa_r+0x620>)
 8025d56:	2000      	movs	r0, #0
 8025d58:	f7da faa0 	bl	800029c <__aeabi_dsub>
 8025d5c:	4652      	mov	r2, sl
 8025d5e:	465b      	mov	r3, fp
 8025d60:	f7da fec6 	bl	8000af0 <__aeabi_dcmplt>
 8025d64:	2800      	cmp	r0, #0
 8025d66:	f040 80b5 	bne.w	8025ed4 <_dtoa_r+0x6c4>
 8025d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025d6c:	429d      	cmp	r5, r3
 8025d6e:	d081      	beq.n	8025c74 <_dtoa_r+0x464>
 8025d70:	4b30      	ldr	r3, [pc, #192]	; (8025e34 <_dtoa_r+0x624>)
 8025d72:	2200      	movs	r2, #0
 8025d74:	4650      	mov	r0, sl
 8025d76:	4659      	mov	r1, fp
 8025d78:	f7da fc48 	bl	800060c <__aeabi_dmul>
 8025d7c:	4b2d      	ldr	r3, [pc, #180]	; (8025e34 <_dtoa_r+0x624>)
 8025d7e:	4682      	mov	sl, r0
 8025d80:	468b      	mov	fp, r1
 8025d82:	4640      	mov	r0, r8
 8025d84:	4649      	mov	r1, r9
 8025d86:	2200      	movs	r2, #0
 8025d88:	f7da fc40 	bl	800060c <__aeabi_dmul>
 8025d8c:	4680      	mov	r8, r0
 8025d8e:	4689      	mov	r9, r1
 8025d90:	e7c6      	b.n	8025d20 <_dtoa_r+0x510>
 8025d92:	4650      	mov	r0, sl
 8025d94:	4659      	mov	r1, fp
 8025d96:	f7da fc39 	bl	800060c <__aeabi_dmul>
 8025d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025d9c:	9d01      	ldr	r5, [sp, #4]
 8025d9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025da0:	4682      	mov	sl, r0
 8025da2:	468b      	mov	fp, r1
 8025da4:	4649      	mov	r1, r9
 8025da6:	4640      	mov	r0, r8
 8025da8:	f7da fee0 	bl	8000b6c <__aeabi_d2iz>
 8025dac:	4606      	mov	r6, r0
 8025dae:	f7da fbc3 	bl	8000538 <__aeabi_i2d>
 8025db2:	3630      	adds	r6, #48	; 0x30
 8025db4:	4602      	mov	r2, r0
 8025db6:	460b      	mov	r3, r1
 8025db8:	4640      	mov	r0, r8
 8025dba:	4649      	mov	r1, r9
 8025dbc:	f7da fa6e 	bl	800029c <__aeabi_dsub>
 8025dc0:	f805 6b01 	strb.w	r6, [r5], #1
 8025dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025dc6:	429d      	cmp	r5, r3
 8025dc8:	4680      	mov	r8, r0
 8025dca:	4689      	mov	r9, r1
 8025dcc:	f04f 0200 	mov.w	r2, #0
 8025dd0:	d124      	bne.n	8025e1c <_dtoa_r+0x60c>
 8025dd2:	4b1b      	ldr	r3, [pc, #108]	; (8025e40 <_dtoa_r+0x630>)
 8025dd4:	4650      	mov	r0, sl
 8025dd6:	4659      	mov	r1, fp
 8025dd8:	f7da fa62 	bl	80002a0 <__adddf3>
 8025ddc:	4602      	mov	r2, r0
 8025dde:	460b      	mov	r3, r1
 8025de0:	4640      	mov	r0, r8
 8025de2:	4649      	mov	r1, r9
 8025de4:	f7da fea2 	bl	8000b2c <__aeabi_dcmpgt>
 8025de8:	2800      	cmp	r0, #0
 8025dea:	d173      	bne.n	8025ed4 <_dtoa_r+0x6c4>
 8025dec:	4652      	mov	r2, sl
 8025dee:	465b      	mov	r3, fp
 8025df0:	4913      	ldr	r1, [pc, #76]	; (8025e40 <_dtoa_r+0x630>)
 8025df2:	2000      	movs	r0, #0
 8025df4:	f7da fa52 	bl	800029c <__aeabi_dsub>
 8025df8:	4602      	mov	r2, r0
 8025dfa:	460b      	mov	r3, r1
 8025dfc:	4640      	mov	r0, r8
 8025dfe:	4649      	mov	r1, r9
 8025e00:	f7da fe76 	bl	8000af0 <__aeabi_dcmplt>
 8025e04:	2800      	cmp	r0, #0
 8025e06:	f43f af35 	beq.w	8025c74 <_dtoa_r+0x464>
 8025e0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025e0c:	1e6b      	subs	r3, r5, #1
 8025e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025e10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025e14:	2b30      	cmp	r3, #48	; 0x30
 8025e16:	d0f8      	beq.n	8025e0a <_dtoa_r+0x5fa>
 8025e18:	9700      	str	r7, [sp, #0]
 8025e1a:	e049      	b.n	8025eb0 <_dtoa_r+0x6a0>
 8025e1c:	4b05      	ldr	r3, [pc, #20]	; (8025e34 <_dtoa_r+0x624>)
 8025e1e:	f7da fbf5 	bl	800060c <__aeabi_dmul>
 8025e22:	4680      	mov	r8, r0
 8025e24:	4689      	mov	r9, r1
 8025e26:	e7bd      	b.n	8025da4 <_dtoa_r+0x594>
 8025e28:	0802a5e0 	.word	0x0802a5e0
 8025e2c:	0802a5b8 	.word	0x0802a5b8
 8025e30:	3ff00000 	.word	0x3ff00000
 8025e34:	40240000 	.word	0x40240000
 8025e38:	401c0000 	.word	0x401c0000
 8025e3c:	40140000 	.word	0x40140000
 8025e40:	3fe00000 	.word	0x3fe00000
 8025e44:	9d01      	ldr	r5, [sp, #4]
 8025e46:	4656      	mov	r6, sl
 8025e48:	465f      	mov	r7, fp
 8025e4a:	4642      	mov	r2, r8
 8025e4c:	464b      	mov	r3, r9
 8025e4e:	4630      	mov	r0, r6
 8025e50:	4639      	mov	r1, r7
 8025e52:	f7da fd05 	bl	8000860 <__aeabi_ddiv>
 8025e56:	f7da fe89 	bl	8000b6c <__aeabi_d2iz>
 8025e5a:	4682      	mov	sl, r0
 8025e5c:	f7da fb6c 	bl	8000538 <__aeabi_i2d>
 8025e60:	4642      	mov	r2, r8
 8025e62:	464b      	mov	r3, r9
 8025e64:	f7da fbd2 	bl	800060c <__aeabi_dmul>
 8025e68:	4602      	mov	r2, r0
 8025e6a:	460b      	mov	r3, r1
 8025e6c:	4630      	mov	r0, r6
 8025e6e:	4639      	mov	r1, r7
 8025e70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8025e74:	f7da fa12 	bl	800029c <__aeabi_dsub>
 8025e78:	f805 6b01 	strb.w	r6, [r5], #1
 8025e7c:	9e01      	ldr	r6, [sp, #4]
 8025e7e:	9f03      	ldr	r7, [sp, #12]
 8025e80:	1bae      	subs	r6, r5, r6
 8025e82:	42b7      	cmp	r7, r6
 8025e84:	4602      	mov	r2, r0
 8025e86:	460b      	mov	r3, r1
 8025e88:	d135      	bne.n	8025ef6 <_dtoa_r+0x6e6>
 8025e8a:	f7da fa09 	bl	80002a0 <__adddf3>
 8025e8e:	4642      	mov	r2, r8
 8025e90:	464b      	mov	r3, r9
 8025e92:	4606      	mov	r6, r0
 8025e94:	460f      	mov	r7, r1
 8025e96:	f7da fe49 	bl	8000b2c <__aeabi_dcmpgt>
 8025e9a:	b9d0      	cbnz	r0, 8025ed2 <_dtoa_r+0x6c2>
 8025e9c:	4642      	mov	r2, r8
 8025e9e:	464b      	mov	r3, r9
 8025ea0:	4630      	mov	r0, r6
 8025ea2:	4639      	mov	r1, r7
 8025ea4:	f7da fe1a 	bl	8000adc <__aeabi_dcmpeq>
 8025ea8:	b110      	cbz	r0, 8025eb0 <_dtoa_r+0x6a0>
 8025eaa:	f01a 0f01 	tst.w	sl, #1
 8025eae:	d110      	bne.n	8025ed2 <_dtoa_r+0x6c2>
 8025eb0:	4620      	mov	r0, r4
 8025eb2:	ee18 1a10 	vmov	r1, s16
 8025eb6:	f001 f887 	bl	8026fc8 <_Bfree>
 8025eba:	2300      	movs	r3, #0
 8025ebc:	9800      	ldr	r0, [sp, #0]
 8025ebe:	702b      	strb	r3, [r5, #0]
 8025ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025ec2:	3001      	adds	r0, #1
 8025ec4:	6018      	str	r0, [r3, #0]
 8025ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025ec8:	2b00      	cmp	r3, #0
 8025eca:	f43f acf1 	beq.w	80258b0 <_dtoa_r+0xa0>
 8025ece:	601d      	str	r5, [r3, #0]
 8025ed0:	e4ee      	b.n	80258b0 <_dtoa_r+0xa0>
 8025ed2:	9f00      	ldr	r7, [sp, #0]
 8025ed4:	462b      	mov	r3, r5
 8025ed6:	461d      	mov	r5, r3
 8025ed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025edc:	2a39      	cmp	r2, #57	; 0x39
 8025ede:	d106      	bne.n	8025eee <_dtoa_r+0x6de>
 8025ee0:	9a01      	ldr	r2, [sp, #4]
 8025ee2:	429a      	cmp	r2, r3
 8025ee4:	d1f7      	bne.n	8025ed6 <_dtoa_r+0x6c6>
 8025ee6:	9901      	ldr	r1, [sp, #4]
 8025ee8:	2230      	movs	r2, #48	; 0x30
 8025eea:	3701      	adds	r7, #1
 8025eec:	700a      	strb	r2, [r1, #0]
 8025eee:	781a      	ldrb	r2, [r3, #0]
 8025ef0:	3201      	adds	r2, #1
 8025ef2:	701a      	strb	r2, [r3, #0]
 8025ef4:	e790      	b.n	8025e18 <_dtoa_r+0x608>
 8025ef6:	4ba6      	ldr	r3, [pc, #664]	; (8026190 <_dtoa_r+0x980>)
 8025ef8:	2200      	movs	r2, #0
 8025efa:	f7da fb87 	bl	800060c <__aeabi_dmul>
 8025efe:	2200      	movs	r2, #0
 8025f00:	2300      	movs	r3, #0
 8025f02:	4606      	mov	r6, r0
 8025f04:	460f      	mov	r7, r1
 8025f06:	f7da fde9 	bl	8000adc <__aeabi_dcmpeq>
 8025f0a:	2800      	cmp	r0, #0
 8025f0c:	d09d      	beq.n	8025e4a <_dtoa_r+0x63a>
 8025f0e:	e7cf      	b.n	8025eb0 <_dtoa_r+0x6a0>
 8025f10:	9a08      	ldr	r2, [sp, #32]
 8025f12:	2a00      	cmp	r2, #0
 8025f14:	f000 80d7 	beq.w	80260c6 <_dtoa_r+0x8b6>
 8025f18:	9a06      	ldr	r2, [sp, #24]
 8025f1a:	2a01      	cmp	r2, #1
 8025f1c:	f300 80ba 	bgt.w	8026094 <_dtoa_r+0x884>
 8025f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025f22:	2a00      	cmp	r2, #0
 8025f24:	f000 80b2 	beq.w	802608c <_dtoa_r+0x87c>
 8025f28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8025f2c:	9e07      	ldr	r6, [sp, #28]
 8025f2e:	9d04      	ldr	r5, [sp, #16]
 8025f30:	9a04      	ldr	r2, [sp, #16]
 8025f32:	441a      	add	r2, r3
 8025f34:	9204      	str	r2, [sp, #16]
 8025f36:	9a05      	ldr	r2, [sp, #20]
 8025f38:	2101      	movs	r1, #1
 8025f3a:	441a      	add	r2, r3
 8025f3c:	4620      	mov	r0, r4
 8025f3e:	9205      	str	r2, [sp, #20]
 8025f40:	f001 f944 	bl	80271cc <__i2b>
 8025f44:	4607      	mov	r7, r0
 8025f46:	2d00      	cmp	r5, #0
 8025f48:	dd0c      	ble.n	8025f64 <_dtoa_r+0x754>
 8025f4a:	9b05      	ldr	r3, [sp, #20]
 8025f4c:	2b00      	cmp	r3, #0
 8025f4e:	dd09      	ble.n	8025f64 <_dtoa_r+0x754>
 8025f50:	42ab      	cmp	r3, r5
 8025f52:	9a04      	ldr	r2, [sp, #16]
 8025f54:	bfa8      	it	ge
 8025f56:	462b      	movge	r3, r5
 8025f58:	1ad2      	subs	r2, r2, r3
 8025f5a:	9204      	str	r2, [sp, #16]
 8025f5c:	9a05      	ldr	r2, [sp, #20]
 8025f5e:	1aed      	subs	r5, r5, r3
 8025f60:	1ad3      	subs	r3, r2, r3
 8025f62:	9305      	str	r3, [sp, #20]
 8025f64:	9b07      	ldr	r3, [sp, #28]
 8025f66:	b31b      	cbz	r3, 8025fb0 <_dtoa_r+0x7a0>
 8025f68:	9b08      	ldr	r3, [sp, #32]
 8025f6a:	2b00      	cmp	r3, #0
 8025f6c:	f000 80af 	beq.w	80260ce <_dtoa_r+0x8be>
 8025f70:	2e00      	cmp	r6, #0
 8025f72:	dd13      	ble.n	8025f9c <_dtoa_r+0x78c>
 8025f74:	4639      	mov	r1, r7
 8025f76:	4632      	mov	r2, r6
 8025f78:	4620      	mov	r0, r4
 8025f7a:	f001 f9e7 	bl	802734c <__pow5mult>
 8025f7e:	ee18 2a10 	vmov	r2, s16
 8025f82:	4601      	mov	r1, r0
 8025f84:	4607      	mov	r7, r0
 8025f86:	4620      	mov	r0, r4
 8025f88:	f001 f936 	bl	80271f8 <__multiply>
 8025f8c:	ee18 1a10 	vmov	r1, s16
 8025f90:	4680      	mov	r8, r0
 8025f92:	4620      	mov	r0, r4
 8025f94:	f001 f818 	bl	8026fc8 <_Bfree>
 8025f98:	ee08 8a10 	vmov	s16, r8
 8025f9c:	9b07      	ldr	r3, [sp, #28]
 8025f9e:	1b9a      	subs	r2, r3, r6
 8025fa0:	d006      	beq.n	8025fb0 <_dtoa_r+0x7a0>
 8025fa2:	ee18 1a10 	vmov	r1, s16
 8025fa6:	4620      	mov	r0, r4
 8025fa8:	f001 f9d0 	bl	802734c <__pow5mult>
 8025fac:	ee08 0a10 	vmov	s16, r0
 8025fb0:	2101      	movs	r1, #1
 8025fb2:	4620      	mov	r0, r4
 8025fb4:	f001 f90a 	bl	80271cc <__i2b>
 8025fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025fba:	2b00      	cmp	r3, #0
 8025fbc:	4606      	mov	r6, r0
 8025fbe:	f340 8088 	ble.w	80260d2 <_dtoa_r+0x8c2>
 8025fc2:	461a      	mov	r2, r3
 8025fc4:	4601      	mov	r1, r0
 8025fc6:	4620      	mov	r0, r4
 8025fc8:	f001 f9c0 	bl	802734c <__pow5mult>
 8025fcc:	9b06      	ldr	r3, [sp, #24]
 8025fce:	2b01      	cmp	r3, #1
 8025fd0:	4606      	mov	r6, r0
 8025fd2:	f340 8081 	ble.w	80260d8 <_dtoa_r+0x8c8>
 8025fd6:	f04f 0800 	mov.w	r8, #0
 8025fda:	6933      	ldr	r3, [r6, #16]
 8025fdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8025fe0:	6918      	ldr	r0, [r3, #16]
 8025fe2:	f001 f8a3 	bl	802712c <__hi0bits>
 8025fe6:	f1c0 0020 	rsb	r0, r0, #32
 8025fea:	9b05      	ldr	r3, [sp, #20]
 8025fec:	4418      	add	r0, r3
 8025fee:	f010 001f 	ands.w	r0, r0, #31
 8025ff2:	f000 8092 	beq.w	802611a <_dtoa_r+0x90a>
 8025ff6:	f1c0 0320 	rsb	r3, r0, #32
 8025ffa:	2b04      	cmp	r3, #4
 8025ffc:	f340 808a 	ble.w	8026114 <_dtoa_r+0x904>
 8026000:	f1c0 001c 	rsb	r0, r0, #28
 8026004:	9b04      	ldr	r3, [sp, #16]
 8026006:	4403      	add	r3, r0
 8026008:	9304      	str	r3, [sp, #16]
 802600a:	9b05      	ldr	r3, [sp, #20]
 802600c:	4403      	add	r3, r0
 802600e:	4405      	add	r5, r0
 8026010:	9305      	str	r3, [sp, #20]
 8026012:	9b04      	ldr	r3, [sp, #16]
 8026014:	2b00      	cmp	r3, #0
 8026016:	dd07      	ble.n	8026028 <_dtoa_r+0x818>
 8026018:	ee18 1a10 	vmov	r1, s16
 802601c:	461a      	mov	r2, r3
 802601e:	4620      	mov	r0, r4
 8026020:	f001 f9ee 	bl	8027400 <__lshift>
 8026024:	ee08 0a10 	vmov	s16, r0
 8026028:	9b05      	ldr	r3, [sp, #20]
 802602a:	2b00      	cmp	r3, #0
 802602c:	dd05      	ble.n	802603a <_dtoa_r+0x82a>
 802602e:	4631      	mov	r1, r6
 8026030:	461a      	mov	r2, r3
 8026032:	4620      	mov	r0, r4
 8026034:	f001 f9e4 	bl	8027400 <__lshift>
 8026038:	4606      	mov	r6, r0
 802603a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802603c:	2b00      	cmp	r3, #0
 802603e:	d06e      	beq.n	802611e <_dtoa_r+0x90e>
 8026040:	ee18 0a10 	vmov	r0, s16
 8026044:	4631      	mov	r1, r6
 8026046:	f001 fa4b 	bl	80274e0 <__mcmp>
 802604a:	2800      	cmp	r0, #0
 802604c:	da67      	bge.n	802611e <_dtoa_r+0x90e>
 802604e:	9b00      	ldr	r3, [sp, #0]
 8026050:	3b01      	subs	r3, #1
 8026052:	ee18 1a10 	vmov	r1, s16
 8026056:	9300      	str	r3, [sp, #0]
 8026058:	220a      	movs	r2, #10
 802605a:	2300      	movs	r3, #0
 802605c:	4620      	mov	r0, r4
 802605e:	f000 ffd5 	bl	802700c <__multadd>
 8026062:	9b08      	ldr	r3, [sp, #32]
 8026064:	ee08 0a10 	vmov	s16, r0
 8026068:	2b00      	cmp	r3, #0
 802606a:	f000 81b1 	beq.w	80263d0 <_dtoa_r+0xbc0>
 802606e:	2300      	movs	r3, #0
 8026070:	4639      	mov	r1, r7
 8026072:	220a      	movs	r2, #10
 8026074:	4620      	mov	r0, r4
 8026076:	f000 ffc9 	bl	802700c <__multadd>
 802607a:	9b02      	ldr	r3, [sp, #8]
 802607c:	2b00      	cmp	r3, #0
 802607e:	4607      	mov	r7, r0
 8026080:	f300 808e 	bgt.w	80261a0 <_dtoa_r+0x990>
 8026084:	9b06      	ldr	r3, [sp, #24]
 8026086:	2b02      	cmp	r3, #2
 8026088:	dc51      	bgt.n	802612e <_dtoa_r+0x91e>
 802608a:	e089      	b.n	80261a0 <_dtoa_r+0x990>
 802608c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802608e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8026092:	e74b      	b.n	8025f2c <_dtoa_r+0x71c>
 8026094:	9b03      	ldr	r3, [sp, #12]
 8026096:	1e5e      	subs	r6, r3, #1
 8026098:	9b07      	ldr	r3, [sp, #28]
 802609a:	42b3      	cmp	r3, r6
 802609c:	bfbf      	itttt	lt
 802609e:	9b07      	ldrlt	r3, [sp, #28]
 80260a0:	9607      	strlt	r6, [sp, #28]
 80260a2:	1af2      	sublt	r2, r6, r3
 80260a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80260a6:	bfb6      	itet	lt
 80260a8:	189b      	addlt	r3, r3, r2
 80260aa:	1b9e      	subge	r6, r3, r6
 80260ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80260ae:	9b03      	ldr	r3, [sp, #12]
 80260b0:	bfb8      	it	lt
 80260b2:	2600      	movlt	r6, #0
 80260b4:	2b00      	cmp	r3, #0
 80260b6:	bfb7      	itett	lt
 80260b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80260bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80260c0:	1a9d      	sublt	r5, r3, r2
 80260c2:	2300      	movlt	r3, #0
 80260c4:	e734      	b.n	8025f30 <_dtoa_r+0x720>
 80260c6:	9e07      	ldr	r6, [sp, #28]
 80260c8:	9d04      	ldr	r5, [sp, #16]
 80260ca:	9f08      	ldr	r7, [sp, #32]
 80260cc:	e73b      	b.n	8025f46 <_dtoa_r+0x736>
 80260ce:	9a07      	ldr	r2, [sp, #28]
 80260d0:	e767      	b.n	8025fa2 <_dtoa_r+0x792>
 80260d2:	9b06      	ldr	r3, [sp, #24]
 80260d4:	2b01      	cmp	r3, #1
 80260d6:	dc18      	bgt.n	802610a <_dtoa_r+0x8fa>
 80260d8:	f1ba 0f00 	cmp.w	sl, #0
 80260dc:	d115      	bne.n	802610a <_dtoa_r+0x8fa>
 80260de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80260e2:	b993      	cbnz	r3, 802610a <_dtoa_r+0x8fa>
 80260e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80260e8:	0d1b      	lsrs	r3, r3, #20
 80260ea:	051b      	lsls	r3, r3, #20
 80260ec:	b183      	cbz	r3, 8026110 <_dtoa_r+0x900>
 80260ee:	9b04      	ldr	r3, [sp, #16]
 80260f0:	3301      	adds	r3, #1
 80260f2:	9304      	str	r3, [sp, #16]
 80260f4:	9b05      	ldr	r3, [sp, #20]
 80260f6:	3301      	adds	r3, #1
 80260f8:	9305      	str	r3, [sp, #20]
 80260fa:	f04f 0801 	mov.w	r8, #1
 80260fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026100:	2b00      	cmp	r3, #0
 8026102:	f47f af6a 	bne.w	8025fda <_dtoa_r+0x7ca>
 8026106:	2001      	movs	r0, #1
 8026108:	e76f      	b.n	8025fea <_dtoa_r+0x7da>
 802610a:	f04f 0800 	mov.w	r8, #0
 802610e:	e7f6      	b.n	80260fe <_dtoa_r+0x8ee>
 8026110:	4698      	mov	r8, r3
 8026112:	e7f4      	b.n	80260fe <_dtoa_r+0x8ee>
 8026114:	f43f af7d 	beq.w	8026012 <_dtoa_r+0x802>
 8026118:	4618      	mov	r0, r3
 802611a:	301c      	adds	r0, #28
 802611c:	e772      	b.n	8026004 <_dtoa_r+0x7f4>
 802611e:	9b03      	ldr	r3, [sp, #12]
 8026120:	2b00      	cmp	r3, #0
 8026122:	dc37      	bgt.n	8026194 <_dtoa_r+0x984>
 8026124:	9b06      	ldr	r3, [sp, #24]
 8026126:	2b02      	cmp	r3, #2
 8026128:	dd34      	ble.n	8026194 <_dtoa_r+0x984>
 802612a:	9b03      	ldr	r3, [sp, #12]
 802612c:	9302      	str	r3, [sp, #8]
 802612e:	9b02      	ldr	r3, [sp, #8]
 8026130:	b96b      	cbnz	r3, 802614e <_dtoa_r+0x93e>
 8026132:	4631      	mov	r1, r6
 8026134:	2205      	movs	r2, #5
 8026136:	4620      	mov	r0, r4
 8026138:	f000 ff68 	bl	802700c <__multadd>
 802613c:	4601      	mov	r1, r0
 802613e:	4606      	mov	r6, r0
 8026140:	ee18 0a10 	vmov	r0, s16
 8026144:	f001 f9cc 	bl	80274e0 <__mcmp>
 8026148:	2800      	cmp	r0, #0
 802614a:	f73f adbb 	bgt.w	8025cc4 <_dtoa_r+0x4b4>
 802614e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026150:	9d01      	ldr	r5, [sp, #4]
 8026152:	43db      	mvns	r3, r3
 8026154:	9300      	str	r3, [sp, #0]
 8026156:	f04f 0800 	mov.w	r8, #0
 802615a:	4631      	mov	r1, r6
 802615c:	4620      	mov	r0, r4
 802615e:	f000 ff33 	bl	8026fc8 <_Bfree>
 8026162:	2f00      	cmp	r7, #0
 8026164:	f43f aea4 	beq.w	8025eb0 <_dtoa_r+0x6a0>
 8026168:	f1b8 0f00 	cmp.w	r8, #0
 802616c:	d005      	beq.n	802617a <_dtoa_r+0x96a>
 802616e:	45b8      	cmp	r8, r7
 8026170:	d003      	beq.n	802617a <_dtoa_r+0x96a>
 8026172:	4641      	mov	r1, r8
 8026174:	4620      	mov	r0, r4
 8026176:	f000 ff27 	bl	8026fc8 <_Bfree>
 802617a:	4639      	mov	r1, r7
 802617c:	4620      	mov	r0, r4
 802617e:	f000 ff23 	bl	8026fc8 <_Bfree>
 8026182:	e695      	b.n	8025eb0 <_dtoa_r+0x6a0>
 8026184:	2600      	movs	r6, #0
 8026186:	4637      	mov	r7, r6
 8026188:	e7e1      	b.n	802614e <_dtoa_r+0x93e>
 802618a:	9700      	str	r7, [sp, #0]
 802618c:	4637      	mov	r7, r6
 802618e:	e599      	b.n	8025cc4 <_dtoa_r+0x4b4>
 8026190:	40240000 	.word	0x40240000
 8026194:	9b08      	ldr	r3, [sp, #32]
 8026196:	2b00      	cmp	r3, #0
 8026198:	f000 80ca 	beq.w	8026330 <_dtoa_r+0xb20>
 802619c:	9b03      	ldr	r3, [sp, #12]
 802619e:	9302      	str	r3, [sp, #8]
 80261a0:	2d00      	cmp	r5, #0
 80261a2:	dd05      	ble.n	80261b0 <_dtoa_r+0x9a0>
 80261a4:	4639      	mov	r1, r7
 80261a6:	462a      	mov	r2, r5
 80261a8:	4620      	mov	r0, r4
 80261aa:	f001 f929 	bl	8027400 <__lshift>
 80261ae:	4607      	mov	r7, r0
 80261b0:	f1b8 0f00 	cmp.w	r8, #0
 80261b4:	d05b      	beq.n	802626e <_dtoa_r+0xa5e>
 80261b6:	6879      	ldr	r1, [r7, #4]
 80261b8:	4620      	mov	r0, r4
 80261ba:	f000 fec5 	bl	8026f48 <_Balloc>
 80261be:	4605      	mov	r5, r0
 80261c0:	b928      	cbnz	r0, 80261ce <_dtoa_r+0x9be>
 80261c2:	4b87      	ldr	r3, [pc, #540]	; (80263e0 <_dtoa_r+0xbd0>)
 80261c4:	4602      	mov	r2, r0
 80261c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80261ca:	f7ff bb3b 	b.w	8025844 <_dtoa_r+0x34>
 80261ce:	693a      	ldr	r2, [r7, #16]
 80261d0:	3202      	adds	r2, #2
 80261d2:	0092      	lsls	r2, r2, #2
 80261d4:	f107 010c 	add.w	r1, r7, #12
 80261d8:	300c      	adds	r0, #12
 80261da:	f7fd fc29 	bl	8023a30 <memcpy>
 80261de:	2201      	movs	r2, #1
 80261e0:	4629      	mov	r1, r5
 80261e2:	4620      	mov	r0, r4
 80261e4:	f001 f90c 	bl	8027400 <__lshift>
 80261e8:	9b01      	ldr	r3, [sp, #4]
 80261ea:	f103 0901 	add.w	r9, r3, #1
 80261ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80261f2:	4413      	add	r3, r2
 80261f4:	9305      	str	r3, [sp, #20]
 80261f6:	f00a 0301 	and.w	r3, sl, #1
 80261fa:	46b8      	mov	r8, r7
 80261fc:	9304      	str	r3, [sp, #16]
 80261fe:	4607      	mov	r7, r0
 8026200:	4631      	mov	r1, r6
 8026202:	ee18 0a10 	vmov	r0, s16
 8026206:	f7ff fa75 	bl	80256f4 <quorem>
 802620a:	4641      	mov	r1, r8
 802620c:	9002      	str	r0, [sp, #8]
 802620e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8026212:	ee18 0a10 	vmov	r0, s16
 8026216:	f001 f963 	bl	80274e0 <__mcmp>
 802621a:	463a      	mov	r2, r7
 802621c:	9003      	str	r0, [sp, #12]
 802621e:	4631      	mov	r1, r6
 8026220:	4620      	mov	r0, r4
 8026222:	f001 f979 	bl	8027518 <__mdiff>
 8026226:	68c2      	ldr	r2, [r0, #12]
 8026228:	f109 3bff 	add.w	fp, r9, #4294967295
 802622c:	4605      	mov	r5, r0
 802622e:	bb02      	cbnz	r2, 8026272 <_dtoa_r+0xa62>
 8026230:	4601      	mov	r1, r0
 8026232:	ee18 0a10 	vmov	r0, s16
 8026236:	f001 f953 	bl	80274e0 <__mcmp>
 802623a:	4602      	mov	r2, r0
 802623c:	4629      	mov	r1, r5
 802623e:	4620      	mov	r0, r4
 8026240:	9207      	str	r2, [sp, #28]
 8026242:	f000 fec1 	bl	8026fc8 <_Bfree>
 8026246:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 802624a:	ea43 0102 	orr.w	r1, r3, r2
 802624e:	9b04      	ldr	r3, [sp, #16]
 8026250:	430b      	orrs	r3, r1
 8026252:	464d      	mov	r5, r9
 8026254:	d10f      	bne.n	8026276 <_dtoa_r+0xa66>
 8026256:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802625a:	d02a      	beq.n	80262b2 <_dtoa_r+0xaa2>
 802625c:	9b03      	ldr	r3, [sp, #12]
 802625e:	2b00      	cmp	r3, #0
 8026260:	dd02      	ble.n	8026268 <_dtoa_r+0xa58>
 8026262:	9b02      	ldr	r3, [sp, #8]
 8026264:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8026268:	f88b a000 	strb.w	sl, [fp]
 802626c:	e775      	b.n	802615a <_dtoa_r+0x94a>
 802626e:	4638      	mov	r0, r7
 8026270:	e7ba      	b.n	80261e8 <_dtoa_r+0x9d8>
 8026272:	2201      	movs	r2, #1
 8026274:	e7e2      	b.n	802623c <_dtoa_r+0xa2c>
 8026276:	9b03      	ldr	r3, [sp, #12]
 8026278:	2b00      	cmp	r3, #0
 802627a:	db04      	blt.n	8026286 <_dtoa_r+0xa76>
 802627c:	9906      	ldr	r1, [sp, #24]
 802627e:	430b      	orrs	r3, r1
 8026280:	9904      	ldr	r1, [sp, #16]
 8026282:	430b      	orrs	r3, r1
 8026284:	d122      	bne.n	80262cc <_dtoa_r+0xabc>
 8026286:	2a00      	cmp	r2, #0
 8026288:	ddee      	ble.n	8026268 <_dtoa_r+0xa58>
 802628a:	ee18 1a10 	vmov	r1, s16
 802628e:	2201      	movs	r2, #1
 8026290:	4620      	mov	r0, r4
 8026292:	f001 f8b5 	bl	8027400 <__lshift>
 8026296:	4631      	mov	r1, r6
 8026298:	ee08 0a10 	vmov	s16, r0
 802629c:	f001 f920 	bl	80274e0 <__mcmp>
 80262a0:	2800      	cmp	r0, #0
 80262a2:	dc03      	bgt.n	80262ac <_dtoa_r+0xa9c>
 80262a4:	d1e0      	bne.n	8026268 <_dtoa_r+0xa58>
 80262a6:	f01a 0f01 	tst.w	sl, #1
 80262aa:	d0dd      	beq.n	8026268 <_dtoa_r+0xa58>
 80262ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80262b0:	d1d7      	bne.n	8026262 <_dtoa_r+0xa52>
 80262b2:	2339      	movs	r3, #57	; 0x39
 80262b4:	f88b 3000 	strb.w	r3, [fp]
 80262b8:	462b      	mov	r3, r5
 80262ba:	461d      	mov	r5, r3
 80262bc:	3b01      	subs	r3, #1
 80262be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80262c2:	2a39      	cmp	r2, #57	; 0x39
 80262c4:	d071      	beq.n	80263aa <_dtoa_r+0xb9a>
 80262c6:	3201      	adds	r2, #1
 80262c8:	701a      	strb	r2, [r3, #0]
 80262ca:	e746      	b.n	802615a <_dtoa_r+0x94a>
 80262cc:	2a00      	cmp	r2, #0
 80262ce:	dd07      	ble.n	80262e0 <_dtoa_r+0xad0>
 80262d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80262d4:	d0ed      	beq.n	80262b2 <_dtoa_r+0xaa2>
 80262d6:	f10a 0301 	add.w	r3, sl, #1
 80262da:	f88b 3000 	strb.w	r3, [fp]
 80262de:	e73c      	b.n	802615a <_dtoa_r+0x94a>
 80262e0:	9b05      	ldr	r3, [sp, #20]
 80262e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80262e6:	4599      	cmp	r9, r3
 80262e8:	d047      	beq.n	802637a <_dtoa_r+0xb6a>
 80262ea:	ee18 1a10 	vmov	r1, s16
 80262ee:	2300      	movs	r3, #0
 80262f0:	220a      	movs	r2, #10
 80262f2:	4620      	mov	r0, r4
 80262f4:	f000 fe8a 	bl	802700c <__multadd>
 80262f8:	45b8      	cmp	r8, r7
 80262fa:	ee08 0a10 	vmov	s16, r0
 80262fe:	f04f 0300 	mov.w	r3, #0
 8026302:	f04f 020a 	mov.w	r2, #10
 8026306:	4641      	mov	r1, r8
 8026308:	4620      	mov	r0, r4
 802630a:	d106      	bne.n	802631a <_dtoa_r+0xb0a>
 802630c:	f000 fe7e 	bl	802700c <__multadd>
 8026310:	4680      	mov	r8, r0
 8026312:	4607      	mov	r7, r0
 8026314:	f109 0901 	add.w	r9, r9, #1
 8026318:	e772      	b.n	8026200 <_dtoa_r+0x9f0>
 802631a:	f000 fe77 	bl	802700c <__multadd>
 802631e:	4639      	mov	r1, r7
 8026320:	4680      	mov	r8, r0
 8026322:	2300      	movs	r3, #0
 8026324:	220a      	movs	r2, #10
 8026326:	4620      	mov	r0, r4
 8026328:	f000 fe70 	bl	802700c <__multadd>
 802632c:	4607      	mov	r7, r0
 802632e:	e7f1      	b.n	8026314 <_dtoa_r+0xb04>
 8026330:	9b03      	ldr	r3, [sp, #12]
 8026332:	9302      	str	r3, [sp, #8]
 8026334:	9d01      	ldr	r5, [sp, #4]
 8026336:	ee18 0a10 	vmov	r0, s16
 802633a:	4631      	mov	r1, r6
 802633c:	f7ff f9da 	bl	80256f4 <quorem>
 8026340:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8026344:	9b01      	ldr	r3, [sp, #4]
 8026346:	f805 ab01 	strb.w	sl, [r5], #1
 802634a:	1aea      	subs	r2, r5, r3
 802634c:	9b02      	ldr	r3, [sp, #8]
 802634e:	4293      	cmp	r3, r2
 8026350:	dd09      	ble.n	8026366 <_dtoa_r+0xb56>
 8026352:	ee18 1a10 	vmov	r1, s16
 8026356:	2300      	movs	r3, #0
 8026358:	220a      	movs	r2, #10
 802635a:	4620      	mov	r0, r4
 802635c:	f000 fe56 	bl	802700c <__multadd>
 8026360:	ee08 0a10 	vmov	s16, r0
 8026364:	e7e7      	b.n	8026336 <_dtoa_r+0xb26>
 8026366:	9b02      	ldr	r3, [sp, #8]
 8026368:	2b00      	cmp	r3, #0
 802636a:	bfc8      	it	gt
 802636c:	461d      	movgt	r5, r3
 802636e:	9b01      	ldr	r3, [sp, #4]
 8026370:	bfd8      	it	le
 8026372:	2501      	movle	r5, #1
 8026374:	441d      	add	r5, r3
 8026376:	f04f 0800 	mov.w	r8, #0
 802637a:	ee18 1a10 	vmov	r1, s16
 802637e:	2201      	movs	r2, #1
 8026380:	4620      	mov	r0, r4
 8026382:	f001 f83d 	bl	8027400 <__lshift>
 8026386:	4631      	mov	r1, r6
 8026388:	ee08 0a10 	vmov	s16, r0
 802638c:	f001 f8a8 	bl	80274e0 <__mcmp>
 8026390:	2800      	cmp	r0, #0
 8026392:	dc91      	bgt.n	80262b8 <_dtoa_r+0xaa8>
 8026394:	d102      	bne.n	802639c <_dtoa_r+0xb8c>
 8026396:	f01a 0f01 	tst.w	sl, #1
 802639a:	d18d      	bne.n	80262b8 <_dtoa_r+0xaa8>
 802639c:	462b      	mov	r3, r5
 802639e:	461d      	mov	r5, r3
 80263a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80263a4:	2a30      	cmp	r2, #48	; 0x30
 80263a6:	d0fa      	beq.n	802639e <_dtoa_r+0xb8e>
 80263a8:	e6d7      	b.n	802615a <_dtoa_r+0x94a>
 80263aa:	9a01      	ldr	r2, [sp, #4]
 80263ac:	429a      	cmp	r2, r3
 80263ae:	d184      	bne.n	80262ba <_dtoa_r+0xaaa>
 80263b0:	9b00      	ldr	r3, [sp, #0]
 80263b2:	3301      	adds	r3, #1
 80263b4:	9300      	str	r3, [sp, #0]
 80263b6:	2331      	movs	r3, #49	; 0x31
 80263b8:	7013      	strb	r3, [r2, #0]
 80263ba:	e6ce      	b.n	802615a <_dtoa_r+0x94a>
 80263bc:	4b09      	ldr	r3, [pc, #36]	; (80263e4 <_dtoa_r+0xbd4>)
 80263be:	f7ff ba95 	b.w	80258ec <_dtoa_r+0xdc>
 80263c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80263c4:	2b00      	cmp	r3, #0
 80263c6:	f47f aa6e 	bne.w	80258a6 <_dtoa_r+0x96>
 80263ca:	4b07      	ldr	r3, [pc, #28]	; (80263e8 <_dtoa_r+0xbd8>)
 80263cc:	f7ff ba8e 	b.w	80258ec <_dtoa_r+0xdc>
 80263d0:	9b02      	ldr	r3, [sp, #8]
 80263d2:	2b00      	cmp	r3, #0
 80263d4:	dcae      	bgt.n	8026334 <_dtoa_r+0xb24>
 80263d6:	9b06      	ldr	r3, [sp, #24]
 80263d8:	2b02      	cmp	r3, #2
 80263da:	f73f aea8 	bgt.w	802612e <_dtoa_r+0x91e>
 80263de:	e7a9      	b.n	8026334 <_dtoa_r+0xb24>
 80263e0:	0802a468 	.word	0x0802a468
 80263e4:	0802a271 	.word	0x0802a271
 80263e8:	0802a3e9 	.word	0x0802a3e9

080263ec <__sflush_r>:
 80263ec:	898a      	ldrh	r2, [r1, #12]
 80263ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80263f2:	4605      	mov	r5, r0
 80263f4:	0710      	lsls	r0, r2, #28
 80263f6:	460c      	mov	r4, r1
 80263f8:	d458      	bmi.n	80264ac <__sflush_r+0xc0>
 80263fa:	684b      	ldr	r3, [r1, #4]
 80263fc:	2b00      	cmp	r3, #0
 80263fe:	dc05      	bgt.n	802640c <__sflush_r+0x20>
 8026400:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026402:	2b00      	cmp	r3, #0
 8026404:	dc02      	bgt.n	802640c <__sflush_r+0x20>
 8026406:	2000      	movs	r0, #0
 8026408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802640c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802640e:	2e00      	cmp	r6, #0
 8026410:	d0f9      	beq.n	8026406 <__sflush_r+0x1a>
 8026412:	2300      	movs	r3, #0
 8026414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026418:	682f      	ldr	r7, [r5, #0]
 802641a:	602b      	str	r3, [r5, #0]
 802641c:	d032      	beq.n	8026484 <__sflush_r+0x98>
 802641e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026420:	89a3      	ldrh	r3, [r4, #12]
 8026422:	075a      	lsls	r2, r3, #29
 8026424:	d505      	bpl.n	8026432 <__sflush_r+0x46>
 8026426:	6863      	ldr	r3, [r4, #4]
 8026428:	1ac0      	subs	r0, r0, r3
 802642a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802642c:	b10b      	cbz	r3, 8026432 <__sflush_r+0x46>
 802642e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026430:	1ac0      	subs	r0, r0, r3
 8026432:	2300      	movs	r3, #0
 8026434:	4602      	mov	r2, r0
 8026436:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026438:	6a21      	ldr	r1, [r4, #32]
 802643a:	4628      	mov	r0, r5
 802643c:	47b0      	blx	r6
 802643e:	1c43      	adds	r3, r0, #1
 8026440:	89a3      	ldrh	r3, [r4, #12]
 8026442:	d106      	bne.n	8026452 <__sflush_r+0x66>
 8026444:	6829      	ldr	r1, [r5, #0]
 8026446:	291d      	cmp	r1, #29
 8026448:	d82c      	bhi.n	80264a4 <__sflush_r+0xb8>
 802644a:	4a2a      	ldr	r2, [pc, #168]	; (80264f4 <__sflush_r+0x108>)
 802644c:	40ca      	lsrs	r2, r1
 802644e:	07d6      	lsls	r6, r2, #31
 8026450:	d528      	bpl.n	80264a4 <__sflush_r+0xb8>
 8026452:	2200      	movs	r2, #0
 8026454:	6062      	str	r2, [r4, #4]
 8026456:	04d9      	lsls	r1, r3, #19
 8026458:	6922      	ldr	r2, [r4, #16]
 802645a:	6022      	str	r2, [r4, #0]
 802645c:	d504      	bpl.n	8026468 <__sflush_r+0x7c>
 802645e:	1c42      	adds	r2, r0, #1
 8026460:	d101      	bne.n	8026466 <__sflush_r+0x7a>
 8026462:	682b      	ldr	r3, [r5, #0]
 8026464:	b903      	cbnz	r3, 8026468 <__sflush_r+0x7c>
 8026466:	6560      	str	r0, [r4, #84]	; 0x54
 8026468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802646a:	602f      	str	r7, [r5, #0]
 802646c:	2900      	cmp	r1, #0
 802646e:	d0ca      	beq.n	8026406 <__sflush_r+0x1a>
 8026470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026474:	4299      	cmp	r1, r3
 8026476:	d002      	beq.n	802647e <__sflush_r+0x92>
 8026478:	4628      	mov	r0, r5
 802647a:	f7fd fb1f 	bl	8023abc <_free_r>
 802647e:	2000      	movs	r0, #0
 8026480:	6360      	str	r0, [r4, #52]	; 0x34
 8026482:	e7c1      	b.n	8026408 <__sflush_r+0x1c>
 8026484:	6a21      	ldr	r1, [r4, #32]
 8026486:	2301      	movs	r3, #1
 8026488:	4628      	mov	r0, r5
 802648a:	47b0      	blx	r6
 802648c:	1c41      	adds	r1, r0, #1
 802648e:	d1c7      	bne.n	8026420 <__sflush_r+0x34>
 8026490:	682b      	ldr	r3, [r5, #0]
 8026492:	2b00      	cmp	r3, #0
 8026494:	d0c4      	beq.n	8026420 <__sflush_r+0x34>
 8026496:	2b1d      	cmp	r3, #29
 8026498:	d001      	beq.n	802649e <__sflush_r+0xb2>
 802649a:	2b16      	cmp	r3, #22
 802649c:	d101      	bne.n	80264a2 <__sflush_r+0xb6>
 802649e:	602f      	str	r7, [r5, #0]
 80264a0:	e7b1      	b.n	8026406 <__sflush_r+0x1a>
 80264a2:	89a3      	ldrh	r3, [r4, #12]
 80264a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80264a8:	81a3      	strh	r3, [r4, #12]
 80264aa:	e7ad      	b.n	8026408 <__sflush_r+0x1c>
 80264ac:	690f      	ldr	r7, [r1, #16]
 80264ae:	2f00      	cmp	r7, #0
 80264b0:	d0a9      	beq.n	8026406 <__sflush_r+0x1a>
 80264b2:	0793      	lsls	r3, r2, #30
 80264b4:	680e      	ldr	r6, [r1, #0]
 80264b6:	bf08      	it	eq
 80264b8:	694b      	ldreq	r3, [r1, #20]
 80264ba:	600f      	str	r7, [r1, #0]
 80264bc:	bf18      	it	ne
 80264be:	2300      	movne	r3, #0
 80264c0:	eba6 0807 	sub.w	r8, r6, r7
 80264c4:	608b      	str	r3, [r1, #8]
 80264c6:	f1b8 0f00 	cmp.w	r8, #0
 80264ca:	dd9c      	ble.n	8026406 <__sflush_r+0x1a>
 80264cc:	6a21      	ldr	r1, [r4, #32]
 80264ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80264d0:	4643      	mov	r3, r8
 80264d2:	463a      	mov	r2, r7
 80264d4:	4628      	mov	r0, r5
 80264d6:	47b0      	blx	r6
 80264d8:	2800      	cmp	r0, #0
 80264da:	dc06      	bgt.n	80264ea <__sflush_r+0xfe>
 80264dc:	89a3      	ldrh	r3, [r4, #12]
 80264de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80264e2:	81a3      	strh	r3, [r4, #12]
 80264e4:	f04f 30ff 	mov.w	r0, #4294967295
 80264e8:	e78e      	b.n	8026408 <__sflush_r+0x1c>
 80264ea:	4407      	add	r7, r0
 80264ec:	eba8 0800 	sub.w	r8, r8, r0
 80264f0:	e7e9      	b.n	80264c6 <__sflush_r+0xda>
 80264f2:	bf00      	nop
 80264f4:	20400001 	.word	0x20400001

080264f8 <_fflush_r>:
 80264f8:	b538      	push	{r3, r4, r5, lr}
 80264fa:	690b      	ldr	r3, [r1, #16]
 80264fc:	4605      	mov	r5, r0
 80264fe:	460c      	mov	r4, r1
 8026500:	b913      	cbnz	r3, 8026508 <_fflush_r+0x10>
 8026502:	2500      	movs	r5, #0
 8026504:	4628      	mov	r0, r5
 8026506:	bd38      	pop	{r3, r4, r5, pc}
 8026508:	b118      	cbz	r0, 8026512 <_fflush_r+0x1a>
 802650a:	6983      	ldr	r3, [r0, #24]
 802650c:	b90b      	cbnz	r3, 8026512 <_fflush_r+0x1a>
 802650e:	f000 f887 	bl	8026620 <__sinit>
 8026512:	4b14      	ldr	r3, [pc, #80]	; (8026564 <_fflush_r+0x6c>)
 8026514:	429c      	cmp	r4, r3
 8026516:	d11b      	bne.n	8026550 <_fflush_r+0x58>
 8026518:	686c      	ldr	r4, [r5, #4]
 802651a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802651e:	2b00      	cmp	r3, #0
 8026520:	d0ef      	beq.n	8026502 <_fflush_r+0xa>
 8026522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026524:	07d0      	lsls	r0, r2, #31
 8026526:	d404      	bmi.n	8026532 <_fflush_r+0x3a>
 8026528:	0599      	lsls	r1, r3, #22
 802652a:	d402      	bmi.n	8026532 <_fflush_r+0x3a>
 802652c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802652e:	f7fd fa6c 	bl	8023a0a <__retarget_lock_acquire_recursive>
 8026532:	4628      	mov	r0, r5
 8026534:	4621      	mov	r1, r4
 8026536:	f7ff ff59 	bl	80263ec <__sflush_r>
 802653a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802653c:	07da      	lsls	r2, r3, #31
 802653e:	4605      	mov	r5, r0
 8026540:	d4e0      	bmi.n	8026504 <_fflush_r+0xc>
 8026542:	89a3      	ldrh	r3, [r4, #12]
 8026544:	059b      	lsls	r3, r3, #22
 8026546:	d4dd      	bmi.n	8026504 <_fflush_r+0xc>
 8026548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802654a:	f7fd fa5f 	bl	8023a0c <__retarget_lock_release_recursive>
 802654e:	e7d9      	b.n	8026504 <_fflush_r+0xc>
 8026550:	4b05      	ldr	r3, [pc, #20]	; (8026568 <_fflush_r+0x70>)
 8026552:	429c      	cmp	r4, r3
 8026554:	d101      	bne.n	802655a <_fflush_r+0x62>
 8026556:	68ac      	ldr	r4, [r5, #8]
 8026558:	e7df      	b.n	802651a <_fflush_r+0x22>
 802655a:	4b04      	ldr	r3, [pc, #16]	; (802656c <_fflush_r+0x74>)
 802655c:	429c      	cmp	r4, r3
 802655e:	bf08      	it	eq
 8026560:	68ec      	ldreq	r4, [r5, #12]
 8026562:	e7da      	b.n	802651a <_fflush_r+0x22>
 8026564:	0802a49c 	.word	0x0802a49c
 8026568:	0802a4bc 	.word	0x0802a4bc
 802656c:	0802a47c 	.word	0x0802a47c

08026570 <std>:
 8026570:	2300      	movs	r3, #0
 8026572:	b510      	push	{r4, lr}
 8026574:	4604      	mov	r4, r0
 8026576:	e9c0 3300 	strd	r3, r3, [r0]
 802657a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802657e:	6083      	str	r3, [r0, #8]
 8026580:	8181      	strh	r1, [r0, #12]
 8026582:	6643      	str	r3, [r0, #100]	; 0x64
 8026584:	81c2      	strh	r2, [r0, #14]
 8026586:	6183      	str	r3, [r0, #24]
 8026588:	4619      	mov	r1, r3
 802658a:	2208      	movs	r2, #8
 802658c:	305c      	adds	r0, #92	; 0x5c
 802658e:	f7fd fa77 	bl	8023a80 <memset>
 8026592:	4b05      	ldr	r3, [pc, #20]	; (80265a8 <std+0x38>)
 8026594:	6263      	str	r3, [r4, #36]	; 0x24
 8026596:	4b05      	ldr	r3, [pc, #20]	; (80265ac <std+0x3c>)
 8026598:	62a3      	str	r3, [r4, #40]	; 0x28
 802659a:	4b05      	ldr	r3, [pc, #20]	; (80265b0 <std+0x40>)
 802659c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802659e:	4b05      	ldr	r3, [pc, #20]	; (80265b4 <std+0x44>)
 80265a0:	6224      	str	r4, [r4, #32]
 80265a2:	6323      	str	r3, [r4, #48]	; 0x30
 80265a4:	bd10      	pop	{r4, pc}
 80265a6:	bf00      	nop
 80265a8:	08027be1 	.word	0x08027be1
 80265ac:	08027c03 	.word	0x08027c03
 80265b0:	08027c3b 	.word	0x08027c3b
 80265b4:	08027c5f 	.word	0x08027c5f

080265b8 <_cleanup_r>:
 80265b8:	4901      	ldr	r1, [pc, #4]	; (80265c0 <_cleanup_r+0x8>)
 80265ba:	f000 b8af 	b.w	802671c <_fwalk_reent>
 80265be:	bf00      	nop
 80265c0:	080264f9 	.word	0x080264f9

080265c4 <__sfmoreglue>:
 80265c4:	b570      	push	{r4, r5, r6, lr}
 80265c6:	2268      	movs	r2, #104	; 0x68
 80265c8:	1e4d      	subs	r5, r1, #1
 80265ca:	4355      	muls	r5, r2
 80265cc:	460e      	mov	r6, r1
 80265ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80265d2:	f7fd fadf 	bl	8023b94 <_malloc_r>
 80265d6:	4604      	mov	r4, r0
 80265d8:	b140      	cbz	r0, 80265ec <__sfmoreglue+0x28>
 80265da:	2100      	movs	r1, #0
 80265dc:	e9c0 1600 	strd	r1, r6, [r0]
 80265e0:	300c      	adds	r0, #12
 80265e2:	60a0      	str	r0, [r4, #8]
 80265e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80265e8:	f7fd fa4a 	bl	8023a80 <memset>
 80265ec:	4620      	mov	r0, r4
 80265ee:	bd70      	pop	{r4, r5, r6, pc}

080265f0 <__sfp_lock_acquire>:
 80265f0:	4801      	ldr	r0, [pc, #4]	; (80265f8 <__sfp_lock_acquire+0x8>)
 80265f2:	f7fd ba0a 	b.w	8023a0a <__retarget_lock_acquire_recursive>
 80265f6:	bf00      	nop
 80265f8:	20004ce9 	.word	0x20004ce9

080265fc <__sfp_lock_release>:
 80265fc:	4801      	ldr	r0, [pc, #4]	; (8026604 <__sfp_lock_release+0x8>)
 80265fe:	f7fd ba05 	b.w	8023a0c <__retarget_lock_release_recursive>
 8026602:	bf00      	nop
 8026604:	20004ce9 	.word	0x20004ce9

08026608 <__sinit_lock_acquire>:
 8026608:	4801      	ldr	r0, [pc, #4]	; (8026610 <__sinit_lock_acquire+0x8>)
 802660a:	f7fd b9fe 	b.w	8023a0a <__retarget_lock_acquire_recursive>
 802660e:	bf00      	nop
 8026610:	20004cea 	.word	0x20004cea

08026614 <__sinit_lock_release>:
 8026614:	4801      	ldr	r0, [pc, #4]	; (802661c <__sinit_lock_release+0x8>)
 8026616:	f7fd b9f9 	b.w	8023a0c <__retarget_lock_release_recursive>
 802661a:	bf00      	nop
 802661c:	20004cea 	.word	0x20004cea

08026620 <__sinit>:
 8026620:	b510      	push	{r4, lr}
 8026622:	4604      	mov	r4, r0
 8026624:	f7ff fff0 	bl	8026608 <__sinit_lock_acquire>
 8026628:	69a3      	ldr	r3, [r4, #24]
 802662a:	b11b      	cbz	r3, 8026634 <__sinit+0x14>
 802662c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026630:	f7ff bff0 	b.w	8026614 <__sinit_lock_release>
 8026634:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026638:	6523      	str	r3, [r4, #80]	; 0x50
 802663a:	4b13      	ldr	r3, [pc, #76]	; (8026688 <__sinit+0x68>)
 802663c:	4a13      	ldr	r2, [pc, #76]	; (802668c <__sinit+0x6c>)
 802663e:	681b      	ldr	r3, [r3, #0]
 8026640:	62a2      	str	r2, [r4, #40]	; 0x28
 8026642:	42a3      	cmp	r3, r4
 8026644:	bf04      	itt	eq
 8026646:	2301      	moveq	r3, #1
 8026648:	61a3      	streq	r3, [r4, #24]
 802664a:	4620      	mov	r0, r4
 802664c:	f000 f820 	bl	8026690 <__sfp>
 8026650:	6060      	str	r0, [r4, #4]
 8026652:	4620      	mov	r0, r4
 8026654:	f000 f81c 	bl	8026690 <__sfp>
 8026658:	60a0      	str	r0, [r4, #8]
 802665a:	4620      	mov	r0, r4
 802665c:	f000 f818 	bl	8026690 <__sfp>
 8026660:	2200      	movs	r2, #0
 8026662:	60e0      	str	r0, [r4, #12]
 8026664:	2104      	movs	r1, #4
 8026666:	6860      	ldr	r0, [r4, #4]
 8026668:	f7ff ff82 	bl	8026570 <std>
 802666c:	68a0      	ldr	r0, [r4, #8]
 802666e:	2201      	movs	r2, #1
 8026670:	2109      	movs	r1, #9
 8026672:	f7ff ff7d 	bl	8026570 <std>
 8026676:	68e0      	ldr	r0, [r4, #12]
 8026678:	2202      	movs	r2, #2
 802667a:	2112      	movs	r1, #18
 802667c:	f7ff ff78 	bl	8026570 <std>
 8026680:	2301      	movs	r3, #1
 8026682:	61a3      	str	r3, [r4, #24]
 8026684:	e7d2      	b.n	802662c <__sinit+0xc>
 8026686:	bf00      	nop
 8026688:	0802a24c 	.word	0x0802a24c
 802668c:	080265b9 	.word	0x080265b9

08026690 <__sfp>:
 8026690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026692:	4607      	mov	r7, r0
 8026694:	f7ff ffac 	bl	80265f0 <__sfp_lock_acquire>
 8026698:	4b1e      	ldr	r3, [pc, #120]	; (8026714 <__sfp+0x84>)
 802669a:	681e      	ldr	r6, [r3, #0]
 802669c:	69b3      	ldr	r3, [r6, #24]
 802669e:	b913      	cbnz	r3, 80266a6 <__sfp+0x16>
 80266a0:	4630      	mov	r0, r6
 80266a2:	f7ff ffbd 	bl	8026620 <__sinit>
 80266a6:	3648      	adds	r6, #72	; 0x48
 80266a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80266ac:	3b01      	subs	r3, #1
 80266ae:	d503      	bpl.n	80266b8 <__sfp+0x28>
 80266b0:	6833      	ldr	r3, [r6, #0]
 80266b2:	b30b      	cbz	r3, 80266f8 <__sfp+0x68>
 80266b4:	6836      	ldr	r6, [r6, #0]
 80266b6:	e7f7      	b.n	80266a8 <__sfp+0x18>
 80266b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80266bc:	b9d5      	cbnz	r5, 80266f4 <__sfp+0x64>
 80266be:	4b16      	ldr	r3, [pc, #88]	; (8026718 <__sfp+0x88>)
 80266c0:	60e3      	str	r3, [r4, #12]
 80266c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80266c6:	6665      	str	r5, [r4, #100]	; 0x64
 80266c8:	f7fd f99e 	bl	8023a08 <__retarget_lock_init_recursive>
 80266cc:	f7ff ff96 	bl	80265fc <__sfp_lock_release>
 80266d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80266d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80266d8:	6025      	str	r5, [r4, #0]
 80266da:	61a5      	str	r5, [r4, #24]
 80266dc:	2208      	movs	r2, #8
 80266de:	4629      	mov	r1, r5
 80266e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80266e4:	f7fd f9cc 	bl	8023a80 <memset>
 80266e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80266ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80266f0:	4620      	mov	r0, r4
 80266f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80266f4:	3468      	adds	r4, #104	; 0x68
 80266f6:	e7d9      	b.n	80266ac <__sfp+0x1c>
 80266f8:	2104      	movs	r1, #4
 80266fa:	4638      	mov	r0, r7
 80266fc:	f7ff ff62 	bl	80265c4 <__sfmoreglue>
 8026700:	4604      	mov	r4, r0
 8026702:	6030      	str	r0, [r6, #0]
 8026704:	2800      	cmp	r0, #0
 8026706:	d1d5      	bne.n	80266b4 <__sfp+0x24>
 8026708:	f7ff ff78 	bl	80265fc <__sfp_lock_release>
 802670c:	230c      	movs	r3, #12
 802670e:	603b      	str	r3, [r7, #0]
 8026710:	e7ee      	b.n	80266f0 <__sfp+0x60>
 8026712:	bf00      	nop
 8026714:	0802a24c 	.word	0x0802a24c
 8026718:	ffff0001 	.word	0xffff0001

0802671c <_fwalk_reent>:
 802671c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026720:	4606      	mov	r6, r0
 8026722:	4688      	mov	r8, r1
 8026724:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026728:	2700      	movs	r7, #0
 802672a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802672e:	f1b9 0901 	subs.w	r9, r9, #1
 8026732:	d505      	bpl.n	8026740 <_fwalk_reent+0x24>
 8026734:	6824      	ldr	r4, [r4, #0]
 8026736:	2c00      	cmp	r4, #0
 8026738:	d1f7      	bne.n	802672a <_fwalk_reent+0xe>
 802673a:	4638      	mov	r0, r7
 802673c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026740:	89ab      	ldrh	r3, [r5, #12]
 8026742:	2b01      	cmp	r3, #1
 8026744:	d907      	bls.n	8026756 <_fwalk_reent+0x3a>
 8026746:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802674a:	3301      	adds	r3, #1
 802674c:	d003      	beq.n	8026756 <_fwalk_reent+0x3a>
 802674e:	4629      	mov	r1, r5
 8026750:	4630      	mov	r0, r6
 8026752:	47c0      	blx	r8
 8026754:	4307      	orrs	r7, r0
 8026756:	3568      	adds	r5, #104	; 0x68
 8026758:	e7e9      	b.n	802672e <_fwalk_reent+0x12>

0802675a <rshift>:
 802675a:	6903      	ldr	r3, [r0, #16]
 802675c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8026760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026764:	ea4f 1261 	mov.w	r2, r1, asr #5
 8026768:	f100 0414 	add.w	r4, r0, #20
 802676c:	dd45      	ble.n	80267fa <rshift+0xa0>
 802676e:	f011 011f 	ands.w	r1, r1, #31
 8026772:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8026776:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802677a:	d10c      	bne.n	8026796 <rshift+0x3c>
 802677c:	f100 0710 	add.w	r7, r0, #16
 8026780:	4629      	mov	r1, r5
 8026782:	42b1      	cmp	r1, r6
 8026784:	d334      	bcc.n	80267f0 <rshift+0x96>
 8026786:	1a9b      	subs	r3, r3, r2
 8026788:	009b      	lsls	r3, r3, #2
 802678a:	1eea      	subs	r2, r5, #3
 802678c:	4296      	cmp	r6, r2
 802678e:	bf38      	it	cc
 8026790:	2300      	movcc	r3, #0
 8026792:	4423      	add	r3, r4
 8026794:	e015      	b.n	80267c2 <rshift+0x68>
 8026796:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802679a:	f1c1 0820 	rsb	r8, r1, #32
 802679e:	40cf      	lsrs	r7, r1
 80267a0:	f105 0e04 	add.w	lr, r5, #4
 80267a4:	46a1      	mov	r9, r4
 80267a6:	4576      	cmp	r6, lr
 80267a8:	46f4      	mov	ip, lr
 80267aa:	d815      	bhi.n	80267d8 <rshift+0x7e>
 80267ac:	1a9a      	subs	r2, r3, r2
 80267ae:	0092      	lsls	r2, r2, #2
 80267b0:	3a04      	subs	r2, #4
 80267b2:	3501      	adds	r5, #1
 80267b4:	42ae      	cmp	r6, r5
 80267b6:	bf38      	it	cc
 80267b8:	2200      	movcc	r2, #0
 80267ba:	18a3      	adds	r3, r4, r2
 80267bc:	50a7      	str	r7, [r4, r2]
 80267be:	b107      	cbz	r7, 80267c2 <rshift+0x68>
 80267c0:	3304      	adds	r3, #4
 80267c2:	1b1a      	subs	r2, r3, r4
 80267c4:	42a3      	cmp	r3, r4
 80267c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80267ca:	bf08      	it	eq
 80267cc:	2300      	moveq	r3, #0
 80267ce:	6102      	str	r2, [r0, #16]
 80267d0:	bf08      	it	eq
 80267d2:	6143      	streq	r3, [r0, #20]
 80267d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80267d8:	f8dc c000 	ldr.w	ip, [ip]
 80267dc:	fa0c fc08 	lsl.w	ip, ip, r8
 80267e0:	ea4c 0707 	orr.w	r7, ip, r7
 80267e4:	f849 7b04 	str.w	r7, [r9], #4
 80267e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80267ec:	40cf      	lsrs	r7, r1
 80267ee:	e7da      	b.n	80267a6 <rshift+0x4c>
 80267f0:	f851 cb04 	ldr.w	ip, [r1], #4
 80267f4:	f847 cf04 	str.w	ip, [r7, #4]!
 80267f8:	e7c3      	b.n	8026782 <rshift+0x28>
 80267fa:	4623      	mov	r3, r4
 80267fc:	e7e1      	b.n	80267c2 <rshift+0x68>

080267fe <__hexdig_fun>:
 80267fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8026802:	2b09      	cmp	r3, #9
 8026804:	d802      	bhi.n	802680c <__hexdig_fun+0xe>
 8026806:	3820      	subs	r0, #32
 8026808:	b2c0      	uxtb	r0, r0
 802680a:	4770      	bx	lr
 802680c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8026810:	2b05      	cmp	r3, #5
 8026812:	d801      	bhi.n	8026818 <__hexdig_fun+0x1a>
 8026814:	3847      	subs	r0, #71	; 0x47
 8026816:	e7f7      	b.n	8026808 <__hexdig_fun+0xa>
 8026818:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 802681c:	2b05      	cmp	r3, #5
 802681e:	d801      	bhi.n	8026824 <__hexdig_fun+0x26>
 8026820:	3827      	subs	r0, #39	; 0x27
 8026822:	e7f1      	b.n	8026808 <__hexdig_fun+0xa>
 8026824:	2000      	movs	r0, #0
 8026826:	4770      	bx	lr

08026828 <__gethex>:
 8026828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802682c:	ed2d 8b02 	vpush	{d8}
 8026830:	b089      	sub	sp, #36	; 0x24
 8026832:	ee08 0a10 	vmov	s16, r0
 8026836:	9304      	str	r3, [sp, #16]
 8026838:	4bb4      	ldr	r3, [pc, #720]	; (8026b0c <__gethex+0x2e4>)
 802683a:	681b      	ldr	r3, [r3, #0]
 802683c:	9301      	str	r3, [sp, #4]
 802683e:	4618      	mov	r0, r3
 8026840:	468b      	mov	fp, r1
 8026842:	4690      	mov	r8, r2
 8026844:	f7d9 fd1e 	bl	8000284 <strlen>
 8026848:	9b01      	ldr	r3, [sp, #4]
 802684a:	f8db 2000 	ldr.w	r2, [fp]
 802684e:	4403      	add	r3, r0
 8026850:	4682      	mov	sl, r0
 8026852:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8026856:	9305      	str	r3, [sp, #20]
 8026858:	1c93      	adds	r3, r2, #2
 802685a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802685e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8026862:	32fe      	adds	r2, #254	; 0xfe
 8026864:	18d1      	adds	r1, r2, r3
 8026866:	461f      	mov	r7, r3
 8026868:	f813 0b01 	ldrb.w	r0, [r3], #1
 802686c:	9100      	str	r1, [sp, #0]
 802686e:	2830      	cmp	r0, #48	; 0x30
 8026870:	d0f8      	beq.n	8026864 <__gethex+0x3c>
 8026872:	f7ff ffc4 	bl	80267fe <__hexdig_fun>
 8026876:	4604      	mov	r4, r0
 8026878:	2800      	cmp	r0, #0
 802687a:	d13a      	bne.n	80268f2 <__gethex+0xca>
 802687c:	9901      	ldr	r1, [sp, #4]
 802687e:	4652      	mov	r2, sl
 8026880:	4638      	mov	r0, r7
 8026882:	f7fe f813 	bl	80248ac <strncmp>
 8026886:	4605      	mov	r5, r0
 8026888:	2800      	cmp	r0, #0
 802688a:	d168      	bne.n	802695e <__gethex+0x136>
 802688c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8026890:	eb07 060a 	add.w	r6, r7, sl
 8026894:	f7ff ffb3 	bl	80267fe <__hexdig_fun>
 8026898:	2800      	cmp	r0, #0
 802689a:	d062      	beq.n	8026962 <__gethex+0x13a>
 802689c:	4633      	mov	r3, r6
 802689e:	7818      	ldrb	r0, [r3, #0]
 80268a0:	2830      	cmp	r0, #48	; 0x30
 80268a2:	461f      	mov	r7, r3
 80268a4:	f103 0301 	add.w	r3, r3, #1
 80268a8:	d0f9      	beq.n	802689e <__gethex+0x76>
 80268aa:	f7ff ffa8 	bl	80267fe <__hexdig_fun>
 80268ae:	2301      	movs	r3, #1
 80268b0:	fab0 f480 	clz	r4, r0
 80268b4:	0964      	lsrs	r4, r4, #5
 80268b6:	4635      	mov	r5, r6
 80268b8:	9300      	str	r3, [sp, #0]
 80268ba:	463a      	mov	r2, r7
 80268bc:	4616      	mov	r6, r2
 80268be:	3201      	adds	r2, #1
 80268c0:	7830      	ldrb	r0, [r6, #0]
 80268c2:	f7ff ff9c 	bl	80267fe <__hexdig_fun>
 80268c6:	2800      	cmp	r0, #0
 80268c8:	d1f8      	bne.n	80268bc <__gethex+0x94>
 80268ca:	9901      	ldr	r1, [sp, #4]
 80268cc:	4652      	mov	r2, sl
 80268ce:	4630      	mov	r0, r6
 80268d0:	f7fd ffec 	bl	80248ac <strncmp>
 80268d4:	b980      	cbnz	r0, 80268f8 <__gethex+0xd0>
 80268d6:	b94d      	cbnz	r5, 80268ec <__gethex+0xc4>
 80268d8:	eb06 050a 	add.w	r5, r6, sl
 80268dc:	462a      	mov	r2, r5
 80268de:	4616      	mov	r6, r2
 80268e0:	3201      	adds	r2, #1
 80268e2:	7830      	ldrb	r0, [r6, #0]
 80268e4:	f7ff ff8b 	bl	80267fe <__hexdig_fun>
 80268e8:	2800      	cmp	r0, #0
 80268ea:	d1f8      	bne.n	80268de <__gethex+0xb6>
 80268ec:	1bad      	subs	r5, r5, r6
 80268ee:	00ad      	lsls	r5, r5, #2
 80268f0:	e004      	b.n	80268fc <__gethex+0xd4>
 80268f2:	2400      	movs	r4, #0
 80268f4:	4625      	mov	r5, r4
 80268f6:	e7e0      	b.n	80268ba <__gethex+0x92>
 80268f8:	2d00      	cmp	r5, #0
 80268fa:	d1f7      	bne.n	80268ec <__gethex+0xc4>
 80268fc:	7833      	ldrb	r3, [r6, #0]
 80268fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8026902:	2b50      	cmp	r3, #80	; 0x50
 8026904:	d13b      	bne.n	802697e <__gethex+0x156>
 8026906:	7873      	ldrb	r3, [r6, #1]
 8026908:	2b2b      	cmp	r3, #43	; 0x2b
 802690a:	d02c      	beq.n	8026966 <__gethex+0x13e>
 802690c:	2b2d      	cmp	r3, #45	; 0x2d
 802690e:	d02e      	beq.n	802696e <__gethex+0x146>
 8026910:	1c71      	adds	r1, r6, #1
 8026912:	f04f 0900 	mov.w	r9, #0
 8026916:	7808      	ldrb	r0, [r1, #0]
 8026918:	f7ff ff71 	bl	80267fe <__hexdig_fun>
 802691c:	1e43      	subs	r3, r0, #1
 802691e:	b2db      	uxtb	r3, r3
 8026920:	2b18      	cmp	r3, #24
 8026922:	d82c      	bhi.n	802697e <__gethex+0x156>
 8026924:	f1a0 0210 	sub.w	r2, r0, #16
 8026928:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802692c:	f7ff ff67 	bl	80267fe <__hexdig_fun>
 8026930:	1e43      	subs	r3, r0, #1
 8026932:	b2db      	uxtb	r3, r3
 8026934:	2b18      	cmp	r3, #24
 8026936:	d91d      	bls.n	8026974 <__gethex+0x14c>
 8026938:	f1b9 0f00 	cmp.w	r9, #0
 802693c:	d000      	beq.n	8026940 <__gethex+0x118>
 802693e:	4252      	negs	r2, r2
 8026940:	4415      	add	r5, r2
 8026942:	f8cb 1000 	str.w	r1, [fp]
 8026946:	b1e4      	cbz	r4, 8026982 <__gethex+0x15a>
 8026948:	9b00      	ldr	r3, [sp, #0]
 802694a:	2b00      	cmp	r3, #0
 802694c:	bf14      	ite	ne
 802694e:	2700      	movne	r7, #0
 8026950:	2706      	moveq	r7, #6
 8026952:	4638      	mov	r0, r7
 8026954:	b009      	add	sp, #36	; 0x24
 8026956:	ecbd 8b02 	vpop	{d8}
 802695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802695e:	463e      	mov	r6, r7
 8026960:	4625      	mov	r5, r4
 8026962:	2401      	movs	r4, #1
 8026964:	e7ca      	b.n	80268fc <__gethex+0xd4>
 8026966:	f04f 0900 	mov.w	r9, #0
 802696a:	1cb1      	adds	r1, r6, #2
 802696c:	e7d3      	b.n	8026916 <__gethex+0xee>
 802696e:	f04f 0901 	mov.w	r9, #1
 8026972:	e7fa      	b.n	802696a <__gethex+0x142>
 8026974:	230a      	movs	r3, #10
 8026976:	fb03 0202 	mla	r2, r3, r2, r0
 802697a:	3a10      	subs	r2, #16
 802697c:	e7d4      	b.n	8026928 <__gethex+0x100>
 802697e:	4631      	mov	r1, r6
 8026980:	e7df      	b.n	8026942 <__gethex+0x11a>
 8026982:	1bf3      	subs	r3, r6, r7
 8026984:	3b01      	subs	r3, #1
 8026986:	4621      	mov	r1, r4
 8026988:	2b07      	cmp	r3, #7
 802698a:	dc0b      	bgt.n	80269a4 <__gethex+0x17c>
 802698c:	ee18 0a10 	vmov	r0, s16
 8026990:	f000 fada 	bl	8026f48 <_Balloc>
 8026994:	4604      	mov	r4, r0
 8026996:	b940      	cbnz	r0, 80269aa <__gethex+0x182>
 8026998:	4b5d      	ldr	r3, [pc, #372]	; (8026b10 <__gethex+0x2e8>)
 802699a:	4602      	mov	r2, r0
 802699c:	21de      	movs	r1, #222	; 0xde
 802699e:	485d      	ldr	r0, [pc, #372]	; (8026b14 <__gethex+0x2ec>)
 80269a0:	f7fc ffcc 	bl	802393c <__assert_func>
 80269a4:	3101      	adds	r1, #1
 80269a6:	105b      	asrs	r3, r3, #1
 80269a8:	e7ee      	b.n	8026988 <__gethex+0x160>
 80269aa:	f100 0914 	add.w	r9, r0, #20
 80269ae:	f04f 0b00 	mov.w	fp, #0
 80269b2:	f1ca 0301 	rsb	r3, sl, #1
 80269b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80269ba:	f8cd b000 	str.w	fp, [sp]
 80269be:	9306      	str	r3, [sp, #24]
 80269c0:	42b7      	cmp	r7, r6
 80269c2:	d340      	bcc.n	8026a46 <__gethex+0x21e>
 80269c4:	9802      	ldr	r0, [sp, #8]
 80269c6:	9b00      	ldr	r3, [sp, #0]
 80269c8:	f840 3b04 	str.w	r3, [r0], #4
 80269cc:	eba0 0009 	sub.w	r0, r0, r9
 80269d0:	1080      	asrs	r0, r0, #2
 80269d2:	0146      	lsls	r6, r0, #5
 80269d4:	6120      	str	r0, [r4, #16]
 80269d6:	4618      	mov	r0, r3
 80269d8:	f000 fba8 	bl	802712c <__hi0bits>
 80269dc:	1a30      	subs	r0, r6, r0
 80269de:	f8d8 6000 	ldr.w	r6, [r8]
 80269e2:	42b0      	cmp	r0, r6
 80269e4:	dd63      	ble.n	8026aae <__gethex+0x286>
 80269e6:	1b87      	subs	r7, r0, r6
 80269e8:	4639      	mov	r1, r7
 80269ea:	4620      	mov	r0, r4
 80269ec:	f000 ff4c 	bl	8027888 <__any_on>
 80269f0:	4682      	mov	sl, r0
 80269f2:	b1a8      	cbz	r0, 8026a20 <__gethex+0x1f8>
 80269f4:	1e7b      	subs	r3, r7, #1
 80269f6:	1159      	asrs	r1, r3, #5
 80269f8:	f003 021f 	and.w	r2, r3, #31
 80269fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8026a00:	f04f 0a01 	mov.w	sl, #1
 8026a04:	fa0a f202 	lsl.w	r2, sl, r2
 8026a08:	420a      	tst	r2, r1
 8026a0a:	d009      	beq.n	8026a20 <__gethex+0x1f8>
 8026a0c:	4553      	cmp	r3, sl
 8026a0e:	dd05      	ble.n	8026a1c <__gethex+0x1f4>
 8026a10:	1eb9      	subs	r1, r7, #2
 8026a12:	4620      	mov	r0, r4
 8026a14:	f000 ff38 	bl	8027888 <__any_on>
 8026a18:	2800      	cmp	r0, #0
 8026a1a:	d145      	bne.n	8026aa8 <__gethex+0x280>
 8026a1c:	f04f 0a02 	mov.w	sl, #2
 8026a20:	4639      	mov	r1, r7
 8026a22:	4620      	mov	r0, r4
 8026a24:	f7ff fe99 	bl	802675a <rshift>
 8026a28:	443d      	add	r5, r7
 8026a2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8026a2e:	42ab      	cmp	r3, r5
 8026a30:	da4c      	bge.n	8026acc <__gethex+0x2a4>
 8026a32:	ee18 0a10 	vmov	r0, s16
 8026a36:	4621      	mov	r1, r4
 8026a38:	f000 fac6 	bl	8026fc8 <_Bfree>
 8026a3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026a3e:	2300      	movs	r3, #0
 8026a40:	6013      	str	r3, [r2, #0]
 8026a42:	27a3      	movs	r7, #163	; 0xa3
 8026a44:	e785      	b.n	8026952 <__gethex+0x12a>
 8026a46:	1e73      	subs	r3, r6, #1
 8026a48:	9a05      	ldr	r2, [sp, #20]
 8026a4a:	9303      	str	r3, [sp, #12]
 8026a4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8026a50:	4293      	cmp	r3, r2
 8026a52:	d019      	beq.n	8026a88 <__gethex+0x260>
 8026a54:	f1bb 0f20 	cmp.w	fp, #32
 8026a58:	d107      	bne.n	8026a6a <__gethex+0x242>
 8026a5a:	9b02      	ldr	r3, [sp, #8]
 8026a5c:	9a00      	ldr	r2, [sp, #0]
 8026a5e:	f843 2b04 	str.w	r2, [r3], #4
 8026a62:	9302      	str	r3, [sp, #8]
 8026a64:	2300      	movs	r3, #0
 8026a66:	9300      	str	r3, [sp, #0]
 8026a68:	469b      	mov	fp, r3
 8026a6a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8026a6e:	f7ff fec6 	bl	80267fe <__hexdig_fun>
 8026a72:	9b00      	ldr	r3, [sp, #0]
 8026a74:	f000 000f 	and.w	r0, r0, #15
 8026a78:	fa00 f00b 	lsl.w	r0, r0, fp
 8026a7c:	4303      	orrs	r3, r0
 8026a7e:	9300      	str	r3, [sp, #0]
 8026a80:	f10b 0b04 	add.w	fp, fp, #4
 8026a84:	9b03      	ldr	r3, [sp, #12]
 8026a86:	e00d      	b.n	8026aa4 <__gethex+0x27c>
 8026a88:	9b03      	ldr	r3, [sp, #12]
 8026a8a:	9a06      	ldr	r2, [sp, #24]
 8026a8c:	4413      	add	r3, r2
 8026a8e:	42bb      	cmp	r3, r7
 8026a90:	d3e0      	bcc.n	8026a54 <__gethex+0x22c>
 8026a92:	4618      	mov	r0, r3
 8026a94:	9901      	ldr	r1, [sp, #4]
 8026a96:	9307      	str	r3, [sp, #28]
 8026a98:	4652      	mov	r2, sl
 8026a9a:	f7fd ff07 	bl	80248ac <strncmp>
 8026a9e:	9b07      	ldr	r3, [sp, #28]
 8026aa0:	2800      	cmp	r0, #0
 8026aa2:	d1d7      	bne.n	8026a54 <__gethex+0x22c>
 8026aa4:	461e      	mov	r6, r3
 8026aa6:	e78b      	b.n	80269c0 <__gethex+0x198>
 8026aa8:	f04f 0a03 	mov.w	sl, #3
 8026aac:	e7b8      	b.n	8026a20 <__gethex+0x1f8>
 8026aae:	da0a      	bge.n	8026ac6 <__gethex+0x29e>
 8026ab0:	1a37      	subs	r7, r6, r0
 8026ab2:	4621      	mov	r1, r4
 8026ab4:	ee18 0a10 	vmov	r0, s16
 8026ab8:	463a      	mov	r2, r7
 8026aba:	f000 fca1 	bl	8027400 <__lshift>
 8026abe:	1bed      	subs	r5, r5, r7
 8026ac0:	4604      	mov	r4, r0
 8026ac2:	f100 0914 	add.w	r9, r0, #20
 8026ac6:	f04f 0a00 	mov.w	sl, #0
 8026aca:	e7ae      	b.n	8026a2a <__gethex+0x202>
 8026acc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8026ad0:	42a8      	cmp	r0, r5
 8026ad2:	dd72      	ble.n	8026bba <__gethex+0x392>
 8026ad4:	1b45      	subs	r5, r0, r5
 8026ad6:	42ae      	cmp	r6, r5
 8026ad8:	dc36      	bgt.n	8026b48 <__gethex+0x320>
 8026ada:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8026ade:	2b02      	cmp	r3, #2
 8026ae0:	d02a      	beq.n	8026b38 <__gethex+0x310>
 8026ae2:	2b03      	cmp	r3, #3
 8026ae4:	d02c      	beq.n	8026b40 <__gethex+0x318>
 8026ae6:	2b01      	cmp	r3, #1
 8026ae8:	d11c      	bne.n	8026b24 <__gethex+0x2fc>
 8026aea:	42ae      	cmp	r6, r5
 8026aec:	d11a      	bne.n	8026b24 <__gethex+0x2fc>
 8026aee:	2e01      	cmp	r6, #1
 8026af0:	d112      	bne.n	8026b18 <__gethex+0x2f0>
 8026af2:	9a04      	ldr	r2, [sp, #16]
 8026af4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8026af8:	6013      	str	r3, [r2, #0]
 8026afa:	2301      	movs	r3, #1
 8026afc:	6123      	str	r3, [r4, #16]
 8026afe:	f8c9 3000 	str.w	r3, [r9]
 8026b02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026b04:	2762      	movs	r7, #98	; 0x62
 8026b06:	601c      	str	r4, [r3, #0]
 8026b08:	e723      	b.n	8026952 <__gethex+0x12a>
 8026b0a:	bf00      	nop
 8026b0c:	0802a544 	.word	0x0802a544
 8026b10:	0802a468 	.word	0x0802a468
 8026b14:	0802a4dc 	.word	0x0802a4dc
 8026b18:	1e71      	subs	r1, r6, #1
 8026b1a:	4620      	mov	r0, r4
 8026b1c:	f000 feb4 	bl	8027888 <__any_on>
 8026b20:	2800      	cmp	r0, #0
 8026b22:	d1e6      	bne.n	8026af2 <__gethex+0x2ca>
 8026b24:	ee18 0a10 	vmov	r0, s16
 8026b28:	4621      	mov	r1, r4
 8026b2a:	f000 fa4d 	bl	8026fc8 <_Bfree>
 8026b2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026b30:	2300      	movs	r3, #0
 8026b32:	6013      	str	r3, [r2, #0]
 8026b34:	2750      	movs	r7, #80	; 0x50
 8026b36:	e70c      	b.n	8026952 <__gethex+0x12a>
 8026b38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026b3a:	2b00      	cmp	r3, #0
 8026b3c:	d1f2      	bne.n	8026b24 <__gethex+0x2fc>
 8026b3e:	e7d8      	b.n	8026af2 <__gethex+0x2ca>
 8026b40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026b42:	2b00      	cmp	r3, #0
 8026b44:	d1d5      	bne.n	8026af2 <__gethex+0x2ca>
 8026b46:	e7ed      	b.n	8026b24 <__gethex+0x2fc>
 8026b48:	1e6f      	subs	r7, r5, #1
 8026b4a:	f1ba 0f00 	cmp.w	sl, #0
 8026b4e:	d131      	bne.n	8026bb4 <__gethex+0x38c>
 8026b50:	b127      	cbz	r7, 8026b5c <__gethex+0x334>
 8026b52:	4639      	mov	r1, r7
 8026b54:	4620      	mov	r0, r4
 8026b56:	f000 fe97 	bl	8027888 <__any_on>
 8026b5a:	4682      	mov	sl, r0
 8026b5c:	117b      	asrs	r3, r7, #5
 8026b5e:	2101      	movs	r1, #1
 8026b60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8026b64:	f007 071f 	and.w	r7, r7, #31
 8026b68:	fa01 f707 	lsl.w	r7, r1, r7
 8026b6c:	421f      	tst	r7, r3
 8026b6e:	4629      	mov	r1, r5
 8026b70:	4620      	mov	r0, r4
 8026b72:	bf18      	it	ne
 8026b74:	f04a 0a02 	orrne.w	sl, sl, #2
 8026b78:	1b76      	subs	r6, r6, r5
 8026b7a:	f7ff fdee 	bl	802675a <rshift>
 8026b7e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026b82:	2702      	movs	r7, #2
 8026b84:	f1ba 0f00 	cmp.w	sl, #0
 8026b88:	d048      	beq.n	8026c1c <__gethex+0x3f4>
 8026b8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8026b8e:	2b02      	cmp	r3, #2
 8026b90:	d015      	beq.n	8026bbe <__gethex+0x396>
 8026b92:	2b03      	cmp	r3, #3
 8026b94:	d017      	beq.n	8026bc6 <__gethex+0x39e>
 8026b96:	2b01      	cmp	r3, #1
 8026b98:	d109      	bne.n	8026bae <__gethex+0x386>
 8026b9a:	f01a 0f02 	tst.w	sl, #2
 8026b9e:	d006      	beq.n	8026bae <__gethex+0x386>
 8026ba0:	f8d9 0000 	ldr.w	r0, [r9]
 8026ba4:	ea4a 0a00 	orr.w	sl, sl, r0
 8026ba8:	f01a 0f01 	tst.w	sl, #1
 8026bac:	d10e      	bne.n	8026bcc <__gethex+0x3a4>
 8026bae:	f047 0710 	orr.w	r7, r7, #16
 8026bb2:	e033      	b.n	8026c1c <__gethex+0x3f4>
 8026bb4:	f04f 0a01 	mov.w	sl, #1
 8026bb8:	e7d0      	b.n	8026b5c <__gethex+0x334>
 8026bba:	2701      	movs	r7, #1
 8026bbc:	e7e2      	b.n	8026b84 <__gethex+0x35c>
 8026bbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026bc0:	f1c3 0301 	rsb	r3, r3, #1
 8026bc4:	9315      	str	r3, [sp, #84]	; 0x54
 8026bc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026bc8:	2b00      	cmp	r3, #0
 8026bca:	d0f0      	beq.n	8026bae <__gethex+0x386>
 8026bcc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8026bd0:	f104 0314 	add.w	r3, r4, #20
 8026bd4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8026bd8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8026bdc:	f04f 0c00 	mov.w	ip, #0
 8026be0:	4618      	mov	r0, r3
 8026be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8026be6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8026bea:	d01c      	beq.n	8026c26 <__gethex+0x3fe>
 8026bec:	3201      	adds	r2, #1
 8026bee:	6002      	str	r2, [r0, #0]
 8026bf0:	2f02      	cmp	r7, #2
 8026bf2:	f104 0314 	add.w	r3, r4, #20
 8026bf6:	d13f      	bne.n	8026c78 <__gethex+0x450>
 8026bf8:	f8d8 2000 	ldr.w	r2, [r8]
 8026bfc:	3a01      	subs	r2, #1
 8026bfe:	42b2      	cmp	r2, r6
 8026c00:	d10a      	bne.n	8026c18 <__gethex+0x3f0>
 8026c02:	1171      	asrs	r1, r6, #5
 8026c04:	2201      	movs	r2, #1
 8026c06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8026c0a:	f006 061f 	and.w	r6, r6, #31
 8026c0e:	fa02 f606 	lsl.w	r6, r2, r6
 8026c12:	421e      	tst	r6, r3
 8026c14:	bf18      	it	ne
 8026c16:	4617      	movne	r7, r2
 8026c18:	f047 0720 	orr.w	r7, r7, #32
 8026c1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026c1e:	601c      	str	r4, [r3, #0]
 8026c20:	9b04      	ldr	r3, [sp, #16]
 8026c22:	601d      	str	r5, [r3, #0]
 8026c24:	e695      	b.n	8026952 <__gethex+0x12a>
 8026c26:	4299      	cmp	r1, r3
 8026c28:	f843 cc04 	str.w	ip, [r3, #-4]
 8026c2c:	d8d8      	bhi.n	8026be0 <__gethex+0x3b8>
 8026c2e:	68a3      	ldr	r3, [r4, #8]
 8026c30:	459b      	cmp	fp, r3
 8026c32:	db19      	blt.n	8026c68 <__gethex+0x440>
 8026c34:	6861      	ldr	r1, [r4, #4]
 8026c36:	ee18 0a10 	vmov	r0, s16
 8026c3a:	3101      	adds	r1, #1
 8026c3c:	f000 f984 	bl	8026f48 <_Balloc>
 8026c40:	4681      	mov	r9, r0
 8026c42:	b918      	cbnz	r0, 8026c4c <__gethex+0x424>
 8026c44:	4b1a      	ldr	r3, [pc, #104]	; (8026cb0 <__gethex+0x488>)
 8026c46:	4602      	mov	r2, r0
 8026c48:	2184      	movs	r1, #132	; 0x84
 8026c4a:	e6a8      	b.n	802699e <__gethex+0x176>
 8026c4c:	6922      	ldr	r2, [r4, #16]
 8026c4e:	3202      	adds	r2, #2
 8026c50:	f104 010c 	add.w	r1, r4, #12
 8026c54:	0092      	lsls	r2, r2, #2
 8026c56:	300c      	adds	r0, #12
 8026c58:	f7fc feea 	bl	8023a30 <memcpy>
 8026c5c:	4621      	mov	r1, r4
 8026c5e:	ee18 0a10 	vmov	r0, s16
 8026c62:	f000 f9b1 	bl	8026fc8 <_Bfree>
 8026c66:	464c      	mov	r4, r9
 8026c68:	6923      	ldr	r3, [r4, #16]
 8026c6a:	1c5a      	adds	r2, r3, #1
 8026c6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8026c70:	6122      	str	r2, [r4, #16]
 8026c72:	2201      	movs	r2, #1
 8026c74:	615a      	str	r2, [r3, #20]
 8026c76:	e7bb      	b.n	8026bf0 <__gethex+0x3c8>
 8026c78:	6922      	ldr	r2, [r4, #16]
 8026c7a:	455a      	cmp	r2, fp
 8026c7c:	dd0b      	ble.n	8026c96 <__gethex+0x46e>
 8026c7e:	2101      	movs	r1, #1
 8026c80:	4620      	mov	r0, r4
 8026c82:	f7ff fd6a 	bl	802675a <rshift>
 8026c86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8026c8a:	3501      	adds	r5, #1
 8026c8c:	42ab      	cmp	r3, r5
 8026c8e:	f6ff aed0 	blt.w	8026a32 <__gethex+0x20a>
 8026c92:	2701      	movs	r7, #1
 8026c94:	e7c0      	b.n	8026c18 <__gethex+0x3f0>
 8026c96:	f016 061f 	ands.w	r6, r6, #31
 8026c9a:	d0fa      	beq.n	8026c92 <__gethex+0x46a>
 8026c9c:	4453      	add	r3, sl
 8026c9e:	f1c6 0620 	rsb	r6, r6, #32
 8026ca2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8026ca6:	f000 fa41 	bl	802712c <__hi0bits>
 8026caa:	42b0      	cmp	r0, r6
 8026cac:	dbe7      	blt.n	8026c7e <__gethex+0x456>
 8026cae:	e7f0      	b.n	8026c92 <__gethex+0x46a>
 8026cb0:	0802a468 	.word	0x0802a468

08026cb4 <L_shift>:
 8026cb4:	f1c2 0208 	rsb	r2, r2, #8
 8026cb8:	0092      	lsls	r2, r2, #2
 8026cba:	b570      	push	{r4, r5, r6, lr}
 8026cbc:	f1c2 0620 	rsb	r6, r2, #32
 8026cc0:	6843      	ldr	r3, [r0, #4]
 8026cc2:	6804      	ldr	r4, [r0, #0]
 8026cc4:	fa03 f506 	lsl.w	r5, r3, r6
 8026cc8:	432c      	orrs	r4, r5
 8026cca:	40d3      	lsrs	r3, r2
 8026ccc:	6004      	str	r4, [r0, #0]
 8026cce:	f840 3f04 	str.w	r3, [r0, #4]!
 8026cd2:	4288      	cmp	r0, r1
 8026cd4:	d3f4      	bcc.n	8026cc0 <L_shift+0xc>
 8026cd6:	bd70      	pop	{r4, r5, r6, pc}

08026cd8 <__match>:
 8026cd8:	b530      	push	{r4, r5, lr}
 8026cda:	6803      	ldr	r3, [r0, #0]
 8026cdc:	3301      	adds	r3, #1
 8026cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026ce2:	b914      	cbnz	r4, 8026cea <__match+0x12>
 8026ce4:	6003      	str	r3, [r0, #0]
 8026ce6:	2001      	movs	r0, #1
 8026ce8:	bd30      	pop	{r4, r5, pc}
 8026cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026cee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8026cf2:	2d19      	cmp	r5, #25
 8026cf4:	bf98      	it	ls
 8026cf6:	3220      	addls	r2, #32
 8026cf8:	42a2      	cmp	r2, r4
 8026cfa:	d0f0      	beq.n	8026cde <__match+0x6>
 8026cfc:	2000      	movs	r0, #0
 8026cfe:	e7f3      	b.n	8026ce8 <__match+0x10>

08026d00 <__hexnan>:
 8026d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d04:	680b      	ldr	r3, [r1, #0]
 8026d06:	115e      	asrs	r6, r3, #5
 8026d08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8026d0c:	f013 031f 	ands.w	r3, r3, #31
 8026d10:	b087      	sub	sp, #28
 8026d12:	bf18      	it	ne
 8026d14:	3604      	addne	r6, #4
 8026d16:	2500      	movs	r5, #0
 8026d18:	1f37      	subs	r7, r6, #4
 8026d1a:	4690      	mov	r8, r2
 8026d1c:	6802      	ldr	r2, [r0, #0]
 8026d1e:	9301      	str	r3, [sp, #4]
 8026d20:	4682      	mov	sl, r0
 8026d22:	f846 5c04 	str.w	r5, [r6, #-4]
 8026d26:	46b9      	mov	r9, r7
 8026d28:	463c      	mov	r4, r7
 8026d2a:	9502      	str	r5, [sp, #8]
 8026d2c:	46ab      	mov	fp, r5
 8026d2e:	7851      	ldrb	r1, [r2, #1]
 8026d30:	1c53      	adds	r3, r2, #1
 8026d32:	9303      	str	r3, [sp, #12]
 8026d34:	b341      	cbz	r1, 8026d88 <__hexnan+0x88>
 8026d36:	4608      	mov	r0, r1
 8026d38:	9205      	str	r2, [sp, #20]
 8026d3a:	9104      	str	r1, [sp, #16]
 8026d3c:	f7ff fd5f 	bl	80267fe <__hexdig_fun>
 8026d40:	2800      	cmp	r0, #0
 8026d42:	d14f      	bne.n	8026de4 <__hexnan+0xe4>
 8026d44:	9904      	ldr	r1, [sp, #16]
 8026d46:	9a05      	ldr	r2, [sp, #20]
 8026d48:	2920      	cmp	r1, #32
 8026d4a:	d818      	bhi.n	8026d7e <__hexnan+0x7e>
 8026d4c:	9b02      	ldr	r3, [sp, #8]
 8026d4e:	459b      	cmp	fp, r3
 8026d50:	dd13      	ble.n	8026d7a <__hexnan+0x7a>
 8026d52:	454c      	cmp	r4, r9
 8026d54:	d206      	bcs.n	8026d64 <__hexnan+0x64>
 8026d56:	2d07      	cmp	r5, #7
 8026d58:	dc04      	bgt.n	8026d64 <__hexnan+0x64>
 8026d5a:	462a      	mov	r2, r5
 8026d5c:	4649      	mov	r1, r9
 8026d5e:	4620      	mov	r0, r4
 8026d60:	f7ff ffa8 	bl	8026cb4 <L_shift>
 8026d64:	4544      	cmp	r4, r8
 8026d66:	d950      	bls.n	8026e0a <__hexnan+0x10a>
 8026d68:	2300      	movs	r3, #0
 8026d6a:	f1a4 0904 	sub.w	r9, r4, #4
 8026d6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8026d72:	f8cd b008 	str.w	fp, [sp, #8]
 8026d76:	464c      	mov	r4, r9
 8026d78:	461d      	mov	r5, r3
 8026d7a:	9a03      	ldr	r2, [sp, #12]
 8026d7c:	e7d7      	b.n	8026d2e <__hexnan+0x2e>
 8026d7e:	2929      	cmp	r1, #41	; 0x29
 8026d80:	d156      	bne.n	8026e30 <__hexnan+0x130>
 8026d82:	3202      	adds	r2, #2
 8026d84:	f8ca 2000 	str.w	r2, [sl]
 8026d88:	f1bb 0f00 	cmp.w	fp, #0
 8026d8c:	d050      	beq.n	8026e30 <__hexnan+0x130>
 8026d8e:	454c      	cmp	r4, r9
 8026d90:	d206      	bcs.n	8026da0 <__hexnan+0xa0>
 8026d92:	2d07      	cmp	r5, #7
 8026d94:	dc04      	bgt.n	8026da0 <__hexnan+0xa0>
 8026d96:	462a      	mov	r2, r5
 8026d98:	4649      	mov	r1, r9
 8026d9a:	4620      	mov	r0, r4
 8026d9c:	f7ff ff8a 	bl	8026cb4 <L_shift>
 8026da0:	4544      	cmp	r4, r8
 8026da2:	d934      	bls.n	8026e0e <__hexnan+0x10e>
 8026da4:	f1a8 0204 	sub.w	r2, r8, #4
 8026da8:	4623      	mov	r3, r4
 8026daa:	f853 1b04 	ldr.w	r1, [r3], #4
 8026dae:	f842 1f04 	str.w	r1, [r2, #4]!
 8026db2:	429f      	cmp	r7, r3
 8026db4:	d2f9      	bcs.n	8026daa <__hexnan+0xaa>
 8026db6:	1b3b      	subs	r3, r7, r4
 8026db8:	f023 0303 	bic.w	r3, r3, #3
 8026dbc:	3304      	adds	r3, #4
 8026dbe:	3401      	adds	r4, #1
 8026dc0:	3e03      	subs	r6, #3
 8026dc2:	42b4      	cmp	r4, r6
 8026dc4:	bf88      	it	hi
 8026dc6:	2304      	movhi	r3, #4
 8026dc8:	4443      	add	r3, r8
 8026dca:	2200      	movs	r2, #0
 8026dcc:	f843 2b04 	str.w	r2, [r3], #4
 8026dd0:	429f      	cmp	r7, r3
 8026dd2:	d2fb      	bcs.n	8026dcc <__hexnan+0xcc>
 8026dd4:	683b      	ldr	r3, [r7, #0]
 8026dd6:	b91b      	cbnz	r3, 8026de0 <__hexnan+0xe0>
 8026dd8:	4547      	cmp	r7, r8
 8026dda:	d127      	bne.n	8026e2c <__hexnan+0x12c>
 8026ddc:	2301      	movs	r3, #1
 8026dde:	603b      	str	r3, [r7, #0]
 8026de0:	2005      	movs	r0, #5
 8026de2:	e026      	b.n	8026e32 <__hexnan+0x132>
 8026de4:	3501      	adds	r5, #1
 8026de6:	2d08      	cmp	r5, #8
 8026de8:	f10b 0b01 	add.w	fp, fp, #1
 8026dec:	dd06      	ble.n	8026dfc <__hexnan+0xfc>
 8026dee:	4544      	cmp	r4, r8
 8026df0:	d9c3      	bls.n	8026d7a <__hexnan+0x7a>
 8026df2:	2300      	movs	r3, #0
 8026df4:	f844 3c04 	str.w	r3, [r4, #-4]
 8026df8:	2501      	movs	r5, #1
 8026dfa:	3c04      	subs	r4, #4
 8026dfc:	6822      	ldr	r2, [r4, #0]
 8026dfe:	f000 000f 	and.w	r0, r0, #15
 8026e02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8026e06:	6022      	str	r2, [r4, #0]
 8026e08:	e7b7      	b.n	8026d7a <__hexnan+0x7a>
 8026e0a:	2508      	movs	r5, #8
 8026e0c:	e7b5      	b.n	8026d7a <__hexnan+0x7a>
 8026e0e:	9b01      	ldr	r3, [sp, #4]
 8026e10:	2b00      	cmp	r3, #0
 8026e12:	d0df      	beq.n	8026dd4 <__hexnan+0xd4>
 8026e14:	f04f 32ff 	mov.w	r2, #4294967295
 8026e18:	f1c3 0320 	rsb	r3, r3, #32
 8026e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8026e20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8026e24:	401a      	ands	r2, r3
 8026e26:	f846 2c04 	str.w	r2, [r6, #-4]
 8026e2a:	e7d3      	b.n	8026dd4 <__hexnan+0xd4>
 8026e2c:	3f04      	subs	r7, #4
 8026e2e:	e7d1      	b.n	8026dd4 <__hexnan+0xd4>
 8026e30:	2004      	movs	r0, #4
 8026e32:	b007      	add	sp, #28
 8026e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026e38 <_localeconv_r>:
 8026e38:	4800      	ldr	r0, [pc, #0]	; (8026e3c <_localeconv_r+0x4>)
 8026e3a:	4770      	bx	lr
 8026e3c:	200003d8 	.word	0x200003d8

08026e40 <__swhatbuf_r>:
 8026e40:	b570      	push	{r4, r5, r6, lr}
 8026e42:	460e      	mov	r6, r1
 8026e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026e48:	2900      	cmp	r1, #0
 8026e4a:	b096      	sub	sp, #88	; 0x58
 8026e4c:	4614      	mov	r4, r2
 8026e4e:	461d      	mov	r5, r3
 8026e50:	da08      	bge.n	8026e64 <__swhatbuf_r+0x24>
 8026e52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8026e56:	2200      	movs	r2, #0
 8026e58:	602a      	str	r2, [r5, #0]
 8026e5a:	061a      	lsls	r2, r3, #24
 8026e5c:	d410      	bmi.n	8026e80 <__swhatbuf_r+0x40>
 8026e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026e62:	e00e      	b.n	8026e82 <__swhatbuf_r+0x42>
 8026e64:	466a      	mov	r2, sp
 8026e66:	f000 ff2d 	bl	8027cc4 <_fstat_r>
 8026e6a:	2800      	cmp	r0, #0
 8026e6c:	dbf1      	blt.n	8026e52 <__swhatbuf_r+0x12>
 8026e6e:	9a01      	ldr	r2, [sp, #4]
 8026e70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026e74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026e78:	425a      	negs	r2, r3
 8026e7a:	415a      	adcs	r2, r3
 8026e7c:	602a      	str	r2, [r5, #0]
 8026e7e:	e7ee      	b.n	8026e5e <__swhatbuf_r+0x1e>
 8026e80:	2340      	movs	r3, #64	; 0x40
 8026e82:	2000      	movs	r0, #0
 8026e84:	6023      	str	r3, [r4, #0]
 8026e86:	b016      	add	sp, #88	; 0x58
 8026e88:	bd70      	pop	{r4, r5, r6, pc}
	...

08026e8c <__smakebuf_r>:
 8026e8c:	898b      	ldrh	r3, [r1, #12]
 8026e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026e90:	079d      	lsls	r5, r3, #30
 8026e92:	4606      	mov	r6, r0
 8026e94:	460c      	mov	r4, r1
 8026e96:	d507      	bpl.n	8026ea8 <__smakebuf_r+0x1c>
 8026e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026e9c:	6023      	str	r3, [r4, #0]
 8026e9e:	6123      	str	r3, [r4, #16]
 8026ea0:	2301      	movs	r3, #1
 8026ea2:	6163      	str	r3, [r4, #20]
 8026ea4:	b002      	add	sp, #8
 8026ea6:	bd70      	pop	{r4, r5, r6, pc}
 8026ea8:	ab01      	add	r3, sp, #4
 8026eaa:	466a      	mov	r2, sp
 8026eac:	f7ff ffc8 	bl	8026e40 <__swhatbuf_r>
 8026eb0:	9900      	ldr	r1, [sp, #0]
 8026eb2:	4605      	mov	r5, r0
 8026eb4:	4630      	mov	r0, r6
 8026eb6:	f7fc fe6d 	bl	8023b94 <_malloc_r>
 8026eba:	b948      	cbnz	r0, 8026ed0 <__smakebuf_r+0x44>
 8026ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026ec0:	059a      	lsls	r2, r3, #22
 8026ec2:	d4ef      	bmi.n	8026ea4 <__smakebuf_r+0x18>
 8026ec4:	f023 0303 	bic.w	r3, r3, #3
 8026ec8:	f043 0302 	orr.w	r3, r3, #2
 8026ecc:	81a3      	strh	r3, [r4, #12]
 8026ece:	e7e3      	b.n	8026e98 <__smakebuf_r+0xc>
 8026ed0:	4b0d      	ldr	r3, [pc, #52]	; (8026f08 <__smakebuf_r+0x7c>)
 8026ed2:	62b3      	str	r3, [r6, #40]	; 0x28
 8026ed4:	89a3      	ldrh	r3, [r4, #12]
 8026ed6:	6020      	str	r0, [r4, #0]
 8026ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026edc:	81a3      	strh	r3, [r4, #12]
 8026ede:	9b00      	ldr	r3, [sp, #0]
 8026ee0:	6163      	str	r3, [r4, #20]
 8026ee2:	9b01      	ldr	r3, [sp, #4]
 8026ee4:	6120      	str	r0, [r4, #16]
 8026ee6:	b15b      	cbz	r3, 8026f00 <__smakebuf_r+0x74>
 8026ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026eec:	4630      	mov	r0, r6
 8026eee:	f000 fefb 	bl	8027ce8 <_isatty_r>
 8026ef2:	b128      	cbz	r0, 8026f00 <__smakebuf_r+0x74>
 8026ef4:	89a3      	ldrh	r3, [r4, #12]
 8026ef6:	f023 0303 	bic.w	r3, r3, #3
 8026efa:	f043 0301 	orr.w	r3, r3, #1
 8026efe:	81a3      	strh	r3, [r4, #12]
 8026f00:	89a0      	ldrh	r0, [r4, #12]
 8026f02:	4305      	orrs	r5, r0
 8026f04:	81a5      	strh	r5, [r4, #12]
 8026f06:	e7cd      	b.n	8026ea4 <__smakebuf_r+0x18>
 8026f08:	080265b9 	.word	0x080265b9

08026f0c <__ascii_mbtowc>:
 8026f0c:	b082      	sub	sp, #8
 8026f0e:	b901      	cbnz	r1, 8026f12 <__ascii_mbtowc+0x6>
 8026f10:	a901      	add	r1, sp, #4
 8026f12:	b142      	cbz	r2, 8026f26 <__ascii_mbtowc+0x1a>
 8026f14:	b14b      	cbz	r3, 8026f2a <__ascii_mbtowc+0x1e>
 8026f16:	7813      	ldrb	r3, [r2, #0]
 8026f18:	600b      	str	r3, [r1, #0]
 8026f1a:	7812      	ldrb	r2, [r2, #0]
 8026f1c:	1e10      	subs	r0, r2, #0
 8026f1e:	bf18      	it	ne
 8026f20:	2001      	movne	r0, #1
 8026f22:	b002      	add	sp, #8
 8026f24:	4770      	bx	lr
 8026f26:	4610      	mov	r0, r2
 8026f28:	e7fb      	b.n	8026f22 <__ascii_mbtowc+0x16>
 8026f2a:	f06f 0001 	mvn.w	r0, #1
 8026f2e:	e7f8      	b.n	8026f22 <__ascii_mbtowc+0x16>

08026f30 <__malloc_lock>:
 8026f30:	4801      	ldr	r0, [pc, #4]	; (8026f38 <__malloc_lock+0x8>)
 8026f32:	f7fc bd6a 	b.w	8023a0a <__retarget_lock_acquire_recursive>
 8026f36:	bf00      	nop
 8026f38:	20004ce8 	.word	0x20004ce8

08026f3c <__malloc_unlock>:
 8026f3c:	4801      	ldr	r0, [pc, #4]	; (8026f44 <__malloc_unlock+0x8>)
 8026f3e:	f7fc bd65 	b.w	8023a0c <__retarget_lock_release_recursive>
 8026f42:	bf00      	nop
 8026f44:	20004ce8 	.word	0x20004ce8

08026f48 <_Balloc>:
 8026f48:	b570      	push	{r4, r5, r6, lr}
 8026f4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026f4c:	4604      	mov	r4, r0
 8026f4e:	460d      	mov	r5, r1
 8026f50:	b976      	cbnz	r6, 8026f70 <_Balloc+0x28>
 8026f52:	2010      	movs	r0, #16
 8026f54:	f7fc fd5c 	bl	8023a10 <malloc>
 8026f58:	4602      	mov	r2, r0
 8026f5a:	6260      	str	r0, [r4, #36]	; 0x24
 8026f5c:	b920      	cbnz	r0, 8026f68 <_Balloc+0x20>
 8026f5e:	4b18      	ldr	r3, [pc, #96]	; (8026fc0 <_Balloc+0x78>)
 8026f60:	4818      	ldr	r0, [pc, #96]	; (8026fc4 <_Balloc+0x7c>)
 8026f62:	2166      	movs	r1, #102	; 0x66
 8026f64:	f7fc fcea 	bl	802393c <__assert_func>
 8026f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026f6c:	6006      	str	r6, [r0, #0]
 8026f6e:	60c6      	str	r6, [r0, #12]
 8026f70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8026f72:	68f3      	ldr	r3, [r6, #12]
 8026f74:	b183      	cbz	r3, 8026f98 <_Balloc+0x50>
 8026f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026f78:	68db      	ldr	r3, [r3, #12]
 8026f7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8026f7e:	b9b8      	cbnz	r0, 8026fb0 <_Balloc+0x68>
 8026f80:	2101      	movs	r1, #1
 8026f82:	fa01 f605 	lsl.w	r6, r1, r5
 8026f86:	1d72      	adds	r2, r6, #5
 8026f88:	0092      	lsls	r2, r2, #2
 8026f8a:	4620      	mov	r0, r4
 8026f8c:	f7fc fd80 	bl	8023a90 <_calloc_r>
 8026f90:	b160      	cbz	r0, 8026fac <_Balloc+0x64>
 8026f92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8026f96:	e00e      	b.n	8026fb6 <_Balloc+0x6e>
 8026f98:	2221      	movs	r2, #33	; 0x21
 8026f9a:	2104      	movs	r1, #4
 8026f9c:	4620      	mov	r0, r4
 8026f9e:	f7fc fd77 	bl	8023a90 <_calloc_r>
 8026fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026fa4:	60f0      	str	r0, [r6, #12]
 8026fa6:	68db      	ldr	r3, [r3, #12]
 8026fa8:	2b00      	cmp	r3, #0
 8026faa:	d1e4      	bne.n	8026f76 <_Balloc+0x2e>
 8026fac:	2000      	movs	r0, #0
 8026fae:	bd70      	pop	{r4, r5, r6, pc}
 8026fb0:	6802      	ldr	r2, [r0, #0]
 8026fb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8026fb6:	2300      	movs	r3, #0
 8026fb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026fbc:	e7f7      	b.n	8026fae <_Balloc+0x66>
 8026fbe:	bf00      	nop
 8026fc0:	0802a3f6 	.word	0x0802a3f6
 8026fc4:	0802a558 	.word	0x0802a558

08026fc8 <_Bfree>:
 8026fc8:	b570      	push	{r4, r5, r6, lr}
 8026fca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026fcc:	4605      	mov	r5, r0
 8026fce:	460c      	mov	r4, r1
 8026fd0:	b976      	cbnz	r6, 8026ff0 <_Bfree+0x28>
 8026fd2:	2010      	movs	r0, #16
 8026fd4:	f7fc fd1c 	bl	8023a10 <malloc>
 8026fd8:	4602      	mov	r2, r0
 8026fda:	6268      	str	r0, [r5, #36]	; 0x24
 8026fdc:	b920      	cbnz	r0, 8026fe8 <_Bfree+0x20>
 8026fde:	4b09      	ldr	r3, [pc, #36]	; (8027004 <_Bfree+0x3c>)
 8026fe0:	4809      	ldr	r0, [pc, #36]	; (8027008 <_Bfree+0x40>)
 8026fe2:	218a      	movs	r1, #138	; 0x8a
 8026fe4:	f7fc fcaa 	bl	802393c <__assert_func>
 8026fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026fec:	6006      	str	r6, [r0, #0]
 8026fee:	60c6      	str	r6, [r0, #12]
 8026ff0:	b13c      	cbz	r4, 8027002 <_Bfree+0x3a>
 8026ff2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8026ff4:	6862      	ldr	r2, [r4, #4]
 8026ff6:	68db      	ldr	r3, [r3, #12]
 8026ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026ffc:	6021      	str	r1, [r4, #0]
 8026ffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8027002:	bd70      	pop	{r4, r5, r6, pc}
 8027004:	0802a3f6 	.word	0x0802a3f6
 8027008:	0802a558 	.word	0x0802a558

0802700c <__multadd>:
 802700c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027010:	690d      	ldr	r5, [r1, #16]
 8027012:	4607      	mov	r7, r0
 8027014:	460c      	mov	r4, r1
 8027016:	461e      	mov	r6, r3
 8027018:	f101 0c14 	add.w	ip, r1, #20
 802701c:	2000      	movs	r0, #0
 802701e:	f8dc 3000 	ldr.w	r3, [ip]
 8027022:	b299      	uxth	r1, r3
 8027024:	fb02 6101 	mla	r1, r2, r1, r6
 8027028:	0c1e      	lsrs	r6, r3, #16
 802702a:	0c0b      	lsrs	r3, r1, #16
 802702c:	fb02 3306 	mla	r3, r2, r6, r3
 8027030:	b289      	uxth	r1, r1
 8027032:	3001      	adds	r0, #1
 8027034:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027038:	4285      	cmp	r5, r0
 802703a:	f84c 1b04 	str.w	r1, [ip], #4
 802703e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8027042:	dcec      	bgt.n	802701e <__multadd+0x12>
 8027044:	b30e      	cbz	r6, 802708a <__multadd+0x7e>
 8027046:	68a3      	ldr	r3, [r4, #8]
 8027048:	42ab      	cmp	r3, r5
 802704a:	dc19      	bgt.n	8027080 <__multadd+0x74>
 802704c:	6861      	ldr	r1, [r4, #4]
 802704e:	4638      	mov	r0, r7
 8027050:	3101      	adds	r1, #1
 8027052:	f7ff ff79 	bl	8026f48 <_Balloc>
 8027056:	4680      	mov	r8, r0
 8027058:	b928      	cbnz	r0, 8027066 <__multadd+0x5a>
 802705a:	4602      	mov	r2, r0
 802705c:	4b0c      	ldr	r3, [pc, #48]	; (8027090 <__multadd+0x84>)
 802705e:	480d      	ldr	r0, [pc, #52]	; (8027094 <__multadd+0x88>)
 8027060:	21b5      	movs	r1, #181	; 0xb5
 8027062:	f7fc fc6b 	bl	802393c <__assert_func>
 8027066:	6922      	ldr	r2, [r4, #16]
 8027068:	3202      	adds	r2, #2
 802706a:	f104 010c 	add.w	r1, r4, #12
 802706e:	0092      	lsls	r2, r2, #2
 8027070:	300c      	adds	r0, #12
 8027072:	f7fc fcdd 	bl	8023a30 <memcpy>
 8027076:	4621      	mov	r1, r4
 8027078:	4638      	mov	r0, r7
 802707a:	f7ff ffa5 	bl	8026fc8 <_Bfree>
 802707e:	4644      	mov	r4, r8
 8027080:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8027084:	3501      	adds	r5, #1
 8027086:	615e      	str	r6, [r3, #20]
 8027088:	6125      	str	r5, [r4, #16]
 802708a:	4620      	mov	r0, r4
 802708c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027090:	0802a468 	.word	0x0802a468
 8027094:	0802a558 	.word	0x0802a558

08027098 <__s2b>:
 8027098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802709c:	460c      	mov	r4, r1
 802709e:	4615      	mov	r5, r2
 80270a0:	461f      	mov	r7, r3
 80270a2:	2209      	movs	r2, #9
 80270a4:	3308      	adds	r3, #8
 80270a6:	4606      	mov	r6, r0
 80270a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80270ac:	2100      	movs	r1, #0
 80270ae:	2201      	movs	r2, #1
 80270b0:	429a      	cmp	r2, r3
 80270b2:	db09      	blt.n	80270c8 <__s2b+0x30>
 80270b4:	4630      	mov	r0, r6
 80270b6:	f7ff ff47 	bl	8026f48 <_Balloc>
 80270ba:	b940      	cbnz	r0, 80270ce <__s2b+0x36>
 80270bc:	4602      	mov	r2, r0
 80270be:	4b19      	ldr	r3, [pc, #100]	; (8027124 <__s2b+0x8c>)
 80270c0:	4819      	ldr	r0, [pc, #100]	; (8027128 <__s2b+0x90>)
 80270c2:	21ce      	movs	r1, #206	; 0xce
 80270c4:	f7fc fc3a 	bl	802393c <__assert_func>
 80270c8:	0052      	lsls	r2, r2, #1
 80270ca:	3101      	adds	r1, #1
 80270cc:	e7f0      	b.n	80270b0 <__s2b+0x18>
 80270ce:	9b08      	ldr	r3, [sp, #32]
 80270d0:	6143      	str	r3, [r0, #20]
 80270d2:	2d09      	cmp	r5, #9
 80270d4:	f04f 0301 	mov.w	r3, #1
 80270d8:	6103      	str	r3, [r0, #16]
 80270da:	dd16      	ble.n	802710a <__s2b+0x72>
 80270dc:	f104 0909 	add.w	r9, r4, #9
 80270e0:	46c8      	mov	r8, r9
 80270e2:	442c      	add	r4, r5
 80270e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80270e8:	4601      	mov	r1, r0
 80270ea:	3b30      	subs	r3, #48	; 0x30
 80270ec:	220a      	movs	r2, #10
 80270ee:	4630      	mov	r0, r6
 80270f0:	f7ff ff8c 	bl	802700c <__multadd>
 80270f4:	45a0      	cmp	r8, r4
 80270f6:	d1f5      	bne.n	80270e4 <__s2b+0x4c>
 80270f8:	f1a5 0408 	sub.w	r4, r5, #8
 80270fc:	444c      	add	r4, r9
 80270fe:	1b2d      	subs	r5, r5, r4
 8027100:	1963      	adds	r3, r4, r5
 8027102:	42bb      	cmp	r3, r7
 8027104:	db04      	blt.n	8027110 <__s2b+0x78>
 8027106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802710a:	340a      	adds	r4, #10
 802710c:	2509      	movs	r5, #9
 802710e:	e7f6      	b.n	80270fe <__s2b+0x66>
 8027110:	f814 3b01 	ldrb.w	r3, [r4], #1
 8027114:	4601      	mov	r1, r0
 8027116:	3b30      	subs	r3, #48	; 0x30
 8027118:	220a      	movs	r2, #10
 802711a:	4630      	mov	r0, r6
 802711c:	f7ff ff76 	bl	802700c <__multadd>
 8027120:	e7ee      	b.n	8027100 <__s2b+0x68>
 8027122:	bf00      	nop
 8027124:	0802a468 	.word	0x0802a468
 8027128:	0802a558 	.word	0x0802a558

0802712c <__hi0bits>:
 802712c:	0c03      	lsrs	r3, r0, #16
 802712e:	041b      	lsls	r3, r3, #16
 8027130:	b9d3      	cbnz	r3, 8027168 <__hi0bits+0x3c>
 8027132:	0400      	lsls	r0, r0, #16
 8027134:	2310      	movs	r3, #16
 8027136:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802713a:	bf04      	itt	eq
 802713c:	0200      	lsleq	r0, r0, #8
 802713e:	3308      	addeq	r3, #8
 8027140:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8027144:	bf04      	itt	eq
 8027146:	0100      	lsleq	r0, r0, #4
 8027148:	3304      	addeq	r3, #4
 802714a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802714e:	bf04      	itt	eq
 8027150:	0080      	lsleq	r0, r0, #2
 8027152:	3302      	addeq	r3, #2
 8027154:	2800      	cmp	r0, #0
 8027156:	db05      	blt.n	8027164 <__hi0bits+0x38>
 8027158:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802715c:	f103 0301 	add.w	r3, r3, #1
 8027160:	bf08      	it	eq
 8027162:	2320      	moveq	r3, #32
 8027164:	4618      	mov	r0, r3
 8027166:	4770      	bx	lr
 8027168:	2300      	movs	r3, #0
 802716a:	e7e4      	b.n	8027136 <__hi0bits+0xa>

0802716c <__lo0bits>:
 802716c:	6803      	ldr	r3, [r0, #0]
 802716e:	f013 0207 	ands.w	r2, r3, #7
 8027172:	4601      	mov	r1, r0
 8027174:	d00b      	beq.n	802718e <__lo0bits+0x22>
 8027176:	07da      	lsls	r2, r3, #31
 8027178:	d423      	bmi.n	80271c2 <__lo0bits+0x56>
 802717a:	0798      	lsls	r0, r3, #30
 802717c:	bf49      	itett	mi
 802717e:	085b      	lsrmi	r3, r3, #1
 8027180:	089b      	lsrpl	r3, r3, #2
 8027182:	2001      	movmi	r0, #1
 8027184:	600b      	strmi	r3, [r1, #0]
 8027186:	bf5c      	itt	pl
 8027188:	600b      	strpl	r3, [r1, #0]
 802718a:	2002      	movpl	r0, #2
 802718c:	4770      	bx	lr
 802718e:	b298      	uxth	r0, r3
 8027190:	b9a8      	cbnz	r0, 80271be <__lo0bits+0x52>
 8027192:	0c1b      	lsrs	r3, r3, #16
 8027194:	2010      	movs	r0, #16
 8027196:	b2da      	uxtb	r2, r3
 8027198:	b90a      	cbnz	r2, 802719e <__lo0bits+0x32>
 802719a:	3008      	adds	r0, #8
 802719c:	0a1b      	lsrs	r3, r3, #8
 802719e:	071a      	lsls	r2, r3, #28
 80271a0:	bf04      	itt	eq
 80271a2:	091b      	lsreq	r3, r3, #4
 80271a4:	3004      	addeq	r0, #4
 80271a6:	079a      	lsls	r2, r3, #30
 80271a8:	bf04      	itt	eq
 80271aa:	089b      	lsreq	r3, r3, #2
 80271ac:	3002      	addeq	r0, #2
 80271ae:	07da      	lsls	r2, r3, #31
 80271b0:	d403      	bmi.n	80271ba <__lo0bits+0x4e>
 80271b2:	085b      	lsrs	r3, r3, #1
 80271b4:	f100 0001 	add.w	r0, r0, #1
 80271b8:	d005      	beq.n	80271c6 <__lo0bits+0x5a>
 80271ba:	600b      	str	r3, [r1, #0]
 80271bc:	4770      	bx	lr
 80271be:	4610      	mov	r0, r2
 80271c0:	e7e9      	b.n	8027196 <__lo0bits+0x2a>
 80271c2:	2000      	movs	r0, #0
 80271c4:	4770      	bx	lr
 80271c6:	2020      	movs	r0, #32
 80271c8:	4770      	bx	lr
	...

080271cc <__i2b>:
 80271cc:	b510      	push	{r4, lr}
 80271ce:	460c      	mov	r4, r1
 80271d0:	2101      	movs	r1, #1
 80271d2:	f7ff feb9 	bl	8026f48 <_Balloc>
 80271d6:	4602      	mov	r2, r0
 80271d8:	b928      	cbnz	r0, 80271e6 <__i2b+0x1a>
 80271da:	4b05      	ldr	r3, [pc, #20]	; (80271f0 <__i2b+0x24>)
 80271dc:	4805      	ldr	r0, [pc, #20]	; (80271f4 <__i2b+0x28>)
 80271de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80271e2:	f7fc fbab 	bl	802393c <__assert_func>
 80271e6:	2301      	movs	r3, #1
 80271e8:	6144      	str	r4, [r0, #20]
 80271ea:	6103      	str	r3, [r0, #16]
 80271ec:	bd10      	pop	{r4, pc}
 80271ee:	bf00      	nop
 80271f0:	0802a468 	.word	0x0802a468
 80271f4:	0802a558 	.word	0x0802a558

080271f8 <__multiply>:
 80271f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271fc:	4691      	mov	r9, r2
 80271fe:	690a      	ldr	r2, [r1, #16]
 8027200:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8027204:	429a      	cmp	r2, r3
 8027206:	bfb8      	it	lt
 8027208:	460b      	movlt	r3, r1
 802720a:	460c      	mov	r4, r1
 802720c:	bfbc      	itt	lt
 802720e:	464c      	movlt	r4, r9
 8027210:	4699      	movlt	r9, r3
 8027212:	6927      	ldr	r7, [r4, #16]
 8027214:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8027218:	68a3      	ldr	r3, [r4, #8]
 802721a:	6861      	ldr	r1, [r4, #4]
 802721c:	eb07 060a 	add.w	r6, r7, sl
 8027220:	42b3      	cmp	r3, r6
 8027222:	b085      	sub	sp, #20
 8027224:	bfb8      	it	lt
 8027226:	3101      	addlt	r1, #1
 8027228:	f7ff fe8e 	bl	8026f48 <_Balloc>
 802722c:	b930      	cbnz	r0, 802723c <__multiply+0x44>
 802722e:	4602      	mov	r2, r0
 8027230:	4b44      	ldr	r3, [pc, #272]	; (8027344 <__multiply+0x14c>)
 8027232:	4845      	ldr	r0, [pc, #276]	; (8027348 <__multiply+0x150>)
 8027234:	f240 115d 	movw	r1, #349	; 0x15d
 8027238:	f7fc fb80 	bl	802393c <__assert_func>
 802723c:	f100 0514 	add.w	r5, r0, #20
 8027240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8027244:	462b      	mov	r3, r5
 8027246:	2200      	movs	r2, #0
 8027248:	4543      	cmp	r3, r8
 802724a:	d321      	bcc.n	8027290 <__multiply+0x98>
 802724c:	f104 0314 	add.w	r3, r4, #20
 8027250:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8027254:	f109 0314 	add.w	r3, r9, #20
 8027258:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802725c:	9202      	str	r2, [sp, #8]
 802725e:	1b3a      	subs	r2, r7, r4
 8027260:	3a15      	subs	r2, #21
 8027262:	f022 0203 	bic.w	r2, r2, #3
 8027266:	3204      	adds	r2, #4
 8027268:	f104 0115 	add.w	r1, r4, #21
 802726c:	428f      	cmp	r7, r1
 802726e:	bf38      	it	cc
 8027270:	2204      	movcc	r2, #4
 8027272:	9201      	str	r2, [sp, #4]
 8027274:	9a02      	ldr	r2, [sp, #8]
 8027276:	9303      	str	r3, [sp, #12]
 8027278:	429a      	cmp	r2, r3
 802727a:	d80c      	bhi.n	8027296 <__multiply+0x9e>
 802727c:	2e00      	cmp	r6, #0
 802727e:	dd03      	ble.n	8027288 <__multiply+0x90>
 8027280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8027284:	2b00      	cmp	r3, #0
 8027286:	d05a      	beq.n	802733e <__multiply+0x146>
 8027288:	6106      	str	r6, [r0, #16]
 802728a:	b005      	add	sp, #20
 802728c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027290:	f843 2b04 	str.w	r2, [r3], #4
 8027294:	e7d8      	b.n	8027248 <__multiply+0x50>
 8027296:	f8b3 a000 	ldrh.w	sl, [r3]
 802729a:	f1ba 0f00 	cmp.w	sl, #0
 802729e:	d024      	beq.n	80272ea <__multiply+0xf2>
 80272a0:	f104 0e14 	add.w	lr, r4, #20
 80272a4:	46a9      	mov	r9, r5
 80272a6:	f04f 0c00 	mov.w	ip, #0
 80272aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80272ae:	f8d9 1000 	ldr.w	r1, [r9]
 80272b2:	fa1f fb82 	uxth.w	fp, r2
 80272b6:	b289      	uxth	r1, r1
 80272b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80272bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80272c0:	f8d9 2000 	ldr.w	r2, [r9]
 80272c4:	4461      	add	r1, ip
 80272c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80272ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80272ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80272d2:	b289      	uxth	r1, r1
 80272d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80272d8:	4577      	cmp	r7, lr
 80272da:	f849 1b04 	str.w	r1, [r9], #4
 80272de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80272e2:	d8e2      	bhi.n	80272aa <__multiply+0xb2>
 80272e4:	9a01      	ldr	r2, [sp, #4]
 80272e6:	f845 c002 	str.w	ip, [r5, r2]
 80272ea:	9a03      	ldr	r2, [sp, #12]
 80272ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80272f0:	3304      	adds	r3, #4
 80272f2:	f1b9 0f00 	cmp.w	r9, #0
 80272f6:	d020      	beq.n	802733a <__multiply+0x142>
 80272f8:	6829      	ldr	r1, [r5, #0]
 80272fa:	f104 0c14 	add.w	ip, r4, #20
 80272fe:	46ae      	mov	lr, r5
 8027300:	f04f 0a00 	mov.w	sl, #0
 8027304:	f8bc b000 	ldrh.w	fp, [ip]
 8027308:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802730c:	fb09 220b 	mla	r2, r9, fp, r2
 8027310:	4492      	add	sl, r2
 8027312:	b289      	uxth	r1, r1
 8027314:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8027318:	f84e 1b04 	str.w	r1, [lr], #4
 802731c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8027320:	f8be 1000 	ldrh.w	r1, [lr]
 8027324:	0c12      	lsrs	r2, r2, #16
 8027326:	fb09 1102 	mla	r1, r9, r2, r1
 802732a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802732e:	4567      	cmp	r7, ip
 8027330:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8027334:	d8e6      	bhi.n	8027304 <__multiply+0x10c>
 8027336:	9a01      	ldr	r2, [sp, #4]
 8027338:	50a9      	str	r1, [r5, r2]
 802733a:	3504      	adds	r5, #4
 802733c:	e79a      	b.n	8027274 <__multiply+0x7c>
 802733e:	3e01      	subs	r6, #1
 8027340:	e79c      	b.n	802727c <__multiply+0x84>
 8027342:	bf00      	nop
 8027344:	0802a468 	.word	0x0802a468
 8027348:	0802a558 	.word	0x0802a558

0802734c <__pow5mult>:
 802734c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027350:	4615      	mov	r5, r2
 8027352:	f012 0203 	ands.w	r2, r2, #3
 8027356:	4606      	mov	r6, r0
 8027358:	460f      	mov	r7, r1
 802735a:	d007      	beq.n	802736c <__pow5mult+0x20>
 802735c:	4c25      	ldr	r4, [pc, #148]	; (80273f4 <__pow5mult+0xa8>)
 802735e:	3a01      	subs	r2, #1
 8027360:	2300      	movs	r3, #0
 8027362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8027366:	f7ff fe51 	bl	802700c <__multadd>
 802736a:	4607      	mov	r7, r0
 802736c:	10ad      	asrs	r5, r5, #2
 802736e:	d03d      	beq.n	80273ec <__pow5mult+0xa0>
 8027370:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8027372:	b97c      	cbnz	r4, 8027394 <__pow5mult+0x48>
 8027374:	2010      	movs	r0, #16
 8027376:	f7fc fb4b 	bl	8023a10 <malloc>
 802737a:	4602      	mov	r2, r0
 802737c:	6270      	str	r0, [r6, #36]	; 0x24
 802737e:	b928      	cbnz	r0, 802738c <__pow5mult+0x40>
 8027380:	4b1d      	ldr	r3, [pc, #116]	; (80273f8 <__pow5mult+0xac>)
 8027382:	481e      	ldr	r0, [pc, #120]	; (80273fc <__pow5mult+0xb0>)
 8027384:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8027388:	f7fc fad8 	bl	802393c <__assert_func>
 802738c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8027390:	6004      	str	r4, [r0, #0]
 8027392:	60c4      	str	r4, [r0, #12]
 8027394:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8027398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802739c:	b94c      	cbnz	r4, 80273b2 <__pow5mult+0x66>
 802739e:	f240 2171 	movw	r1, #625	; 0x271
 80273a2:	4630      	mov	r0, r6
 80273a4:	f7ff ff12 	bl	80271cc <__i2b>
 80273a8:	2300      	movs	r3, #0
 80273aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80273ae:	4604      	mov	r4, r0
 80273b0:	6003      	str	r3, [r0, #0]
 80273b2:	f04f 0900 	mov.w	r9, #0
 80273b6:	07eb      	lsls	r3, r5, #31
 80273b8:	d50a      	bpl.n	80273d0 <__pow5mult+0x84>
 80273ba:	4639      	mov	r1, r7
 80273bc:	4622      	mov	r2, r4
 80273be:	4630      	mov	r0, r6
 80273c0:	f7ff ff1a 	bl	80271f8 <__multiply>
 80273c4:	4639      	mov	r1, r7
 80273c6:	4680      	mov	r8, r0
 80273c8:	4630      	mov	r0, r6
 80273ca:	f7ff fdfd 	bl	8026fc8 <_Bfree>
 80273ce:	4647      	mov	r7, r8
 80273d0:	106d      	asrs	r5, r5, #1
 80273d2:	d00b      	beq.n	80273ec <__pow5mult+0xa0>
 80273d4:	6820      	ldr	r0, [r4, #0]
 80273d6:	b938      	cbnz	r0, 80273e8 <__pow5mult+0x9c>
 80273d8:	4622      	mov	r2, r4
 80273da:	4621      	mov	r1, r4
 80273dc:	4630      	mov	r0, r6
 80273de:	f7ff ff0b 	bl	80271f8 <__multiply>
 80273e2:	6020      	str	r0, [r4, #0]
 80273e4:	f8c0 9000 	str.w	r9, [r0]
 80273e8:	4604      	mov	r4, r0
 80273ea:	e7e4      	b.n	80273b6 <__pow5mult+0x6a>
 80273ec:	4638      	mov	r0, r7
 80273ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80273f2:	bf00      	nop
 80273f4:	0802a6a8 	.word	0x0802a6a8
 80273f8:	0802a3f6 	.word	0x0802a3f6
 80273fc:	0802a558 	.word	0x0802a558

08027400 <__lshift>:
 8027400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027404:	460c      	mov	r4, r1
 8027406:	6849      	ldr	r1, [r1, #4]
 8027408:	6923      	ldr	r3, [r4, #16]
 802740a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802740e:	68a3      	ldr	r3, [r4, #8]
 8027410:	4607      	mov	r7, r0
 8027412:	4691      	mov	r9, r2
 8027414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8027418:	f108 0601 	add.w	r6, r8, #1
 802741c:	42b3      	cmp	r3, r6
 802741e:	db0b      	blt.n	8027438 <__lshift+0x38>
 8027420:	4638      	mov	r0, r7
 8027422:	f7ff fd91 	bl	8026f48 <_Balloc>
 8027426:	4605      	mov	r5, r0
 8027428:	b948      	cbnz	r0, 802743e <__lshift+0x3e>
 802742a:	4602      	mov	r2, r0
 802742c:	4b2a      	ldr	r3, [pc, #168]	; (80274d8 <__lshift+0xd8>)
 802742e:	482b      	ldr	r0, [pc, #172]	; (80274dc <__lshift+0xdc>)
 8027430:	f240 11d9 	movw	r1, #473	; 0x1d9
 8027434:	f7fc fa82 	bl	802393c <__assert_func>
 8027438:	3101      	adds	r1, #1
 802743a:	005b      	lsls	r3, r3, #1
 802743c:	e7ee      	b.n	802741c <__lshift+0x1c>
 802743e:	2300      	movs	r3, #0
 8027440:	f100 0114 	add.w	r1, r0, #20
 8027444:	f100 0210 	add.w	r2, r0, #16
 8027448:	4618      	mov	r0, r3
 802744a:	4553      	cmp	r3, sl
 802744c:	db37      	blt.n	80274be <__lshift+0xbe>
 802744e:	6920      	ldr	r0, [r4, #16]
 8027450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027454:	f104 0314 	add.w	r3, r4, #20
 8027458:	f019 091f 	ands.w	r9, r9, #31
 802745c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027460:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8027464:	d02f      	beq.n	80274c6 <__lshift+0xc6>
 8027466:	f1c9 0e20 	rsb	lr, r9, #32
 802746a:	468a      	mov	sl, r1
 802746c:	f04f 0c00 	mov.w	ip, #0
 8027470:	681a      	ldr	r2, [r3, #0]
 8027472:	fa02 f209 	lsl.w	r2, r2, r9
 8027476:	ea42 020c 	orr.w	r2, r2, ip
 802747a:	f84a 2b04 	str.w	r2, [sl], #4
 802747e:	f853 2b04 	ldr.w	r2, [r3], #4
 8027482:	4298      	cmp	r0, r3
 8027484:	fa22 fc0e 	lsr.w	ip, r2, lr
 8027488:	d8f2      	bhi.n	8027470 <__lshift+0x70>
 802748a:	1b03      	subs	r3, r0, r4
 802748c:	3b15      	subs	r3, #21
 802748e:	f023 0303 	bic.w	r3, r3, #3
 8027492:	3304      	adds	r3, #4
 8027494:	f104 0215 	add.w	r2, r4, #21
 8027498:	4290      	cmp	r0, r2
 802749a:	bf38      	it	cc
 802749c:	2304      	movcc	r3, #4
 802749e:	f841 c003 	str.w	ip, [r1, r3]
 80274a2:	f1bc 0f00 	cmp.w	ip, #0
 80274a6:	d001      	beq.n	80274ac <__lshift+0xac>
 80274a8:	f108 0602 	add.w	r6, r8, #2
 80274ac:	3e01      	subs	r6, #1
 80274ae:	4638      	mov	r0, r7
 80274b0:	612e      	str	r6, [r5, #16]
 80274b2:	4621      	mov	r1, r4
 80274b4:	f7ff fd88 	bl	8026fc8 <_Bfree>
 80274b8:	4628      	mov	r0, r5
 80274ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80274be:	f842 0f04 	str.w	r0, [r2, #4]!
 80274c2:	3301      	adds	r3, #1
 80274c4:	e7c1      	b.n	802744a <__lshift+0x4a>
 80274c6:	3904      	subs	r1, #4
 80274c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80274cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80274d0:	4298      	cmp	r0, r3
 80274d2:	d8f9      	bhi.n	80274c8 <__lshift+0xc8>
 80274d4:	e7ea      	b.n	80274ac <__lshift+0xac>
 80274d6:	bf00      	nop
 80274d8:	0802a468 	.word	0x0802a468
 80274dc:	0802a558 	.word	0x0802a558

080274e0 <__mcmp>:
 80274e0:	b530      	push	{r4, r5, lr}
 80274e2:	6902      	ldr	r2, [r0, #16]
 80274e4:	690c      	ldr	r4, [r1, #16]
 80274e6:	1b12      	subs	r2, r2, r4
 80274e8:	d10e      	bne.n	8027508 <__mcmp+0x28>
 80274ea:	f100 0314 	add.w	r3, r0, #20
 80274ee:	3114      	adds	r1, #20
 80274f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80274f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80274f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80274fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8027500:	42a5      	cmp	r5, r4
 8027502:	d003      	beq.n	802750c <__mcmp+0x2c>
 8027504:	d305      	bcc.n	8027512 <__mcmp+0x32>
 8027506:	2201      	movs	r2, #1
 8027508:	4610      	mov	r0, r2
 802750a:	bd30      	pop	{r4, r5, pc}
 802750c:	4283      	cmp	r3, r0
 802750e:	d3f3      	bcc.n	80274f8 <__mcmp+0x18>
 8027510:	e7fa      	b.n	8027508 <__mcmp+0x28>
 8027512:	f04f 32ff 	mov.w	r2, #4294967295
 8027516:	e7f7      	b.n	8027508 <__mcmp+0x28>

08027518 <__mdiff>:
 8027518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802751c:	460c      	mov	r4, r1
 802751e:	4606      	mov	r6, r0
 8027520:	4611      	mov	r1, r2
 8027522:	4620      	mov	r0, r4
 8027524:	4690      	mov	r8, r2
 8027526:	f7ff ffdb 	bl	80274e0 <__mcmp>
 802752a:	1e05      	subs	r5, r0, #0
 802752c:	d110      	bne.n	8027550 <__mdiff+0x38>
 802752e:	4629      	mov	r1, r5
 8027530:	4630      	mov	r0, r6
 8027532:	f7ff fd09 	bl	8026f48 <_Balloc>
 8027536:	b930      	cbnz	r0, 8027546 <__mdiff+0x2e>
 8027538:	4b3a      	ldr	r3, [pc, #232]	; (8027624 <__mdiff+0x10c>)
 802753a:	4602      	mov	r2, r0
 802753c:	f240 2132 	movw	r1, #562	; 0x232
 8027540:	4839      	ldr	r0, [pc, #228]	; (8027628 <__mdiff+0x110>)
 8027542:	f7fc f9fb 	bl	802393c <__assert_func>
 8027546:	2301      	movs	r3, #1
 8027548:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802754c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027550:	bfa4      	itt	ge
 8027552:	4643      	movge	r3, r8
 8027554:	46a0      	movge	r8, r4
 8027556:	4630      	mov	r0, r6
 8027558:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802755c:	bfa6      	itte	ge
 802755e:	461c      	movge	r4, r3
 8027560:	2500      	movge	r5, #0
 8027562:	2501      	movlt	r5, #1
 8027564:	f7ff fcf0 	bl	8026f48 <_Balloc>
 8027568:	b920      	cbnz	r0, 8027574 <__mdiff+0x5c>
 802756a:	4b2e      	ldr	r3, [pc, #184]	; (8027624 <__mdiff+0x10c>)
 802756c:	4602      	mov	r2, r0
 802756e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8027572:	e7e5      	b.n	8027540 <__mdiff+0x28>
 8027574:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8027578:	6926      	ldr	r6, [r4, #16]
 802757a:	60c5      	str	r5, [r0, #12]
 802757c:	f104 0914 	add.w	r9, r4, #20
 8027580:	f108 0514 	add.w	r5, r8, #20
 8027584:	f100 0e14 	add.w	lr, r0, #20
 8027588:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802758c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8027590:	f108 0210 	add.w	r2, r8, #16
 8027594:	46f2      	mov	sl, lr
 8027596:	2100      	movs	r1, #0
 8027598:	f859 3b04 	ldr.w	r3, [r9], #4
 802759c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80275a0:	fa1f f883 	uxth.w	r8, r3
 80275a4:	fa11 f18b 	uxtah	r1, r1, fp
 80275a8:	0c1b      	lsrs	r3, r3, #16
 80275aa:	eba1 0808 	sub.w	r8, r1, r8
 80275ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80275b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80275b6:	fa1f f888 	uxth.w	r8, r8
 80275ba:	1419      	asrs	r1, r3, #16
 80275bc:	454e      	cmp	r6, r9
 80275be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80275c2:	f84a 3b04 	str.w	r3, [sl], #4
 80275c6:	d8e7      	bhi.n	8027598 <__mdiff+0x80>
 80275c8:	1b33      	subs	r3, r6, r4
 80275ca:	3b15      	subs	r3, #21
 80275cc:	f023 0303 	bic.w	r3, r3, #3
 80275d0:	3304      	adds	r3, #4
 80275d2:	3415      	adds	r4, #21
 80275d4:	42a6      	cmp	r6, r4
 80275d6:	bf38      	it	cc
 80275d8:	2304      	movcc	r3, #4
 80275da:	441d      	add	r5, r3
 80275dc:	4473      	add	r3, lr
 80275de:	469e      	mov	lr, r3
 80275e0:	462e      	mov	r6, r5
 80275e2:	4566      	cmp	r6, ip
 80275e4:	d30e      	bcc.n	8027604 <__mdiff+0xec>
 80275e6:	f10c 0203 	add.w	r2, ip, #3
 80275ea:	1b52      	subs	r2, r2, r5
 80275ec:	f022 0203 	bic.w	r2, r2, #3
 80275f0:	3d03      	subs	r5, #3
 80275f2:	45ac      	cmp	ip, r5
 80275f4:	bf38      	it	cc
 80275f6:	2200      	movcc	r2, #0
 80275f8:	441a      	add	r2, r3
 80275fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80275fe:	b17b      	cbz	r3, 8027620 <__mdiff+0x108>
 8027600:	6107      	str	r7, [r0, #16]
 8027602:	e7a3      	b.n	802754c <__mdiff+0x34>
 8027604:	f856 8b04 	ldr.w	r8, [r6], #4
 8027608:	fa11 f288 	uxtah	r2, r1, r8
 802760c:	1414      	asrs	r4, r2, #16
 802760e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8027612:	b292      	uxth	r2, r2
 8027614:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8027618:	f84e 2b04 	str.w	r2, [lr], #4
 802761c:	1421      	asrs	r1, r4, #16
 802761e:	e7e0      	b.n	80275e2 <__mdiff+0xca>
 8027620:	3f01      	subs	r7, #1
 8027622:	e7ea      	b.n	80275fa <__mdiff+0xe2>
 8027624:	0802a468 	.word	0x0802a468
 8027628:	0802a558 	.word	0x0802a558

0802762c <__ulp>:
 802762c:	b082      	sub	sp, #8
 802762e:	ed8d 0b00 	vstr	d0, [sp]
 8027632:	9b01      	ldr	r3, [sp, #4]
 8027634:	4912      	ldr	r1, [pc, #72]	; (8027680 <__ulp+0x54>)
 8027636:	4019      	ands	r1, r3
 8027638:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 802763c:	2900      	cmp	r1, #0
 802763e:	dd05      	ble.n	802764c <__ulp+0x20>
 8027640:	2200      	movs	r2, #0
 8027642:	460b      	mov	r3, r1
 8027644:	ec43 2b10 	vmov	d0, r2, r3
 8027648:	b002      	add	sp, #8
 802764a:	4770      	bx	lr
 802764c:	4249      	negs	r1, r1
 802764e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8027652:	ea4f 5021 	mov.w	r0, r1, asr #20
 8027656:	f04f 0200 	mov.w	r2, #0
 802765a:	f04f 0300 	mov.w	r3, #0
 802765e:	da04      	bge.n	802766a <__ulp+0x3e>
 8027660:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8027664:	fa41 f300 	asr.w	r3, r1, r0
 8027668:	e7ec      	b.n	8027644 <__ulp+0x18>
 802766a:	f1a0 0114 	sub.w	r1, r0, #20
 802766e:	291e      	cmp	r1, #30
 8027670:	bfda      	itte	le
 8027672:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8027676:	fa20 f101 	lsrle.w	r1, r0, r1
 802767a:	2101      	movgt	r1, #1
 802767c:	460a      	mov	r2, r1
 802767e:	e7e1      	b.n	8027644 <__ulp+0x18>
 8027680:	7ff00000 	.word	0x7ff00000

08027684 <__b2d>:
 8027684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027686:	6905      	ldr	r5, [r0, #16]
 8027688:	f100 0714 	add.w	r7, r0, #20
 802768c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8027690:	1f2e      	subs	r6, r5, #4
 8027692:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8027696:	4620      	mov	r0, r4
 8027698:	f7ff fd48 	bl	802712c <__hi0bits>
 802769c:	f1c0 0320 	rsb	r3, r0, #32
 80276a0:	280a      	cmp	r0, #10
 80276a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8027720 <__b2d+0x9c>
 80276a6:	600b      	str	r3, [r1, #0]
 80276a8:	dc14      	bgt.n	80276d4 <__b2d+0x50>
 80276aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80276ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80276b2:	42b7      	cmp	r7, r6
 80276b4:	ea41 030c 	orr.w	r3, r1, ip
 80276b8:	bf34      	ite	cc
 80276ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80276be:	2100      	movcs	r1, #0
 80276c0:	3015      	adds	r0, #21
 80276c2:	fa04 f000 	lsl.w	r0, r4, r0
 80276c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80276ca:	ea40 0201 	orr.w	r2, r0, r1
 80276ce:	ec43 2b10 	vmov	d0, r2, r3
 80276d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80276d4:	42b7      	cmp	r7, r6
 80276d6:	bf3a      	itte	cc
 80276d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80276dc:	f1a5 0608 	subcc.w	r6, r5, #8
 80276e0:	2100      	movcs	r1, #0
 80276e2:	380b      	subs	r0, #11
 80276e4:	d017      	beq.n	8027716 <__b2d+0x92>
 80276e6:	f1c0 0c20 	rsb	ip, r0, #32
 80276ea:	fa04 f500 	lsl.w	r5, r4, r0
 80276ee:	42be      	cmp	r6, r7
 80276f0:	fa21 f40c 	lsr.w	r4, r1, ip
 80276f4:	ea45 0504 	orr.w	r5, r5, r4
 80276f8:	bf8c      	ite	hi
 80276fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80276fe:	2400      	movls	r4, #0
 8027700:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8027704:	fa01 f000 	lsl.w	r0, r1, r0
 8027708:	fa24 f40c 	lsr.w	r4, r4, ip
 802770c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8027710:	ea40 0204 	orr.w	r2, r0, r4
 8027714:	e7db      	b.n	80276ce <__b2d+0x4a>
 8027716:	ea44 030c 	orr.w	r3, r4, ip
 802771a:	460a      	mov	r2, r1
 802771c:	e7d7      	b.n	80276ce <__b2d+0x4a>
 802771e:	bf00      	nop
 8027720:	3ff00000 	.word	0x3ff00000

08027724 <__d2b>:
 8027724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027728:	4689      	mov	r9, r1
 802772a:	2101      	movs	r1, #1
 802772c:	ec57 6b10 	vmov	r6, r7, d0
 8027730:	4690      	mov	r8, r2
 8027732:	f7ff fc09 	bl	8026f48 <_Balloc>
 8027736:	4604      	mov	r4, r0
 8027738:	b930      	cbnz	r0, 8027748 <__d2b+0x24>
 802773a:	4602      	mov	r2, r0
 802773c:	4b25      	ldr	r3, [pc, #148]	; (80277d4 <__d2b+0xb0>)
 802773e:	4826      	ldr	r0, [pc, #152]	; (80277d8 <__d2b+0xb4>)
 8027740:	f240 310a 	movw	r1, #778	; 0x30a
 8027744:	f7fc f8fa 	bl	802393c <__assert_func>
 8027748:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802774c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027750:	bb35      	cbnz	r5, 80277a0 <__d2b+0x7c>
 8027752:	2e00      	cmp	r6, #0
 8027754:	9301      	str	r3, [sp, #4]
 8027756:	d028      	beq.n	80277aa <__d2b+0x86>
 8027758:	4668      	mov	r0, sp
 802775a:	9600      	str	r6, [sp, #0]
 802775c:	f7ff fd06 	bl	802716c <__lo0bits>
 8027760:	9900      	ldr	r1, [sp, #0]
 8027762:	b300      	cbz	r0, 80277a6 <__d2b+0x82>
 8027764:	9a01      	ldr	r2, [sp, #4]
 8027766:	f1c0 0320 	rsb	r3, r0, #32
 802776a:	fa02 f303 	lsl.w	r3, r2, r3
 802776e:	430b      	orrs	r3, r1
 8027770:	40c2      	lsrs	r2, r0
 8027772:	6163      	str	r3, [r4, #20]
 8027774:	9201      	str	r2, [sp, #4]
 8027776:	9b01      	ldr	r3, [sp, #4]
 8027778:	61a3      	str	r3, [r4, #24]
 802777a:	2b00      	cmp	r3, #0
 802777c:	bf14      	ite	ne
 802777e:	2202      	movne	r2, #2
 8027780:	2201      	moveq	r2, #1
 8027782:	6122      	str	r2, [r4, #16]
 8027784:	b1d5      	cbz	r5, 80277bc <__d2b+0x98>
 8027786:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802778a:	4405      	add	r5, r0
 802778c:	f8c9 5000 	str.w	r5, [r9]
 8027790:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8027794:	f8c8 0000 	str.w	r0, [r8]
 8027798:	4620      	mov	r0, r4
 802779a:	b003      	add	sp, #12
 802779c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80277a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80277a4:	e7d5      	b.n	8027752 <__d2b+0x2e>
 80277a6:	6161      	str	r1, [r4, #20]
 80277a8:	e7e5      	b.n	8027776 <__d2b+0x52>
 80277aa:	a801      	add	r0, sp, #4
 80277ac:	f7ff fcde 	bl	802716c <__lo0bits>
 80277b0:	9b01      	ldr	r3, [sp, #4]
 80277b2:	6163      	str	r3, [r4, #20]
 80277b4:	2201      	movs	r2, #1
 80277b6:	6122      	str	r2, [r4, #16]
 80277b8:	3020      	adds	r0, #32
 80277ba:	e7e3      	b.n	8027784 <__d2b+0x60>
 80277bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80277c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80277c4:	f8c9 0000 	str.w	r0, [r9]
 80277c8:	6918      	ldr	r0, [r3, #16]
 80277ca:	f7ff fcaf 	bl	802712c <__hi0bits>
 80277ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80277d2:	e7df      	b.n	8027794 <__d2b+0x70>
 80277d4:	0802a468 	.word	0x0802a468
 80277d8:	0802a558 	.word	0x0802a558

080277dc <__ratio>:
 80277dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277e0:	4688      	mov	r8, r1
 80277e2:	4669      	mov	r1, sp
 80277e4:	4681      	mov	r9, r0
 80277e6:	f7ff ff4d 	bl	8027684 <__b2d>
 80277ea:	a901      	add	r1, sp, #4
 80277ec:	4640      	mov	r0, r8
 80277ee:	ec55 4b10 	vmov	r4, r5, d0
 80277f2:	f7ff ff47 	bl	8027684 <__b2d>
 80277f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80277fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80277fe:	eba3 0c02 	sub.w	ip, r3, r2
 8027802:	e9dd 3200 	ldrd	r3, r2, [sp]
 8027806:	1a9b      	subs	r3, r3, r2
 8027808:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802780c:	ec51 0b10 	vmov	r0, r1, d0
 8027810:	2b00      	cmp	r3, #0
 8027812:	bfd6      	itet	le
 8027814:	460a      	movle	r2, r1
 8027816:	462a      	movgt	r2, r5
 8027818:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802781c:	468b      	mov	fp, r1
 802781e:	462f      	mov	r7, r5
 8027820:	bfd4      	ite	le
 8027822:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8027826:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802782a:	4620      	mov	r0, r4
 802782c:	ee10 2a10 	vmov	r2, s0
 8027830:	465b      	mov	r3, fp
 8027832:	4639      	mov	r1, r7
 8027834:	f7d9 f814 	bl	8000860 <__aeabi_ddiv>
 8027838:	ec41 0b10 	vmov	d0, r0, r1
 802783c:	b003      	add	sp, #12
 802783e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027842 <__copybits>:
 8027842:	3901      	subs	r1, #1
 8027844:	b570      	push	{r4, r5, r6, lr}
 8027846:	1149      	asrs	r1, r1, #5
 8027848:	6914      	ldr	r4, [r2, #16]
 802784a:	3101      	adds	r1, #1
 802784c:	f102 0314 	add.w	r3, r2, #20
 8027850:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8027854:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8027858:	1f05      	subs	r5, r0, #4
 802785a:	42a3      	cmp	r3, r4
 802785c:	d30c      	bcc.n	8027878 <__copybits+0x36>
 802785e:	1aa3      	subs	r3, r4, r2
 8027860:	3b11      	subs	r3, #17
 8027862:	f023 0303 	bic.w	r3, r3, #3
 8027866:	3211      	adds	r2, #17
 8027868:	42a2      	cmp	r2, r4
 802786a:	bf88      	it	hi
 802786c:	2300      	movhi	r3, #0
 802786e:	4418      	add	r0, r3
 8027870:	2300      	movs	r3, #0
 8027872:	4288      	cmp	r0, r1
 8027874:	d305      	bcc.n	8027882 <__copybits+0x40>
 8027876:	bd70      	pop	{r4, r5, r6, pc}
 8027878:	f853 6b04 	ldr.w	r6, [r3], #4
 802787c:	f845 6f04 	str.w	r6, [r5, #4]!
 8027880:	e7eb      	b.n	802785a <__copybits+0x18>
 8027882:	f840 3b04 	str.w	r3, [r0], #4
 8027886:	e7f4      	b.n	8027872 <__copybits+0x30>

08027888 <__any_on>:
 8027888:	f100 0214 	add.w	r2, r0, #20
 802788c:	6900      	ldr	r0, [r0, #16]
 802788e:	114b      	asrs	r3, r1, #5
 8027890:	4298      	cmp	r0, r3
 8027892:	b510      	push	{r4, lr}
 8027894:	db11      	blt.n	80278ba <__any_on+0x32>
 8027896:	dd0a      	ble.n	80278ae <__any_on+0x26>
 8027898:	f011 011f 	ands.w	r1, r1, #31
 802789c:	d007      	beq.n	80278ae <__any_on+0x26>
 802789e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80278a2:	fa24 f001 	lsr.w	r0, r4, r1
 80278a6:	fa00 f101 	lsl.w	r1, r0, r1
 80278aa:	428c      	cmp	r4, r1
 80278ac:	d10b      	bne.n	80278c6 <__any_on+0x3e>
 80278ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80278b2:	4293      	cmp	r3, r2
 80278b4:	d803      	bhi.n	80278be <__any_on+0x36>
 80278b6:	2000      	movs	r0, #0
 80278b8:	bd10      	pop	{r4, pc}
 80278ba:	4603      	mov	r3, r0
 80278bc:	e7f7      	b.n	80278ae <__any_on+0x26>
 80278be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80278c2:	2900      	cmp	r1, #0
 80278c4:	d0f5      	beq.n	80278b2 <__any_on+0x2a>
 80278c6:	2001      	movs	r0, #1
 80278c8:	e7f6      	b.n	80278b8 <__any_on+0x30>

080278ca <_realloc_r>:
 80278ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80278ce:	4680      	mov	r8, r0
 80278d0:	4614      	mov	r4, r2
 80278d2:	460e      	mov	r6, r1
 80278d4:	b921      	cbnz	r1, 80278e0 <_realloc_r+0x16>
 80278d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80278da:	4611      	mov	r1, r2
 80278dc:	f7fc b95a 	b.w	8023b94 <_malloc_r>
 80278e0:	b92a      	cbnz	r2, 80278ee <_realloc_r+0x24>
 80278e2:	f7fc f8eb 	bl	8023abc <_free_r>
 80278e6:	4625      	mov	r5, r4
 80278e8:	4628      	mov	r0, r5
 80278ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80278ee:	f000 fa1d 	bl	8027d2c <_malloc_usable_size_r>
 80278f2:	4284      	cmp	r4, r0
 80278f4:	4607      	mov	r7, r0
 80278f6:	d802      	bhi.n	80278fe <_realloc_r+0x34>
 80278f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80278fc:	d812      	bhi.n	8027924 <_realloc_r+0x5a>
 80278fe:	4621      	mov	r1, r4
 8027900:	4640      	mov	r0, r8
 8027902:	f7fc f947 	bl	8023b94 <_malloc_r>
 8027906:	4605      	mov	r5, r0
 8027908:	2800      	cmp	r0, #0
 802790a:	d0ed      	beq.n	80278e8 <_realloc_r+0x1e>
 802790c:	42bc      	cmp	r4, r7
 802790e:	4622      	mov	r2, r4
 8027910:	4631      	mov	r1, r6
 8027912:	bf28      	it	cs
 8027914:	463a      	movcs	r2, r7
 8027916:	f7fc f88b 	bl	8023a30 <memcpy>
 802791a:	4631      	mov	r1, r6
 802791c:	4640      	mov	r0, r8
 802791e:	f7fc f8cd 	bl	8023abc <_free_r>
 8027922:	e7e1      	b.n	80278e8 <_realloc_r+0x1e>
 8027924:	4635      	mov	r5, r6
 8027926:	e7df      	b.n	80278e8 <_realloc_r+0x1e>

08027928 <__ssputs_r>:
 8027928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802792c:	688e      	ldr	r6, [r1, #8]
 802792e:	429e      	cmp	r6, r3
 8027930:	4682      	mov	sl, r0
 8027932:	460c      	mov	r4, r1
 8027934:	4690      	mov	r8, r2
 8027936:	461f      	mov	r7, r3
 8027938:	d838      	bhi.n	80279ac <__ssputs_r+0x84>
 802793a:	898a      	ldrh	r2, [r1, #12]
 802793c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8027940:	d032      	beq.n	80279a8 <__ssputs_r+0x80>
 8027942:	6825      	ldr	r5, [r4, #0]
 8027944:	6909      	ldr	r1, [r1, #16]
 8027946:	eba5 0901 	sub.w	r9, r5, r1
 802794a:	6965      	ldr	r5, [r4, #20]
 802794c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027950:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027954:	3301      	adds	r3, #1
 8027956:	444b      	add	r3, r9
 8027958:	106d      	asrs	r5, r5, #1
 802795a:	429d      	cmp	r5, r3
 802795c:	bf38      	it	cc
 802795e:	461d      	movcc	r5, r3
 8027960:	0553      	lsls	r3, r2, #21
 8027962:	d531      	bpl.n	80279c8 <__ssputs_r+0xa0>
 8027964:	4629      	mov	r1, r5
 8027966:	f7fc f915 	bl	8023b94 <_malloc_r>
 802796a:	4606      	mov	r6, r0
 802796c:	b950      	cbnz	r0, 8027984 <__ssputs_r+0x5c>
 802796e:	230c      	movs	r3, #12
 8027970:	f8ca 3000 	str.w	r3, [sl]
 8027974:	89a3      	ldrh	r3, [r4, #12]
 8027976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802797a:	81a3      	strh	r3, [r4, #12]
 802797c:	f04f 30ff 	mov.w	r0, #4294967295
 8027980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027984:	6921      	ldr	r1, [r4, #16]
 8027986:	464a      	mov	r2, r9
 8027988:	f7fc f852 	bl	8023a30 <memcpy>
 802798c:	89a3      	ldrh	r3, [r4, #12]
 802798e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8027992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027996:	81a3      	strh	r3, [r4, #12]
 8027998:	6126      	str	r6, [r4, #16]
 802799a:	6165      	str	r5, [r4, #20]
 802799c:	444e      	add	r6, r9
 802799e:	eba5 0509 	sub.w	r5, r5, r9
 80279a2:	6026      	str	r6, [r4, #0]
 80279a4:	60a5      	str	r5, [r4, #8]
 80279a6:	463e      	mov	r6, r7
 80279a8:	42be      	cmp	r6, r7
 80279aa:	d900      	bls.n	80279ae <__ssputs_r+0x86>
 80279ac:	463e      	mov	r6, r7
 80279ae:	6820      	ldr	r0, [r4, #0]
 80279b0:	4632      	mov	r2, r6
 80279b2:	4641      	mov	r1, r8
 80279b4:	f7fc f84a 	bl	8023a4c <memmove>
 80279b8:	68a3      	ldr	r3, [r4, #8]
 80279ba:	1b9b      	subs	r3, r3, r6
 80279bc:	60a3      	str	r3, [r4, #8]
 80279be:	6823      	ldr	r3, [r4, #0]
 80279c0:	4433      	add	r3, r6
 80279c2:	6023      	str	r3, [r4, #0]
 80279c4:	2000      	movs	r0, #0
 80279c6:	e7db      	b.n	8027980 <__ssputs_r+0x58>
 80279c8:	462a      	mov	r2, r5
 80279ca:	f7ff ff7e 	bl	80278ca <_realloc_r>
 80279ce:	4606      	mov	r6, r0
 80279d0:	2800      	cmp	r0, #0
 80279d2:	d1e1      	bne.n	8027998 <__ssputs_r+0x70>
 80279d4:	6921      	ldr	r1, [r4, #16]
 80279d6:	4650      	mov	r0, sl
 80279d8:	f7fc f870 	bl	8023abc <_free_r>
 80279dc:	e7c7      	b.n	802796e <__ssputs_r+0x46>
	...

080279e0 <_svfiprintf_r>:
 80279e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80279e4:	4698      	mov	r8, r3
 80279e6:	898b      	ldrh	r3, [r1, #12]
 80279e8:	061b      	lsls	r3, r3, #24
 80279ea:	b09d      	sub	sp, #116	; 0x74
 80279ec:	4607      	mov	r7, r0
 80279ee:	460d      	mov	r5, r1
 80279f0:	4614      	mov	r4, r2
 80279f2:	d50e      	bpl.n	8027a12 <_svfiprintf_r+0x32>
 80279f4:	690b      	ldr	r3, [r1, #16]
 80279f6:	b963      	cbnz	r3, 8027a12 <_svfiprintf_r+0x32>
 80279f8:	2140      	movs	r1, #64	; 0x40
 80279fa:	f7fc f8cb 	bl	8023b94 <_malloc_r>
 80279fe:	6028      	str	r0, [r5, #0]
 8027a00:	6128      	str	r0, [r5, #16]
 8027a02:	b920      	cbnz	r0, 8027a0e <_svfiprintf_r+0x2e>
 8027a04:	230c      	movs	r3, #12
 8027a06:	603b      	str	r3, [r7, #0]
 8027a08:	f04f 30ff 	mov.w	r0, #4294967295
 8027a0c:	e0d1      	b.n	8027bb2 <_svfiprintf_r+0x1d2>
 8027a0e:	2340      	movs	r3, #64	; 0x40
 8027a10:	616b      	str	r3, [r5, #20]
 8027a12:	2300      	movs	r3, #0
 8027a14:	9309      	str	r3, [sp, #36]	; 0x24
 8027a16:	2320      	movs	r3, #32
 8027a18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8027a20:	2330      	movs	r3, #48	; 0x30
 8027a22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8027bcc <_svfiprintf_r+0x1ec>
 8027a26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027a2a:	f04f 0901 	mov.w	r9, #1
 8027a2e:	4623      	mov	r3, r4
 8027a30:	469a      	mov	sl, r3
 8027a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027a36:	b10a      	cbz	r2, 8027a3c <_svfiprintf_r+0x5c>
 8027a38:	2a25      	cmp	r2, #37	; 0x25
 8027a3a:	d1f9      	bne.n	8027a30 <_svfiprintf_r+0x50>
 8027a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8027a40:	d00b      	beq.n	8027a5a <_svfiprintf_r+0x7a>
 8027a42:	465b      	mov	r3, fp
 8027a44:	4622      	mov	r2, r4
 8027a46:	4629      	mov	r1, r5
 8027a48:	4638      	mov	r0, r7
 8027a4a:	f7ff ff6d 	bl	8027928 <__ssputs_r>
 8027a4e:	3001      	adds	r0, #1
 8027a50:	f000 80aa 	beq.w	8027ba8 <_svfiprintf_r+0x1c8>
 8027a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027a56:	445a      	add	r2, fp
 8027a58:	9209      	str	r2, [sp, #36]	; 0x24
 8027a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8027a5e:	2b00      	cmp	r3, #0
 8027a60:	f000 80a2 	beq.w	8027ba8 <_svfiprintf_r+0x1c8>
 8027a64:	2300      	movs	r3, #0
 8027a66:	f04f 32ff 	mov.w	r2, #4294967295
 8027a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027a6e:	f10a 0a01 	add.w	sl, sl, #1
 8027a72:	9304      	str	r3, [sp, #16]
 8027a74:	9307      	str	r3, [sp, #28]
 8027a76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8027a7c:	4654      	mov	r4, sl
 8027a7e:	2205      	movs	r2, #5
 8027a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027a84:	4851      	ldr	r0, [pc, #324]	; (8027bcc <_svfiprintf_r+0x1ec>)
 8027a86:	f7d8 fba3 	bl	80001d0 <memchr>
 8027a8a:	9a04      	ldr	r2, [sp, #16]
 8027a8c:	b9d8      	cbnz	r0, 8027ac6 <_svfiprintf_r+0xe6>
 8027a8e:	06d0      	lsls	r0, r2, #27
 8027a90:	bf44      	itt	mi
 8027a92:	2320      	movmi	r3, #32
 8027a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027a98:	0711      	lsls	r1, r2, #28
 8027a9a:	bf44      	itt	mi
 8027a9c:	232b      	movmi	r3, #43	; 0x2b
 8027a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8027aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8027aa8:	d015      	beq.n	8027ad6 <_svfiprintf_r+0xf6>
 8027aaa:	9a07      	ldr	r2, [sp, #28]
 8027aac:	4654      	mov	r4, sl
 8027aae:	2000      	movs	r0, #0
 8027ab0:	f04f 0c0a 	mov.w	ip, #10
 8027ab4:	4621      	mov	r1, r4
 8027ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027aba:	3b30      	subs	r3, #48	; 0x30
 8027abc:	2b09      	cmp	r3, #9
 8027abe:	d94e      	bls.n	8027b5e <_svfiprintf_r+0x17e>
 8027ac0:	b1b0      	cbz	r0, 8027af0 <_svfiprintf_r+0x110>
 8027ac2:	9207      	str	r2, [sp, #28]
 8027ac4:	e014      	b.n	8027af0 <_svfiprintf_r+0x110>
 8027ac6:	eba0 0308 	sub.w	r3, r0, r8
 8027aca:	fa09 f303 	lsl.w	r3, r9, r3
 8027ace:	4313      	orrs	r3, r2
 8027ad0:	9304      	str	r3, [sp, #16]
 8027ad2:	46a2      	mov	sl, r4
 8027ad4:	e7d2      	b.n	8027a7c <_svfiprintf_r+0x9c>
 8027ad6:	9b03      	ldr	r3, [sp, #12]
 8027ad8:	1d19      	adds	r1, r3, #4
 8027ada:	681b      	ldr	r3, [r3, #0]
 8027adc:	9103      	str	r1, [sp, #12]
 8027ade:	2b00      	cmp	r3, #0
 8027ae0:	bfbb      	ittet	lt
 8027ae2:	425b      	neglt	r3, r3
 8027ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8027ae8:	9307      	strge	r3, [sp, #28]
 8027aea:	9307      	strlt	r3, [sp, #28]
 8027aec:	bfb8      	it	lt
 8027aee:	9204      	strlt	r2, [sp, #16]
 8027af0:	7823      	ldrb	r3, [r4, #0]
 8027af2:	2b2e      	cmp	r3, #46	; 0x2e
 8027af4:	d10c      	bne.n	8027b10 <_svfiprintf_r+0x130>
 8027af6:	7863      	ldrb	r3, [r4, #1]
 8027af8:	2b2a      	cmp	r3, #42	; 0x2a
 8027afa:	d135      	bne.n	8027b68 <_svfiprintf_r+0x188>
 8027afc:	9b03      	ldr	r3, [sp, #12]
 8027afe:	1d1a      	adds	r2, r3, #4
 8027b00:	681b      	ldr	r3, [r3, #0]
 8027b02:	9203      	str	r2, [sp, #12]
 8027b04:	2b00      	cmp	r3, #0
 8027b06:	bfb8      	it	lt
 8027b08:	f04f 33ff 	movlt.w	r3, #4294967295
 8027b0c:	3402      	adds	r4, #2
 8027b0e:	9305      	str	r3, [sp, #20]
 8027b10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8027bdc <_svfiprintf_r+0x1fc>
 8027b14:	7821      	ldrb	r1, [r4, #0]
 8027b16:	2203      	movs	r2, #3
 8027b18:	4650      	mov	r0, sl
 8027b1a:	f7d8 fb59 	bl	80001d0 <memchr>
 8027b1e:	b140      	cbz	r0, 8027b32 <_svfiprintf_r+0x152>
 8027b20:	2340      	movs	r3, #64	; 0x40
 8027b22:	eba0 000a 	sub.w	r0, r0, sl
 8027b26:	fa03 f000 	lsl.w	r0, r3, r0
 8027b2a:	9b04      	ldr	r3, [sp, #16]
 8027b2c:	4303      	orrs	r3, r0
 8027b2e:	3401      	adds	r4, #1
 8027b30:	9304      	str	r3, [sp, #16]
 8027b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027b36:	4826      	ldr	r0, [pc, #152]	; (8027bd0 <_svfiprintf_r+0x1f0>)
 8027b38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027b3c:	2206      	movs	r2, #6
 8027b3e:	f7d8 fb47 	bl	80001d0 <memchr>
 8027b42:	2800      	cmp	r0, #0
 8027b44:	d038      	beq.n	8027bb8 <_svfiprintf_r+0x1d8>
 8027b46:	4b23      	ldr	r3, [pc, #140]	; (8027bd4 <_svfiprintf_r+0x1f4>)
 8027b48:	bb1b      	cbnz	r3, 8027b92 <_svfiprintf_r+0x1b2>
 8027b4a:	9b03      	ldr	r3, [sp, #12]
 8027b4c:	3307      	adds	r3, #7
 8027b4e:	f023 0307 	bic.w	r3, r3, #7
 8027b52:	3308      	adds	r3, #8
 8027b54:	9303      	str	r3, [sp, #12]
 8027b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b58:	4433      	add	r3, r6
 8027b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8027b5c:	e767      	b.n	8027a2e <_svfiprintf_r+0x4e>
 8027b5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8027b62:	460c      	mov	r4, r1
 8027b64:	2001      	movs	r0, #1
 8027b66:	e7a5      	b.n	8027ab4 <_svfiprintf_r+0xd4>
 8027b68:	2300      	movs	r3, #0
 8027b6a:	3401      	adds	r4, #1
 8027b6c:	9305      	str	r3, [sp, #20]
 8027b6e:	4619      	mov	r1, r3
 8027b70:	f04f 0c0a 	mov.w	ip, #10
 8027b74:	4620      	mov	r0, r4
 8027b76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027b7a:	3a30      	subs	r2, #48	; 0x30
 8027b7c:	2a09      	cmp	r2, #9
 8027b7e:	d903      	bls.n	8027b88 <_svfiprintf_r+0x1a8>
 8027b80:	2b00      	cmp	r3, #0
 8027b82:	d0c5      	beq.n	8027b10 <_svfiprintf_r+0x130>
 8027b84:	9105      	str	r1, [sp, #20]
 8027b86:	e7c3      	b.n	8027b10 <_svfiprintf_r+0x130>
 8027b88:	fb0c 2101 	mla	r1, ip, r1, r2
 8027b8c:	4604      	mov	r4, r0
 8027b8e:	2301      	movs	r3, #1
 8027b90:	e7f0      	b.n	8027b74 <_svfiprintf_r+0x194>
 8027b92:	ab03      	add	r3, sp, #12
 8027b94:	9300      	str	r3, [sp, #0]
 8027b96:	462a      	mov	r2, r5
 8027b98:	4b0f      	ldr	r3, [pc, #60]	; (8027bd8 <_svfiprintf_r+0x1f8>)
 8027b9a:	a904      	add	r1, sp, #16
 8027b9c:	4638      	mov	r0, r7
 8027b9e:	f7fc fa67 	bl	8024070 <_printf_float>
 8027ba2:	1c42      	adds	r2, r0, #1
 8027ba4:	4606      	mov	r6, r0
 8027ba6:	d1d6      	bne.n	8027b56 <_svfiprintf_r+0x176>
 8027ba8:	89ab      	ldrh	r3, [r5, #12]
 8027baa:	065b      	lsls	r3, r3, #25
 8027bac:	f53f af2c 	bmi.w	8027a08 <_svfiprintf_r+0x28>
 8027bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027bb2:	b01d      	add	sp, #116	; 0x74
 8027bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027bb8:	ab03      	add	r3, sp, #12
 8027bba:	9300      	str	r3, [sp, #0]
 8027bbc:	462a      	mov	r2, r5
 8027bbe:	4b06      	ldr	r3, [pc, #24]	; (8027bd8 <_svfiprintf_r+0x1f8>)
 8027bc0:	a904      	add	r1, sp, #16
 8027bc2:	4638      	mov	r0, r7
 8027bc4:	f7fc fcf8 	bl	80245b8 <_printf_i>
 8027bc8:	e7eb      	b.n	8027ba2 <_svfiprintf_r+0x1c2>
 8027bca:	bf00      	nop
 8027bcc:	0802a250 	.word	0x0802a250
 8027bd0:	0802a25a 	.word	0x0802a25a
 8027bd4:	08024071 	.word	0x08024071
 8027bd8:	08027929 	.word	0x08027929
 8027bdc:	0802a256 	.word	0x0802a256

08027be0 <__sread>:
 8027be0:	b510      	push	{r4, lr}
 8027be2:	460c      	mov	r4, r1
 8027be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027be8:	f000 f8a8 	bl	8027d3c <_read_r>
 8027bec:	2800      	cmp	r0, #0
 8027bee:	bfab      	itete	ge
 8027bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8027bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8027bf4:	181b      	addge	r3, r3, r0
 8027bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8027bfa:	bfac      	ite	ge
 8027bfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8027bfe:	81a3      	strhlt	r3, [r4, #12]
 8027c00:	bd10      	pop	{r4, pc}

08027c02 <__swrite>:
 8027c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027c06:	461f      	mov	r7, r3
 8027c08:	898b      	ldrh	r3, [r1, #12]
 8027c0a:	05db      	lsls	r3, r3, #23
 8027c0c:	4605      	mov	r5, r0
 8027c0e:	460c      	mov	r4, r1
 8027c10:	4616      	mov	r6, r2
 8027c12:	d505      	bpl.n	8027c20 <__swrite+0x1e>
 8027c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027c18:	2302      	movs	r3, #2
 8027c1a:	2200      	movs	r2, #0
 8027c1c:	f000 f874 	bl	8027d08 <_lseek_r>
 8027c20:	89a3      	ldrh	r3, [r4, #12]
 8027c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027c2a:	81a3      	strh	r3, [r4, #12]
 8027c2c:	4632      	mov	r2, r6
 8027c2e:	463b      	mov	r3, r7
 8027c30:	4628      	mov	r0, r5
 8027c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027c36:	f000 b823 	b.w	8027c80 <_write_r>

08027c3a <__sseek>:
 8027c3a:	b510      	push	{r4, lr}
 8027c3c:	460c      	mov	r4, r1
 8027c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027c42:	f000 f861 	bl	8027d08 <_lseek_r>
 8027c46:	1c43      	adds	r3, r0, #1
 8027c48:	89a3      	ldrh	r3, [r4, #12]
 8027c4a:	bf15      	itete	ne
 8027c4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8027c4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8027c52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8027c56:	81a3      	strheq	r3, [r4, #12]
 8027c58:	bf18      	it	ne
 8027c5a:	81a3      	strhne	r3, [r4, #12]
 8027c5c:	bd10      	pop	{r4, pc}

08027c5e <__sclose>:
 8027c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027c62:	f000 b81f 	b.w	8027ca4 <_close_r>

08027c66 <__ascii_wctomb>:
 8027c66:	b149      	cbz	r1, 8027c7c <__ascii_wctomb+0x16>
 8027c68:	2aff      	cmp	r2, #255	; 0xff
 8027c6a:	bf85      	ittet	hi
 8027c6c:	238a      	movhi	r3, #138	; 0x8a
 8027c6e:	6003      	strhi	r3, [r0, #0]
 8027c70:	700a      	strbls	r2, [r1, #0]
 8027c72:	f04f 30ff 	movhi.w	r0, #4294967295
 8027c76:	bf98      	it	ls
 8027c78:	2001      	movls	r0, #1
 8027c7a:	4770      	bx	lr
 8027c7c:	4608      	mov	r0, r1
 8027c7e:	4770      	bx	lr

08027c80 <_write_r>:
 8027c80:	b538      	push	{r3, r4, r5, lr}
 8027c82:	4d07      	ldr	r5, [pc, #28]	; (8027ca0 <_write_r+0x20>)
 8027c84:	4604      	mov	r4, r0
 8027c86:	4608      	mov	r0, r1
 8027c88:	4611      	mov	r1, r2
 8027c8a:	2200      	movs	r2, #0
 8027c8c:	602a      	str	r2, [r5, #0]
 8027c8e:	461a      	mov	r2, r3
 8027c90:	f7e1 fa3b 	bl	800910a <_write>
 8027c94:	1c43      	adds	r3, r0, #1
 8027c96:	d102      	bne.n	8027c9e <_write_r+0x1e>
 8027c98:	682b      	ldr	r3, [r5, #0]
 8027c9a:	b103      	cbz	r3, 8027c9e <_write_r+0x1e>
 8027c9c:	6023      	str	r3, [r4, #0]
 8027c9e:	bd38      	pop	{r3, r4, r5, pc}
 8027ca0:	20004cf4 	.word	0x20004cf4

08027ca4 <_close_r>:
 8027ca4:	b538      	push	{r3, r4, r5, lr}
 8027ca6:	4d06      	ldr	r5, [pc, #24]	; (8027cc0 <_close_r+0x1c>)
 8027ca8:	2300      	movs	r3, #0
 8027caa:	4604      	mov	r4, r0
 8027cac:	4608      	mov	r0, r1
 8027cae:	602b      	str	r3, [r5, #0]
 8027cb0:	f7e1 fa47 	bl	8009142 <_close>
 8027cb4:	1c43      	adds	r3, r0, #1
 8027cb6:	d102      	bne.n	8027cbe <_close_r+0x1a>
 8027cb8:	682b      	ldr	r3, [r5, #0]
 8027cba:	b103      	cbz	r3, 8027cbe <_close_r+0x1a>
 8027cbc:	6023      	str	r3, [r4, #0]
 8027cbe:	bd38      	pop	{r3, r4, r5, pc}
 8027cc0:	20004cf4 	.word	0x20004cf4

08027cc4 <_fstat_r>:
 8027cc4:	b538      	push	{r3, r4, r5, lr}
 8027cc6:	4d07      	ldr	r5, [pc, #28]	; (8027ce4 <_fstat_r+0x20>)
 8027cc8:	2300      	movs	r3, #0
 8027cca:	4604      	mov	r4, r0
 8027ccc:	4608      	mov	r0, r1
 8027cce:	4611      	mov	r1, r2
 8027cd0:	602b      	str	r3, [r5, #0]
 8027cd2:	f7e1 fa42 	bl	800915a <_fstat>
 8027cd6:	1c43      	adds	r3, r0, #1
 8027cd8:	d102      	bne.n	8027ce0 <_fstat_r+0x1c>
 8027cda:	682b      	ldr	r3, [r5, #0]
 8027cdc:	b103      	cbz	r3, 8027ce0 <_fstat_r+0x1c>
 8027cde:	6023      	str	r3, [r4, #0]
 8027ce0:	bd38      	pop	{r3, r4, r5, pc}
 8027ce2:	bf00      	nop
 8027ce4:	20004cf4 	.word	0x20004cf4

08027ce8 <_isatty_r>:
 8027ce8:	b538      	push	{r3, r4, r5, lr}
 8027cea:	4d06      	ldr	r5, [pc, #24]	; (8027d04 <_isatty_r+0x1c>)
 8027cec:	2300      	movs	r3, #0
 8027cee:	4604      	mov	r4, r0
 8027cf0:	4608      	mov	r0, r1
 8027cf2:	602b      	str	r3, [r5, #0]
 8027cf4:	f7e1 fa41 	bl	800917a <_isatty>
 8027cf8:	1c43      	adds	r3, r0, #1
 8027cfa:	d102      	bne.n	8027d02 <_isatty_r+0x1a>
 8027cfc:	682b      	ldr	r3, [r5, #0]
 8027cfe:	b103      	cbz	r3, 8027d02 <_isatty_r+0x1a>
 8027d00:	6023      	str	r3, [r4, #0]
 8027d02:	bd38      	pop	{r3, r4, r5, pc}
 8027d04:	20004cf4 	.word	0x20004cf4

08027d08 <_lseek_r>:
 8027d08:	b538      	push	{r3, r4, r5, lr}
 8027d0a:	4d07      	ldr	r5, [pc, #28]	; (8027d28 <_lseek_r+0x20>)
 8027d0c:	4604      	mov	r4, r0
 8027d0e:	4608      	mov	r0, r1
 8027d10:	4611      	mov	r1, r2
 8027d12:	2200      	movs	r2, #0
 8027d14:	602a      	str	r2, [r5, #0]
 8027d16:	461a      	mov	r2, r3
 8027d18:	f7e1 fa3a 	bl	8009190 <_lseek>
 8027d1c:	1c43      	adds	r3, r0, #1
 8027d1e:	d102      	bne.n	8027d26 <_lseek_r+0x1e>
 8027d20:	682b      	ldr	r3, [r5, #0]
 8027d22:	b103      	cbz	r3, 8027d26 <_lseek_r+0x1e>
 8027d24:	6023      	str	r3, [r4, #0]
 8027d26:	bd38      	pop	{r3, r4, r5, pc}
 8027d28:	20004cf4 	.word	0x20004cf4

08027d2c <_malloc_usable_size_r>:
 8027d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027d30:	1f18      	subs	r0, r3, #4
 8027d32:	2b00      	cmp	r3, #0
 8027d34:	bfbc      	itt	lt
 8027d36:	580b      	ldrlt	r3, [r1, r0]
 8027d38:	18c0      	addlt	r0, r0, r3
 8027d3a:	4770      	bx	lr

08027d3c <_read_r>:
 8027d3c:	b538      	push	{r3, r4, r5, lr}
 8027d3e:	4d07      	ldr	r5, [pc, #28]	; (8027d5c <_read_r+0x20>)
 8027d40:	4604      	mov	r4, r0
 8027d42:	4608      	mov	r0, r1
 8027d44:	4611      	mov	r1, r2
 8027d46:	2200      	movs	r2, #0
 8027d48:	602a      	str	r2, [r5, #0]
 8027d4a:	461a      	mov	r2, r3
 8027d4c:	f7e1 f9c0 	bl	80090d0 <_read>
 8027d50:	1c43      	adds	r3, r0, #1
 8027d52:	d102      	bne.n	8027d5a <_read_r+0x1e>
 8027d54:	682b      	ldr	r3, [r5, #0]
 8027d56:	b103      	cbz	r3, 8027d5a <_read_r+0x1e>
 8027d58:	6023      	str	r3, [r4, #0]
 8027d5a:	bd38      	pop	{r3, r4, r5, pc}
 8027d5c:	20004cf4 	.word	0x20004cf4

08027d60 <_init>:
 8027d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d62:	bf00      	nop
 8027d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027d66:	bc08      	pop	{r3}
 8027d68:	469e      	mov	lr, r3
 8027d6a:	4770      	bx	lr

08027d6c <_fini>:
 8027d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d6e:	bf00      	nop
 8027d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027d72:	bc08      	pop	{r3}
 8027d74:	469e      	mov	lr, r3
 8027d76:	4770      	bx	lr
